CCS PCH C Compiler, Version 5.078, 43599               14-2-24 22:00

               Filename:   G:\マイドライブ\OBC\OBC&MissionBoss Codes\COM_PIC\COMM_PIC_V7.2\CompicMain.lst

               ROM used:   23510 bytes (18%)
                           Largest free fragment is 65520
               RAM used:   1254 (35%) at main() level
                           1310 (37%) worst case
               Stack used: 6 locations (4 in main + 2 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   5912
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F9D.5
0005E:  GOTO   0068
00062:  BTFSC  F9E.5
00064:  GOTO   01D8
00068:  BTFSS  F61.7
0006A:  GOTO   0074
0006E:  BTFSC  FA6.7
00070:  GOTO   0242
00074:  BTFSS  F61.5
00076:  GOTO   0080
0007A:  BTFSC  FA6.5
0007C:  GOTO   016E
00080:  BTFSS  FA3.5
00082:  GOTO   008C
00086:  BTFSC  FA4.5
00088:  GOTO   0100
0008C:  MOVFF  0E,00
00090:  MOVFF  0F,01
00094:  MOVFF  10,02
00098:  MOVFF  11,03
0009C:  MOVFF  0C,FE9
000A0:  MOVFF  07,FEA
000A4:  BSF    07.7
000A6:  MOVFF  08,FE1
000AA:  MOVFF  09,FE2
000AE:  MOVFF  0A,FD9
000B2:  MOVFF  0B,FDA
000B6:  MOVFF  12,FF3
000BA:  MOVFF  13,FF4
000BE:  MOVFF  14,FFA
000C2:  MOVFF  15,FF5
000C6:  MOVFF  16,FF6
000CA:  MOVFF  17,FF7
000CE:  MOVFF  18,FF8
000D2:  MOVFF  19,FFB
000D6:  MOVF   04,W
000D8:  MOVFF  06,FE0
000DC:  MOVFF  05,FD8
000E0:  RETFIE 0
.................... #include <18F67J94.h> 
.................... //////////// Standard Header file for the PIC18F67J94 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F67J94 
*
0028E:  DATA 52,50
00290:  DATA 5F,52
00292:  DATA 20,3E
00294:  DATA 3E,20
00296:  DATA 00,00
00298:  DATA 4E,75
0029A:  DATA 6D,20
0029C:  DATA 6F,66
0029E:  DATA 20,74
002A0:  DATA 72,79
002A2:  DATA 20,74
002A4:  DATA 6F,20
002A6:  DATA 72,65
002A8:  DATA 73,65
002AA:  DATA 74,20
002AC:  DATA 70,69
002AE:  DATA 63,20
002B0:  DATA 3D,20
002B2:  DATA 25,64
002B4:  DATA 0A,0D
002B6:  DATA 00,00
002B8:  DATA 43,6F
002BA:  DATA 72,72
002BC:  DATA 65,63
002BE:  DATA 74,20
002C0:  DATA 72,65
002C2:  DATA 70,6C
002C4:  DATA 79,20
002C6:  DATA 66,72
002C8:  DATA 6F,6D
002CA:  DATA 20,72
002CC:  DATA 65,73
002CE:  DATA 65,74
002D0:  DATA 20,70
002D2:  DATA 69,63
002D4:  DATA 0A,0D
002D6:  DATA 00,00
002D8:  DATA 57,72
002DA:  DATA 6F,6E
002DC:  DATA 67,20
002DE:  DATA 72,65
002E0:  DATA 73,70
002E2:  DATA 6F,6E
002E4:  DATA 73,65
002E6:  DATA 20,66
002E8:  DATA 72,6F
002EA:  DATA 6D,20
002EC:  DATA 72,65
002EE:  DATA 73,65
002F0:  DATA 74,20
002F2:  DATA 70,69
002F4:  DATA 63,20
002F6:  DATA 3E,3E
002F8:  DATA 20,00
002FA:  DATA 52,65
002FC:  DATA 63,65
002FE:  DATA 69,76
00300:  DATA 65,64
00302:  DATA 20,43
00304:  DATA 57,20
00306:  DATA 64,61
00308:  DATA 74,61
0030A:  DATA 20,3D
0030C:  DATA 3D,3E
0030E:  DATA 20,00
00310:  DATA 4D,50
00312:  DATA 5F,52
00314:  DATA 20,3E
00316:  DATA 3E,20
00318:  DATA 00,00
0031A:  DATA 4E,75
0031C:  DATA 6D,20
0031E:  DATA 6F,66
00320:  DATA 20,74
00322:  DATA 72,79
00324:  DATA 20,74
00326:  DATA 6F,20
00328:  DATA 4D,61
0032A:  DATA 69,6E
0032C:  DATA 20,70
0032E:  DATA 69,63
00330:  DATA 20,3D
00332:  DATA 20,25
00334:  DATA 64,0A
00336:  DATA 0D,00
00338:  DATA 43,6F
0033A:  DATA 72,72
0033C:  DATA 65,63
0033E:  DATA 74,20
00340:  DATA 72,65
00342:  DATA 73,70
00344:  DATA 6F,6E
00346:  DATA 73,65
00348:  DATA 20,66
0034A:  DATA 72,6F
0034C:  DATA 6D,20
0034E:  DATA 6D,61
00350:  DATA 69,6E
00352:  DATA 20,70
00354:  DATA 69,63
00356:  DATA 0A,0D
00358:  DATA 00,00
0035A:  DATA 57,72
0035C:  DATA 6F,6E
0035E:  DATA 67,20
00360:  DATA 72,65
00362:  DATA 73,70
00364:  DATA 6F,6E
00366:  DATA 73,65
00368:  DATA 20,66
0036A:  DATA 72,6F
0036C:  DATA 6D,20
0036E:  DATA 6D,61
00370:  DATA 69,6E
00372:  DATA 20,70
00374:  DATA 69,63
00376:  DATA 00,00
00378:  DATA 4E,65
0037A:  DATA 77,54
0037C:  DATA 52,58
0037E:  DATA 20,52
00380:  DATA 58,20
00382:  DATA 4D,6F
00384:  DATA 64,65
00386:  DATA 0A,0D
00388:  DATA 00,00
0038A:  DATA 4E,65
0038C:  DATA 77,54
0038E:  DATA 52,58
00390:  DATA 20,54
00392:  DATA 58,20
00394:  DATA 4D,6F
00396:  DATA 64,65
00398:  DATA 0A,0D
0039A:  DATA 00,00
0039C:  DATA 43,57
0039E:  DATA 20,46
003A0:  DATA 6C,61
003A2:  DATA 67,20
003A4:  DATA 66,6C
003A6:  DATA 61,67
003A8:  DATA 20,76
003AA:  DATA 61,6C
003AC:  DATA 75,65
003AE:  DATA 20,20
003B0:  DATA 3D,20
003B2:  DATA 25,58
003B4:  DATA 0A,0D
003B6:  DATA 00,00
003B8:  DATA 4E,65
003BA:  DATA 77,20
003BC:  DATA 54,52
003BE:  DATA 58,20
003C0:  DATA 53,74
003C2:  DATA 61,74
003C4:  DATA 75,73
003C6:  DATA 20,46
003C8:  DATA 6C,61
003CA:  DATA 67,20
003CC:  DATA 3D,20
003CE:  DATA 25,58
003D0:  DATA 0A,0D
003D2:  DATA 00,00
003D4:  DATA 43,57
003D6:  DATA 20,75
003D8:  DATA 73,69
003DA:  DATA 6E,67
003DC:  DATA 20,4E
003DE:  DATA 45,57
003E0:  DATA 20,54
003E2:  DATA 52,58
003E4:  DATA 20,20
003E6:  DATA 0A,0D
003E8:  DATA 00,00
003EA:  DATA 43,57
003EC:  DATA 20,75
003EE:  DATA 73,69
003F0:  DATA 6E,67
003F2:  DATA 20,4F
003F4:  DATA 4C,44
003F6:  DATA 20,54
003F8:  DATA 52,58
003FA:  DATA 20,20
003FC:  DATA 0A,0D
003FE:  DATA 00,00
00400:  DATA 4E,45
00402:  DATA 57,54
00404:  DATA 52,58
00406:  DATA 20,47
00408:  DATA 4D,53
0040A:  DATA 4B,20
0040C:  DATA 42,65
0040E:  DATA 61,63
00410:  DATA 6F,6E
00412:  DATA 0A,0D
00414:  DATA 00,00
00416:  DATA 4F,4C
00418:  DATA 44,54
0041A:  DATA 52,58
0041C:  DATA 20,47
0041E:  DATA 4D,53
00420:  DATA 4B,20
00422:  DATA 42,65
00424:  DATA 61,63
00426:  DATA 6F,6E
00428:  DATA 0A,0D
0042A:  DATA 00,00
0042C:  DATA 4E,6F
0042E:  DATA 20,43
00430:  DATA 57,20
00432:  DATA 74,72
00434:  DATA 61,6E
00436:  DATA 73,6D
00438:  DATA 69,73
0043A:  DATA 73,69
0043C:  DATA 6F,6E
0043E:  DATA 0A,0D
00440:  DATA 00,00
00442:  DATA 4E,65
00444:  DATA 77,20
00446:  DATA 54,52
00448:  DATA 58,20
0044A:  DATA 69,73
0044C:  DATA 20,69
0044E:  DATA 6E,20
00450:  DATA 6F,6E
00452:  DATA 20,6D
00454:  DATA 6F,64
00456:  DATA 65,0A
00458:  DATA 0D,00
0045A:  DATA 4E,65
0045C:  DATA 77,20
0045E:  DATA 54,52
00460:  DATA 58,20
00462:  DATA 69,73
00464:  DATA 20,69
00466:  DATA 6E,20
00468:  DATA 6F,66
0046A:  DATA 66,20
0046C:  DATA 6D,6F
0046E:  DATA 64,65
00470:  DATA 0A,0D
00472:  DATA 00,00
00474:  DATA 4E,65
00476:  DATA 77,54
00478:  DATA 52,58
0047A:  DATA 20,42
0047C:  DATA 6F,61
0047E:  DATA 72,64
00480:  DATA 20,74
00482:  DATA 75,72
00484:  DATA 6E,65
00486:  DATA 64,20
00488:  DATA 6F,6E
0048A:  DATA 0A,0D
0048C:  DATA 00,00
0048E:  DATA 4E,65
00490:  DATA 77,54
00492:  DATA 52,58
00494:  DATA 20,42
00496:  DATA 6F,61
00498:  DATA 72,64
0049A:  DATA 20,74
0049C:  DATA 75,72
0049E:  DATA 6E,65
004A0:  DATA 64,20
004A2:  DATA 4F,46
004A4:  DATA 46,0A
004A6:  DATA 0D,00
004A8:  DATA 43,4D
004AA:  DATA 44,20
004AC:  DATA 53,69
004AE:  DATA 7A,65
004B0:  DATA 20,3D
004B2:  DATA 20,25
004B4:  DATA 75,20
004B6:  DATA 62,79
004B8:  DATA 74,65
004BA:  DATA 73,0A
004BC:  DATA 0D,00
004BE:  DATA 52,65
004C0:  DATA 63,65
004C2:  DATA 69,76
004C4:  DATA 65,64
004C6:  DATA 20,47
004C8:  DATA 53,20
004CA:  DATA 43,4D
004CC:  DATA 44,20
004CE:  DATA 4E,45
004D0:  DATA 57,54
004D2:  DATA 52,58
004D4:  DATA 20,2D
004D6:  DATA 2D,3E
004D8:  DATA 20,00
004DA:  DATA 43,52
004DC:  DATA 43,20
004DE:  DATA 69,73
004E0:  DATA 20,63
004E2:  DATA 6F,72
004E4:  DATA 72,65
004E6:  DATA 63,74
004E8:  DATA 0A,0D
004EA:  DATA 00,00
004EC:  DATA 43,52
004EE:  DATA 43,20
004F0:  DATA 69,73
004F2:  DATA 20,77
004F4:  DATA 72,6F
004F6:  DATA 6E,67
004F8:  DATA 0A,0D
004FA:  DATA 00,00
004FC:  DATA 43,4D
004FE:  DATA 44,20
00500:  DATA 43,52
00502:  DATA 43,20
00504:  DATA 3D,20
00506:  DATA 25,4C
00508:  DATA 58,0A
0050A:  DATA 0D,00
0050C:  DATA 43,41
0050E:  DATA 4C,20
00510:  DATA 43,52
00512:  DATA 43,20
00514:  DATA 3D,20
00516:  DATA 25,4C
00518:  DATA 58,0A
0051A:  DATA 0D,00
0051C:  DATA 4F,4C
0051E:  DATA 44,54
00520:  DATA 52,58
00522:  DATA 20,52
00524:  DATA 58,20
00526:  DATA 4D,6F
00528:  DATA 64,65
0052A:  DATA 0A,0D
0052C:  DATA 00,00
0052E:  DATA 4F,4C
00530:  DATA 44,54
00532:  DATA 52,58
00534:  DATA 20,54
00536:  DATA 58,20
00538:  DATA 4D,6F
0053A:  DATA 64,65
0053C:  DATA 0A,0D
0053E:  DATA 00,00
00540:  DATA 4F,4C
00542:  DATA 44,54
00544:  DATA 52,58
00546:  DATA 20,43
00548:  DATA 57,20
0054A:  DATA 4D,6F
0054C:  DATA 64,65
0054E:  DATA 0A,0D
00550:  DATA 00,00
00552:  DATA 43,52
00554:  DATA 43,20
00556:  DATA 63,6F
00558:  DATA 72,72
0055A:  DATA 65,63
0055C:  DATA 74,2C
0055E:  DATA 20,43
00560:  DATA 6F,6D
00562:  DATA 6D,61
00564:  DATA 6E,64
00566:  DATA 20,4C
00568:  DATA 65,6E
0056A:  DATA 67,74
0056C:  DATA 68,20
0056E:  DATA 25,75
00570:  DATA 20,62
00572:  DATA 79,74
00574:  DATA 65,73
00576:  DATA 0A,0D
00578:  DATA 00,00
0057A:  DATA 52,65
0057C:  DATA 63,65
0057E:  DATA 69,76
00580:  DATA 65,64
00582:  DATA 20,47
00584:  DATA 53,20
00586:  DATA 43,4D
00588:  DATA 44,20
0058A:  DATA 74,6F
0058C:  DATA 20,4F
0058E:  DATA 4C,44
00590:  DATA 54,52
00592:  DATA 58,20
00594:  DATA 2D,2D
00596:  DATA 3E,20
00598:  DATA 00,00
0059A:  DATA 54,72
0059C:  DATA 61,6E
0059E:  DATA 73,6D
005A0:  DATA 69,73
005A2:  DATA 6D,69
005A4:  DATA 74,69
005A6:  DATA 6E,67
005A8:  DATA 20,43
005AA:  DATA 57,20
005AC:  DATA 75,73
005AE:  DATA 69,6E
005B0:  DATA 67,20
005B2:  DATA 4E,45
005B4:  DATA 57,20
005B6:  DATA 54,52
005B8:  DATA 58,0A
005BA:  DATA 0D,00
005BC:  DATA 53,65
005BE:  DATA 6E,74
005C0:  DATA 20,43
005C2:  DATA 57,20
005C4:  DATA 64,61
005C6:  DATA 74,61
005C8:  DATA 20,74
005CA:  DATA 6F,20
005CC:  DATA 4E,65
005CE:  DATA 77,20
005D0:  DATA 54,52
005D2:  DATA 58,20
005D4:  DATA 3D,20
005D6:  DATA 00,00
005D8:  DATA 54,72
005DA:  DATA 61,6E
005DC:  DATA 73,6D
005DE:  DATA 69,73
005E0:  DATA 6D,69
005E2:  DATA 74,69
005E4:  DATA 6E,67
005E6:  DATA 20,43
005E8:  DATA 57,20
005EA:  DATA 75,73
005EC:  DATA 69,6E
005EE:  DATA 67,20
005F0:  DATA 4F,4C
005F2:  DATA 44,20
005F4:  DATA 54,52
005F6:  DATA 58,0A
005F8:  DATA 0D,00
005FA:  DATA 42,00
005FC:  DATA 49,00
005FE:  DATA 52,00
00600:  DATA 44,00
00602:  DATA 53,00
00604:  DATA 58,00
00606:  DATA 43,57
00608:  DATA 20,3A
0060A:  DATA 00,00
0060C:  DATA 4E,45
0060E:  DATA 57,5F
00610:  DATA 54,52
00612:  DATA 58,5F
00614:  DATA 50,41
00616:  DATA 43,4B
00618:  DATA 45,54
0061A:  DATA 53,5F
0061C:  DATA 44,4F
0061E:  DATA 57,4E
00620:  DATA 4C,4F
00622:  DATA 41,44
00624:  DATA 5F,57
00626:  DATA 49,54
00628:  DATA 48,4F
0062A:  DATA 55,54
0062C:  DATA 5F,46
0062E:  DATA 4D,5F
00630:  DATA 41,43
00632:  DATA 43,45
00634:  DATA 53,53
00636:  DATA 0A,0D
00638:  DATA 00,00
0063A:  DATA 4F,4C
0063C:  DATA 44,5F
0063E:  DATA 54,52
00640:  DATA 58,5F
00642:  DATA 50,41
00644:  DATA 43,4B
00646:  DATA 45,54
00648:  DATA 53,5F
0064A:  DATA 44,4F
0064C:  DATA 57,4E
0064E:  DATA 4C,4F
00650:  DATA 41,44
00652:  DATA 5F,57
00654:  DATA 49,54
00656:  DATA 48,4F
00658:  DATA 55,54
0065A:  DATA 5F,46
0065C:  DATA 4D,5F
0065E:  DATA 41,43
00660:  DATA 43,45
00662:  DATA 53,53
00664:  DATA 0A,0D
00666:  DATA 00,00
00668:  DATA 4E,45
0066A:  DATA 57,5F
0066C:  DATA 54,52
0066E:  DATA 58,5F
00670:  DATA 50,41
00672:  DATA 43,4B
00674:  DATA 45,54
00676:  DATA 53,5F
00678:  DATA 44,4F
0067A:  DATA 57,4E
0067C:  DATA 4C,4F
0067E:  DATA 41,44
00680:  DATA 5F,57
00682:  DATA 49,54
00684:  DATA 48,5F
00686:  DATA 46,4D
00688:  DATA 5F,41
0068A:  DATA 43,43
0068C:  DATA 45,53
0068E:  DATA 53,0A
00690:  DATA 0D,00
00692:  DATA 46,4D
00694:  DATA 20,61
00696:  DATA 63,63
00698:  DATA 65,73
0069A:  DATA 73,20
0069C:  DATA 72,65
0069E:  DATA 71,75
006A0:  DATA 65,73
006A2:  DATA 74,20
006A4:  DATA 73,75
006A6:  DATA 63,63
006A8:  DATA 65,66
006AA:  DATA 75,6C
006AC:  DATA 0A,0D
006AE:  DATA 00,00
006B0:  DATA 46,4D
006B2:  DATA 20,61
006B4:  DATA 63,63
006B6:  DATA 65,73
006B8:  DATA 73,20
006BA:  DATA 72,65
006BC:  DATA 71,75
006BE:  DATA 65,73
006C0:  DATA 74,20
006C2:  DATA 6E,6F
006C4:  DATA 74,2D
006C6:  DATA 73,75
006C8:  DATA 63,63
006CA:  DATA 65,66
006CC:  DATA 75,6C
006CE:  DATA 0A,0D
006D0:  DATA 00,00
006D2:  DATA 4F,4C
006D4:  DATA 44,5F
006D6:  DATA 54,52
006D8:  DATA 58,5F
006DA:  DATA 50,41
006DC:  DATA 43,4B
006DE:  DATA 45,54
006E0:  DATA 53,5F
006E2:  DATA 44,4F
006E4:  DATA 57,4E
006E6:  DATA 4C,4F
006E8:  DATA 41,44
006EA:  DATA 5F,57
006EC:  DATA 49,54
006EE:  DATA 48,5F
006F0:  DATA 46,4D
006F2:  DATA 5F,41
006F4:  DATA 43,43
006F6:  DATA 45,53
006F8:  DATA 53,0A
006FA:  DATA 0D,00
006FC:  DATA 46,4D
006FE:  DATA 20,61
00700:  DATA 63,63
00702:  DATA 65,73
00704:  DATA 73,20
00706:  DATA 72,65
00708:  DATA 71,75
0070A:  DATA 65,73
0070C:  DATA 74,20
0070E:  DATA 73,75
00710:  DATA 63,63
00712:  DATA 65,66
00714:  DATA 75,6C
00716:  DATA 0A,0D
00718:  DATA 00,00
0071A:  DATA 46,4D
0071C:  DATA 20,61
0071E:  DATA 63,63
00720:  DATA 65,73
00722:  DATA 73,20
00724:  DATA 72,65
00726:  DATA 71,75
00728:  DATA 65,73
0072A:  DATA 74,20
0072C:  DATA 6E,6F
0072E:  DATA 74,2D
00730:  DATA 73,75
00732:  DATA 63,63
00734:  DATA 65,66
00736:  DATA 75,6C
00738:  DATA 0A,0D
0073A:  DATA 00,00
0073C:  DATA 44,41
0073E:  DATA 54,41
00740:  DATA 5F,44
00742:  DATA 4F,57
00744:  DATA 4E,4C
00746:  DATA 4F,41
00748:  DATA 44,5F
0074A:  DATA 46,52
0074C:  DATA 4F,4D
0074E:  DATA 5F,4D
00750:  DATA 53,4E
00752:  DATA 5F,46
00754:  DATA 4D,20
00756:  DATA 20,4E
00758:  DATA 45,57
0075A:  DATA 54,52
0075C:  DATA 58,0A
0075E:  DATA 0D,00
00760:  DATA 44,41
00762:  DATA 54,41
00764:  DATA 5F,44
00766:  DATA 4F,57
00768:  DATA 4E,4C
0076A:  DATA 4F,41
0076C:  DATA 44,5F
0076E:  DATA 46,52
00770:  DATA 4F,4D
00772:  DATA 5F,4D
00774:  DATA 41,49
00776:  DATA 4E,5F
00778:  DATA 46,4D
0077A:  DATA 20,4E
0077C:  DATA 45,57
0077E:  DATA 54,52
00780:  DATA 58,0A
00782:  DATA 0D,00
00784:  DATA 4D,61
00786:  DATA 69,6E
00788:  DATA 20,50
0078A:  DATA 49,43
0078C:  DATA 20,72
0078E:  DATA 65,73
00790:  DATA 70,6F
00792:  DATA 6E,64
00794:  DATA 65,64
00796:  DATA 20,63
00798:  DATA 6F,70
0079A:  DATA 79,69
0079C:  DATA 6E,67
0079E:  DATA 20,73
007A0:  DATA 74,61
007A2:  DATA 72,74
007A4:  DATA 65,64
007A6:  DATA 20,0A
007A8:  DATA 0D,00
007AA:  DATA 4D,61
007AC:  DATA 69,6E
007AE:  DATA 20,50
007B0:  DATA 49,43
007B2:  DATA 20,72
007B4:  DATA 65,73
007B6:  DATA 70,6F
007B8:  DATA 6E,64
007BA:  DATA 65,64
007BC:  DATA 20,63
007BE:  DATA 6F,70
007C0:  DATA 79,69
007C2:  DATA 6E,67
007C4:  DATA 20,66
007C6:  DATA 69,6E
007C8:  DATA 69,73
007CA:  DATA 68,20
007CC:  DATA 73,65
007CE:  DATA 6E,64
007D0:  DATA 69,6E
007D2:  DATA 66,20
007D4:  DATA 64,61
007D6:  DATA 74,61
007D8:  DATA 20,74
007DA:  DATA 6F,20
007DC:  DATA 47,53
007DE:  DATA 0A,0D
007E0:  DATA 00,00
007E2:  DATA 43,6F
007E4:  DATA 70,79
007E6:  DATA 69,6E
007E8:  DATA 67,20
007EA:  DATA 74,69
007EC:  DATA 6D,65
007EE:  DATA 6F,75
007F0:  DATA 74,20
007F2:  DATA 0A,0D
007F4:  DATA 00,00
007F6:  DATA 4D,61
007F8:  DATA 69,6E
007FA:  DATA 20,50
007FC:  DATA 49,43
007FE:  DATA 20,6E
00800:  DATA 6F,74
00802:  DATA 20,72
00804:  DATA 65,73
00806:  DATA 70,6F
00808:  DATA 6E,64
0080A:  DATA 65,64
0080C:  DATA 0A,0D
0080E:  DATA 00,00
00810:  DATA 44,41
00812:  DATA 54,41
00814:  DATA 5F,44
00816:  DATA 4F,57
00818:  DATA 4E,4C
0081A:  DATA 4F,41
0081C:  DATA 44,5F
0081E:  DATA 46,52
00820:  DATA 4F,4D
00822:  DATA 5F,4D
00824:  DATA 53,4E
00826:  DATA 5F,46
00828:  DATA 4D,20
0082A:  DATA 20,4F
0082C:  DATA 4C,44
0082E:  DATA 54,52
00830:  DATA 58,0A
00832:  DATA 0D,00
00834:  DATA 44,41
00836:  DATA 54,41
00838:  DATA 5F,44
0083A:  DATA 4F,57
0083C:  DATA 4E,4C
0083E:  DATA 4F,41
00840:  DATA 44,5F
00842:  DATA 46,52
00844:  DATA 4F,4D
00846:  DATA 5F,4D
00848:  DATA 41,49
0084A:  DATA 4E,5F
0084C:  DATA 46,4D
0084E:  DATA 20,4F
00850:  DATA 4C,44
00852:  DATA 54,52
00854:  DATA 58,0A
00856:  DATA 0D,00
00858:  DATA 4D,61
0085A:  DATA 69,6E
0085C:  DATA 20,50
0085E:  DATA 49,43
00860:  DATA 20,72
00862:  DATA 65,73
00864:  DATA 70,6F
00866:  DATA 6E,64
00868:  DATA 65,64
0086A:  DATA 20,63
0086C:  DATA 6F,70
0086E:  DATA 79,69
00870:  DATA 6E,67
00872:  DATA 20,73
00874:  DATA 74,61
00876:  DATA 72,74
00878:  DATA 65,64
0087A:  DATA 20,0A
0087C:  DATA 0D,00
0087E:  DATA 4D,61
00880:  DATA 69,6E
00882:  DATA 20,50
00884:  DATA 49,43
00886:  DATA 20,72
00888:  DATA 65,73
0088A:  DATA 70,6F
0088C:  DATA 6E,64
0088E:  DATA 65,64
00890:  DATA 20,63
00892:  DATA 6F,70
00894:  DATA 79,69
00896:  DATA 6E,67
00898:  DATA 20,66
0089A:  DATA 69,6E
0089C:  DATA 69,73
0089E:  DATA 68,20
008A0:  DATA 73,65
008A2:  DATA 6E,64
008A4:  DATA 69,6E
008A6:  DATA 66,20
008A8:  DATA 64,61
008AA:  DATA 74,61
008AC:  DATA 20,74
008AE:  DATA 6F,20
008B0:  DATA 47,53
008B2:  DATA 0A,0D
008B4:  DATA 00,00
008B6:  DATA 43,6F
008B8:  DATA 70,79
008BA:  DATA 69,6E
008BC:  DATA 67,20
008BE:  DATA 74,69
008C0:  DATA 6D,65
008C2:  DATA 6F,75
008C4:  DATA 74,20
008C6:  DATA 0A,0D
008C8:  DATA 00,00
008CA:  DATA 4D,61
008CC:  DATA 69,6E
008CE:  DATA 20,50
008D0:  DATA 49,43
008D2:  DATA 20,6E
008D4:  DATA 6F,74
008D6:  DATA 20,72
008D8:  DATA 65,73
008DA:  DATA 70,6F
008DC:  DATA 6E,64
008DE:  DATA 65,64
008E0:  DATA 0A,0D
008E2:  DATA 00,00
008E4:  DATA 46,4C
008E6:  DATA 41,53
008E8:  DATA 48,5F
008EA:  DATA 4D,45
008EC:  DATA 4D,4F
008EE:  DATA 52,59
008F0:  DATA 5F,53
008F2:  DATA 45,43
008F4:  DATA 54,4F
008F6:  DATA 52,5F
008F8:  DATA 45,52
008FA:  DATA 41,53
008FC:  DATA 45,5F
008FE:  DATA 4E,45
00900:  DATA 57,54
00902:  DATA 52,58
00904:  DATA 0A,0D
00906:  DATA 00,00
00908:  DATA 4D,61
0090A:  DATA 69,6E
0090C:  DATA 20,70
0090E:  DATA 69,63
00910:  DATA 20,72
00912:  DATA 65,73
00914:  DATA 70,6F
00916:  DATA 6E,64
00918:  DATA 65,64
0091A:  DATA 0A,0D
0091C:  DATA 00,00
0091E:  DATA 4D,61
00920:  DATA 69,6E
00922:  DATA 20,70
00924:  DATA 69,63
00926:  DATA 20,64
00928:  DATA 69,64
0092A:  DATA 20,6E
0092C:  DATA 6F,74
0092E:  DATA 20,72
00930:  DATA 65,73
00932:  DATA 70,6F
00934:  DATA 6E,64
00936:  DATA 0A,0D
00938:  DATA 00,00
0093A:  DATA 46,4C
0093C:  DATA 41,53
0093E:  DATA 48,5F
00940:  DATA 4D,45
00942:  DATA 4D,4F
00944:  DATA 52,59
00946:  DATA 5F,53
00948:  DATA 45,43
0094A:  DATA 54,4F
0094C:  DATA 52,5F
0094E:  DATA 45,52
00950:  DATA 41,53
00952:  DATA 45,5F
00954:  DATA 4F,4C
00956:  DATA 44,54
00958:  DATA 52,58
0095A:  DATA 0A,0D
0095C:  DATA 00,00
0095E:  DATA 4D,61
00960:  DATA 69,6E
00962:  DATA 20,70
00964:  DATA 69,63
00966:  DATA 20,72
00968:  DATA 65,73
0096A:  DATA 70,6F
0096C:  DATA 6E,64
0096E:  DATA 65,64
00970:  DATA 0A,0D
00972:  DATA 00,00
00974:  DATA 4D,61
00976:  DATA 69,6E
00978:  DATA 20,70
0097A:  DATA 69,63
0097C:  DATA 20,64
0097E:  DATA 69,64
00980:  DATA 20,6E
00982:  DATA 6F,74
00984:  DATA 20,72
00986:  DATA 65,73
00988:  DATA 70,6F
0098A:  DATA 6E,64
0098C:  DATA 0A,0D
0098E:  DATA 00,00
00990:  DATA 54,52
00992:  DATA 41,4E
00994:  DATA 53,46
00996:  DATA 45,52
00998:  DATA 49,4E
0099A:  DATA 47,5F
0099C:  DATA 41,4E
0099E:  DATA 54,45
009A0:  DATA 4E,4E
009A2:  DATA 41,5F
009A4:  DATA 52,45
009A6:  DATA 4C,41
009A8:  DATA 54,45
009AA:  DATA 44,5F
009AC:  DATA 43,4D
009AE:  DATA 44,5F
009B0:  DATA 54,4F
009B2:  DATA 5F,4D
009B4:  DATA 41,49
009B6:  DATA 4E,50
009B8:  DATA 49,43
009BA:  DATA 5F,41
009BC:  DATA 44,44
009BE:  DATA 54,52
009C0:  DATA 58,0A
009C2:  DATA 0D,00
009C4:  DATA 4D,61
009C6:  DATA 69,6E
009C8:  DATA 20,70
009CA:  DATA 69,63
009CC:  DATA 20,72
009CE:  DATA 65,73
009D0:  DATA 70,6F
009D2:  DATA 6E,64
009D4:  DATA 65,64
009D6:  DATA 0A,0D
009D8:  DATA 00,00
009DA:  DATA 4D,61
009DC:  DATA 69,6E
009DE:  DATA 20,70
009E0:  DATA 69,63
009E2:  DATA 20,64
009E4:  DATA 69,64
009E6:  DATA 20,6E
009E8:  DATA 6F,74
009EA:  DATA 20,72
009EC:  DATA 65,73
009EE:  DATA 70,6F
009F0:  DATA 6E,64
009F2:  DATA 0A,0D
009F4:  DATA 00,00
009F6:  DATA 54,52
009F8:  DATA 41,4E
009FA:  DATA 53,46
009FC:  DATA 45,52
009FE:  DATA 49,4E
00A00:  DATA 47,5F
00A02:  DATA 41,4E
00A04:  DATA 54,45
00A06:  DATA 4E,4E
00A08:  DATA 41,5F
00A0A:  DATA 52,45
00A0C:  DATA 4C,41
00A0E:  DATA 54,45
00A10:  DATA 44,5F
00A12:  DATA 43,4D
00A14:  DATA 44,5F
00A16:  DATA 54,4F
00A18:  DATA 5F,4D
00A1A:  DATA 41,49
00A1C:  DATA 4E,50
00A1E:  DATA 49,43
00A20:  DATA 5F,41
00A22:  DATA 44,44
00A24:  DATA 54,52
00A26:  DATA 58,0A
00A28:  DATA 0D,00
00A2A:  DATA 4D,61
00A2C:  DATA 69,6E
00A2E:  DATA 20,70
00A30:  DATA 69,63
00A32:  DATA 20,72
00A34:  DATA 65,73
00A36:  DATA 70,6F
00A38:  DATA 6E,64
00A3A:  DATA 65,64
00A3C:  DATA 0A,0D
00A3E:  DATA 00,00
00A40:  DATA 4D,61
00A42:  DATA 69,6E
00A44:  DATA 20,70
00A46:  DATA 69,63
00A48:  DATA 20,64
00A4A:  DATA 69,64
00A4C:  DATA 20,6E
00A4E:  DATA 6F,74
00A50:  DATA 20,72
00A52:  DATA 65,73
00A54:  DATA 70,6F
00A56:  DATA 6E,64
00A58:  DATA 0A,0D
00A5A:  DATA 00,00
00A5C:  DATA 53,45
00A5E:  DATA 4E,44
00A60:  DATA 49,4E
00A62:  DATA 47,5F
00A64:  DATA 41,50
00A66:  DATA 52,53
00A68:  DATA 5F,4D
00A6A:  DATA 49,53
00A6C:  DATA 53,49
00A6E:  DATA 4F,4E
00A70:  DATA 5F,43
00A72:  DATA 4D,44
00A74:  DATA 5F,54
00A76:  DATA 4F,5F
00A78:  DATA 4D,41
00A7A:  DATA 49,4E
00A7C:  DATA 50,49
00A7E:  DATA 43,5F
00A80:  DATA 4E,45
00A82:  DATA 57,54
00A84:  DATA 52,58
00A86:  DATA 0A,0D
00A88:  DATA 00,00
00A8A:  DATA 4D,61
00A8C:  DATA 69,6E
00A8E:  DATA 20,70
00A90:  DATA 69,63
00A92:  DATA 20,72
00A94:  DATA 65,73
00A96:  DATA 70,6F
00A98:  DATA 6E,64
00A9A:  DATA 65,64
00A9C:  DATA 0A,0D
00A9E:  DATA 00,00
00AA0:  DATA 4D,61
00AA2:  DATA 69,6E
00AA4:  DATA 20,70
00AA6:  DATA 69,63
00AA8:  DATA 20,64
00AAA:  DATA 69,64
00AAC:  DATA 20,6E
00AAE:  DATA 6F,74
00AB0:  DATA 20,72
00AB2:  DATA 65,73
00AB4:  DATA 70,6F
00AB6:  DATA 6E,64
00AB8:  DATA 0A,0D
00ABA:  DATA 00,00
00ABC:  DATA 53,45
00ABE:  DATA 4E,44
00AC0:  DATA 49,4E
00AC2:  DATA 47,5F
00AC4:  DATA 41,50
00AC6:  DATA 52,53
00AC8:  DATA 5F,4D
00ACA:  DATA 49,53
00ACC:  DATA 53,49
00ACE:  DATA 4F,4E
00AD0:  DATA 5F,43
00AD2:  DATA 4D,44
00AD4:  DATA 5F,54
00AD6:  DATA 4F,5F
00AD8:  DATA 4D,41
00ADA:  DATA 49,4E
00ADC:  DATA 50,49
00ADE:  DATA 43,5F
00AE0:  DATA 4F,4C
00AE2:  DATA 44,54
00AE4:  DATA 52,58
00AE6:  DATA 0A,0D
00AE8:  DATA 00,00
00AEA:  DATA 4D,61
00AEC:  DATA 69,6E
00AEE:  DATA 20,70
00AF0:  DATA 69,63
00AF2:  DATA 20,72
00AF4:  DATA 65,73
00AF6:  DATA 70,6F
00AF8:  DATA 6E,64
00AFA:  DATA 65,64
00AFC:  DATA 0A,0D
00AFE:  DATA 00,00
00B00:  DATA 4D,61
00B02:  DATA 69,6E
00B04:  DATA 20,70
00B06:  DATA 69,63
00B08:  DATA 20,64
00B0A:  DATA 69,64
00B0C:  DATA 20,6E
00B0E:  DATA 6F,74
00B10:  DATA 20,72
00B12:  DATA 65,73
00B14:  DATA 70,6F
00B16:  DATA 6E,64
00B18:  DATA 0A,0D
00B1A:  DATA 00,00
00B1C:  DATA 43,4F
00B1E:  DATA 4E,54
00B20:  DATA 52,4F
00B22:  DATA 4C,5F
00B24:  DATA 43,57
00B26:  DATA 5F,54
00B28:  DATA 58,5F
00B2A:  DATA 4D,4F
00B2C:  DATA 44,45
00B2E:  DATA 5F,4E
00B30:  DATA 45,57
00B32:  DATA 5F,54
00B34:  DATA 52,58
00B36:  DATA 0A,0D
00B38:  DATA 00,00
00B3A:  DATA 43,4F
00B3C:  DATA 4E,54
00B3E:  DATA 52,4F
00B40:  DATA 4C,5F
00B42:  DATA 43,57
00B44:  DATA 5F,54
00B46:  DATA 58,5F
00B48:  DATA 4D,4F
00B4A:  DATA 44,45
00B4C:  DATA 5F,4F
00B4E:  DATA 4C,44
00B50:  DATA 5F,54
00B52:  DATA 52,58
00B54:  DATA 0A,0D
00B56:  DATA 00,00
00B58:  DATA 43,4F
00B5A:  DATA 4E,54
00B5C:  DATA 52,4F
00B5E:  DATA 4C,5F
00B60:  DATA 4E,45
00B62:  DATA 57,5F
00B64:  DATA 54,52
00B66:  DATA 58,5F
00B68:  DATA 50,4F
00B6A:  DATA 57,45
00B6C:  DATA 52,5F
00B6E:  DATA 5F,4E
00B70:  DATA 45,57
00B72:  DATA 54,52
00B74:  DATA 58,0A
00B76:  DATA 0D,00
00B78:  DATA 43,4F
00B7A:  DATA 4E,54
00B7C:  DATA 52,4F
00B7E:  DATA 4C,5F
00B80:  DATA 4E,45
00B82:  DATA 57,5F
00B84:  DATA 54,52
00B86:  DATA 58,5F
00B88:  DATA 50,4F
00B8A:  DATA 57,45
00B8C:  DATA 52,5F
00B8E:  DATA 5F,4F
00B90:  DATA 4C,44
00B92:  DATA 54,52
00B94:  DATA 58,0A
00B96:  DATA 0D,00
00B98:  DATA 54,55
00B9A:  DATA 52,4E
00B9C:  DATA 5F,4F
00B9E:  DATA 4E,5F
00BA0:  DATA 43,57
00BA2:  DATA 5F,46
00BA4:  DATA 4F,52
00BA6:  DATA 5F,4F
00BA8:  DATA 4E,45
00BAA:  DATA 5F,4D
00BAC:  DATA 49,4E
00BAE:  DATA 55,54
00BB0:  DATA 45,5F
00BB2:  DATA 5F,4F
00BB4:  DATA 4C,44
00BB6:  DATA 54,52
00BB8:  DATA 58,0A
00BBA:  DATA 0D,00
00BBC:  DATA 54,4C
00BBE:  DATA 45,5F
00BC0:  DATA 44,4F
00BC2:  DATA 57,4E
00BC4:  DATA 4C,49
00BC6:  DATA 4E,4B
00BC8:  DATA 5F,4D
00BCA:  DATA 49,53
00BCC:  DATA 53,49
00BCE:  DATA 4F,4E
00BD0:  DATA 5F,5F
00BD2:  DATA 4E,45
00BD4:  DATA 57,54
00BD6:  DATA 52,58
00BD8:  DATA 0A,0D
00BDA:  DATA 00,00
00BDC:  DATA 54,4C
00BDE:  DATA 45,5F
00BE0:  DATA 44,4F
00BE2:  DATA 57,4E
00BE4:  DATA 4C,49
00BE6:  DATA 4E,4B
00BE8:  DATA 5F,4D
00BEA:  DATA 49,53
00BEC:  DATA 53,49
00BEE:  DATA 4F,4E
00BF0:  DATA 5F,5F
00BF2:  DATA 4F,4C
00BF4:  DATA 44,54
00BF6:  DATA 52,58
00BF8:  DATA 0A,0D
00BFA:  DATA 00,00
00BFC:  DATA 4E,45
00BFE:  DATA 57,5F
00C00:  DATA 54,52
00C02:  DATA 58,5F
00C04:  DATA 55,50
00C06:  DATA 44,41
00C08:  DATA 54,45
00C0A:  DATA 5F,52
00C0C:  DATA 53,54
00C0E:  DATA 5F,50
00C10:  DATA 49,43
00C12:  DATA 5F,54
00C14:  DATA 49,4D
00C16:  DATA 45,5F
00C18:  DATA 42,59
00C1A:  DATA 5F,47
00C1C:  DATA 53,5F
00C1E:  DATA 43,4D
00C20:  DATA 44,0A
00C22:  DATA 0D,00
00C24:  DATA 52,65
00C26:  DATA 73,65
00C28:  DATA 74,20
00C2A:  DATA 70,69
00C2C:  DATA 63,20
00C2E:  DATA 74,69
00C30:  DATA 6D,65
00C32:  DATA 20,75
00C34:  DATA 70,64
00C36:  DATA 61,74
00C38:  DATA 65,64
00C3A:  DATA 0A,0D
00C3C:  DATA 00,00
00C3E:  DATA 52,65
00C40:  DATA 73,65
00C42:  DATA 74,20
00C44:  DATA 70,69
00C46:  DATA 63,20
00C48:  DATA 64,69
00C4A:  DATA 64,20
00C4C:  DATA 6E,6F
00C4E:  DATA 74,20
00C50:  DATA 72,65
00C52:  DATA 73,70
00C54:  DATA 6F,6E
00C56:  DATA 64,0A
00C58:  DATA 0D,00
00C5A:  DATA 4F,4C
00C5C:  DATA 44,5F
00C5E:  DATA 54,52
00C60:  DATA 58,5F
00C62:  DATA 55,50
00C64:  DATA 44,41
00C66:  DATA 54,45
00C68:  DATA 5F,52
00C6A:  DATA 53,54
00C6C:  DATA 5F,50
00C6E:  DATA 49,43
00C70:  DATA 5F,54
00C72:  DATA 49,4D
00C74:  DATA 45,5F
00C76:  DATA 42,59
00C78:  DATA 5F,47
00C7A:  DATA 53,5F
00C7C:  DATA 43,4D
00C7E:  DATA 44,0A
00C80:  DATA 0D,00
00C82:  DATA 52,65
00C84:  DATA 73,65
00C86:  DATA 74,20
00C88:  DATA 70,69
00C8A:  DATA 63,20
00C8C:  DATA 74,69
00C8E:  DATA 6D,65
00C90:  DATA 20,75
00C92:  DATA 70,64
00C94:  DATA 61,74
00C96:  DATA 65,64
00C98:  DATA 0A,0D
00C9A:  DATA 00,00
00C9C:  DATA 52,65
00C9E:  DATA 73,65
00CA0:  DATA 74,20
00CA2:  DATA 70,69
00CA4:  DATA 63,20
00CA6:  DATA 64,69
00CA8:  DATA 64,20
00CAA:  DATA 6E,6F
00CAC:  DATA 74,20
00CAE:  DATA 72,65
00CB0:  DATA 73,70
00CB2:  DATA 6F,6E
00CB4:  DATA 64,0A
00CB6:  DATA 0D,00
00CB8:  DATA 53,45
00CBA:  DATA 4E,44
00CBC:  DATA 5F,43
00CBE:  DATA 55,55
00CC0:  DATA 52,45
00CC2:  DATA 4E,54
00CC4:  DATA 5F,54
00CC6:  DATA 49,4D
00CC8:  DATA 45,5F
00CCA:  DATA 4F,46
00CCC:  DATA 5F,54
00CCE:  DATA 48,45
00CD0:  DATA 5F,53
00CD2:  DATA 41,54
00CD4:  DATA 45,4C
00CD6:  DATA 4C,49
00CD8:  DATA 54,45
00CDA:  DATA 0A,0D
00CDC:  DATA 00,00
00CDE:  DATA 52,65
00CE0:  DATA 73,65
00CE2:  DATA 74,20
00CE4:  DATA 70,69
00CE6:  DATA 63,20
00CE8:  DATA 72,65
00CEA:  DATA 73,70
00CEC:  DATA 6F,6E
00CEE:  DATA 64,65
00CF0:  DATA 64,0A
00CF2:  DATA 0D,00
00CF4:  DATA 52,65
00CF6:  DATA 73,65
00CF8:  DATA 74,20
00CFA:  DATA 70,69
00CFC:  DATA 63,20
00CFE:  DATA 64,69
00D00:  DATA 64,20
00D02:  DATA 6E,6F
00D04:  DATA 74,20
00D06:  DATA 72,65
00D08:  DATA 73,70
00D0A:  DATA 6F,6E
00D0C:  DATA 64,65
00D0E:  DATA 64,0A
00D10:  DATA 0D,00
00D12:  DATA 53,45
00D14:  DATA 4E,44
00D16:  DATA 5F,43
00D18:  DATA 55,55
00D1A:  DATA 52,45
00D1C:  DATA 4E,54
00D1E:  DATA 5F,54
00D20:  DATA 49,4D
00D22:  DATA 45,5F
00D24:  DATA 4F,46
00D26:  DATA 5F,54
00D28:  DATA 48,45
00D2A:  DATA 5F,53
00D2C:  DATA 41,54
00D2E:  DATA 45,4C
00D30:  DATA 4C,49
00D32:  DATA 54,45
00D34:  DATA 0A,0D
00D36:  DATA 00,00
00D38:  DATA 52,65
00D3A:  DATA 73,65
00D3C:  DATA 74,20
00D3E:  DATA 70,69
00D40:  DATA 63,20
00D42:  DATA 72,65
00D44:  DATA 73,70
00D46:  DATA 6F,6E
00D48:  DATA 64,65
00D4A:  DATA 64,0A
00D4C:  DATA 0D,00
00D4E:  DATA 52,65
00D50:  DATA 73,65
00D52:  DATA 74,20
00D54:  DATA 70,69
00D56:  DATA 63,20
00D58:  DATA 64,69
00D5A:  DATA 64,20
00D5C:  DATA 6E,6F
00D5E:  DATA 74,20
00D60:  DATA 72,65
00D62:  DATA 73,70
00D64:  DATA 6F,6E
00D66:  DATA 64,65
00D68:  DATA 64,0A
00D6A:  DATA 0D,00
00D6C:  DATA 52,45
00D6E:  DATA 53,54
00D70:  DATA 41,52
00D72:  DATA 54,5F
00D74:  DATA 52,45
00D76:  DATA 53,45
00D78:  DATA 54,5F
00D7A:  DATA 50,49
00D7C:  DATA 43,5F
00D7E:  DATA 42,59
00D80:  DATA 5F,47
00D82:  DATA 53,5F
00D84:  DATA 43,4D
00D86:  DATA 44,5F
00D88:  DATA 4E,45
00D8A:  DATA 57,54
00D8C:  DATA 52,58
00D8E:  DATA 0A,0D
00D90:  DATA 00,00
00D92:  DATA 52,45
00D94:  DATA 53,54
00D96:  DATA 41,52
00D98:  DATA 54,5F
00D9A:  DATA 52,45
00D9C:  DATA 53,45
00D9E:  DATA 54,5F
00DA0:  DATA 50,49
00DA2:  DATA 43,5F
00DA4:  DATA 42,59
00DA6:  DATA 5F,47
00DA8:  DATA 53,5F
00DAA:  DATA 43,4D
00DAC:  DATA 44,5F
00DAE:  DATA 41,44
00DB0:  DATA 44,54
00DB2:  DATA 52,58
00DB4:  DATA 0A,0D
00DB6:  DATA 00,00
00DB8:  DATA 46,41
00DBA:  DATA 42,5F
00DBC:  DATA 4B,49
00DBE:  DATA 4C,4C
00DC0:  DATA 5F,53
00DC2:  DATA 57,49
00DC4:  DATA 54,43
00DC6:  DATA 48,5F
00DC8:  DATA 43,4F
00DCA:  DATA 4E,54
00DCC:  DATA 52,4F
00DCE:  DATA 4C,5F
00DD0:  DATA 4E,45
00DD2:  DATA 57,54
00DD4:  DATA 52,58
00DD6:  DATA 0A,0D
00DD8:  DATA 00,00
00DDA:  DATA 4B,69
00DDC:  DATA 6C,6C
00DDE:  DATA 20,73
00DE0:  DATA 77,69
00DE2:  DATA 74,63
00DE4:  DATA 68,20
00DE6:  DATA 6F,70
00DE8:  DATA 65,72
00DEA:  DATA 61,74
00DEC:  DATA 69,6F
00DEE:  DATA 6E,20
00DF0:  DATA 73,75
00DF2:  DATA 63,63
00DF4:  DATA 65,73
00DF6:  DATA 66,75
00DF8:  DATA 6C,6C
00DFA:  DATA 0A,0D
00DFC:  DATA 00,00
00DFE:  DATA 4B,69
00E00:  DATA 6C,6C
00E02:  DATA 20,73
00E04:  DATA 77,69
00E06:  DATA 74,63
00E08:  DATA 68,20
00E0A:  DATA 6F,70
00E0C:  DATA 65,72
00E0E:  DATA 61,74
00E10:  DATA 69,6F
00E12:  DATA 6E,20
00E14:  DATA 6E,6F
00E16:  DATA 74,20
00E18:  DATA 73,75
00E1A:  DATA 63,63
00E1C:  DATA 65,73
00E1E:  DATA 66,75
00E20:  DATA 6C,6C
00E22:  DATA 0A,0D
00E24:  DATA 00,00
00E26:  DATA 46,41
00E28:  DATA 42,5F
00E2A:  DATA 4B,49
00E2C:  DATA 4C,4C
00E2E:  DATA 5F,53
00E30:  DATA 57,49
00E32:  DATA 54,43
00E34:  DATA 48,5F
00E36:  DATA 43,4F
00E38:  DATA 4E,54
00E3A:  DATA 52,4F
00E3C:  DATA 4C,5F
00E3E:  DATA 4F,4C
00E40:  DATA 44,54
00E42:  DATA 52,58
00E44:  DATA 0A,0D
00E46:  DATA 00,00
00E48:  DATA 4B,69
00E4A:  DATA 6C,6C
00E4C:  DATA 20,73
00E4E:  DATA 77,69
00E50:  DATA 74,63
00E52:  DATA 68,20
00E54:  DATA 6F,70
00E56:  DATA 65,72
00E58:  DATA 61,74
00E5A:  DATA 69,6F
00E5C:  DATA 6E,20
00E5E:  DATA 73,75
00E60:  DATA 63,63
00E62:  DATA 65,73
00E64:  DATA 66,75
00E66:  DATA 6C,6C
00E68:  DATA 0A,0D
00E6A:  DATA 00,00
00E6C:  DATA 4B,69
00E6E:  DATA 6C,6C
00E70:  DATA 20,73
00E72:  DATA 77,69
00E74:  DATA 74,63
00E76:  DATA 68,20
00E78:  DATA 6F,70
00E7A:  DATA 65,72
00E7C:  DATA 61,74
00E7E:  DATA 69,6F
00E80:  DATA 6E,20
00E82:  DATA 6E,6F
00E84:  DATA 74,20
00E86:  DATA 73,75
00E88:  DATA 63,63
00E8A:  DATA 65,73
00E8C:  DATA 66,75
00E8E:  DATA 6C,6C
00E90:  DATA 0A,0D
00E92:  DATA 00,00
00E94:  DATA 5F,55
00E96:  DATA 50,44
00E98:  DATA 41,54
00E9A:  DATA 49,4E
00E9C:  DATA 47,5F
00E9E:  DATA 4E,45
00EA0:  DATA 57,54
00EA2:  DATA 52,58
00EA4:  DATA 5F,53
00EA6:  DATA 45,54
00EA8:  DATA 54,49
00EAA:  DATA 4E,47
00EAC:  DATA 53,5F
00EAE:  DATA 42,59
00EB0:  DATA 5F,47
00EB2:  DATA 53,5F
00EB4:  DATA 43,4D
00EB6:  DATA 44,0A
00EB8:  DATA 0D,00
00EBA:  DATA 52,65
00EBC:  DATA 73,70
00EBE:  DATA 6F,6E
00EC0:  DATA 73,20
00EC2:  DATA 25,58
00EC4:  DATA 20,25
00EC6:  DATA 58,20
00EC8:  DATA 25,58
00ECA:  DATA 20,0A
00ECC:  DATA 0D,00
00ECE:  DATA 4E,65
00ED0:  DATA 77,20
00ED2:  DATA 54,52
00ED4:  DATA 58,20
00ED6:  DATA 73,65
00ED8:  DATA 74,74
00EDA:  DATA 69,6E
00EDC:  DATA 67,20
00EDE:  DATA 75,70
00EE0:  DATA 64,61
00EE2:  DATA 74,65
00EE4:  DATA 64,20
00EE6:  DATA 63,6F
00EE8:  DATA 72,72
00EEA:  DATA 65,63
00EEC:  DATA 74,6C
00EEE:  DATA 79,20
00EF0:  DATA 0A,0D
00EF2:  DATA 00,00
00EF4:  DATA 4E,65
00EF6:  DATA 77,20
00EF8:  DATA 54,52
00EFA:  DATA 58,20
00EFC:  DATA 52,65
00EFE:  DATA 63,65
00F00:  DATA 69,76
00F02:  DATA 65,20
00F04:  DATA 66,72
00F06:  DATA 65,71
00F08:  DATA 75,65
00F0A:  DATA 6E,63
00F0C:  DATA 79,20
00F0E:  DATA 75,70
00F10:  DATA 64,61
00F12:  DATA 74,65
00F14:  DATA 64,20
00F16:  DATA 63,6F
00F18:  DATA 72,72
00F1A:  DATA 65,63
00F1C:  DATA 74,6C
00F1E:  DATA 79,20
00F20:  DATA 0A,0D
00F22:  DATA 00,00
00F24:  DATA 4E,65
00F26:  DATA 77,20
00F28:  DATA 54,52
00F2A:  DATA 58,20
00F2C:  DATA 74,72
00F2E:  DATA 61,6E
00F30:  DATA 73,6D
00F32:  DATA 69,74
00F34:  DATA 20,66
00F36:  DATA 72,65
00F38:  DATA 71,75
00F3A:  DATA 65,6E
00F3C:  DATA 63,79
00F3E:  DATA 20,75
00F40:  DATA 70,64
00F42:  DATA 61,74
00F44:  DATA 65,64
00F46:  DATA 20,63
00F48:  DATA 6F,72
00F4A:  DATA 72,65
00F4C:  DATA 63,74
00F4E:  DATA 6C,79
00F50:  DATA 20,0A
00F52:  DATA 0D,00
00F54:  DATA 64,69
00F56:  DATA 66,66
00F58:  DATA 65,72
00F5A:  DATA 65,6E
00F5C:  DATA 74,20
00F5E:  DATA 72,65
00F60:  DATA 73,70
00F62:  DATA 6F,6E
00F64:  DATA 73,65
00F66:  DATA 20,0A
00F68:  DATA 0D,00
00F6A:  DATA 4E,65
00F6C:  DATA 77,20
00F6E:  DATA 54,52
00F70:  DATA 58,20
00F72:  DATA 64,69
00F74:  DATA 64,20
00F76:  DATA 6E,6F
00F78:  DATA 74,20
00F7A:  DATA 72,65
00F7C:  DATA 73,70
00F7E:  DATA 6F,6E
00F80:  DATA 64,0A
00F82:  DATA 0D,00
00F84:  DATA 54,52
00F86:  DATA 41,4E
00F88:  DATA 53,46
00F8A:  DATA 45,52
00F8C:  DATA 5F,52
00F8E:  DATA 45,53
00F90:  DATA 45,52
00F92:  DATA 56,41
00F94:  DATA 54,49
00F96:  DATA 4F,4E
00F98:  DATA 5F,43
00F9A:  DATA 4D,44
00F9C:  DATA 5F,54
00F9E:  DATA 4F,5F
00FA0:  DATA 4D,41
00FA2:  DATA 49,4E
00FA4:  DATA 50,49
00FA6:  DATA 43,5F
00FA8:  DATA 4E,45
00FAA:  DATA 57,54
00FAC:  DATA 52,58
00FAE:  DATA 0A,0D
00FB0:  DATA 00,00
00FB2:  DATA 4D,61
00FB4:  DATA 69,6E
00FB6:  DATA 20,70
00FB8:  DATA 69,63
00FBA:  DATA 20,72
00FBC:  DATA 65,73
00FBE:  DATA 70,6F
00FC0:  DATA 6E,64
00FC2:  DATA 65,64
00FC4:  DATA 0A,0D
00FC6:  DATA 00,00
00FC8:  DATA 4D,61
00FCA:  DATA 69,6E
00FCC:  DATA 20,70
00FCE:  DATA 69,63
00FD0:  DATA 20,64
00FD2:  DATA 69,64
00FD4:  DATA 20,6E
00FD6:  DATA 6F,74
00FD8:  DATA 20,72
00FDA:  DATA 65,73
00FDC:  DATA 70,6F
00FDE:  DATA 6E,64
00FE0:  DATA 0A,0D
00FE2:  DATA 00,00
00FE4:  DATA 54,52
00FE6:  DATA 41,4E
00FE8:  DATA 53,46
00FEA:  DATA 45,52
00FEC:  DATA 5F,52
00FEE:  DATA 45,53
00FF0:  DATA 45,52
00FF2:  DATA 56,41
00FF4:  DATA 54,49
00FF6:  DATA 4F,4E
00FF8:  DATA 5F,43
00FFA:  DATA 4D,44
00FFC:  DATA 5F,54
00FFE:  DATA 4F,5F
01000:  DATA 4D,41
01002:  DATA 49,4E
01004:  DATA 50,49
01006:  DATA 43,5F
01008:  DATA 4F,4C
0100A:  DATA 44,54
0100C:  DATA 52,58
0100E:  DATA 0A,0D
01010:  DATA 00,00
01012:  DATA 4D,61
01014:  DATA 69,6E
01016:  DATA 20,70
01018:  DATA 69,63
0101A:  DATA 20,72
0101C:  DATA 65,73
0101E:  DATA 70,6F
01020:  DATA 6E,64
01022:  DATA 65,64
01024:  DATA 0A,0D
01026:  DATA 00,00
01028:  DATA 4D,61
0102A:  DATA 69,6E
0102C:  DATA 20,70
0102E:  DATA 69,63
01030:  DATA 20,64
01032:  DATA 69,64
01034:  DATA 20,6E
01036:  DATA 6F,74
01038:  DATA 20,72
0103A:  DATA 65,73
0103C:  DATA 70,6F
0103E:  DATA 6E,64
01040:  DATA 0A,0D
01042:  DATA 00,00
01044:  DATA 43,6F
01046:  DATA 6D,70
01048:  DATA 69,63
0104A:  DATA 20,62
0104C:  DATA 6F,6F
0104E:  DATA 74,69
01050:  DATA 6E,67
01052:  DATA 2E,2E
01054:  DATA 2E,2E
01056:  DATA 2E,2E
01058:  DATA 2E,2E
0105A:  DATA 2E,2E
0105C:  DATA 0A,0D
0105E:  DATA 00,00
01060:  DATA 43,6F
01062:  DATA 6D,6D
01064:  DATA 61,6E
01066:  DATA 64,20
01068:  DATA 66,72
0106A:  DATA 6F,6D
0106C:  DATA 20,54
0106E:  DATA 68,61
01070:  DATA 72,69
01072:  DATA 6E,64
01074:  DATA 75,27
01076:  DATA 73,20
01078:  DATA 6E,65
0107A:  DATA 77,20
0107C:  DATA 54,72
0107E:  DATA 61,6E
01080:  DATA 73,63
01082:  DATA 65,69
01084:  DATA 76,65
01086:  DATA 72,0A
01088:  DATA 0D,00
0108A:  DATA 43,6F
0108C:  DATA 6D,6D
0108E:  DATA 61,6E
01090:  DATA 64,20
01092:  DATA 66,72
01094:  DATA 6F,6D
01096:  DATA 20,41
01098:  DATA 44,44
0109A:  DATA 4E,49
0109C:  DATA 43,53
0109E:  DATA 20,54
010A0:  DATA 72,61
010A2:  DATA 6E,73
010A4:  DATA 63,65
010A6:  DATA 69,76
010A8:  DATA 65,72
010AA:  DATA 0A,0D
010AC:  DATA 00,00
*
0111C:  TBLRD*+
0111E:  MOVF   FF5,F
01120:  BZ    1142
01122:  MOVFF  FF6,502
01126:  MOVFF  FF7,503
0112A:  MOVFF  FF8,504
0112E:  MOVFF  FF5,505
01132:  RCALL  10D8
01134:  MOVFF  502,FF6
01138:  MOVFF  503,FF7
0113C:  MOVFF  504,FF8
01140:  BRA    111C
01142:  RETURN 0
*
01184:  TBLRD*+
01186:  MOVFF  FF6,4F9
0118A:  MOVFF  FF7,4FA
0118E:  MOVFF  FF8,4FB
01192:  MOVFF  FF5,505
01196:  RCALL  10D8
01198:  MOVFF  4F9,FF6
0119C:  MOVFF  4FA,FF7
011A0:  MOVFF  4FB,FF8
011A4:  MOVLB  4
011A6:  DECFSZ xF8,F
011A8:  BRA    11AC
011AA:  BRA    11B0
011AC:  MOVLB  0
011AE:  BRA    1184
011B0:  MOVLB  0
011B2:  RETURN 0
011B4:  MOVLB  4
011B6:  BTFSC  xEF.7
011B8:  BRA    11DC
011BA:  MOVLW  0F
011BC:  MOVWF  00
011BE:  SWAPF  xEE,W
011C0:  ANDWF  00,F
011C2:  MOVLW  0A
011C4:  SUBWF  00,W
011C6:  BC    11CE
011C8:  MOVLW  30
011CA:  ADDWF  00,F
011CC:  BRA    11D2
011CE:  MOVF   xEF,W
011D0:  ADDWF  00,F
011D2:  MOVFF  00,505
011D6:  MOVLB  0
011D8:  RCALL  10D8
011DA:  MOVLB  4
011DC:  MOVLW  0F
011DE:  ANDWF  xEE,F
011E0:  MOVLW  0A
011E2:  SUBWF  xEE,W
011E4:  BC    11EA
011E6:  MOVLW  30
011E8:  BRA    11EE
011EA:  BCF    xEF.7
011EC:  MOVF   xEF,W
011EE:  ADDWF  xEE,F
011F0:  MOVFF  4EE,505
011F4:  MOVLB  0
011F6:  RCALL  10D8
011F8:  RETURN 0
*
01570:  MOVLB  4
01572:  MOVF   xE9,W
01574:  MULWF  xEB
01576:  MOVFF  FF3,01
0157A:  MOVFF  FF4,00
0157E:  MULWF  xEC
01580:  MOVF   FF3,W
01582:  ADDWF  00,F
01584:  MOVF   xEA,W
01586:  MULWF  xEB
01588:  MOVF   FF3,W
0158A:  ADDWFC 00,W
0158C:  MOVWF  02
0158E:  MOVLB  0
01590:  GOTO   296C (RETURN)
*
01642:  MOVLB  4
01644:  MOVF   xFF,W
01646:  CLRF   01
01648:  SUBWF  xFE,W
0164A:  BC    1652
0164C:  MOVFF  4FE,00
01650:  BRA    1672
01652:  CLRF   00
01654:  MOVLW  08
01656:  MOVLB  5
01658:  MOVWF  x00
0165A:  MOVLB  4
0165C:  RLCF   xFE,F
0165E:  RLCF   00,F
01660:  MOVF   xFF,W
01662:  SUBWF  00,W
01664:  BTFSC  FD8.0
01666:  MOVWF  00
01668:  RLCF   01,F
0166A:  MOVLB  5
0166C:  DECFSZ x00,F
0166E:  BRA    165A
01670:  MOVLB  4
01672:  MOVLB  0
01674:  RETURN 0
01676:  MOVLW  20
01678:  MOVLB  4
0167A:  BTFSS  xF9.4
0167C:  MOVLW  30
0167E:  MOVWF  xFA
01680:  MOVFF  4F8,00
01684:  BTFSS  00.7
01686:  BRA    1698
01688:  COMF   00,F
0168A:  INCF   00,F
0168C:  MOVFF  00,4F8
01690:  MOVLW  2D
01692:  MOVWF  xFA
01694:  BSF    xF9.7
01696:  BSF    xF9.0
01698:  MOVF   01,W
0169A:  MOVFF  4F8,4FE
0169E:  MOVLW  64
016A0:  MOVWF  xFF
016A2:  MOVLB  0
016A4:  RCALL  1642
016A6:  MOVFF  00,4F8
016AA:  MOVLW  30
016AC:  ADDWF  01,W
016AE:  MOVLB  4
016B0:  MOVWF  xFB
016B2:  MOVFF  4F8,4FE
016B6:  MOVLW  0A
016B8:  MOVWF  xFF
016BA:  MOVLB  0
016BC:  RCALL  1642
016BE:  MOVLW  30
016C0:  ADDWF  00,W
016C2:  MOVLB  4
016C4:  MOVWF  xFD
016C6:  MOVLW  30
016C8:  ADDWF  01,W
016CA:  MOVWF  xFC
016CC:  MOVFF  4FA,00
016D0:  MOVLW  30
016D2:  SUBWF  xFB,W
016D4:  BZ    16DE
016D6:  BSF    xF9.1
016D8:  BTFSC  xF9.7
016DA:  BSF    xF9.2
016DC:  BRA    1702
016DE:  MOVFF  4FA,4FB
016E2:  MOVLW  20
016E4:  MOVWF  xFA
016E6:  MOVLW  30
016E8:  SUBWF  xFC,W
016EA:  BZ    16F4
016EC:  BSF    xF9.0
016EE:  BTFSC  xF9.7
016F0:  BSF    xF9.1
016F2:  BRA    1702
016F4:  BTFSS  FD8.2
016F6:  BSF    xF9.0
016F8:  BNZ   1702
016FA:  MOVFF  4FB,4FC
016FE:  MOVLW  20
01700:  MOVWF  xFB
01702:  BTFSC  xF9.2
01704:  BRA    1710
01706:  BTFSC  xF9.1
01708:  BRA    1718
0170A:  BTFSC  xF9.0
0170C:  BRA    1720
0170E:  BRA    1728
01710:  MOVFF  4FA,505
01714:  MOVLB  0
01716:  RCALL  10D8
01718:  MOVFF  4FB,505
0171C:  MOVLB  0
0171E:  RCALL  10D8
01720:  MOVFF  4FC,505
01724:  MOVLB  0
01726:  RCALL  10D8
01728:  MOVFF  4FD,505
0172C:  MOVLB  0
0172E:  RCALL  10D8
01730:  RETURN 0
*
021DC:  TBLRD*+
021DE:  MOVF   FF5,F
021E0:  BZ    2202
021E2:  MOVFF  FF6,4EA
021E6:  MOVFF  FF7,4EB
021EA:  MOVFF  FF8,4EC
021EE:  MOVFF  FF5,4ED
021F2:  RCALL  1EA0
021F4:  MOVFF  4EA,FF6
021F8:  MOVFF  4EB,FF7
021FC:  MOVFF  4EC,FF8
02200:  BRA    21DC
02202:  RETURN 0
*
02B1C:  MOVF   01,W
02B1E:  MOVFF  4ED,4FE
02B22:  MOVLW  64
02B24:  MOVLB  4
02B26:  MOVWF  xFF
02B28:  MOVLB  0
02B2A:  CALL   1642
02B2E:  MOVFF  00,4ED
02B32:  MOVF   01,W
02B34:  MOVLW  30
02B36:  BNZ   2B48
02B38:  MOVLB  4
02B3A:  BTFSS  xEE.1
02B3C:  BRA    2B5E
02B3E:  BTFSC  xEE.3
02B40:  BRA    2B5E
02B42:  BTFSC  xEE.4
02B44:  MOVLW  20
02B46:  BRA    2B50
02B48:  MOVLB  4
02B4A:  BCF    xEE.3
02B4C:  BCF    xEE.4
02B4E:  BSF    xEE.0
02B50:  ADDWF  01,F
02B52:  MOVFF  01,505
02B56:  MOVLB  0
02B58:  CALL   10D8
02B5C:  MOVLB  4
02B5E:  MOVFF  4ED,4FE
02B62:  MOVLW  0A
02B64:  MOVWF  xFF
02B66:  MOVLB  0
02B68:  CALL   1642
02B6C:  MOVFF  00,4ED
02B70:  MOVF   01,W
02B72:  MOVLW  30
02B74:  BNZ   2B86
02B76:  MOVLB  4
02B78:  BTFSC  xEE.3
02B7A:  BRA    2B92
02B7C:  BTFSS  xEE.0
02B7E:  BRA    2B92
02B80:  BTFSC  xEE.4
02B82:  MOVLW  20
02B84:  MOVLB  0
02B86:  ADDWF  01,F
02B88:  MOVFF  01,505
02B8C:  CALL   10D8
02B90:  MOVLB  4
02B92:  MOVLW  30
02B94:  ADDWF  xED,F
02B96:  MOVFF  4ED,505
02B9A:  MOVLB  0
02B9C:  CALL   10D8
02BA0:  RETURN 0
*
02E58:  MOVLB  5
02E5A:  CLRF   x12
02E5C:  CLRF   x13
02E5E:  MOVLW  01
02E60:  MOVWF  x14
02E62:  CLRF   FDA
02E64:  CLRF   FD9
02E66:  MOVLW  05
02E68:  MOVWF  x17
02E6A:  MOVLW  0A
02E6C:  MOVWF  x16
02E6E:  MOVLW  05
02E70:  MOVWF  FEA
02E72:  MOVLW  0E
02E74:  MOVWF  FE9
02E76:  MOVFF  517,FE2
02E7A:  MOVFF  516,FE1
02E7E:  MOVFF  514,515
02E82:  BCF    FD8.0
02E84:  MOVF   FE5,W
02E86:  MULWF  FEE
02E88:  MOVF   FF3,W
02E8A:  ADDWFC x12,F
02E8C:  MOVF   FF4,W
02E8E:  ADDWFC x13,F
02E90:  DECFSZ x15,F
02E92:  BRA    2E82
02E94:  MOVFF  512,FDE
02E98:  MOVFF  513,512
02E9C:  CLRF   x13
02E9E:  BTFSC  FD8.0
02EA0:  INCF   x13,F
02EA2:  INCF   x16,F
02EA4:  BTFSC  FD8.2
02EA6:  INCF   x17,F
02EA8:  INCF   x14,F
02EAA:  MOVF   x14,W
02EAC:  SUBLW  05
02EAE:  BNZ   2E6E
02EB0:  MOVLB  0
02EB2:  RETURN 0
*
03932:  MOVF   FF2,W
03934:  MOVWF  03
03936:  BCF    FF2.7
03938:  BSF    F7F.2
0393A:  MOVLB  F
0393C:  MOVLW  55
0393E:  MOVWF  F7E
03940:  MOVLW  AA
03942:  MOVWF  F7E
03944:  BSF    F7F.1
03946:  NOP   
03948:  MOVF   03,W
0394A:  IORWF  FF2,F
0394C:  MOVLB  0
0394E:  RETURN 0
03950:  MOVLW  C0
03952:  ANDWF  FF6,F
03954:  MOVLW  3F
03956:  MOVWF  00
03958:  TBLRD*
0395A:  TBLWT*+
0395C:  DECFSZ 00,F
0395E:  BRA    3958
03960:  TBLRD*
03962:  TBLWT*
03964:  RETURN 0
....................  
.................... #list 
....................  
.................... #FUSES WDT,NOBROWNOUT 
.................... #use delay(crystal = 16MHz, clock = 16MHz) 
*
010AE:  MOVLW  05
010B0:  MOVWF  FEA
010B2:  MOVLW  04
010B4:  MOVWF  FE9
010B6:  MOVF   FEF,W
010B8:  BZ    10D6
010BA:  MOVLW  05
010BC:  MOVWF  01
010BE:  CLRF   00
010C0:  DECFSZ 00,F
010C2:  BRA    10C0
010C4:  DECFSZ 01,F
010C6:  BRA    10BE
010C8:  MOVLW  2E
010CA:  MOVWF  00
010CC:  DECFSZ 00,F
010CE:  BRA    10CC
010D0:  BRA    10D2
010D2:  DECFSZ FEF,F
010D4:  BRA    10BA
010D6:  RETURN 0
.................... #include <PIC18F67J94_REGISTERS.h> 
....................  
.................... #byte TRISG = 0xF98 
.................... #byte TRISF = 0xF97 
.................... #byte TRISE = 0xF96 
.................... #byte TRISD = 0xF95 
.................... #byte TRISC = 0xF94 
.................... #byte TRISB = 0xF93 
.................... #byte TRISA = 0xF92 
....................  
.................... #byte LATG = 0xF8F 
.................... #byte LATF = 0xF8E 
.................... #byte LATE = 0xF8D 
.................... #byte LATD = 0xF8C 
.................... #byte LATC = 0xF8B 
.................... #byte LATB = 0xF8A 
.................... #byte LATA = 0xF89 
....................  
.................... #bit    TRISE0 = TRISE.0 
.................... #bit    TRISE1 = TRISE.1 
.................... #bit    TRISE2 = TRISE.2 
....................  
.................... #bit    TRISC4 = TRISC.4 
....................  
.................... #bit    TRISB3 = TRISB.3 
....................  
.................... #bit    TRISA0 = TRISA.0 
.................... #bit    TRISA1 = TRISA.1 
.................... #bit    TRISA2 = TRISA.2 
.................... #bit    TRISA5 = TRISA.5 
....................  
....................  
....................  
....................  
.................... #bit    LATA0 = LATA.0 
.................... #bit    LATA1 = LATA.1 
.................... #bit    LATA2 = LATA.2 
.................... #bit    LATA3 = LATA.3 
....................  
.................... #byte PORTG = 0xF86 
.................... #bit    RG0 = PORTG.0 
.................... #bit    RG1 = PORTG.1 
.................... #bit    RG2 = PORTG.2 
.................... #bit    RG3 = PORTG.3 
.................... #bit    RG4 = PORTG.4 
.................... #bit    RG6 = PORTG.6 
.................... #bit    RG7 = PORTG.7 
.................... #byte PORTF = 0xF85 
.................... #bit    RF2 = PORTF.2 
.................... #bit    RF3 = PORTF.3 
.................... #bit    RF4 = PORTF.4 
.................... #bit    RF5 = PORTF.5 
.................... #bit    RF6 = PORTF.6 
.................... #bit    RF7 = PORTF.7 
....................  
.................... #byte PORTE = 0xF84 
.................... #bit    RE2 = PORTE.2 
....................  
....................  
.................... #byte PORTD = 0xF83 
.................... #byte PORTC = 0xF82 
.................... #bit    RC0 = PORTC.0 
.................... #bit    RC1 = PORTC.1 
.................... #bit    RC2 = PORTC.2 
.................... #bit    RC3 = PORTC.3 
.................... #bit    RC4 = PORTC.4 
.................... #bit    RC5 = PORTC.5 
.................... #bit    RC6 = PORTC.6 
.................... #bit    RC7 = PORTC.7 
....................  
.................... #byte PORTB = 0xF81 
.................... #bit    RB3 = PORTB.3 
....................  
.................... #byte PORTA = 0xF80 
.................... #bit    RA0 = PORTA.0 
.................... #bit    RA1 = PORTA.1 
.................... #bit    RA2 = PORTA.2 
.................... #bit    RA3 = PORTA.3 
.................... #bit    RA4 = PORTA.4 
.................... #bit    RA5 = PORTA.5 
.................... #bit    RA6 = PORTA.6 
.................... #bit    RA7 = PORTA.7 
....................  
....................  
.................... //__________________________________RTC___________________________________________ 
.................... #byte RTCCON1 = 0xF5F 
.................... #bit    RTCPTR0 = RTCCON1.0 
.................... #bit    RTCPTR1 = RTCCON1.1 
.................... #bit    RTCOE = RTCCON1.2 
.................... #bit    HALFSEC = RTCCON1.3 
.................... #bit    RTCSYNC = RTCCON1.4 
.................... #bit    RTCWREN = RTCCON1.5 
.................... #bit    RTCEN = RTCCON1.7 
.................... #byte RTCCAL = 0xF5E 
.................... #byte RTCVALH = 0xF5D 
.................... #bit    WAITE0 = RTCVALH.0 
.................... #bit    WAITE1 = RTCVALH.1 
.................... #bit    WAITM0 = RTCVALH.2 
.................... #bit    WAITM1 = RTCVALH.3 
.................... #bit    WAITM2 = RTCVALH.4 
.................... #bit    WAITM3 = RTCVALH.5 
.................... #bit    WAITB0 = RTCVALH.6 
.................... #bit    WAITB1 = RTCVALH.7 
.................... //#byte RTCVALH = 0xF5D 
.................... #byte RTCVALL = 0xF5C 
.................... #byte ALRMCFG = 0xF5B 
.................... #bit    ALRMPTR0 = ALRMCFG.0 
.................... #bit    ALRMPTR1 = ALRMCFG.1 
.................... #bit    AMASK0 = ALRMCFG.2 
.................... #bit    AMASK1 = ALRMCFG.3 
.................... #bit    AMASK2 = ALRMCFG.4 
.................... #bit    AMASK3 = ALRMCFG.5 
.................... #bit    CHIME = ALRMCFG.6 
.................... #bit    ALRMEN = ALRMCFG.7 
.................... #byte ALRMRPT = 0xF5A 
.................... #byte ALRMVALH = 0xF59 
.................... #byte ALRMVALL = 0xF58 
.................... #byte RTCCON2 = 0xF57 
.................... #bit    RTCSECSEL0 = RTCCON2.0 
.................... #bit    RTCSECSEL1 = RTCCON2.1 
.................... #bit    RTCCLKSEL0 = RTCCON2.2 
.................... #bit    RTCCLKSEL1 = RTCCON2.3 
.................... #bit    PWCSPRE = RTCCON2.4 
.................... #bit    PWCCPRE = RTCCON2.5 
.................... #bit    PWCPOL = RTCCON2.6 
.................... #bit    PWCEN = RTCCON2.7 
....................  
....................  
.................... #byte EECON2 = 0xF7E 
....................  
.................... #byte OSCCON = 0xFD3 
....................  
.................... #byte T1CON  = 0xFCD 
....................  
.................... #bit  T1CON7 = T1CON.7 
.................... #bit  T1CON6 = T1CON.6 
.................... //!#bit  T1CON5 = T1CON.5 
.................... //!#bit  T1CON4 = T1CON.4 
.................... //#bit  T1CON7 = T1CON.7 
.................... //#bit  T1CON6 = T1CON.6 
....................  
.................... #bit  SOSCEN1 = T1CON.3 
.................... #bit  TMR1ON = T1CON.0 
....................  
.................... #byte T3CON  = 0xFB1 
.................... #bit  SOSCEN3 = T3CON.3 
....................  
....................  
.................... #byte PIE3 = 0xFA3 
.................... #bit  RC2IE = PIE3.5 
....................  
....................  
.................... char SAT_ID    = 0x77 ;     // this is the satellite id 
.................... int OLDTRX_RPL = 0    ;     // old tranceiver received packet lenngth 
.................... int NEWTRX_RPL = 0    ;     // old tranceiver received packet lenngth 
....................  
.................... int16 CW_INTERVAL = 100 ; 
....................  
.................... #include <ComPic_Settings.c> 
.................... #define TXMODE_PIN    PIN_F6     // PIN 42 in connector -> CP2NTRX_DIO0  
.................... #define TXDONE_PIN    PIN_F5     // PIN 43 in connector -> CP2NTRX_DIO1  
.................... #define TRXPWR_PIN    PIN_A3     // PIN 38 in connector -> CP2NTRX_DIO2   
....................  
.................... #define RSTPIC_RESTART_PIN    PIN_F7 
....................  
.................... // mainlop counter 
....................    unsigned int16 MLC = 0; 
....................     
.................... // cw data array 
....................    unsigned int CW_DATA[16]; 
....................    unsigned int CW_DATA_TO_NEWTRX[55]; 
....................  
.................... // CW transmission related variables 
....................    unsigned int8 CW_FLAG   = 0x00; 
....................     
....................    unsigned int8 NEWTRX_CW     = 0xAA ; 
....................    unsigned int8 OLDTRX_CW     = 0xBB ; 
....................    unsigned int8 NEWTRX_1PCKT  = 0xCC ; 
....................    unsigned int8 OLDTRX_1PCKT  = 0xDD ; 
....................     
....................    unsigned int32 TLE_ADDRESS  = 0x07D00000;    // 2000 th sector start adress 
....................     
.................... // Transceiver operation 
....................    unsigned int8 NEW_TRX_STATUS = 0x00; 
....................    unsigned int8 ON_  = 0xAA; 
....................    unsigned int8 OFF_ = 0xBB; 
....................  
....................     
.................... // these arrays are used to comunicate with reset pic 
....................    unsigned int8 RPIC_TO_CPIC_ARRAY[55];  // only 20 bytes are used 
....................    unsigned int8 CPIC_TO_RPIC_ARRAY[55];  // only 20 bytes are used 
....................  
.................... // these arrays are used to comunicate with new tranceiver 
....................    unsigned int8 NEWTRX_CMD_BUFFER[60];    
....................    unsigned int8 NEWTRX_TO_CPIC_ARRAY[60]; 
....................    unsigned int8 CPIC_TO_NEWTRX_ARRAY[110]; 
....................  
.................... // these arrays are used to comunicate with old tranceiver 
....................    unsigned int8 OLDTRX_CMD_BUFFER[60]; 
....................    unsigned int8 OLDTRX_TO_CPIC_ARRAY[60]; 
....................    unsigned int8 CPIC_TO_OLDTRX_ARRAY[110]; 
....................  
.................... // these arrays are used to comunicate with main pic 
....................    unsigned int8 MPIC_TO_CPIC_ARRAY[55];  // only 32 bytes are used 
....................    unsigned int8 CPIC_TO_MPIC_ARRAY[55];  // only 40 bytes are used 
....................   
....................  
.................... // call signs 
....................    // GS call sign 
....................    unsigned int8 GS_callsign_leter_1 = 0x4A ;   // J 
....................    unsigned int8 GS_callsign_leter_2 = 0x47 ;   // G 
....................    unsigned int8 GS_callsign_leter_3 = 0x36 ;   // 6 
....................    unsigned int8 GS_callsign_leter_4 = 0x59 ;   // Y 
....................    unsigned int8 GS_callsign_leter_5 = 0x42 ;   // B 
....................    unsigned int8 GS_callsign_leter_6 = 0x57 ;   // W 
....................     
....................    //Satellite call sign  
....................    unsigned int8 ST_callsign_leter_1 = 0x6A ;   // J 
....................    unsigned int8 ST_callsign_leter_2 = 0x67 ;   // G 
....................    unsigned int8 ST_callsign_leter_3 = 0x36 ;   // 6 
....................    unsigned int8 ST_callsign_leter_4 = 0x79 ;   // Y 
....................    unsigned int8 ST_callsign_leter_5 = 0x6F ;   // O 
....................    unsigned int8 ST_callsign_leter_6 = 0x77 ;   // W 
....................   
....................    Void OLD_TRX_SEND_1PCKT_BEACON() ; 
....................    Void NEW_TRX_SEND_1PCKT_BEACON() ; 
....................    void COMUNICATION_WITH_MAIN_PIC_AND_WAIT_FOR_RESPONE(int16 numof_times, int16 time_delay, int16 wait_time = 200);   
....................     
....................  
....................  
.................... // debug software uart_________________________________________________________ 
.................... //#use rs232(baud=19200, parity=N, xmit=PIN_B7,  bits=8, stream = PC, errors, force_sw )  //Debug PGD line 
.................... #use rs232(baud=19200, parity=N, xmit=PIN_D7,  bits=8, stream = PC, errors, force_sw )  //dummy port 
010D8:  BCF    F95.7
010DA:  BCF    F8C.7
010DC:  MOVLW  08
010DE:  MOVWF  01
010E0:  BRA    10E2
010E2:  NOP   
010E4:  BSF    01.7
010E6:  BRA    1108
010E8:  BCF    01.7
010EA:  MOVLB  5
010EC:  RRCF   x05,F
010EE:  MOVLB  0
010F0:  BTFSC  FD8.0
010F2:  BSF    F8C.7
010F4:  BTFSS  FD8.0
010F6:  BCF    F8C.7
010F8:  BSF    01.6
010FA:  BRA    1108
010FC:  BCF    01.6
010FE:  DECFSZ 01,F
01100:  BRA    10EA
01102:  BRA    1104
01104:  NOP   
01106:  BSF    F8C.7
01108:  MOVLW  3F
0110A:  MOVWF  FE9
0110C:  DECFSZ FE9,F
0110E:  BRA    110C
01110:  NOP   
01112:  BTFSC  01.7
01114:  BRA    10E8
01116:  BTFSC  01.6
01118:  BRA    10FC
0111A:  RETURN 0
....................  
.................... //$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 
.................... //============================================================================= 
.................... //This section handle the UART port connected to main pic______________________ 
.................... #define MP_BFR_SIZE 50 
.................... #pin_select TX2=PIN_G1   
.................... #pin_select RX2=PIN_G2   
.................... #use rs232(UART2, baud=38400, parity=N, bits=8, stream=MPic, errors)  
*
000E2:  BTFSS  FA4.5
000E4:  BRA    00E2
000E6:  MOVFF  F33,329
000EA:  MOVFF  F1E,01
000EE:  MOVLB  3
000F0:  BTFSS  x29.1
000F2:  BRA    00FC
000F4:  MOVLB  F
000F6:  BCF    x33.4
000F8:  BSF    x33.4
000FA:  MOVLB  3
000FC:  MOVLB  0
000FE:  RETURN 0
*
018F4:  BTFSS  FA4.4
018F6:  BRA    18F4
018F8:  MOVLB  F
018FA:  MOVWF  x1D
018FC:  MOVLB  0
018FE:  GOTO   1A54 (RETURN)
....................  
.................... unsigned int8  MP_Buffer[MP_BFR_SIZE]; 
.................... unsigned int16 MP_Byte_Counter = 0; 
.................... unsigned int8  MP_Overflow = 0; 
.................... unsigned int16 MP_Read_Byte_counter = 0; 
.................... unsigned int8  MP_Temp_byte = 0; 
....................  
.................... #INT_RDA2 
.................... Void SERIAL_ISR2()         // MAIN PIC uart interupt loop 
.................... { 
....................    if( kbhit(MPic) ) 
*
00100:  BTFSS  FA4.5
00102:  BRA    0146
....................    { 
....................       if( MP_Byte_Counter < MP_BFR_SIZE ) 
00104:  MOVLB  3
00106:  MOVF   x5D,F
00108:  BNZ   013E
0010A:  MOVF   x5C,W
0010C:  SUBLW  31
0010E:  BNC   013E
....................       { 
....................          MP_Buffer[MP_Byte_Counter] = fgetc(MPic); 
00110:  MOVLW  2A
00112:  ADDWF  x5C,W
00114:  MOVWF  FE9
00116:  MOVLW  03
00118:  ADDWFC x5D,W
0011A:  MOVWF  FEA
0011C:  MOVFF  FEA,51D
00120:  MOVFF  FE9,51C
00124:  MOVLB  0
00126:  RCALL  00E2
00128:  MOVFF  51D,FEA
0012C:  MOVFF  51C,FE9
00130:  MOVFF  01,FEF
....................          MP_Byte_Counter++; 
00134:  MOVLB  3
00136:  INCF   x5C,F
00138:  BTFSC  FD8.2
0013A:  INCF   x5D,F
....................       } 
0013C:  BRA    0148
....................       else MP_Overflow = fgetc(MPic); 
0013E:  MOVLB  0
00140:  RCALL  00E2
00142:  MOVFF  01,35E
00146:  MOVLB  3
....................    } 
00148:  BCF    FA4.5
0014A:  MOVLB  0
0014C:  GOTO   008C
.................... } 
....................  
.................... unsigned int8 MPic_Available() 
.................... { 
....................    if (MP_Byte_Counter > 0) return MP_Byte_Counter ; 
*
01902:  MOVLB  3
01904:  MOVF   x5C,F
01906:  BNZ   190C
01908:  MOVF   x5D,F
0190A:  BZ    1914
0190C:  MOVFF  35C,01
01910:  BRA    1918
01912:  BRA    1918
....................    else return 0; 
01914:  MOVLW  00
01916:  MOVWF  01
01918:  MOVLB  0
0191A:  GOTO   1970 (RETURN)
.................... } 
....................  
.................... unsigned int8 MPic_Read() 
.................... { 
....................    if (MP_Byte_Counter>0) 
0191E:  MOVLB  3
01920:  MOVF   x5C,F
01922:  BNZ   1928
01924:  MOVF   x5D,F
01926:  BZ    1958
....................    {     
....................       MP_Temp_byte = MP_Buffer[MP_Read_Byte_counter]; 
01928:  MOVLW  2A
0192A:  ADDWF  x5F,W
0192C:  MOVWF  FE9
0192E:  MOVLW  03
01930:  ADDWFC x60,W
01932:  MOVWF  FEA
01934:  MOVFF  FEF,361
....................        
....................       MP_Byte_Counter--; 
01938:  MOVF   x5C,W
0193A:  BTFSC  FD8.2
0193C:  DECF   x5D,F
0193E:  DECF   x5C,F
....................       MP_Read_Byte_counter++; 
01940:  INCF   x5F,F
01942:  BTFSC  FD8.2
01944:  INCF   x60,F
....................       if(MP_Byte_Counter == 0) MP_Read_Byte_counter = 0; 
01946:  MOVF   x5C,F
01948:  BNZ   1952
0194A:  MOVF   x5D,F
0194C:  BNZ   1952
0194E:  CLRF   x60
01950:  CLRF   x5F
....................       return MP_Temp_byte;  
01952:  MOVFF  361,01
01956:  BRA    196A
....................    } 
....................     
....................    if (MP_Byte_Counter == 0) 
01958:  MOVF   x5C,F
0195A:  BNZ   196A
0195C:  MOVF   x5D,F
0195E:  BNZ   196A
....................    {  
....................       MP_Read_Byte_counter = 0; 
01960:  CLRF   x60
01962:  CLRF   x5F
....................       MP_Temp_byte = 0x00; 
01964:  CLRF   x61
....................       return MP_Temp_byte;  
01966:  MOVFF  361,01
....................    } 
0196A:  MOVLB  0
0196C:  RETURN 0
....................   
.................... } 
....................  
.................... void MPic_flush() 
.................... { 
....................    while( MPic_Available() ) MPic_Read() ; 
.................... } 
.................... //============================================================================= 
....................  
....................  
....................  
.................... //$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 
.................... //============================================================================= 
.................... //This section handle the UART port connected to RESET pic_______________________ 
.................... #define RP_BFR_SIZE 50 
.................... #pin_select TX3=PIN_E3 
.................... #pin_select RX3=PIN_E4   
.................... #use rs232(UART3, baud=38400, parity=N, bits=8, stream=RPic, errors)  
*
00150:  BTFSS  FA6.5
00152:  BRA    0150
00154:  MOVFF  F2F,329
00158:  MOVFF  F2A,01
0015C:  MOVLB  3
0015E:  BTFSS  x29.1
00160:  BRA    016A
00162:  MOVLB  F
00164:  BCF    x2F.4
00166:  BSF    x2F.4
00168:  MOVLB  3
0016A:  MOVLB  0
0016C:  RETURN 0
*
01732:  BTFSS  FA6.4
01734:  BRA    1732
01736:  MOVLB  F
01738:  MOVWF  x29
0173A:  MOVLB  0
0173C:  GOTO   1824 (RETURN)
....................  
.................... unsigned int8  RP_Buffer[RP_BFR_SIZE]; 
.................... unsigned int16 RP_Byte_Counter = 0; 
.................... unsigned int8  RP_Overflow = 0; 
.................... unsigned int16 RP_Read_Byte_counter = 0; 
.................... unsigned int8  RP_Temp_byte = 0; 
....................  
.................... #INT_RDA3 
.................... Void SERIAL_ISR3()         // MAIN PIC uart interupt loop 
.................... { 
....................    if( kbhit(RPic) ) 
*
0016E:  BTFSS  FA6.5
00170:  BRA    01B4
....................    { 
....................       if( RP_Byte_Counter < RP_BFR_SIZE ) 
00172:  MOVLB  3
00174:  MOVF   x95,F
00176:  BNZ   01AC
00178:  MOVF   x94,W
0017A:  SUBLW  31
0017C:  BNC   01AC
....................       { 
....................          RP_Buffer[RP_Byte_Counter] = fgetc(RPic); 
0017E:  MOVLW  62
00180:  ADDWF  x94,W
00182:  MOVWF  FE9
00184:  MOVLW  03
00186:  ADDWFC x95,W
00188:  MOVWF  FEA
0018A:  MOVFF  FEA,51D
0018E:  MOVFF  FE9,51C
00192:  MOVLB  0
00194:  RCALL  0150
00196:  MOVFF  51D,FEA
0019A:  MOVFF  51C,FE9
0019E:  MOVFF  01,FEF
....................          RP_Byte_Counter++; 
001A2:  MOVLB  3
001A4:  INCF   x94,F
001A6:  BTFSC  FD8.2
001A8:  INCF   x95,F
....................       } 
001AA:  BRA    01B6
....................        
....................       else RP_Overflow = fgetc(RPic); 
001AC:  MOVLB  0
001AE:  RCALL  0150
001B0:  MOVFF  01,396
001B4:  MOVLB  3
....................    } 
001B6:  BCF    FA6.5
001B8:  MOVLB  0
001BA:  GOTO   008C
.................... } 
....................  
.................... unsigned int8 RPic_Available() 
.................... { 
....................    if (RP_Byte_Counter > 0) return RP_Byte_Counter ; 
*
015CA:  MOVLB  3
015CC:  MOVF   x94,F
015CE:  BNZ   15D4
015D0:  MOVF   x95,F
015D2:  BZ    15DC
015D4:  MOVFF  394,01
015D8:  BRA    15E0
015DA:  BRA    15E0
....................    else return 0; 
015DC:  MOVLW  00
015DE:  MOVWF  01
015E0:  MOVLB  0
015E2:  RETURN 0
.................... } 
....................  
.................... unsigned int8 RPic_Read() 
.................... { 
....................    if (RP_Byte_Counter>0) 
015E4:  MOVLB  3
015E6:  MOVF   x94,F
015E8:  BNZ   15EE
015EA:  MOVF   x95,F
015EC:  BZ    161E
....................    {     
....................       RP_Temp_byte = RP_Buffer[RP_Read_Byte_counter]; 
015EE:  MOVLW  62
015F0:  ADDWF  x97,W
015F2:  MOVWF  FE9
015F4:  MOVLW  03
015F6:  ADDWFC x98,W
015F8:  MOVWF  FEA
015FA:  MOVFF  FEF,399
....................        
....................       RP_Byte_Counter--; 
015FE:  MOVF   x94,W
01600:  BTFSC  FD8.2
01602:  DECF   x95,F
01604:  DECF   x94,F
....................       RP_Read_Byte_counter++; 
01606:  INCF   x97,F
01608:  BTFSC  FD8.2
0160A:  INCF   x98,F
....................       if(RP_Byte_Counter == 0) RP_Read_Byte_counter = 0; 
0160C:  MOVF   x94,F
0160E:  BNZ   1618
01610:  MOVF   x95,F
01612:  BNZ   1618
01614:  CLRF   x98
01616:  CLRF   x97
....................       return RP_Temp_byte;  
01618:  MOVFF  399,01
0161C:  BRA    1630
....................    } 
....................     
....................    if (RP_Byte_Counter == 0) 
0161E:  MOVF   x94,F
01620:  BNZ   1630
01622:  MOVF   x95,F
01624:  BNZ   1630
....................    {  
....................       RP_Read_Byte_counter = 0; 
01626:  CLRF   x98
01628:  CLRF   x97
....................       RP_Temp_byte = 0x00; 
0162A:  CLRF   x99
....................       return RP_Temp_byte;  
0162C:  MOVFF  399,01
....................    } 
01630:  MOVLB  0
01632:  RETURN 0
....................   
.................... } 
....................  
.................... void RPic_flush() 
.................... { 
....................    while( RPic_Available() ) RPic_Read() ; 
01634:  RCALL  15CA
01636:  MOVF   01,F
01638:  BZ    163E
0163A:  RCALL  15E4
0163C:  BRA    1634
0163E:  GOTO   17C4 (RETURN)
.................... } 
.................... //============================================================================= 
....................  
.................... //$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 
.................... //============================================================================= 
.................... //This section handle the UART port connected to OLD TRANCEIVER________________ 
.................... #define OT_BFR_SIZE 50 
.................... #pin_select TX1=PIN_C6 
.................... #pin_select RX1=PIN_C7   
.................... #use rs232(UART1, baud=115200, parity=N, bits=8, stream=OLD_TRX, errors)  
*
001BE:  BTFSS  F9E.5
001C0:  BRA    01BE
001C2:  MOVFF  FAB,329
001C6:  MOVLB  3
001C8:  MOVFF  FAE,01
001CC:  BTFSS  x29.1
001CE:  BRA    01D4
001D0:  BCF    FAB.4
001D2:  BSF    FAB.4
001D4:  MOVLB  0
001D6:  RETURN 0
*
02770:  BTFSS  F9E.4
02772:  BRA    2770
02774:  MOVWF  FAD
02776:  RETURN 0
....................  
....................  
.................... unsigned int8  OT_Buffer[OT_BFR_SIZE]; 
.................... unsigned int16 OT_Byte_Counter = 0; 
.................... unsigned int8  OT_Overflow = 0; 
.................... unsigned int16 OT_Read_Byte_counter = 0; 
.................... unsigned int8  OT_Temp_byte = 0; 
....................  
.................... #INT_RDA 
.................... Void SERIAL_ISR1()         // MAIN PIC uart interupt loop 
.................... { 
....................    if( OT_Byte_Counter < OT_BFR_SIZE ) 
*
001D8:  MOVLB  3
001DA:  MOVF   xCD,F
001DC:  BNZ   0212
001DE:  MOVF   xCC,W
001E0:  SUBLW  31
001E2:  BNC   0212
....................    { 
....................       OT_Buffer[OT_Byte_Counter] = fgetc(OLD_TRX); 
001E4:  MOVLW  9A
001E6:  ADDWF  xCC,W
001E8:  MOVWF  FE9
001EA:  MOVLW  03
001EC:  ADDWFC xCD,W
001EE:  MOVWF  FEA
001F0:  MOVFF  FEA,51D
001F4:  MOVFF  FE9,51C
001F8:  MOVLB  0
001FA:  RCALL  01BE
001FC:  MOVFF  51D,FEA
00200:  MOVFF  51C,FE9
00204:  MOVFF  01,FEF
....................       OT_Byte_Counter++; 
00208:  MOVLB  3
0020A:  INCF   xCC,F
0020C:  BTFSC  FD8.2
0020E:  INCF   xCD,F
....................    } 
00210:  BRA    021C
....................     
....................    else OT_Overflow = fgetc(OLD_TRX); 
00212:  MOVLB  0
00214:  RCALL  01BE
00216:  MOVFF  01,3CE
0021A:  MOVLB  3
0021C:  BCF    F9E.5
0021E:  MOVLB  0
00220:  GOTO   008C
.................... } 
....................  
.................... unsigned int8 OLDTRX_Available() 
.................... { 
....................    return OT_Byte_Counter ; 
*
014A6:  MOVLB  3
014A8:  MOVFF  3CC,01
014AC:  MOVLB  0
014AE:  GOTO   1504 (RETURN)
.................... } 
....................  
.................... unsigned int8 OLDTRX_Read() 
.................... { 
....................    if (OT_Byte_Counter>0) 
014B2:  MOVLB  3
014B4:  MOVF   xCC,F
014B6:  BNZ   14BC
014B8:  MOVF   xCD,F
014BA:  BZ    14EC
....................    {     
....................       OT_Temp_byte = OT_Buffer[OT_Read_Byte_counter]; 
014BC:  MOVLW  9A
014BE:  ADDWF  xCF,W
014C0:  MOVWF  FE9
014C2:  MOVLW  03
014C4:  ADDWFC xD0,W
014C6:  MOVWF  FEA
014C8:  MOVFF  FEF,3D1
....................        
....................       OT_Byte_Counter--; 
014CC:  MOVF   xCC,W
014CE:  BTFSC  FD8.2
014D0:  DECF   xCD,F
014D2:  DECF   xCC,F
....................       OT_Read_Byte_counter++; 
014D4:  INCF   xCF,F
014D6:  BTFSC  FD8.2
014D8:  INCF   xD0,F
....................       if(OT_Byte_Counter == 0) OT_Read_Byte_counter = 0; 
014DA:  MOVF   xCC,F
014DC:  BNZ   14E6
014DE:  MOVF   xCD,F
014E0:  BNZ   14E6
014E2:  CLRF   xD0
014E4:  CLRF   xCF
....................       return OT_Temp_byte;  
014E6:  MOVFF  3D1,01
014EA:  BRA    14FE
....................    } 
....................     
....................    if (OT_Byte_Counter == 0) 
014EC:  MOVF   xCC,F
014EE:  BNZ   14FE
014F0:  MOVF   xCD,F
014F2:  BNZ   14FE
....................    {  
....................       OT_Read_Byte_counter = 0; 
014F4:  CLRF   xD0
014F6:  CLRF   xCF
....................       OT_Temp_byte = 0x00; 
014F8:  CLRF   xD1
....................       return OT_Temp_byte;  
014FA:  MOVFF  3D1,01
....................    } 
014FE:  MOVLB  0
01500:  RETURN 0
....................   
.................... } 
....................  
.................... void OLDTRX_flush() 
.................... { 
....................    while( OLDTRX_Available() ) OLDTRX_Read() ; 
.................... } 
.................... //============================================================================= 
....................  
....................  
....................  
....................  
....................  
.................... //$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 
.................... //============================================================================= 
.................... //This section handle the UART port connected to OLD TRANCEIVER________________ 
.................... #define NT_BFR_SIZE 100 
.................... #pin_select TX4=PIN_B1 
.................... #pin_select RX4=PIN_B0   
.................... #use rs232(UART4, baud=115200, parity=N, bits=8, stream=NEW_TRX, errors)  
*
00224:  BTFSS  FA6.7
00226:  BRA    0224
00228:  MOVFF  EFF,329
0022C:  MOVFF  EFA,01
00230:  MOVLB  3
00232:  BTFSS  x29.1
00234:  BRA    023E
00236:  MOVLB  E
00238:  BCF    xFF.4
0023A:  BSF    xFF.4
0023C:  MOVLB  3
0023E:  MOVLB  0
00240:  RETURN 0
*
01AEC:  BTFSS  FA6.6
01AEE:  BRA    1AEC
01AF0:  MOVLB  E
01AF2:  MOVWF  xF9
01AF4:  MOVLB  0
01AF6:  RETURN 0
....................  
....................  
.................... unsigned int8  NT_Buffer[NT_BFR_SIZE]; 
.................... unsigned int16 NT_Byte_Counter = 0; 
.................... unsigned int8  NT_Overflow = 0; 
.................... unsigned int16 NT_Read_Byte_counter = 0; 
.................... unsigned int8  NT_Temp_byte = 0; 
....................  
.................... #INT_RDA4 
.................... Void SERIAL_ISR4()         // MAIN PIC uart interupt loop 
.................... { 
....................    if( NT_Byte_Counter < NT_BFR_SIZE ) 
*
00242:  MOVLB  4
00244:  MOVF   x37,F
00246:  BNZ   027C
00248:  MOVF   x36,W
0024A:  SUBLW  63
0024C:  BNC   027C
....................    { 
....................       NT_Buffer[NT_Byte_Counter] = fgetc(NEW_TRX); 
0024E:  MOVLW  D2
00250:  ADDWF  x36,W
00252:  MOVWF  FE9
00254:  MOVLW  03
00256:  ADDWFC x37,W
00258:  MOVWF  FEA
0025A:  MOVFF  FEA,51D
0025E:  MOVFF  FE9,51C
00262:  MOVLB  0
00264:  RCALL  0224
00266:  MOVFF  51D,FEA
0026A:  MOVFF  51C,FE9
0026E:  MOVFF  01,FEF
....................       NT_Byte_Counter++; 
00272:  MOVLB  4
00274:  INCF   x36,F
00276:  BTFSC  FD8.2
00278:  INCF   x37,F
....................    } 
0027A:  BRA    0286
....................     
....................    else NT_Overflow = fgetc(NEW_TRX); 
0027C:  MOVLB  0
0027E:  RCALL  0224
00280:  MOVFF  01,438
00284:  MOVLB  4
00286:  BCF    FA6.7
00288:  MOVLB  0
0028A:  GOTO   008C
.................... } 
....................  
.................... unsigned int8 NEWTRX_Available() 
.................... { 
....................   return NT_Byte_Counter ; 
*
013E4:  MOVLB  4
013E6:  MOVFF  436,01
013EA:  MOVLB  0
013EC:  RETURN 0
.................... } 
....................  
.................... unsigned int8 NEWTRX_Read() 
.................... { 
....................    if (NT_Byte_Counter>0) 
013EE:  MOVLB  4
013F0:  MOVF   x36,F
013F2:  BNZ   13F8
013F4:  MOVF   x37,F
013F6:  BZ    142A
....................    {     
....................       NT_Temp_byte = NT_Buffer[NT_Read_Byte_counter]; 
013F8:  MOVLW  D2
013FA:  ADDWF  x39,W
013FC:  MOVWF  FE9
013FE:  MOVLW  03
01400:  ADDWFC x3A,W
01402:  MOVWF  FEA
01404:  MOVFF  FEF,43B
....................        
....................       NT_Byte_Counter--; 
01408:  MOVF   x36,W
0140A:  BTFSC  FD8.2
0140C:  DECF   x37,F
0140E:  DECF   x36,F
....................       NT_Read_Byte_counter++; 
01410:  INCF   x39,F
01412:  BTFSC  FD8.2
01414:  INCF   x3A,F
....................       if(NT_Byte_Counter == 0) NT_Read_Byte_counter = 0; 
01416:  MOVF   x36,F
01418:  BNZ   1422
0141A:  MOVF   x37,F
0141C:  BNZ   1422
0141E:  CLRF   x3A
01420:  CLRF   x39
....................       return NT_Temp_byte;  
01422:  MOVFF  43B,01
01426:  BRA    1434
....................    } 
01428:  BRA    1434
....................     
....................    else 
....................    {  
....................       NT_Read_Byte_counter = 0; 
0142A:  CLRF   x3A
0142C:  CLRF   x39
....................       NT_Temp_byte = 0x00; 
0142E:  CLRF   x3B
....................       return NT_Temp_byte;  
01430:  MOVFF  43B,01
....................    } 
01434:  MOVLB  0
01436:  RETURN 0
....................   
.................... } 
....................  
.................... void NEWTRX_flush() 
.................... { 
....................    while( NEWTRX_Available() ) NEWTRX_Read() ; 
*
056C4:  CALL   13E4
056C8:  MOVF   01,F
056CA:  BZ    56D2
056CC:  CALL   13EE
056D0:  BRA    56C4
056D2:  GOTO   5768 (RETURN)
.................... } 
.................... //============================================================================= 
....................  
....................  
.................... // just printing a line________________________________________________________ 
.................... void printline() 
.................... { 
....................    fprintf(PC,"\n\r"); 
*
015B4:  MOVLW  0A
015B6:  MOVLB  5
015B8:  MOVWF  x05
015BA:  MOVLB  0
015BC:  RCALL  10D8
015BE:  MOVLW  0D
015C0:  MOVLB  5
015C2:  MOVWF  x05
015C4:  MOVLB  0
015C6:  RCALL  10D8
015C8:  RETURN 0
.................... } 
....................  
.................... // using this function we can make any data array clear________________________ 
.................... void CLEAR_DATA_ARRAY(unsigned int8 array[], int array_size) 
.................... {    
....................    for(int i = 0; i < array_size; i++) 
*
01594:  MOVLB  4
01596:  CLRF   xF2
01598:  MOVF   xF1,W
0159A:  SUBWF  xF2,W
0159C:  BC    15B0
....................    { 
....................       array[i] = 0 ; 
0159E:  MOVF   xF2,W
015A0:  ADDWF  xEF,W
015A2:  MOVWF  FE9
015A4:  MOVLW  00
015A6:  ADDWFC xF0,W
015A8:  MOVWF  FEA
015AA:  CLRF   FEF
015AC:  INCF   xF2,F
015AE:  BRA    1598
....................    } 
015B0:  MOVLB  0
015B2:  RETURN 0
.................... } 
....................  
.................... // crc calculating function____________________________________________________ 
.................... #define _DATA_SIZE 160 
.................... unsigned int8 cal_data[_DATA_SIZE]; 
....................  
.................... unsigned int16 CALCULATE_CRC(unsigned int8 data[], unsigned int8 data_number) 
*
0243E:  MOVLB  5
02440:  CLRF   x08
02442:  CLRF   x07
02444:  SETF   x06
02446:  SETF   x05
02448:  CLRF   x0C
0244A:  CLRF   x0B
0244C:  MOVLW  84
0244E:  MOVWF  x0A
02450:  MOVLW  08
02452:  MOVWF  x09
.................... { 
....................    unsigned int32 crcReg = 0xFFFF;    
....................    unsigned int32 calc   = 0x8408;      
....................    unsigned int8 w;             
....................    int32 i;                     
....................    int32 k;                      
....................     
....................    for(k = 0; k < data_number; k++) 
02454:  CLRF   x15
02456:  CLRF   x14
02458:  CLRF   x13
0245A:  CLRF   x12
0245C:  MOVF   x15,F
0245E:  BNZ   2530
02460:  MOVF   x14,F
02462:  BNZ   2530
02464:  MOVF   x13,F
02466:  BNZ   2530
02468:  MOVF   x04,W
0246A:  SUBWF  x12,W
0246C:  BC    2530
....................    { 
....................       cal_data[k] = data[k];    
0246E:  MOVLW  3C
02470:  ADDWF  x12,W
02472:  MOVWF  01
02474:  MOVLW  04
02476:  ADDWFC x13,W
02478:  MOVWF  03
0247A:  MOVF   x02,W
0247C:  ADDWF  x12,W
0247E:  MOVWF  FE9
02480:  MOVF   x03,W
02482:  ADDWFC x13,W
02484:  MOVWF  FEA
02486:  MOVFF  FEF,518
0248A:  MOVFF  03,FEA
0248E:  MOVFF  01,FE9
02492:  MOVFF  518,FEF
....................  
....................       for(i = 0; i < 8; i++) 
02496:  CLRF   x11
02498:  CLRF   x10
0249A:  CLRF   x0F
0249C:  CLRF   x0E
0249E:  MOVF   x11,F
024A0:  BNZ   251E
024A2:  MOVF   x10,F
024A4:  BNZ   251E
024A6:  MOVF   x0F,F
024A8:  BNZ   251E
024AA:  MOVF   x0E,W
024AC:  SUBLW  07
024AE:  BNC   251E
....................       { 
....................          w = (crcReg ^ cal_data[k]) & 0x0001; 
024B0:  MOVLW  3C
024B2:  ADDWF  x12,W
024B4:  MOVWF  FE9
024B6:  MOVLW  04
024B8:  ADDWFC x13,W
024BA:  MOVWF  FEA
024BC:  MOVF   FEF,W
024BE:  XORWF  x05,W
024C0:  MOVWF  x16
024C2:  MOVF   x16,W
024C4:  ANDLW  01
024C6:  MOVWF  x0D
....................          crcReg = crcReg >> 1; 
024C8:  BCF    FD8.0
024CA:  RRCF   x08,F
024CC:  RRCF   x07,F
024CE:  RRCF   x06,F
024D0:  RRCF   x05,F
....................  
....................          if(w == 1) 
024D2:  DECFSZ x0D,W
024D4:  BRA    24E6
....................          { 
....................             crcReg = crcReg ^ calc; 
024D6:  MOVF   x09,W
024D8:  XORWF  x05,F
024DA:  MOVF   x0A,W
024DC:  XORWF  x06,F
024DE:  MOVF   x0B,W
024E0:  XORWF  x07,F
024E2:  MOVF   x0C,W
024E4:  XORWF  x08,F
....................          } 
....................  
....................          cal_data[k] = cal_data[k] >> 1; 
024E6:  MOVLW  3C
024E8:  ADDWF  x12,W
024EA:  MOVWF  01
024EC:  MOVLW  04
024EE:  ADDWFC x13,W
024F0:  MOVWF  03
024F2:  MOVLW  3C
024F4:  ADDWF  x12,W
024F6:  MOVWF  FE9
024F8:  MOVLW  04
024FA:  ADDWFC x13,W
024FC:  MOVWF  FEA
024FE:  BCF    FD8.0
02500:  RRCF   FEF,W
02502:  MOVFF  03,FEA
02506:  MOVFF  01,FE9
0250A:  MOVWF  FEF
0250C:  MOVLW  01
0250E:  ADDWF  x0E,F
02510:  BTFSC  FD8.0
02512:  INCF   x0F,F
02514:  BTFSC  FD8.2
02516:  INCF   x10,F
02518:  BTFSC  FD8.2
0251A:  INCF   x11,F
0251C:  BRA    249E
....................       } 
0251E:  MOVLW  01
02520:  ADDWF  x12,F
02522:  BTFSC  FD8.0
02524:  INCF   x13,F
02526:  BTFSC  FD8.2
02528:  INCF   x14,F
0252A:  BTFSC  FD8.2
0252C:  INCF   x15,F
0252E:  BRA    245C
....................    } 
....................  
....................    crcReg = crcReg ^ 0xFFFF;    
02530:  MOVLW  FF
02532:  XORWF  x05,F
02534:  XORWF  x06,F
....................    return crcReg; 
02536:  MOVFF  505,01
0253A:  MOVFF  506,02
0253E:  MOVLB  0
02540:  RETURN 0
.................... } 
....................  
.................... unsigned int16 CALCULATE_CRC_(unsigned int8 data[], unsigned int8 data_number) 
.................... { 
....................    unsigned int32 crcReg = 0xFFFF;    
....................    unsigned int32 calc   = 0x8408;      
....................    unsigned int8 w;             
....................    int32 i;                     
....................    int32 k;                      
....................     
....................    for(k = 1; k < data_number; k++) 
....................    { 
....................       cal_data[k] = data[k];    
....................  
....................       for(i = 0; i < 8; i++) 
....................       { 
....................          w = (crcReg ^ cal_data[k]) & 0x0001; 
....................          crcReg = crcReg >> 1; 
....................  
....................          if(w == 1) 
....................          { 
....................             crcReg = crcReg ^ calc; 
....................          } 
....................  
....................          cal_data[k] = cal_data[k] >> 1; 
....................       } 
....................    } 
....................  
....................    crcReg = crcReg ^ 0xFFFF;    
....................    return crcReg; 
.................... } 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
.................... // flash memory functions///////////////////////////////////////////////////////////////////////////////////////////////////////////// 
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
.................... #use spi(MASTER,CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=1000000, BITS=8, STREAM=FM, MODE=0) //FLASH_M_______COM 
*
02332:  MOVLB  5
02334:  MOVF   x10,W
02336:  SUBLW  08
02338:  BZ    2342
0233A:  MOVWF  x11
0233C:  RLCF   x0F,F
0233E:  DECFSZ x11,F
02340:  BRA    233C
02342:  BSF    F96.0
02344:  BCF    F96.6
02346:  BCF    F96.1
02348:  BCF    F8D.1
0234A:  MOVFF  510,511
0234E:  BTFSS  x0F.7
02350:  BCF    F8D.6
02352:  BTFSC  x0F.7
02354:  BSF    F8D.6
02356:  RLCF   x0F,F
02358:  BSF    F8D.1
0235A:  RLCF   01,F
0235C:  BTFSS  F84.0
0235E:  BCF    01.0
02360:  BTFSC  F84.0
02362:  BSF    01.0
02364:  BCF    F8D.1
02366:  DECFSZ x11,F
02368:  BRA    234E
0236A:  MOVLB  0
0236C:  RETURN 0
.................... //E2 chip select 
....................  
.................... unsigned int8 adsress[4]; 
.................... //unsigned int8 _data; 
....................  
.................... void FM_WRITE_ENABLE() 
.................... { 
....................   Output_low(Pin_E2); 
*
03B04:  BCF    F96.2
03B06:  BCF    F8D.2
....................   spi_xfer(FM,0x06);                 
03B08:  MOVLW  06
03B0A:  MOVLB  5
03B0C:  MOVWF  x0F
03B0E:  MOVLW  08
03B10:  MOVWF  x10
03B12:  MOVLB  0
03B14:  CALL   2332
....................   Output_high(Pin_E2); 
03B18:  BCF    F96.2
03B1A:  BSF    F8D.2
03B1C:  RETURN 0
.................... } 
....................  
.................... void FM_SECTOR_ERASE(unsigned int32 sector_address,char sector_size, unsigned int16 delay = 1000) 
.................... { 
....................     
....................    adsress[0]  = (unsigned int8)((sector_address>>24) & 0xFF);   // 0x __ 00 00 00 
03B1E:  MOVLB  4
03B20:  MOVFF  4EF,4DC
03B24:  CLRF   03
....................    adsress[1]  = (unsigned int8)((sector_address>>16) & 0xFF);   // 0x 00 __ 00 00 
03B26:  MOVFF  4EE,4DD
03B2A:  CLRF   03
....................    adsress[2]  = (unsigned int8)((sector_address>>8)  & 0xFF);   // 0x 00 00 __ 00 
03B2C:  MOVFF  4ED,4DE
03B30:  CLRF   03
....................    adsress[3]  = (unsigned int8)((sector_address)     & 0xFF);   // 0x 00 00 00 __ 
03B32:  MOVFF  4EC,4DF
03B36:  CLRF   03
....................     
....................    FM_WRITE_ENABLE(); 
03B38:  MOVLB  0
03B3A:  RCALL  3B04
....................    Output_low(Pin_E2);             //lower the CS PIN 
03B3C:  BCF    F96.2
03B3E:  BCF    F8D.2
....................  
....................    /////////////////////////////////////////////////////////////////// 
....................  
....................    if( Sector_size == 4  ) spi_xfer(FM,0x21);                    // 4KB Sector erase 
03B40:  MOVLB  4
03B42:  MOVF   xF0,W
03B44:  SUBLW  04
03B46:  BNZ   3B5A
03B48:  MOVLW  21
03B4A:  MOVLB  5
03B4C:  MOVWF  x0F
03B4E:  MOVLW  08
03B50:  MOVWF  x10
03B52:  MOVLB  0
03B54:  CALL   2332
03B58:  MOVLB  4
....................    if( Sector_size == 32 ) spi_xfer(FM,0x5C);                    // 32KB Sector erase 
03B5A:  MOVF   xF0,W
03B5C:  SUBLW  20
03B5E:  BNZ   3B72
03B60:  MOVLW  5C
03B62:  MOVLB  5
03B64:  MOVWF  x0F
03B66:  MOVLW  08
03B68:  MOVWF  x10
03B6A:  MOVLB  0
03B6C:  CALL   2332
03B70:  MOVLB  4
....................    if( Sector_size == 64 ) spi_xfer(FM,0xDC);                    // 64KB Sector erase 
03B72:  MOVF   xF0,W
03B74:  SUBLW  40
03B76:  BNZ   3B8A
03B78:  MOVLW  DC
03B7A:  MOVLB  5
03B7C:  MOVWF  x0F
03B7E:  MOVLW  08
03B80:  MOVWF  x10
03B82:  MOVLB  0
03B84:  CALL   2332
03B88:  MOVLB  4
....................     
....................    spi_xfer(FM,adsress[0]);    
03B8A:  MOVFF  4DC,50F
03B8E:  MOVLW  08
03B90:  MOVLB  5
03B92:  MOVWF  x10
03B94:  MOVLB  0
03B96:  CALL   2332
....................    spi_xfer(FM,adsress[1]);     
03B9A:  MOVFF  4DD,50F
03B9E:  MOVLW  08
03BA0:  MOVLB  5
03BA2:  MOVWF  x10
03BA4:  MOVLB  0
03BA6:  CALL   2332
....................    spi_xfer(FM,adsress[2]);     
03BAA:  MOVFF  4DE,50F
03BAE:  MOVLW  08
03BB0:  MOVLB  5
03BB2:  MOVWF  x10
03BB4:  MOVLB  0
03BB6:  CALL   2332
....................    spi_xfer(FM,adsress[3]); 
03BBA:  MOVFF  4DF,50F
03BBE:  MOVLW  08
03BC0:  MOVLB  5
03BC2:  MOVWF  x10
03BC4:  MOVLB  0
03BC6:  CALL   2332
....................    ////////////////////////////////////////////////////////////////// 
....................    Output_high(Pin_E2);           //take CS PIN higher back 
03BCA:  BCF    F96.2
03BCC:  BSF    F8D.2
....................    delay_ms(delay);  
03BCE:  MOVFF  4F2,4F3
03BD2:  MOVLB  4
03BD4:  INCF   xF3,F
03BD6:  DECF   xF3,F
03BD8:  BTFSC  FD8.2
03BDA:  BRA    3BEA
03BDC:  MOVLB  5
03BDE:  SETF   x04
03BE0:  MOVLB  0
03BE2:  CALL   10AE
03BE6:  MOVLB  4
03BE8:  BRA    3BD6
03BEA:  MOVFF  4F1,504
03BEE:  MOVLB  0
03BF0:  CALL   10AE
03BF4:  RETURN 0
.................... } 
....................  
.................... void FM_BYTE_WRITE(unsigned int32 byte_address, unsigned int8 data) 
.................... { 
....................     
....................    //Byte extraction 
....................    adsress[0]  = (unsigned int8)((byte_address>>24) & 0xFF);   // 0x __ 00 00 00 
03BF6:  MOVLB  4
03BF8:  MOVFF  4F4,4DC
03BFC:  CLRF   03
....................    adsress[1]  = (unsigned int8)((byte_address>>16) & 0xFF);   // 0x 00 __ 00 00 
03BFE:  MOVFF  4F3,4DD
03C02:  CLRF   03
....................    adsress[2]  = (unsigned int8)((byte_address>>8)  & 0xFF);   // 0x 00 00 __ 00 
03C04:  MOVFF  4F2,4DE
03C08:  CLRF   03
....................    adsress[3]  = (unsigned int8)((byte_address)     & 0xFF);   // 0x 00 00 00 __ 
03C0A:  MOVFF  4F1,4DF
03C0E:  CLRF   03
....................   
....................    FM_WRITE_ENABLE(); 
03C10:  MOVLB  0
03C12:  RCALL  3B04
....................    Output_low(Pin_E2);             //lower the CS PIN 
03C14:  BCF    F96.2
03C16:  BCF    F8D.2
....................    /////////////////////////////////////////////////////////////////// 
....................    spi_xfer(FM,0x12);         //Byte WRITE COMAND  (0x12) 
03C18:  MOVLW  12
03C1A:  MOVLB  5
03C1C:  MOVWF  x0F
03C1E:  MOVLW  08
03C20:  MOVWF  x10
03C22:  MOVLB  0
03C24:  CALL   2332
....................    spi_xfer(FM,adsress[0]);     
03C28:  MOVFF  4DC,50F
03C2C:  MOVLW  08
03C2E:  MOVLB  5
03C30:  MOVWF  x10
03C32:  MOVLB  0
03C34:  CALL   2332
....................    spi_xfer(FM,adsress[1]);     
03C38:  MOVFF  4DD,50F
03C3C:  MOVLW  08
03C3E:  MOVLB  5
03C40:  MOVWF  x10
03C42:  MOVLB  0
03C44:  CALL   2332
....................    spi_xfer(FM,adsress[2]);     
03C48:  MOVFF  4DE,50F
03C4C:  MOVLW  08
03C4E:  MOVLB  5
03C50:  MOVWF  x10
03C52:  MOVLB  0
03C54:  CALL   2332
....................    spi_xfer(FM,adsress[3]); 
03C58:  MOVFF  4DF,50F
03C5C:  MOVLW  08
03C5E:  MOVLB  5
03C60:  MOVWF  x10
03C62:  MOVLB  0
03C64:  CALL   2332
....................  
....................    spi_xfer(FM,data);  
03C68:  MOVFF  4F5,50F
03C6C:  MOVLW  08
03C6E:  MOVLB  5
03C70:  MOVWF  x10
03C72:  MOVLB  0
03C74:  CALL   2332
....................    ////////////////////////////////////////////////////////////////// 
....................    Output_high(Pin_E2);           //take CS PIN higher back  
03C78:  BCF    F96.2
03C7A:  BSF    F8D.2
....................     
....................    return; 
03C7C:  RETURN 0
.................... } 
....................  
.................... unsigned int8 FM_BYTE_READ_(unsigned int32 ADDRESS) 
.................... { 
....................    //Byte extraction 
....................    adsress[0]  = (unsigned int8)( (ADDRESS & 0xFF000000) >> 24 );    
*
0236E:  MOVLB  5
02370:  CLRF   x0F
02372:  CLRF   x10
02374:  CLRF   x11
02376:  MOVFF  50D,4DC
0237A:  CLRF   03
....................    adsress[1]  = (unsigned int8)( (ADDRESS & 0x00FF0000) >> 16 );    
0237C:  CLRF   x0F
0237E:  CLRF   x10
02380:  CLRF   x12
02382:  MOVFF  50C,4DD
02386:  MOVFF  512,01
0238A:  CLRF   03
....................    adsress[2]  = (unsigned int8)( (ADDRESS & 0x0000FF00) >>  8 );    
0238C:  CLRF   x0F
0238E:  CLRF   x11
02390:  CLRF   x12
02392:  MOVFF  50B,4DE
02396:  MOVFF  511,01
0239A:  MOVFF  512,02
0239E:  CLRF   03
....................    adsress[3]  = (unsigned int8)( (ADDRESS & 0x000000FF)       );    
023A0:  MOVFF  50A,4DF
023A4:  CLRF   03
....................     
....................    Output_Low(PIN_E2);                //lower the CS PIN 
023A6:  BCF    F96.2
023A8:  BCF    F8D.2
....................    ////////////////////////////////////////////////////////////////// 
....................    spi_xfer(FM,0X13);  //READ DATA COMAND   (0x13) 
023AA:  MOVLW  13
023AC:  MOVWF  x0F
023AE:  MOVLW  08
023B0:  MOVWF  x10
023B2:  MOVLB  0
023B4:  RCALL  2332
....................    spi_xfer(FM,adsress[0]); 
023B6:  MOVFF  4DC,50F
023BA:  MOVLW  08
023BC:  MOVLB  5
023BE:  MOVWF  x10
023C0:  MOVLB  0
023C2:  RCALL  2332
....................    spi_xfer(FM,adsress[1]); 
023C4:  MOVFF  4DD,50F
023C8:  MOVLW  08
023CA:  MOVLB  5
023CC:  MOVWF  x10
023CE:  MOVLB  0
023D0:  RCALL  2332
....................    spi_xfer(FM,adsress[2]); 
023D2:  MOVFF  4DE,50F
023D6:  MOVLW  08
023D8:  MOVLB  5
023DA:  MOVWF  x10
023DC:  MOVLB  0
023DE:  RCALL  2332
....................    spi_xfer(FM,adsress[3]); 
023E0:  MOVFF  4DF,50F
023E4:  MOVLW  08
023E6:  MOVLB  5
023E8:  MOVWF  x10
023EA:  MOVLB  0
023EC:  RCALL  2332
....................    char _data = spi_xfer(FM); 
023EE:  MOVLW  01
023F0:  MOVLB  5
023F2:  MOVWF  x0F
023F4:  MOVLW  08
023F6:  MOVWF  x10
023F8:  MOVLB  0
023FA:  RCALL  2332
023FC:  MOVF   01,W
023FE:  MOVFF  01,50E
....................    ////////////////////////////////////////////////////////////////// 
....................    Output_High(PIN_E2);;               //take CS PIN higher back 
02402:  BCF    F96.2
02404:  BSF    F8D.2
....................     
....................    return _data; 
02406:  MOVLB  5
02408:  MOVFF  50E,01
0240C:  MOVLB  0
0240E:  RETURN 0
.................... } 
....................  
.................... char PRF = 0; 
....................  
.................... unsigned int8 FM_BYTE_READ(unsigned int32 ADDRESS) 
.................... { 
....................    if( PRF == 0x00) 
....................    { 
....................       //Byte extraction 
....................       adsress[0]  = (unsigned int8)( (ADDRESS & 0xFF000000) >> 24 );    
....................       adsress[1]  = (unsigned int8)( (ADDRESS & 0x00FF0000) >> 16 );    
....................       adsress[2]  = (unsigned int8)( (ADDRESS & 0x0000FF00) >>  8 );    
....................       adsress[3]  = (unsigned int8)( (ADDRESS & 0x000000FF)       );    
....................       Output_LOW(PIN_E2);      
....................       spi_xfer(FM,0X13);  //READ DATA COMAND   (0x13) 
....................       spi_xfer(FM,adsress[0]); 
....................       spi_xfer(FM,adsress[1]); 
....................       spi_xfer(FM,adsress[2]); 
....................       spi_xfer(FM,adsress[3]); 
....................       PRF = 0xFF; 
....................    } 
....................     
....................    return spi_xfer(FM); 
.................... } 
.................... /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
....................     
....................  
....................  
.................... #include <CPic_RPic.c> 
....................  
....................  
.................... // this functions will check reset pic UART port incoming 
.................... void CHECK_UART_INCOMING_FROM_RESET_PIC() 
.................... { 
....................    if( RPic_available() ) 
*
01740:  RCALL  15CA
01742:  MOVF   01,F
01744:  BZ    17A8
....................    { 
....................       Delay_ms(200); 
01746:  MOVLW  C8
01748:  MOVLB  5
0174A:  MOVWF  x04
0174C:  MOVLB  0
0174E:  RCALL  10AE
....................       for( int i = 0; i<10; i++ ) 
01750:  MOVLB  4
01752:  CLRF   xF3
01754:  MOVF   xF3,W
01756:  SUBLW  09
01758:  BNC   1774
....................       { 
....................          if( RPic_Read() == 0xC0 )  
0175A:  MOVLB  0
0175C:  RCALL  15E4
0175E:  MOVF   01,W
01760:  SUBLW  C0
01762:  BNZ   176E
....................          { 
....................             RPIC_TO_CPIC_ARRAY[0] = 0xC0; 
01764:  MOVLW  C0
01766:  MOVWF  x75
....................             break; 
01768:  MOVLB  4
0176A:  BRA    1774
0176C:  MOVLB  0
....................          } 
0176E:  MOVLB  4
01770:  INCF   xF3,F
01772:  BRA    1754
....................       } 
....................        
....................       for(int i=1; i<=50; i++) 
01774:  MOVLW  01
01776:  MOVWF  xF4
01778:  MOVF   xF4,W
0177A:  SUBLW  32
0177C:  BNC   17A8
....................       { 
....................          RPIC_TO_CPIC_ARRAY[i] = RPIC_Read(); 
0177E:  CLRF   03
01780:  MOVF   xF4,W
01782:  ADDLW  75
01784:  MOVWF  01
01786:  MOVLW  00
01788:  ADDWFC 03,F
0178A:  MOVFF  01,4F5
0178E:  MOVFF  03,4F6
01792:  MOVLB  0
01794:  RCALL  15E4
01796:  MOVFF  4F6,FEA
0179A:  MOVFF  4F5,FE9
0179E:  MOVFF  01,FEF
017A2:  MOVLB  4
017A4:  INCF   xF4,F
017A6:  BRA    1778
017A8:  MOVLB  0
....................       } 
....................    } 
017AA:  GOTO   184C (RETURN)
.................... } 
....................  
.................... // this functions will print received response prom reset pic 
.................... void PRINT_RECIVED_COMMAND_FROM_RESET_PIC() 
.................... { 
....................    Fprintf(PC,"RP_R >> "); 
*
018AA:  MOVLW  8E
018AC:  MOVWF  FF6
018AE:  MOVLW  02
018B0:  MOVWF  FF7
018B2:  MOVLW  00
018B4:  MOVWF  FF8
018B6:  RCALL  111C
....................    for(int i = 0; i<20; i++) 
018B8:  MOVLB  4
018BA:  CLRF   xEB
018BC:  MOVF   xEB,W
018BE:  SUBLW  13
018C0:  BNC   18EE
....................    { 
....................       Fprintf(PC,"%X ",RPIC_TO_CPIC_ARRAY[i]); 
018C2:  CLRF   03
018C4:  MOVF   xEB,W
018C6:  ADDLW  75
018C8:  MOVWF  FE9
018CA:  MOVLW  00
018CC:  ADDWFC 03,W
018CE:  MOVWF  FEA
018D0:  MOVFF  FEF,4EE
018D4:  MOVLW  37
018D6:  MOVWF  xEF
018D8:  MOVLB  0
018DA:  RCALL  11B4
018DC:  MOVLW  20
018DE:  MOVLB  5
018E0:  MOVWF  x05
018E2:  MOVLB  0
018E4:  CALL   10D8
018E8:  MOVLB  4
018EA:  INCF   xEB,F
018EC:  BRA    18BC
....................    } 
....................    printline(); 
018EE:  MOVLB  0
018F0:  RCALL  15B4
018F2:  RETURN 0
....................    //printline(); 
.................... } 
....................  
.................... void COMUNICATION_WITH_RST_PIC_AND_WAIT_FOR_RESPONE(int16 numof_times, int16 time_delay, int16 WT) 
.................... { 
....................    printline(); 
*
017AE:  RCALL  15B4
....................    for(int j=0; j<numof_times; j++) 
017B0:  MOVLB  4
017B2:  CLRF   xF1
017B4:  MOVF   xEC,F
017B6:  BNZ   17C0
017B8:  MOVF   xEB,W
017BA:  SUBWF  xF1,W
017BC:  BTFSC  FD8.0
017BE:  BRA    18A6
....................    { 
....................       RPic_Flush(); 
017C0:  MOVLB  0
017C2:  BRA    1634
....................       Fprintf(PC,"Num of try to reset pic = %d\n\r", j+1)                ; 
017C4:  MOVLW  01
017C6:  MOVLB  4
017C8:  ADDWF  xF1,W
017CA:  MOVWF  xF3
017CC:  MOVLW  98
017CE:  MOVWF  FF6
017D0:  MOVLW  02
017D2:  MOVWF  FF7
017D4:  MOVLW  00
017D6:  MOVWF  FF8
017D8:  MOVLW  1A
017DA:  MOVWF  xF8
017DC:  MOVLB  0
017DE:  RCALL  1184
017E0:  MOVFF  4F3,4F8
017E4:  MOVLW  18
017E6:  MOVLB  4
017E8:  MOVWF  xF9
017EA:  MOVLB  0
017EC:  RCALL  1676
017EE:  MOVLW  0A
017F0:  MOVLB  5
017F2:  MOVWF  x05
017F4:  MOVLB  0
017F6:  RCALL  10D8
017F8:  MOVLW  0D
017FA:  MOVLB  5
017FC:  MOVWF  x05
017FE:  MOVLB  0
01800:  RCALL  10D8
....................        
....................       for( int i = 0; i<20; i++) 
01802:  MOVLB  4
01804:  CLRF   xF2
01806:  MOVF   xF2,W
01808:  SUBLW  13
0180A:  BNC   182A
....................       { 
....................         fputc(CPIC_TO_RPIC_ARRAY[i], RPic); 
0180C:  CLRF   03
0180E:  MOVF   xF2,W
01810:  ADDLW  AC
01812:  MOVWF  FE9
01814:  MOVLW  00
01816:  ADDWFC 03,W
01818:  MOVWF  FEA
0181A:  MOVFF  FEF,4F3
0181E:  MOVF   xF3,W
01820:  MOVLB  0
01822:  BRA    1732
01824:  MOVLB  4
01826:  INCF   xF2,F
01828:  BRA    1806
....................       } 
....................       Delay_ms(WT); 
0182A:  MOVFF  4F0,4F3
0182E:  INCF   xF3,F
01830:  DECF   xF3,F
01832:  BTFSC  FD8.2
01834:  BRA    1842
01836:  MOVLB  5
01838:  SETF   x04
0183A:  MOVLB  0
0183C:  RCALL  10AE
0183E:  MOVLB  4
01840:  BRA    1830
01842:  MOVFF  4EF,504
01846:  MOVLB  0
01848:  RCALL  10AE
....................       CHECK_UART_INCOMING_FROM_RESET_PIC() ; 
0184A:  BRA    1740
....................        
....................       if( RPIC_TO_CPIC_ARRAY[0] == 0xC0 && RPIC_TO_CPIC_ARRAY[19] == 0xc1 ) 
0184C:  MOVF   x75,W
0184E:  SUBLW  C0
01850:  BNZ   186E
01852:  MOVF   x88,W
01854:  SUBLW  C1
01856:  BNZ   186E
....................       { 
....................          Fprintf(PC,"Correct reply from reset pic\n\r"); 
01858:  MOVLW  B8
0185A:  MOVWF  FF6
0185C:  MOVLW  02
0185E:  MOVWF  FF7
01860:  MOVLW  00
01862:  MOVWF  FF8
01864:  RCALL  111C
....................          // it this is the case we have recived response from reset pic we can 
....................          // stop tying 
....................          break; 
01866:  MOVLB  4
01868:  BRA    18A6
....................       } 
0186A:  BRA    18A2
0186C:  MOVLB  0
....................        
....................       else 
....................       { 
....................          Fprintf(PC,"Wrong response from reset pic >> "); 
0186E:  MOVLW  D8
01870:  MOVWF  FF6
01872:  MOVLW  02
01874:  MOVWF  FF7
01876:  MOVLW  00
01878:  MOVWF  FF8
0187A:  RCALL  111C
....................          printline(); 
0187C:  RCALL  15B4
....................          Delay_ms(time_delay); 
0187E:  MOVFF  4EE,4F3
01882:  MOVLB  4
01884:  INCF   xF3,F
01886:  DECF   xF3,F
01888:  BTFSC  FD8.2
0188A:  BRA    1898
0188C:  MOVLB  5
0188E:  SETF   x04
01890:  MOVLB  0
01892:  RCALL  10AE
01894:  MOVLB  4
01896:  BRA    1886
01898:  MOVFF  4ED,504
0189C:  MOVLB  0
0189E:  RCALL  10AE
018A0:  MOVLB  4
....................       } 
018A2:  INCF   xF1,F
018A4:  BRA    17B4
....................    } 
018A6:  MOVLB  0
018A8:  RETURN 0
.................... } 
....................  
.................... void SEND_CW_OLDTRX(); 
.................... void SEND_CW_NEWTRX(); 
....................  
.................... void COMUNICATE_WITH_RSTPIC_EVERY90SEC_AND_ASK_CW_DATA_FROM_MAINPIC(unsigned int16 time) 
.................... { 
....................    if( MLC > time*100 ) 
*
02956:  MOVFF  4E6,4EA
0295A:  MOVFF  4E5,4E9
0295E:  MOVLB  4
02960:  CLRF   xEC
02962:  MOVLW  64
02964:  MOVWF  xEB
02966:  MOVLB  0
02968:  GOTO   1570
0296C:  MOVF   02,W
0296E:  MOVWF  03
02970:  SUBWF  21,W
02972:  BTFSS  FD8.0
02974:  BRA    2B18
02976:  BNZ   2980
02978:  MOVF   20,W
0297A:  SUBWF  01,W
0297C:  BTFSC  FD8.0
0297E:  BRA    2B18
....................    {       
....................       // Reset pic comunication part___________________________________________ 
....................       CLEAR_DATA_ARRAY(CPIC_TO_RPIC_ARRAY, 20); 
02980:  MOVLB  4
02982:  CLRF   xF0
02984:  MOVLW  AC
02986:  MOVWF  xEF
02988:  MOVLW  14
0298A:  MOVWF  xF1
0298C:  MOVLB  0
0298E:  CALL   1594
....................       CLEAR_DATA_ARRAY(RPIC_TO_CPIC_ARRAY, 20); 
02992:  MOVLB  4
02994:  CLRF   xF0
02996:  MOVLW  75
02998:  MOVWF  xEF
0299A:  MOVLW  14
0299C:  MOVWF  xF1
0299E:  MOVLB  0
029A0:  CALL   1594
....................       CPIC_TO_RPIC_ARRAY[0]  = 0xC0; 
029A4:  MOVLW  C0
029A6:  MOVWF  xAC
....................       CPIC_TO_RPIC_ARRAY[1]  = 0xE0; 
029A8:  MOVLW  E0
029AA:  MOVWF  xAD
....................       CPIC_TO_RPIC_ARRAY[19] = 0xC1; 
029AC:  MOVLW  C1
029AE:  MOVWF  xBF
....................        
....................       COMUNICATION_WITH_RST_PIC_AND_WAIT_FOR_RESPONE(2, 2000, 500); 
029B0:  MOVLB  4
029B2:  CLRF   xEC
029B4:  MOVLW  02
029B6:  MOVWF  xEB
029B8:  MOVLW  07
029BA:  MOVWF  xEE
029BC:  MOVLW  D0
029BE:  MOVWF  xED
029C0:  MOVLW  01
029C2:  MOVWF  xF0
029C4:  MOVLW  F4
029C6:  MOVWF  xEF
029C8:  MOVLB  0
029CA:  CALL   17AE
....................       PRINT_RECIVED_COMMAND_FROM_RESET_PIC();  
029CE:  CALL   18AA
....................        
....................       // requesting and transmiting CW data or GMSK packet____________________________________ 
....................       CLEAR_DATA_ARRAY(CPIC_TO_MPIC_ARRAY, 40); 
029D2:  MOVLW  02
029D4:  MOVLB  4
029D6:  MOVWF  xF0
029D8:  MOVLW  E6
029DA:  MOVWF  xEF
029DC:  MOVLW  28
029DE:  MOVWF  xF1
029E0:  MOVLB  0
029E2:  CALL   1594
....................     
....................       CPIC_TO_MPIC_ARRAY[0]  = 0xB0 ;    // header 
029E6:  MOVLW  B0
029E8:  MOVLB  2
029EA:  MOVWF  xE6
....................       CPIC_TO_MPIC_ARRAY[1]  = 0x00 ;    //  
029EC:  CLRF   xE7
....................       CPIC_TO_MPIC_ARRAY[2]  = 0xCA ;    // command 
029EE:  MOVLW  CA
029F0:  MOVWF  xE8
....................       CPIC_TO_MPIC_ARRAY[39] = 0xB1 ;    // footer 
029F2:  MOVLW  B1
029F4:  MOVLB  3
029F6:  MOVWF  x0D
....................        
....................       COMUNICATION_WITH_MAIN_PIC_AND_WAIT_FOR_RESPONE(2, 500,500); 
029F8:  MOVLB  4
029FA:  CLRF   xF0
029FC:  MOVLW  02
029FE:  MOVWF  xEF
02A00:  MOVLW  01
02A02:  MOVWF  xF2
02A04:  MOVLW  F4
02A06:  MOVWF  xF1
02A08:  MOVLW  01
02A0A:  MOVWF  xF4
02A0C:  MOVLW  F4
02A0E:  MOVWF  xF3
02A10:  MOVLB  0
02A12:  CALL   19DE
....................       
....................       if( MPIC_TO_CPIC_ARRAY[0] == 0xB0 && MPIC_TO_CPIC_ARRAY[1] == 0xCA && MPIC_TO_CPIC_ARRAY[31] == 0xB1 ) 
02A16:  MOVLB  2
02A18:  MOVF   xAF,W
02A1A:  SUBLW  B0
02A1C:  BTFSS  FD8.2
02A1E:  BRA    2B00
02A20:  MOVF   xB0,W
02A22:  SUBLW  CA
02A24:  BTFSS  FD8.2
02A26:  BRA    2B00
02A28:  MOVF   xCE,W
02A2A:  SUBLW  B1
02A2C:  BNZ   2B00
....................       { 
....................          for(int i = 0; i<16; i++) 
02A2E:  MOVLB  4
02A30:  CLRF   xE7
02A32:  MOVF   xE7,W
02A34:  SUBLW  0F
02A36:  BNC   2A6C
....................          { 
....................             CW_DATA[i] = MPIC_TO_CPIC_ARRAY[i+2]; 
02A38:  CLRF   03
02A3A:  MOVF   xE7,W
02A3C:  ADDLW  22
02A3E:  MOVWF  01
02A40:  MOVLW  00
02A42:  ADDWFC 03,F
02A44:  MOVFF  03,4EA
02A48:  MOVLW  02
02A4A:  ADDWF  xE7,W
02A4C:  CLRF   03
02A4E:  ADDLW  AF
02A50:  MOVWF  FE9
02A52:  MOVLW  02
02A54:  ADDWFC 03,W
02A56:  MOVWF  FEA
02A58:  MOVFF  FEF,4EB
02A5C:  MOVFF  4EA,FEA
02A60:  MOVFF  01,FE9
02A64:  MOVFF  4EB,FEF
02A68:  INCF   xE7,F
02A6A:  BRA    2A32
....................          } 
....................          Fprintf(PC,"Received CW data ==> "); 
02A6C:  MOVLW  FA
02A6E:  MOVWF  FF6
02A70:  MOVLW  02
02A72:  MOVWF  FF7
02A74:  MOVLW  00
02A76:  MOVWF  FF8
02A78:  MOVLB  0
02A7A:  CALL   111C
....................          for(int i = 0; i<16; i++) fprintf(PC, "%X ", CW_DATA[i]); 
02A7E:  MOVLB  4
02A80:  CLRF   xE8
02A82:  MOVF   xE8,W
02A84:  SUBLW  0F
02A86:  BNC   2AB6
02A88:  CLRF   03
02A8A:  MOVF   xE8,W
02A8C:  ADDLW  22
02A8E:  MOVWF  FE9
02A90:  MOVLW  00
02A92:  ADDWFC 03,W
02A94:  MOVWF  FEA
02A96:  MOVFF  FEF,4EE
02A9A:  MOVLW  37
02A9C:  MOVWF  xEF
02A9E:  MOVLB  0
02AA0:  CALL   11B4
02AA4:  MOVLW  20
02AA6:  MOVLB  5
02AA8:  MOVWF  x05
02AAA:  MOVLB  0
02AAC:  CALL   10D8
02AB0:  MOVLB  4
02AB2:  INCF   xE8,F
02AB4:  BRA    2A82
....................          printline(); 
02AB6:  MOVLB  0
02AB8:  CALL   15B4
....................           
....................               if( CW_FLAG == NEWTRX_CW    ) { SEND_CW_NEWTRX()             ;  CW_INTERVAL = 150 ; }  // AA 
02ABC:  MOVF   x6A,W
02ABE:  SUBWF  x69,W
02AC0:  BNZ   2ACE
02AC2:  GOTO   1AF8
02AC6:  CLRF   1F
02AC8:  MOVLW  96
02ACA:  MOVWF  1E
02ACC:  BRA    2AFE
....................          else if( CW_FLAG == OLDTRX_CW    ) { SEND_CW_OLDTRX()             ;  CW_INTERVAL = 125  ; }  // BB   
02ACE:  MOVF   x6B,W
02AD0:  SUBWF  x69,W
02AD2:  BNZ   2AE0
02AD4:  GOTO   2224
02AD8:  CLRF   1F
02ADA:  MOVLW  7D
02ADC:  MOVWF  1E
02ADE:  BRA    2AFE
....................          else if( CW_FLAG == NEWTRX_1PCKT ) { NEW_TRX_SEND_1PCKT_BEACON()  ;  CW_INTERVAL = 100 ; }  // CC 
02AE0:  MOVF   x6C,W
02AE2:  SUBWF  x69,W
02AE4:  BNZ   2AF0
02AE6:  BRA    2584
02AE8:  CLRF   1F
02AEA:  MOVLW  64
02AEC:  MOVWF  1E
02AEE:  BRA    2AFE
....................          else if( CW_FLAG == OLDTRX_1PCKT ) { OLD_TRX_SEND_1PCKT_BEACON()  ;  CW_INTERVAL = 100; }  // DD 
02AF0:  MOVF   x6D,W
02AF2:  SUBWF  x69,W
02AF4:  BNZ   2AFE
02AF6:  BRA    2778
02AF8:  CLRF   1F
02AFA:  MOVLW  64
02AFC:  MOVWF  1E
02AFE:  MOVLB  2
....................       } 
....................         
....................       MLC = 0; 
02B00:  CLRF   21
02B02:  CLRF   20
....................       CLEAR_DATA_ARRAY(MPIC_TO_CPIC_ARRAY, 32); 
02B04:  MOVLW  02
02B06:  MOVLB  4
02B08:  MOVWF  xF0
02B0A:  MOVLW  AF
02B0C:  MOVWF  xEF
02B0E:  MOVLW  20
02B10:  MOVWF  xF1
02B12:  MOVLB  0
02B14:  CALL   1594
....................    } 
02B18:  GOTO   5A9E (RETURN)
.................... } 
....................  
.................... void UPDATE_RESET_PIC_TIME_BY_COM_PIC(char yr, char mo, char dy, char hr, char mn, char sc) 
.................... { 
....................    CLEAR_DATA_ARRAY(CPIC_TO_RPIC_ARRAY,20); 
*
03704:  MOVLB  4
03706:  CLRF   xF0
03708:  MOVLW  AC
0370A:  MOVWF  xEF
0370C:  MOVLW  14
0370E:  MOVWF  xF1
03710:  MOVLB  0
03712:  CALL   1594
....................     
....................    CPIC_TO_RPIC_ARRAY[0]  = 0xC0;  // header 
03716:  MOVLW  C0
03718:  MOVWF  xAC
....................    CPIC_TO_RPIC_ARRAY[1]  = 0xEA;  // CI 
0371A:  MOVLW  EA
0371C:  MOVWF  xAD
....................    CPIC_TO_RPIC_ARRAY[2]  = yr  ;  
0371E:  MOVFF  4E5,AE
....................    CPIC_TO_RPIC_ARRAY[3]  = mo  ; 
03722:  MOVFF  4E6,AF
....................    CPIC_TO_RPIC_ARRAY[4]  = dy  ; 
03726:  MOVFF  4E7,B0
....................    CPIC_TO_RPIC_ARRAY[5]  = hr  ; 
0372A:  MOVFF  4E8,B1
....................    CPIC_TO_RPIC_ARRAY[6]  = mn  ; 
0372E:  MOVFF  4E9,B2
....................    CPIC_TO_RPIC_ARRAY[7]  = sc  ; 
03732:  MOVFF  4EA,B3
....................   
....................    CPIC_TO_RPIC_ARRAY[19] = 0xC1;  // footer 
03736:  MOVLW  C1
03738:  MOVWF  xBF
....................     
....................    COMUNICATION_WITH_RST_PIC_AND_WAIT_FOR_RESPONE(2, 2000, 400); 
0373A:  MOVLB  4
0373C:  CLRF   xEC
0373E:  MOVLW  02
03740:  MOVWF  xEB
03742:  MOVLW  07
03744:  MOVWF  xEE
03746:  MOVLW  D0
03748:  MOVWF  xED
0374A:  MOVLW  01
0374C:  MOVWF  xF0
0374E:  MOVLW  90
03750:  MOVWF  xEF
03752:  MOVLB  0
03754:  CALL   17AE
....................    PRINT_RECIVED_COMMAND_FROM_RESET_PIC(); 
03758:  CALL   18AA
0375C:  RETURN 0
.................... } 
....................  
.................... #include <CPic_MPic.c> 
.................... // this functions will check reset pic UART port incoming 
.................... void CHECK_UART_INCOMING_FROM_MAIN_PIC() 
.................... { 
....................    if( MPic_available() ) 
*
0196E:  BRA    1902
01970:  MOVF   01,F
01972:  BZ    19DC
....................    { 
....................       Delay_ms(200); 
01974:  MOVLW  C8
01976:  MOVLB  5
01978:  MOVWF  x04
0197A:  MOVLB  0
0197C:  CALL   10AE
....................       for( int i = 0; i<5; i++ ) 
01980:  MOVLB  4
01982:  CLRF   xF7
01984:  MOVF   xF7,W
01986:  SUBLW  04
01988:  BNC   19A6
....................       { 
....................          if( MPic_Read() == 0xB0 )  
0198A:  MOVLB  0
0198C:  RCALL  191E
0198E:  MOVF   01,W
01990:  SUBLW  B0
01992:  BNZ   19A0
....................          { 
....................             MPIC_TO_CPIC_ARRAY[0] = 0xB0; 
01994:  MOVLW  B0
01996:  MOVLB  2
01998:  MOVWF  xAF
....................             break; 
0199A:  MOVLB  4
0199C:  BRA    19A6
0199E:  MOVLB  0
....................          } 
019A0:  MOVLB  4
019A2:  INCF   xF7,F
019A4:  BRA    1984
....................       } 
....................        
....................       for(int i=1; i<=50; i++) 
019A6:  MOVLW  01
019A8:  MOVWF  xF8
019AA:  MOVF   xF8,W
019AC:  SUBLW  32
019AE:  BNC   19DA
....................       { 
....................          MPIC_TO_CPIC_ARRAY[i] = MPIC_Read();          
019B0:  CLRF   03
019B2:  MOVF   xF8,W
019B4:  ADDLW  AF
019B6:  MOVWF  01
019B8:  MOVLW  02
019BA:  ADDWFC 03,F
019BC:  MOVFF  01,4F9
019C0:  MOVFF  03,4FA
019C4:  MOVLB  0
019C6:  RCALL  191E
019C8:  MOVFF  4FA,FEA
019CC:  MOVFF  4F9,FE9
019D0:  MOVFF  01,FEF
019D4:  MOVLB  4
019D6:  INCF   xF8,F
019D8:  BRA    19AA
019DA:  MOVLB  0
....................       } 
....................    } 
019DC:  RETURN 0
.................... } 
....................  
.................... // this functions will print received response prom reset pic 
.................... void PRINT_RECIVED_COMMAND_FROM_MAIN_PIC() 
.................... { 
....................    Fprintf(PC,"MP_R >> "); 
....................    for(int i = 0; i<32; i++) 
....................    { 
....................       Fprintf(PC,"%X ",MPIC_TO_CPIC_ARRAY[i]); 
....................    } 
....................    printline(); 
....................    //printline(); 
.................... } 
....................  
.................... void COMUNICATION_WITH_MAIN_PIC_AND_WAIT_FOR_RESPONE(int16 numof_times, int16 time_delay, int16 wait_time = 200) 
.................... { 
....................    printline(); 
019DE:  RCALL  15B4
....................    for(int j=0; j<numof_times; j++) 
019E0:  MOVLB  4
019E2:  CLRF   xF5
019E4:  MOVF   xF0,F
019E6:  BNZ   19F0
019E8:  MOVF   xEF,W
019EA:  SUBWF  xF5,W
019EC:  BTFSC  FD8.0
019EE:  BRA    1AE8
....................    { 
....................       Fprintf(PC,"Num of try to Main pic = %d\n\r", j+1)                ; 
019F0:  MOVLW  01
019F2:  ADDWF  xF5,W
019F4:  MOVWF  xF7
019F6:  MOVLW  1A
019F8:  MOVWF  FF6
019FA:  MOVLW  03
019FC:  MOVWF  FF7
019FE:  MOVLW  00
01A00:  MOVWF  FF8
01A02:  MOVLW  19
01A04:  MOVWF  xF8
01A06:  MOVLB  0
01A08:  CALL   1184
01A0C:  MOVFF  4F7,4F8
01A10:  MOVLW  18
01A12:  MOVLB  4
01A14:  MOVWF  xF9
01A16:  MOVLB  0
01A18:  RCALL  1676
01A1A:  MOVLW  0A
01A1C:  MOVLB  5
01A1E:  MOVWF  x05
01A20:  MOVLB  0
01A22:  CALL   10D8
01A26:  MOVLW  0D
01A28:  MOVLB  5
01A2A:  MOVWF  x05
01A2C:  MOVLB  0
01A2E:  CALL   10D8
....................        
....................       for( int i = 0; i<41; i++) 
01A32:  MOVLB  4
01A34:  CLRF   xF6
01A36:  MOVF   xF6,W
01A38:  SUBLW  28
01A3A:  BNC   1A5A
....................       { 
....................         fputc(CPIC_TO_MPIC_ARRAY[i], MPic); 
01A3C:  CLRF   03
01A3E:  MOVF   xF6,W
01A40:  ADDLW  E6
01A42:  MOVWF  FE9
01A44:  MOVLW  02
01A46:  ADDWFC 03,W
01A48:  MOVWF  FEA
01A4A:  MOVFF  FEF,4F7
01A4E:  MOVF   xF7,W
01A50:  MOVLB  0
01A52:  BRA    18F4
01A54:  MOVLB  4
01A56:  INCF   xF6,F
01A58:  BRA    1A36
....................       } 
....................       Delay_ms(wait_time); 
01A5A:  MOVFF  4F4,4F7
01A5E:  INCF   xF7,F
01A60:  DECF   xF7,F
01A62:  BTFSC  FD8.2
01A64:  BRA    1A74
01A66:  MOVLB  5
01A68:  SETF   x04
01A6A:  MOVLB  0
01A6C:  CALL   10AE
01A70:  MOVLB  4
01A72:  BRA    1A60
01A74:  MOVFF  4F3,504
01A78:  MOVLB  0
01A7A:  CALL   10AE
....................       CHECK_UART_INCOMING_FROM_MAIN_PIC() ; 
01A7E:  RCALL  196E
....................        
....................       if( MPIC_TO_CPIC_ARRAY[0] == 0xB0 && MPIC_TO_CPIC_ARRAY[31] == 0xB1 ) 
01A80:  MOVLB  2
01A82:  MOVF   xAF,W
01A84:  SUBLW  B0
01A86:  BNZ   1AA8
01A88:  MOVF   xCE,W
01A8A:  SUBLW  B1
01A8C:  BNZ   1AA8
....................       { 
....................          Fprintf(PC,"Correct response from main pic\n\r"); 
01A8E:  MOVLW  38
01A90:  MOVWF  FF6
01A92:  MOVLW  03
01A94:  MOVWF  FF7
01A96:  MOVLW  00
01A98:  MOVWF  FF8
01A9A:  MOVLB  0
01A9C:  CALL   111C
....................          // it this is the case we have recived response from reset pic we can 
....................          // stop tying 
....................          break; 
01AA0:  MOVLB  4
01AA2:  BRA    1AE8
....................       } 
01AA4:  BRA    1AE4
01AA6:  MOVLB  2
....................        
....................       else 
....................       { 
....................          Fprintf(PC,"Wrong response from main pic"); 
01AA8:  MOVLW  5A
01AAA:  MOVWF  FF6
01AAC:  MOVLW  03
01AAE:  MOVWF  FF7
01AB0:  MOVLW  00
01AB2:  MOVWF  FF8
01AB4:  MOVLB  0
01AB6:  CALL   111C
....................          printline();  
01ABA:  RCALL  15B4
....................          Delay_ms(time_delay); 
01ABC:  MOVFF  4F2,4F7
01AC0:  MOVLB  4
01AC2:  INCF   xF7,F
01AC4:  DECF   xF7,F
01AC6:  BTFSC  FD8.2
01AC8:  BRA    1AD8
01ACA:  MOVLB  5
01ACC:  SETF   x04
01ACE:  MOVLB  0
01AD0:  CALL   10AE
01AD4:  MOVLB  4
01AD6:  BRA    1AC4
01AD8:  MOVFF  4F1,504
01ADC:  MOVLB  0
01ADE:  CALL   10AE
01AE2:  MOVLB  4
....................       } 
01AE4:  INCF   xF5,F
01AE6:  BRA    19E4
....................    } 
01AE8:  MOVLB  0
01AEA:  RETURN 0
.................... } 
....................  
....................  
.................... // This function is used get shared flash memory acces for given time from main pic______________ 
.................... Void GET_FM_ACCESS_FROM_MAIN_PIC(unsigned int8 sec_) 
.................... { 
....................    CLEAR_DATA_ARRAY(CPIC_TO_MPIC_ARRAY, 40); 
*
0314A:  MOVLW  02
0314C:  MOVLB  4
0314E:  MOVWF  xF0
03150:  MOVLW  E6
03152:  MOVWF  xEF
03154:  MOVLW  28
03156:  MOVWF  xF1
03158:  MOVLB  0
0315A:  CALL   1594
....................     
....................    CPIC_TO_MPIC_ARRAY[0]  = 0xB0 ;    // header 
0315E:  MOVLW  B0
03160:  MOVLB  2
03162:  MOVWF  xE6
....................    CPIC_TO_MPIC_ARRAY[1]  = 0x00 ;    //  
03164:  CLRF   xE7
....................    CPIC_TO_MPIC_ARRAY[2]  = 0xFA ;    // command 
03166:  MOVLW  FA
03168:  MOVWF  xE8
....................    CPIC_TO_MPIC_ARRAY[3]  = sec_ ;    // acces time 
0316A:  MOVFF  4EC,2E9
....................    CPIC_TO_MPIC_ARRAY[39] = 0xB1 ;    // footer 
0316E:  MOVLW  B1
03170:  MOVLB  3
03172:  MOVWF  x0D
....................     
....................    COMUNICATION_WITH_MAIN_PIC_AND_WAIT_FOR_RESPONE(2, 500,200); 
03174:  MOVLB  4
03176:  CLRF   xF0
03178:  MOVLW  02
0317A:  MOVWF  xEF
0317C:  MOVLW  01
0317E:  MOVWF  xF2
03180:  MOVLW  F4
03182:  MOVWF  xF1
03184:  CLRF   xF4
03186:  MOVLW  C8
03188:  MOVWF  xF3
0318A:  MOVLB  0
0318C:  CALL   19DE
03190:  RETURN 0
.................... } 
....................  
....................  
.................... //!Void REQUEST_CW_DATA_FROM_MAIN_PIC() 
.................... //!{ 
.................... //!   CLEAR_DATA_ARRAY(CPIC_TO_MPIC_ARRAY, 40); 
.................... //!    
.................... //!   CPIC_TO_MPIC_ARRAY[0]  = 0xB0 ;    // header 
.................... //!   CPIC_TO_MPIC_ARRAY[1]  = 0x00 ;    //  
.................... //!   CPIC_TO_MPIC_ARRAY[2]  = 0xCA ;    // command 
.................... //!   CPIC_TO_MPIC_ARRAY[39] = 0xB1 ;    // footer 
.................... //!    
.................... //!   COMUNICATION_WITH_MAIN_PIC_AND_WAIT_FOR_RESPONE(1, 500,200); 
.................... //!   
.................... //!   if( MPIC_TO_CPIC_ARRAY[0] == 0xB0 && MPIC_TO_CPIC_ARRAY[1] == 0xCA && MPIC_TO_CPIC_ARRAY[31] == 0xB1 ) 
.................... //!   { 
.................... //!      for(int i = 0; i<16; i++) 
.................... //!      { 
.................... //!         CW_DATA[i] = MPIC_TO_CPIC_ARRAY[i+2]; 
.................... //!      } 
.................... //!      Fprintf(PC,"Received CW data ==> "); 
.................... //!      for(int i = 0; i<16; i++) fprintf(PC, "%X ", CW_DATA[i]); 
.................... //!      printline(); 
.................... //!   } 
.................... //!    
.................... //!   else Fprintf(PC,"CW data not received from Main pic\n\r"); 
.................... //! 
.................... //!} 
....................  
....................  
.................... #include <NEWTRX_Functions.c> 
....................  
.................... void NEW_TRX_RX_MODE() 
.................... { 
....................    Output_Low(TXMODE_PIN);                     // Output_low(PIN_F5);    //PA0 = F6, PA1 = B5  --- 00 
*
01170:  BCF    F97.6
01172:  BCF    F8E.6
....................    fprintf(PC,"NewTRX RX Mode\n\r"); 
01174:  MOVLW  78
01176:  MOVWF  FF6
01178:  MOVLW  03
0117A:  MOVWF  FF7
0117C:  MOVLW  00
0117E:  MOVWF  FF8
01180:  RCALL  111C
01182:  RETURN 0
.................... } 
....................  
.................... void NEW_TRX_TX_MODE() 
.................... { 
....................    Output_High(TXMODE_PIN);                     // Output_high(PIN_F5);    //PA0 = F6, PA1 = B5  --- 00 
*
02410:  BCF    F97.6
02412:  BSF    F8E.6
....................    Delay_ms(500); 
02414:  MOVLW  02
02416:  MOVLB  5
02418:  MOVWF  x02
0241A:  MOVLW  FA
0241C:  MOVWF  x04
0241E:  MOVLB  0
02420:  CALL   10AE
02424:  MOVLB  5
02426:  DECFSZ x02,F
02428:  BRA    241A
....................    fprintf(PC,"NewTRX TX Mode\n\r"); 
0242A:  MOVLW  8A
0242C:  MOVWF  FF6
0242E:  MOVLW  03
02430:  MOVWF  FF7
02432:  MOVLW  00
02434:  MOVWF  FF8
02436:  MOVLB  0
02438:  CALL   111C
0243C:  RETURN 0
.................... } 
....................  
.................... //!void NEW_TRX_CW_MODE() 
.................... //!{ 
.................... //!   Output_High(PIN_F6); Output_low(PIN_F5);    //PA0 = F6, PA1 = B5  --- 00 
.................... //!   delay_ms(250); 
.................... //!   fprintf(PC,"NewTRX CW Mode\n\r"); 
.................... //!} 
....................  
.................... //!// CW transmission related variables 
.................... //!   unsigned int8 CW_FLAG   = 0x00; 
.................... //!   unsigned int8 NEWTRX_CW = 0xAA; 
.................... //!   unsigned int8 OLDTRX_CW = 0xBB; 
.................... //!    
.................... //!// Transceiver operation 
.................... //!   unsigned int8 NEW_TRX_STATUS = 0x00; 
.................... //!   unsigned int8 ON_  = 0xAA; 
.................... //!   unsigned int8 OFF_ = 0xBB; 
....................  
....................  
.................... Void LOAD_CW_MODE_AND_NEW_TRX_STATUS() 
.................... { 
....................    CW_FLAG        = (unsigned int8)( READ_PROGRAM_EEPROM(0x18000) & 0x00FF); 
*
011FA:  MOVFF  FF2,4E9
011FE:  BCF    FF2.7
01200:  MOVLW  01
01202:  MOVWF  FF8
01204:  MOVLW  80
01206:  MOVWF  FF7
01208:  CLRF   FF6
0120A:  TBLRD*+
0120C:  MOVF   FF5,W
0120E:  TBLRD*
01210:  MOVFF  FF5,03
01214:  CLRF   FF8
01216:  MOVLB  4
01218:  BTFSC  xE9.7
0121A:  BSF    FF2.7
0121C:  MOVFF  03,4EA
01220:  MOVFF  FE8,69
01224:  MOVLB  0
....................    NEW_TRX_STATUS = (unsigned int8)( READ_PROGRAM_EEPROM(0x18002) & 0x00FF); 
01226:  MOVFF  FF2,4E9
0122A:  BCF    FF2.7
0122C:  MOVLW  01
0122E:  MOVWF  FF8
01230:  MOVLW  80
01232:  MOVWF  FF7
01234:  MOVLW  02
01236:  MOVWF  FF6
01238:  TBLRD*+
0123A:  MOVF   FF5,W
0123C:  TBLRD*
0123E:  MOVFF  FF5,03
01242:  CLRF   FF8
01244:  MOVLB  4
01246:  BTFSC  xE9.7
01248:  BSF    FF2.7
0124A:  MOVFF  03,4EA
0124E:  MOVFF  FE8,72
01252:  MOVLB  0
....................     
....................    fprintf(PC, "CW Flag flag value  = %X\n\r", CW_FLAG); 
01254:  MOVLW  9C
01256:  MOVWF  FF6
01258:  MOVLW  03
0125A:  MOVWF  FF7
0125C:  MOVLW  00
0125E:  MOVWF  FF8
01260:  MOVLW  16
01262:  MOVLB  4
01264:  MOVWF  xF8
01266:  MOVLB  0
01268:  RCALL  1184
0126A:  MOVFF  69,4EE
0126E:  MOVLW  37
01270:  MOVLB  4
01272:  MOVWF  xEF
01274:  MOVLB  0
01276:  RCALL  11B4
01278:  MOVLW  0A
0127A:  MOVLB  5
0127C:  MOVWF  x05
0127E:  MOVLB  0
01280:  RCALL  10D8
01282:  MOVLW  0D
01284:  MOVLB  5
01286:  MOVWF  x05
01288:  MOVLB  0
0128A:  RCALL  10D8
....................    fprintf(PC, "New TRX Status Flag = %X\n\r", NEW_TRX_STATUS); 
0128C:  MOVLW  B8
0128E:  MOVWF  FF6
01290:  MOVLW  03
01292:  MOVWF  FF7
01294:  MOVLW  00
01296:  MOVWF  FF8
01298:  MOVLW  16
0129A:  MOVLB  4
0129C:  MOVWF  xF8
0129E:  MOVLB  0
012A0:  RCALL  1184
012A2:  MOVFF  72,4EE
012A6:  MOVLW  37
012A8:  MOVLB  4
012AA:  MOVWF  xEF
012AC:  MOVLB  0
012AE:  RCALL  11B4
012B0:  MOVLW  0A
012B2:  MOVLB  5
012B4:  MOVWF  x05
012B6:  MOVLB  0
012B8:  RCALL  10D8
012BA:  MOVLW  0D
012BC:  MOVLB  5
012BE:  MOVWF  x05
012C0:  MOVLB  0
012C2:  RCALL  10D8
....................     
....................         if( CW_FLAG == NEWTRX_CW    ) Fprintf(PC,"CW using NEW TRX  \n\r"); 
012C4:  MOVF   x6A,W
012C6:  SUBWF  x69,W
012C8:  BNZ   12DA
012CA:  MOVLW  D4
012CC:  MOVWF  FF6
012CE:  MOVLW  03
012D0:  MOVWF  FF7
012D2:  MOVLW  00
012D4:  MOVWF  FF8
012D6:  RCALL  111C
012D8:  BRA    132A
....................    else if( CW_FLAG == OLDTRX_CW    ) Fprintf(PC,"CW using OLD TRX  \n\r"); 
012DA:  MOVF   x6B,W
012DC:  SUBWF  x69,W
012DE:  BNZ   12F0
012E0:  MOVLW  EA
012E2:  MOVWF  FF6
012E4:  MOVLW  03
012E6:  MOVWF  FF7
012E8:  MOVLW  00
012EA:  MOVWF  FF8
012EC:  RCALL  111C
012EE:  BRA    132A
....................    else if( CW_FLAG == NEWTRX_1PCKT ) Fprintf(PC,"NEWTRX GMSK Beacon\n\r"); 
012F0:  MOVF   x6C,W
012F2:  SUBWF  x69,W
012F4:  BNZ   1306
012F6:  MOVLW  00
012F8:  MOVWF  FF6
012FA:  MOVLW  04
012FC:  MOVWF  FF7
012FE:  MOVLW  00
01300:  MOVWF  FF8
01302:  RCALL  111C
01304:  BRA    132A
....................    else if( CW_FLAG == OLDTRX_1PCKT ) Fprintf(PC,"OLDTRX GMSK Beacon\n\r"); 
01306:  MOVF   x6D,W
01308:  SUBWF  x69,W
0130A:  BNZ   131C
0130C:  MOVLW  16
0130E:  MOVWF  FF6
01310:  MOVLW  04
01312:  MOVWF  FF7
01314:  MOVLW  00
01316:  MOVWF  FF8
01318:  RCALL  111C
0131A:  BRA    132A
....................    else                               Fprintf(PC,"No CW transmission\n\r"); 
0131C:  MOVLW  2C
0131E:  MOVWF  FF6
01320:  MOVLW  04
01322:  MOVWF  FF7
01324:  MOVLW  00
01326:  MOVWF  FF8
01328:  RCALL  111C
....................     
....................         if( NEW_TRX_STATUS == ON_   ) Fprintf(PC,"New TRX is in on mode\n\r"); 
0132A:  MOVF   x73,W
0132C:  SUBWF  x72,W
0132E:  BNZ   1340
01330:  MOVLW  42
01332:  MOVWF  FF6
01334:  MOVLW  04
01336:  MOVWF  FF7
01338:  MOVLW  00
0133A:  MOVWF  FF8
0133C:  RCALL  111C
0133E:  BRA    1354
....................    else if( NEW_TRX_STATUS == OFF_  ) Fprintf(PC,"New TRX is in off mode\n\r"); 
01340:  MOVF   x74,W
01342:  SUBWF  x72,W
01344:  BNZ   1354
01346:  MOVLW  5A
01348:  MOVWF  FF6
0134A:  MOVLW  04
0134C:  MOVWF  FF7
0134E:  MOVLW  00
01350:  MOVWF  FF8
01352:  RCALL  111C
01354:  RETURN 0
.................... } 
....................  
.................... void ENABLE_DISABLE_NEW_TRX_POWER() 
.................... { 
....................    if( NEW_TRX_STATUS == ON_  ) 
01356:  MOVF   x73,W
01358:  SUBWF  x72,W
0135A:  BNZ   136E
....................    { 
....................       fprintf(PC,"NewTRX Board turned on\n\r"); 
0135C:  MOVLW  74
0135E:  MOVWF  FF6
01360:  MOVLW  04
01362:  MOVWF  FF7
01364:  MOVLW  00
01366:  MOVWF  FF8
01368:  RCALL  111C
....................       OUtput_High(PIN_A3); 
0136A:  BCF    F92.3
0136C:  BSF    F89.3
....................    } 
....................     
....................    if( NEW_TRX_STATUS == OFF_ ) 
0136E:  MOVF   x74,W
01370:  SUBWF  x72,W
01372:  BNZ   1386
....................    { 
....................       fprintf(PC,"NewTRX Board turned OFF\n\r"); 
01374:  MOVLW  8E
01376:  MOVWF  FF6
01378:  MOVLW  04
0137A:  MOVWF  FF7
0137C:  MOVLW  00
0137E:  MOVWF  FF8
01380:  RCALL  111C
....................       OUtput_LOW(PIN_A3);  
01382:  BCF    F92.3
01384:  BCF    F89.3
....................    }  
01386:  RETURN 0
.................... } 
....................  
....................  
.................... // this functions will check NEW tranceiver UART port incoming_________________ 
.................... void CHECK_UART_INCOMING_FROM_NEW_TRX(char header) 
.................... { 
....................    if( NEWTRX_Available() ) 
*
01438:  RCALL  13E4
0143A:  MOVF   01,F
0143C:  BZ    14A0
....................    { 
....................       Delay_ms(100);   
0143E:  MOVLW  64
01440:  MOVLB  5
01442:  MOVWF  x04
01444:  MOVLB  0
01446:  RCALL  10AE
....................        
....................       for(int i = 0; i<10; i++) 
01448:  MOVLB  4
0144A:  CLRF   xE6
0144C:  MOVF   xE6,W
0144E:  SUBLW  09
01450:  BNC   146C
....................       { 
....................          if( NEWTRX_Read() == 0x54 )  
01452:  MOVLB  0
01454:  RCALL  13EE
01456:  MOVF   01,W
01458:  SUBLW  54
0145A:  BNZ   1466
....................          { 
....................             NEWTRX_CMD_BUFFER[0] = 0x54; 
0145C:  MOVLW  54
0145E:  MOVWF  xE3
....................             break; 
01460:  MOVLB  4
01462:  BRA    146C
01464:  MOVLB  0
....................          } 
01466:  MOVLB  4
01468:  INCF   xE6,F
0146A:  BRA    144C
....................       } 
....................        
....................       for(int i=1; i<=50; i++) 
0146C:  MOVLW  01
0146E:  MOVWF  xE7
01470:  MOVF   xE7,W
01472:  SUBLW  32
01474:  BNC   14A0
....................       { 
....................          NEWTRX_CMD_BUFFER[i] = NEWTRX_Read(); 
01476:  CLRF   03
01478:  MOVF   xE7,W
0147A:  ADDLW  E3
0147C:  MOVWF  01
0147E:  MOVLW  00
01480:  ADDWFC 03,F
01482:  MOVFF  01,4E8
01486:  MOVFF  03,4E9
0148A:  MOVLB  0
0148C:  RCALL  13EE
0148E:  MOVFF  4E9,FEA
01492:  MOVFF  4E8,FE9
01496:  MOVFF  01,FEF
0149A:  MOVLB  4
0149C:  INCF   xE7,F
0149E:  BRA    1470
014A0:  MOVLB  0
....................       } 
....................    } 
014A2:  GOTO   5A86 (RETURN)
.................... } 
....................  
....................  
.................... void EXTRACTING_NEW_TRANCEIVER_COMMAND(unsigned int8 sync_byte) 
.................... { 
....................    if( NEWTRX_CMD_BUFFER[0] ==  sync_byte)  // 54 
*
02BA2:  MOVLB  4
02BA4:  MOVF   xE5,W
02BA6:  MOVLB  0
02BA8:  SUBWF  xE3,W
02BAA:  BTFSS  FD8.2
02BAC:  BRA    2E52
....................    { 
....................       for(int j = 11; j<50 ; j++) 
02BAE:  MOVLW  0B
02BB0:  MOVLB  4
02BB2:  MOVWF  xE6
02BB4:  MOVF   xE6,W
02BB6:  SUBLW  31
02BB8:  BTFSS  FD8.0
02BBA:  BRA    2E52
....................       { 
....................          if( NEWTRX_CMD_BUFFER[j-1] == 0x7E && NEWTRX_CMD_BUFFER[j] == 0x7E ) 
02BBC:  MOVLW  01
02BBE:  SUBWF  xE6,W
02BC0:  CLRF   03
02BC2:  ADDLW  E3
02BC4:  MOVWF  FE9
02BC6:  MOVLW  00
02BC8:  ADDWFC 03,W
02BCA:  MOVWF  FEA
02BCC:  MOVF   FEF,W
02BCE:  SUBLW  7E
02BD0:  BTFSS  FD8.2
02BD2:  BRA    2E4E
02BD4:  CLRF   03
02BD6:  MOVF   xE6,W
02BD8:  ADDLW  E3
02BDA:  MOVWF  FE9
02BDC:  MOVLW  00
02BDE:  ADDWFC 03,W
02BE0:  MOVWF  FEA
02BE2:  MOVF   FEF,W
02BE4:  SUBLW  7E
02BE6:  BTFSS  FD8.2
02BE8:  BRA    2E4E
....................          { 
....................             printline(); 
02BEA:  MOVLB  0
02BEC:  CALL   15B4
....................             CLEAR_DATA_ARRAY(NEWTRX_TO_CPIC_ARRAY,50); 
02BF0:  MOVLW  01
02BF2:  MOVLB  4
02BF4:  MOVWF  xF0
02BF6:  MOVLW  1F
02BF8:  MOVWF  xEF
02BFA:  MOVLW  32
02BFC:  MOVWF  xF1
02BFE:  MOVLB  0
02C00:  CALL   1594
....................             for( int i = 0; i<50; i++ ) 
02C04:  MOVLB  4
02C06:  CLRF   xE7
02C08:  MOVF   xE7,W
02C0A:  SUBLW  31
02C0C:  BNC   2C40
....................             { 
....................                NEWTRX_TO_CPIC_ARRAY[i] = NEWTRX_CMD_BUFFER[i] ; 
02C0E:  CLRF   03
02C10:  MOVF   xE7,W
02C12:  ADDLW  1F
02C14:  MOVWF  01
02C16:  MOVLW  01
02C18:  ADDWFC 03,F
02C1A:  MOVFF  03,4EE
02C1E:  CLRF   03
02C20:  MOVF   xE7,W
02C22:  ADDLW  E3
02C24:  MOVWF  FE9
02C26:  MOVLW  00
02C28:  ADDWFC 03,W
02C2A:  MOVWF  FEA
02C2C:  MOVFF  FEF,4EF
02C30:  MOVFF  4EE,FEA
02C34:  MOVFF  01,FE9
02C38:  MOVFF  4EF,FEF
02C3C:  INCF   xE7,F
02C3E:  BRA    2C08
....................             } 
....................              
....................             NEWTRX_RPL = j-1 ; 
02C40:  MOVLW  01
02C42:  SUBWF  xE6,W
02C44:  MOVWF  1D
....................             NEWTRX_TO_CPIC_ARRAY[NEWTRX_RPL] = 0xAA; 
02C46:  CLRF   03
02C48:  MOVF   1D,W
02C4A:  ADDLW  1F
02C4C:  MOVWF  FE9
02C4E:  MOVLW  01
02C50:  ADDWFC 03,W
02C52:  MOVWF  FEA
02C54:  MOVLW  AA
02C56:  MOVWF  FEF
....................              
....................             fprintf( PC,"CMD Size = %u bytes\n\r", NEWTRX_RPL); 
02C58:  MOVLW  A8
02C5A:  MOVWF  FF6
02C5C:  MOVLW  04
02C5E:  MOVWF  FF7
02C60:  MOVLW  00
02C62:  MOVWF  FF8
02C64:  MOVLW  0B
02C66:  MOVWF  xF8
02C68:  MOVLB  0
02C6A:  CALL   1184
02C6E:  MOVFF  1D,4ED
02C72:  MOVLW  1B
02C74:  MOVLB  4
02C76:  MOVWF  xEE
02C78:  MOVLB  0
02C7A:  RCALL  2B1C
02C7C:  MOVLW  B5
02C7E:  MOVWF  FF6
02C80:  MOVLW  04
02C82:  MOVWF  FF7
02C84:  MOVLW  00
02C86:  MOVWF  FF8
02C88:  MOVLW  08
02C8A:  MOVLB  4
02C8C:  MOVWF  xF8
02C8E:  MOVLB  0
02C90:  CALL   1184
....................             fprintf( PC,"Received GS CMD NEWTRX --> "); 
02C94:  MOVLW  BE
02C96:  MOVWF  FF6
02C98:  MOVLW  04
02C9A:  MOVWF  FF7
02C9C:  MOVLW  00
02C9E:  MOVWF  FF8
02CA0:  CALL   111C
....................             for(int i=0; i< NEWTRX_RPL+1 ; i++) 
02CA4:  MOVLB  4
02CA6:  CLRF   xE8
02CA8:  MOVLW  01
02CAA:  ADDWF  1D,W
02CAC:  SUBWF  xE8,W
02CAE:  BC    2CDE
....................             { 
....................                fprintf(PC,"%X ",  NEWTRX_TO_CPIC_ARRAY[i]);       
02CB0:  CLRF   03
02CB2:  MOVF   xE8,W
02CB4:  ADDLW  1F
02CB6:  MOVWF  FE9
02CB8:  MOVLW  01
02CBA:  ADDWFC 03,W
02CBC:  MOVWF  FEA
02CBE:  MOVFF  FEF,4EE
02CC2:  MOVLW  37
02CC4:  MOVWF  xEF
02CC6:  MOVLB  0
02CC8:  CALL   11B4
02CCC:  MOVLW  20
02CCE:  MOVLB  5
02CD0:  MOVWF  x05
02CD2:  MOVLB  0
02CD4:  CALL   10D8
02CD8:  MOVLB  4
02CDA:  INCF   xE8,F
02CDC:  BRA    2CA8
....................             } 
....................             printline();     
02CDE:  MOVLB  0
02CE0:  CALL   15B4
....................              
....................             unsigned int16 CRC     = CALCULATE_CRC(NEWTRX_TO_CPIC_ARRAY, NEWTRX_RPL-2); 
....................             unsigned int16 CMD_CRC = make16( NEWTRX_TO_CPIC_ARRAY[NEWTRX_RPL-1],NEWTRX_TO_CPIC_ARRAY[NEWTRX_RPL-2] ) ; 
02CE4:  MOVLW  02
02CE6:  SUBWF  1D,W
02CE8:  MOVLB  4
02CEA:  MOVWF  xED
02CEC:  MOVLW  01
02CEE:  MOVLB  5
02CF0:  MOVWF  x03
02CF2:  MOVLW  1F
02CF4:  MOVWF  x02
02CF6:  MOVFF  4ED,504
02CFA:  MOVLB  0
02CFC:  CALL   243E
02D00:  MOVFF  02,4EA
02D04:  MOVFF  01,4E9
02D08:  MOVLW  01
02D0A:  SUBWF  1D,W
02D0C:  CLRF   03
02D0E:  ADDLW  1F
02D10:  MOVWF  FE9
02D12:  MOVLW  01
02D14:  ADDWFC 03,W
02D16:  MOVWF  FEA
02D18:  MOVFF  FEF,4EC
02D1C:  MOVLW  02
02D1E:  SUBWF  1D,W
02D20:  CLRF   03
02D22:  ADDLW  1F
02D24:  MOVWF  FE9
02D26:  MOVLW  01
02D28:  ADDWFC 03,W
02D2A:  MOVWF  FEA
02D2C:  MOVFF  FEF,4EB
....................              
....................             if( CRC == CMD_CRC ) 
02D30:  MOVLB  4
02D32:  MOVF   xEB,W
02D34:  SUBWF  xE9,W
02D36:  BNZ   2D66
02D38:  MOVF   xEC,W
02D3A:  SUBWF  xEA,W
02D3C:  BNZ   2D66
....................             { 
....................                fputc(0x7E, NEW_TRX); 
02D3E:  MOVLW  7E
02D40:  MOVLB  0
02D42:  CALL   1AEC
....................                fputc(0xC1, NEW_TRX); 
02D46:  MOVLW  C1
02D48:  CALL   1AEC
....................                fputc(0x7E, NEW_TRX); 
02D4C:  MOVLW  7E
02D4E:  CALL   1AEC
....................                fprintf( PC,"CRC is correct\n\r"); 
02D52:  MOVLW  DA
02D54:  MOVWF  FF6
02D56:  MOVLW  04
02D58:  MOVWF  FF7
02D5A:  MOVLW  00
02D5C:  MOVWF  FF8
02D5E:  CALL   111C
....................             } 
02D62:  BRA    2D8C
02D64:  MOVLB  4
....................              
....................             else 
....................             { 
....................                fprintf( PC,"CRC is wrong\n\r");   
02D66:  MOVLW  EC
02D68:  MOVWF  FF6
02D6A:  MOVLW  04
02D6C:  MOVWF  FF7
02D6E:  MOVLW  00
02D70:  MOVWF  FF8
02D72:  MOVLB  0
02D74:  CALL   111C
....................                CLEAR_DATA_ARRAY(NEWTRX_TO_CPIC_ARRAY,50); 
02D78:  MOVLW  01
02D7A:  MOVLB  4
02D7C:  MOVWF  xF0
02D7E:  MOVLW  1F
02D80:  MOVWF  xEF
02D82:  MOVLW  32
02D84:  MOVWF  xF1
02D86:  MOVLB  0
02D88:  CALL   1594
....................             } 
....................             fprintf( PC,"CMD CRC = %LX\n\r", CMD_CRC); 
02D8C:  MOVLW  FC
02D8E:  MOVWF  FF6
02D90:  MOVLW  04
02D92:  MOVWF  FF7
02D94:  MOVLW  00
02D96:  MOVWF  FF8
02D98:  MOVLW  0A
02D9A:  MOVLB  4
02D9C:  MOVWF  xF8
02D9E:  MOVLB  0
02DA0:  CALL   1184
02DA4:  MOVFF  4EC,4EE
02DA8:  MOVLW  37
02DAA:  MOVLB  4
02DAC:  MOVWF  xEF
02DAE:  MOVLB  0
02DB0:  CALL   11B4
02DB4:  MOVFF  4EB,4EE
02DB8:  MOVLW  37
02DBA:  MOVLB  4
02DBC:  MOVWF  xEF
02DBE:  MOVLB  0
02DC0:  CALL   11B4
02DC4:  MOVLW  0A
02DC6:  MOVLB  5
02DC8:  MOVWF  x05
02DCA:  MOVLB  0
02DCC:  CALL   10D8
02DD0:  MOVLW  0D
02DD2:  MOVLB  5
02DD4:  MOVWF  x05
02DD6:  MOVLB  0
02DD8:  CALL   10D8
....................             fprintf( PC,"CAL CRC = %LX\n\r", CRC    ); 
02DDC:  MOVLW  0C
02DDE:  MOVWF  FF6
02DE0:  MOVLW  05
02DE2:  MOVWF  FF7
02DE4:  MOVLW  00
02DE6:  MOVWF  FF8
02DE8:  MOVLW  0A
02DEA:  MOVLB  4
02DEC:  MOVWF  xF8
02DEE:  MOVLB  0
02DF0:  CALL   1184
02DF4:  MOVFF  4EA,4EE
02DF8:  MOVLW  37
02DFA:  MOVLB  4
02DFC:  MOVWF  xEF
02DFE:  MOVLB  0
02E00:  CALL   11B4
02E04:  MOVFF  4E9,4EE
02E08:  MOVLW  37
02E0A:  MOVLB  4
02E0C:  MOVWF  xEF
02E0E:  MOVLB  0
02E10:  CALL   11B4
02E14:  MOVLW  0A
02E16:  MOVLB  5
02E18:  MOVWF  x05
02E1A:  MOVLB  0
02E1C:  CALL   10D8
02E20:  MOVLW  0D
02E22:  MOVLB  5
02E24:  MOVWF  x05
02E26:  MOVLB  0
02E28:  CALL   10D8
....................              
....................             CLEAR_DATA_ARRAY(NEWTRX_CMD_BUFFER,55); // delete 
02E2C:  MOVLB  4
02E2E:  CLRF   xF0
02E30:  MOVLW  E3
02E32:  MOVWF  xEF
02E34:  MOVLW  37
02E36:  MOVWF  xF1
02E38:  MOVLB  0
02E3A:  CALL   1594
....................             delay_ms(250); 
02E3E:  MOVLW  FA
02E40:  MOVLB  5
02E42:  MOVWF  x04
02E44:  MOVLB  0
02E46:  CALL   10AE
....................             break; 
02E4A:  MOVLB  4
02E4C:  BRA    2E52
....................          } 
02E4E:  INCF   xE6,F
02E50:  BRA    2BB4
02E52:  MOVLB  0
....................       } 
....................    } 
02E54:  GOTO   5AAA (RETURN)
.................... } 
....................  
....................  
.................... Void DELAY_UNTILL_TRX_FINISH_TRANSMITTING_A_PACKET() 
.................... { 
....................    Delay_ms(75); 
*
02542:  MOVLW  4B
02544:  MOVLB  5
02546:  MOVWF  x04
02548:  MOVLB  0
0254A:  CALL   10AE
....................    unsigned int16 ci = 0; 
0254E:  MOVLB  5
02550:  CLRF   x03
02552:  CLRF   x02
....................    while(input(TXDONE_PIN) == 1) 
02554:  BSF    F97.5
02556:  BTFSS  F85.5
02558:  BRA    2580
....................    { 
....................       delay_ms(1);  
0255A:  MOVLW  01
0255C:  MOVWF  x04
0255E:  MOVLB  0
02560:  CALL   10AE
....................       ci++;  
02564:  MOVLB  5
02566:  INCF   x02,F
02568:  BTFSC  FD8.2
0256A:  INCF   x03,F
....................       if(ci>=2000) 
0256C:  MOVF   x03,W
0256E:  SUBLW  06
02570:  BC    257E
02572:  XORLW  FF
02574:  BNZ   257C
02576:  MOVF   x02,W
02578:  SUBLW  CF
0257A:  BC    257E
....................       { 
....................          break; 
0257C:  BRA    2580
....................       } 
0257E:  BRA    2554
....................    } 
02580:  MOVLB  0
02582:  RETURN 0
.................... } 
....................  
.................... Void NEWTRX_SEND_ACKNOWLEDGEMENT(unsigned int8 mode) 
.................... {        
....................    //----Ground stationCall sign---------------[ 0-----5 ] 
....................    CPIC_TO_NEWTRX_ARRAY[0] = GS_callsign_leter_1 ;      
*
03192:  MOVFF  31D,15B
....................    CPIC_TO_NEWTRX_ARRAY[1] = GS_callsign_leter_2 ;                     
03196:  MOVFF  31E,15C
....................    CPIC_TO_NEWTRX_ARRAY[2] = GS_callsign_leter_3 ;      
0319A:  MOVFF  31F,15D
....................    CPIC_TO_NEWTRX_ARRAY[3] = GS_callsign_leter_4 ;      
0319E:  MOVFF  320,15E
....................    CPIC_TO_NEWTRX_ARRAY[4] = GS_callsign_leter_5 ;      
031A2:  MOVFF  321,15F
....................    CPIC_TO_NEWTRX_ARRAY[5] = GS_callsign_leter_6 ;      
031A6:  MOVFF  322,160
....................        
....................    //----Dest SSID-----------------------------[ 6 ] 
....................    CPIC_TO_NEWTRX_ARRAY[6] = 0x30 ;     //char 0 
031AA:  MOVLW  30
031AC:  MOVLB  1
031AE:  MOVWF  x61
....................  
....................    //----Satellite Call Sign-------------------[ 7 - 12 ] 
....................    CPIC_TO_NEWTRX_ARRAY[7]  = ST_callsign_leter_1 ;      
031B0:  MOVFF  323,162
....................    CPIC_TO_NEWTRX_ARRAY[8]  = ST_callsign_leter_2 ;                     
031B4:  MOVFF  324,163
....................    CPIC_TO_NEWTRX_ARRAY[9]  = ST_callsign_leter_3 ;      
031B8:  MOVFF  325,164
....................    CPIC_TO_NEWTRX_ARRAY[10] = ST_callsign_leter_4 ;      
031BC:  MOVFF  326,165
....................    CPIC_TO_NEWTRX_ARRAY[11] = ST_callsign_leter_5 ;      
031C0:  MOVFF  327,166
....................    CPIC_TO_NEWTRX_ARRAY[12] = ST_callsign_leter_6 ;  
031C4:  MOVFF  328,167
....................     
....................    //----Dest SSID-----------------------------[ 13 ] 
....................    CPIC_TO_NEWTRX_ARRAY[13] = 0x30 ;    //char 0 
031C8:  MOVWF  x68
....................     
....................    //----Control-------------------------------[ 14 ] 
....................    CPIC_TO_NEWTRX_ARRAY[14] = 0x3E ;     
031CA:  MOVLW  3E
031CC:  MOVWF  x69
....................     
....................    //----PID-----------------------------------[ 15 ] 
....................    CPIC_TO_NEWTRX_ARRAY[15] = 0xF0 ;     
031CE:  MOVLW  F0
031D0:  MOVWF  x6A
....................  
....................    //----Packet specified data-----------------[ 16 - 21 ] 
....................    CPIC_TO_NEWTRX_ARRAY[16] = 0xFF ; 
031D2:  SETF   x6B
....................    CPIC_TO_NEWTRX_ARRAY[17] = 0xF0 ; 
031D4:  MOVWF  x6C
....................    CPIC_TO_NEWTRX_ARRAY[18] = 0xFf ; 
031D6:  SETF   x6D
....................    CPIC_TO_NEWTRX_ARRAY[19] = 0x00 ; 
031D8:  CLRF   x6E
....................    CPIC_TO_NEWTRX_ARRAY[20] = 0x00 ; 
031DA:  CLRF   x6F
....................    CPIC_TO_NEWTRX_ARRAY[21] = 0x01 ;      // Packet number 
031DC:  MOVLW  01
031DE:  MOVWF  x70
....................     
....................    //----Pay Load------------------------------[ 22 - 102 ] (81 bytes) 
....................     
....................    if( mode == 0x00) 
031E0:  MOVLB  4
031E2:  MOVF   xEF,F
031E4:  BNZ   3206
....................    { 
....................       for (int i = 22; i <= 102 ; i++) 
031E6:  MOVLW  16
031E8:  MOVWF  xF0
031EA:  MOVF   xF0,W
031EC:  SUBLW  66
031EE:  BNC   3206
....................       {       
....................          CPIC_TO_NEWTRX_ARRAY[i] = 0x69 ; 
031F0:  CLRF   03
031F2:  MOVF   xF0,W
031F4:  ADDLW  5B
031F6:  MOVWF  FE9
031F8:  MOVLW  01
031FA:  ADDWFC 03,W
031FC:  MOVWF  FEA
031FE:  MOVLW  69
03200:  MOVWF  FEF
03202:  INCF   xF0,F
03204:  BRA    31EA
....................       } 
....................    } 
....................     
....................    if( mode == 0x01) 
03206:  DECFSZ xEF,W
03208:  BRA    326A
....................    { 
....................       for(int i = 22; i < NEWTRX_RPL+22; i++) 
0320A:  MOVLW  16
0320C:  MOVWF  xF1
0320E:  MOVLW  16
03210:  ADDWF  1D,W
03212:  SUBWF  xF1,W
03214:  BC    324A
....................       {       
....................          CPIC_TO_NEWTRX_ARRAY[i] = NEWTRX_TO_CPIC_ARRAY[i-22] ; 
03216:  CLRF   03
03218:  MOVF   xF1,W
0321A:  ADDLW  5B
0321C:  MOVWF  01
0321E:  MOVLW  01
03220:  ADDWFC 03,F
03222:  MOVFF  03,4F7
03226:  MOVLW  16
03228:  SUBWF  xF1,W
0322A:  CLRF   03
0322C:  ADDLW  1F
0322E:  MOVWF  FE9
03230:  MOVLW  01
03232:  ADDWFC 03,W
03234:  MOVWF  FEA
03236:  MOVFF  FEF,4F8
0323A:  MOVFF  4F7,FEA
0323E:  MOVFF  01,FE9
03242:  MOVFF  4F8,FEF
03246:  INCF   xF1,F
03248:  BRA    320E
....................       } 
....................        
....................       for(int i = NEWTRX_RPL+22; i <= 102; i++) 
0324A:  MOVLW  16
0324C:  ADDWF  1D,W
0324E:  MOVWF  xF2
03250:  MOVF   xF2,W
03252:  SUBLW  66
03254:  BNC   326A
....................       {       
....................          CPIC_TO_NEWTRX_ARRAY[i] = 0x00 ; 
03256:  CLRF   03
03258:  MOVF   xF2,W
0325A:  ADDLW  5B
0325C:  MOVWF  FE9
0325E:  MOVLW  01
03260:  ADDWFC 03,W
03262:  MOVWF  FEA
03264:  CLRF   FEF
03266:  INCF   xF2,F
03268:  BRA    3250
....................       } 
....................    } 
....................     
....................    NEW_TRX_TX_MODE(); // turning on trnaceiver transmit mode 
0326A:  MOVLB  0
0326C:  CALL   2410
....................    unsigned int16 CRC_VALUE  = CALCULATE_CRC(CPIC_TO_NEWTRX_ARRAY, 103);   
03270:  MOVLW  01
03272:  MOVLB  5
03274:  MOVWF  x03
03276:  MOVLW  5B
03278:  MOVWF  x02
0327A:  MOVLW  67
0327C:  MOVWF  x04
0327E:  MOVLB  0
03280:  CALL   243E
03284:  MOVFF  02,4F4
03288:  MOVFF  01,4F3
....................     
....................    CPIC_TO_NEWTRX_ARRAY[103] = (unsigned int8) (  CRC_VALUE       & 0x00FF );  // LOW byte 
0328C:  MOVFF  4F3,1C2
03290:  MOVLB  1
....................    CPIC_TO_NEWTRX_ARRAY[104] = (unsigned int8) ( (CRC_VALUE >> 8) & 0x00FF );  // HIGH byte 
03292:  MOVFF  4F4,1C3
03296:  MOVLB  1
....................     
....................     
....................    fputc(0x7E, NEW_TRX );   // header 
03298:  MOVLW  7E
0329A:  MOVLB  0
0329C:  CALL   1AEC
....................    // trransfering data array to new tranceiver________________ 
....................    for(int i = 0; i<=104; i++) 
032A0:  MOVLB  4
032A2:  CLRF   xF5
032A4:  MOVF   xF5,W
032A6:  SUBLW  68
032A8:  BNC   32CA
....................    { 
....................       fputc(CPIC_TO_NEWTRX_ARRAY[i],NEW_TRX); 
032AA:  CLRF   03
032AC:  MOVF   xF5,W
032AE:  ADDLW  5B
032B0:  MOVWF  FE9
032B2:  MOVLW  01
032B4:  ADDWFC 03,W
032B6:  MOVWF  FEA
032B8:  MOVFF  FEF,4F6
032BC:  MOVF   xF6,W
032BE:  MOVLB  0
032C0:  CALL   1AEC
032C4:  MOVLB  4
032C6:  INCF   xF5,F
032C8:  BRA    32A4
....................    }  
....................    fputc(0x7E, NEW_TRX );  // footer 
032CA:  MOVLW  7E
032CC:  MOVLB  0
032CE:  CALL   1AEC
....................    DELAY_UNTILL_TRX_FINISH_TRANSMITTING_A_PACKET(); 
032D2:  CALL   2542
....................    NEW_TRX_RX_MODE(); // turning on trnaceiver receive mode 
032D6:  CALL   1170
032DA:  RETURN 0
.................... } 
....................  
....................  
.................... //This function will be used to send data packets using New Tranceiver_________ 
.................... Void NEW_TRX_SEND_DATA_PACKETS_TO_GS(unsigned int32 START_ADDRESS,  unsigned int32 NUM_OF_PACKETS ) 
.................... { 
....................    // not changin values assigning____________________________ 
....................    // packet header to new tranceiver 
....................    //----Ground stationCall sign---------------[ 0-----5 ] 
....................    CPIC_TO_NEWTRX_ARRAY[0] = GS_callsign_leter_1 ;      
*
02EB4:  MOVFF  31D,15B
....................    CPIC_TO_NEWTRX_ARRAY[1] = GS_callsign_leter_2 ;                     
02EB8:  MOVFF  31E,15C
....................    CPIC_TO_NEWTRX_ARRAY[2] = GS_callsign_leter_3 ;      
02EBC:  MOVFF  31F,15D
....................    CPIC_TO_NEWTRX_ARRAY[3] = GS_callsign_leter_4 ;      
02EC0:  MOVFF  320,15E
....................    CPIC_TO_NEWTRX_ARRAY[4] = GS_callsign_leter_5 ;      
02EC4:  MOVFF  321,15F
....................    CPIC_TO_NEWTRX_ARRAY[5] = GS_callsign_leter_6 ;      
02EC8:  MOVFF  322,160
....................        
....................    //----Dest SSID-----------------------------[ 6 ] 
....................    CPIC_TO_NEWTRX_ARRAY[6] = 0x30 ;     //char 0 
02ECC:  MOVLW  30
02ECE:  MOVLB  1
02ED0:  MOVWF  x61
....................  
....................    //----Satellite Call Sign-------------------[ 7 - 12 ] 
....................    CPIC_TO_NEWTRX_ARRAY[7]  = ST_callsign_leter_1 ;      
02ED2:  MOVFF  323,162
....................    CPIC_TO_NEWTRX_ARRAY[8]  = ST_callsign_leter_2 ;                     
02ED6:  MOVFF  324,163
....................    CPIC_TO_NEWTRX_ARRAY[9] = ST_callsign_leter_3 ;      
02EDA:  MOVFF  325,164
....................    CPIC_TO_NEWTRX_ARRAY[10] = ST_callsign_leter_4 ;      
02EDE:  MOVFF  326,165
....................    CPIC_TO_NEWTRX_ARRAY[11] = ST_callsign_leter_5 ;      
02EE2:  MOVFF  327,166
....................    CPIC_TO_NEWTRX_ARRAY[12] = ST_callsign_leter_6 ;  
02EE6:  MOVFF  328,167
....................     
....................    //----Dest SSID-----------------------------[ 13 ] 
....................    CPIC_TO_NEWTRX_ARRAY[13] = 0x30 ;    //char 0 
02EEA:  MOVWF  x68
....................     
....................    //----Control-------------------------------[ 14 ] 
....................    CPIC_TO_NEWTRX_ARRAY[14] = 0x3E ;     
02EEC:  MOVLW  3E
02EEE:  MOVWF  x69
....................     
....................    //----PID-----------------------------------[ 15 ] 
....................    CPIC_TO_NEWTRX_ARRAY[15] = 0xF0 ;     
02EF0:  MOVLW  F0
02EF2:  MOVWF  x6A
....................  
....................    //----Packet specified data-----------------[ 16 - 21 ] 
....................    CPIC_TO_NEWTRX_ARRAY[16] = 0xFF ; 
02EF4:  SETF   x6B
....................    CPIC_TO_NEWTRX_ARRAY[17] = 0xF0 ; 
02EF6:  MOVWF  x6C
....................    CPIC_TO_NEWTRX_ARRAY[18] = 0xFf ; 
02EF8:  SETF   x6D
....................    //________________________________________________________________ 
....................     
....................    NEW_TRX_TX_MODE(); // turning on trnaceiver transmit mode 
02EFA:  MOVLB  0
02EFC:  CALL   2410
....................    for(unsigned int32 PN = 1; PN <= NUM_OF_PACKETS ; PN++)    // PN packet number 
02F00:  MOVLB  4
02F02:  CLRF   xFA
02F04:  CLRF   xF9
02F06:  CLRF   xF8
02F08:  MOVLW  01
02F0A:  MOVWF  xF7
02F0C:  MOVF   xFA,W
02F0E:  SUBWF  xF6,W
02F10:  BTFSS  FD8.0
02F12:  BRA    30E4
02F14:  BNZ   2F32
02F16:  MOVF   xF9,W
02F18:  SUBWF  xF5,W
02F1A:  BTFSS  FD8.0
02F1C:  BRA    30E4
02F1E:  BNZ   2F32
02F20:  MOVF   xF8,W
02F22:  SUBWF  xF4,W
02F24:  BTFSS  FD8.0
02F26:  BRA    30E4
02F28:  BNZ   2F32
02F2A:  MOVF   xF7,W
02F2C:  SUBWF  xF3,W
02F2E:  BTFSS  FD8.0
02F30:  BRA    30E4
....................    {  
....................       CPIC_TO_NEWTRX_ARRAY[19] = 0x00 ; 
02F32:  MOVLB  1
02F34:  CLRF   x6E
....................       CPIC_TO_NEWTRX_ARRAY[20] = (unsigned int8) ( (PN >> 8 ) & 0x000000FF ); 
02F36:  MOVFF  4F8,16F
02F3A:  MOVFF  4F9,504
02F3E:  MOVFF  4FA,505
02F42:  MOVLB  5
02F44:  CLRF   03
....................       CPIC_TO_NEWTRX_ARRAY[21] = (unsigned int8) ( (PN      ) & 0x000000FF ); 
02F46:  MOVLB  4
02F48:  MOVFF  4F7,170
02F4C:  CLRF   03
....................        
....................       //----Pay Load------------------------------[ 22 - 102 ] (81 bytes)______ 
....................       // Get data from com flash memory  
....................       for (unsigned int32 i = 22; i <= 102; i++) 
02F4E:  CLRF   xFE
02F50:  CLRF   xFD
02F52:  CLRF   xFC
02F54:  MOVLW  16
02F56:  MOVWF  xFB
02F58:  MOVF   xFE,F
02F5A:  BTFSS  FD8.2
02F5C:  BRA    306A
02F5E:  MOVF   xFD,F
02F60:  BTFSS  FD8.2
02F62:  BRA    306A
02F64:  MOVF   xFC,F
02F66:  BTFSS  FD8.2
02F68:  BRA    306A
02F6A:  MOVF   xFB,W
02F6C:  SUBLW  66
02F6E:  BTFSS  FD8.0
02F70:  BRA    306A
....................       {       
....................          CPIC_TO_NEWTRX_ARRAY[i] = FM_BYTE_READ_( START_ADDRESS + 81*( PN - 1 ) + (i-22) ); 
02F72:  MOVLW  5B
02F74:  ADDWF  xFB,W
02F76:  MOVWF  01
02F78:  MOVLW  01
02F7A:  ADDWFC xFC,W
02F7C:  MOVWF  03
02F7E:  MOVFF  01,502
02F82:  MOVLB  5
02F84:  MOVWF  x03
02F86:  MOVLW  01
02F88:  MOVLB  4
02F8A:  SUBWF  xF7,W
02F8C:  MOVWF  00
02F8E:  MOVLW  00
02F90:  SUBWFB xF8,W
02F92:  MOVWF  01
02F94:  MOVLW  00
02F96:  SUBWFB xF9,W
02F98:  MOVWF  02
02F9A:  MOVLW  00
02F9C:  SUBWFB xFA,W
02F9E:  MOVWF  03
02FA0:  MOVFF  FE8,507
02FA4:  MOVFF  02,506
02FA8:  MOVFF  01,505
02FAC:  MOVFF  00,504
02FB0:  MOVFF  FEA,509
02FB4:  MOVFF  FE9,508
02FB8:  MOVLB  5
02FBA:  CLRF   x0D
02FBC:  CLRF   x0C
02FBE:  CLRF   x0B
02FC0:  MOVLW  51
02FC2:  MOVWF  x0A
02FC4:  MOVFF  03,511
02FC8:  MOVFF  02,510
02FCC:  MOVFF  01,50F
02FD0:  MOVFF  00,50E
02FD4:  MOVLB  0
02FD6:  RCALL  2E58
02FD8:  MOVFF  509,FEA
02FDC:  MOVFF  508,FE9
02FE0:  MOVF   00,W
02FE2:  MOVLB  4
02FE4:  ADDWF  xEF,W
02FE6:  MOVLB  5
02FE8:  MOVWF  x04
02FEA:  MOVF   01,W
02FEC:  MOVLB  4
02FEE:  ADDWFC xF0,W
02FF0:  MOVLB  5
02FF2:  MOVWF  x05
02FF4:  MOVF   02,W
02FF6:  MOVLB  4
02FF8:  ADDWFC xF1,W
02FFA:  MOVLB  5
02FFC:  MOVWF  x06
02FFE:  MOVF   03,W
03000:  MOVLB  4
03002:  ADDWFC xF2,W
03004:  MOVLB  5
03006:  MOVWF  x07
03008:  MOVLW  16
0300A:  MOVLB  4
0300C:  SUBWF  xFB,W
0300E:  MOVWF  00
03010:  MOVLW  00
03012:  SUBWFB xFC,W
03014:  MOVWF  01
03016:  MOVLW  00
03018:  SUBWFB xFD,W
0301A:  MOVWF  02
0301C:  MOVLW  00
0301E:  SUBWFB xFE,W
03020:  MOVWF  03
03022:  MOVF   00,W
03024:  MOVLB  5
03026:  ADDWF  x04,F
03028:  MOVF   01,W
0302A:  ADDWFC x05,F
0302C:  MOVF   02,W
0302E:  ADDWFC x06,F
03030:  MOVF   03,W
03032:  ADDWFC x07,F
03034:  MOVFF  507,50D
03038:  MOVFF  506,50C
0303C:  MOVFF  505,50B
03040:  MOVFF  504,50A
03044:  MOVLB  0
03046:  CALL   236E
0304A:  MOVFF  503,FEA
0304E:  MOVFF  502,FE9
03052:  MOVFF  01,FEF
03056:  MOVLW  01
03058:  MOVLB  4
0305A:  ADDWF  xFB,F
0305C:  BTFSC  FD8.0
0305E:  INCF   xFC,F
03060:  BTFSC  FD8.2
03062:  INCF   xFD,F
03064:  BTFSC  FD8.2
03066:  INCF   xFE,F
03068:  BRA    2F58
....................       } 
....................            
....................       unsigned int16 CRC_VALUE = CALCULATE_CRC(CPIC_TO_NEWTRX_ARRAY, 103);   
0306A:  MOVLW  01
0306C:  MOVLB  5
0306E:  MOVWF  x03
03070:  MOVLW  5B
03072:  MOVWF  x02
03074:  MOVLW  67
03076:  MOVWF  x04
03078:  MOVLB  0
0307A:  CALL   243E
0307E:  MOVFF  02,500
03082:  MOVFF  01,4FF
....................       CPIC_TO_NEWTRX_ARRAY[103] = (unsigned int8) (  CRC_VALUE       & 0x00FF );  // LOW byte 
03086:  MOVFF  4FF,1C2
0308A:  MOVLB  1
....................       CPIC_TO_NEWTRX_ARRAY[104] = (unsigned int8) ( (CRC_VALUE >> 8) & 0x00FF );  // HIGH byte 
0308C:  MOVFF  500,1C3
03090:  MOVLB  1
....................        
....................       fputc(0x7E, NEW_TRX );   // header 
03092:  MOVLW  7E
03094:  MOVLB  0
03096:  CALL   1AEC
....................       // trransfering data array to new tranceiver________________ 
....................       for(int i = 0; i<=104; i++) 
0309A:  MOVLB  5
0309C:  CLRF   x01
0309E:  MOVF   x01,W
030A0:  SUBLW  68
030A2:  BNC   30C4
....................       { 
....................          fputc(CPIC_TO_NEWTRX_ARRAY[i],NEW_TRX); 
030A4:  CLRF   03
030A6:  MOVF   x01,W
030A8:  ADDLW  5B
030AA:  MOVWF  FE9
030AC:  MOVLW  01
030AE:  ADDWFC 03,W
030B0:  MOVWF  FEA
030B2:  MOVFF  FEF,502
030B6:  MOVF   x02,W
030B8:  MOVLB  0
030BA:  CALL   1AEC
030BE:  MOVLB  5
030C0:  INCF   x01,F
030C2:  BRA    309E
....................       }  
....................       fputc(0x7E, NEW_TRX );  // footer 
030C4:  MOVLW  7E
030C6:  MOVLB  0
030C8:  CALL   1AEC
....................         
....................       //delay untill packet finish transmitting___________________ 
....................       DELAY_UNTILL_TRX_FINISH_TRANSMITTING_A_PACKET();         
030CC:  CALL   2542
030D0:  MOVLW  01
030D2:  MOVLB  4
030D4:  ADDWF  xF7,F
030D6:  BTFSC  FD8.0
030D8:  INCF   xF8,F
030DA:  BTFSC  FD8.2
030DC:  INCF   xF9,F
030DE:  BTFSC  FD8.2
030E0:  INCF   xFA,F
030E2:  BRA    2F0C
....................    } 
....................     
....................    NEW_TRX_RX_MODE(); // turning on trnaceiver receive mode 
030E4:  MOVLB  0
030E6:  CALL   1170
030EA:  RETURN 0
.................... }  
....................  
....................  
.................... // this function will be used to send one packet intead of CW morse code 
.................... Void NEW_TRX_SEND_1PCKT_BEACON() 
.................... { 
....................    // not changin values assigning____________________________ 
....................  
....................    //----Ground stationCall sign---------------[ 0-----5 ] 
....................    CPIC_TO_NEWTRX_ARRAY[0] = GS_callsign_leter_1 ;      
*
02584:  MOVFF  31D,15B
....................    CPIC_TO_NEWTRX_ARRAY[1] = GS_callsign_leter_2 ;                     
02588:  MOVFF  31E,15C
....................    CPIC_TO_NEWTRX_ARRAY[2] = GS_callsign_leter_3 ;      
0258C:  MOVFF  31F,15D
....................    CPIC_TO_NEWTRX_ARRAY[3] = GS_callsign_leter_4 ;      
02590:  MOVFF  320,15E
....................    CPIC_TO_NEWTRX_ARRAY[4] = GS_callsign_leter_5 ;      
02594:  MOVFF  321,15F
....................    CPIC_TO_NEWTRX_ARRAY[5] = GS_callsign_leter_6 ;      
02598:  MOVFF  322,160
....................        
....................    //----Dest SSID-----------------------------[ 6 ] 
....................    CPIC_TO_NEWTRX_ARRAY[6] = 0x30 ;     //char 0 
0259C:  MOVLW  30
0259E:  MOVLB  1
025A0:  MOVWF  x61
....................  
....................    //----Satellite Call Sign-------------------[ 7 - 12 ] 
....................    CPIC_TO_NEWTRX_ARRAY[7]  = ST_callsign_leter_1 ;      
025A2:  MOVFF  323,162
....................    CPIC_TO_NEWTRX_ARRAY[8]  = ST_callsign_leter_2 ;                     
025A6:  MOVFF  324,163
....................    CPIC_TO_NEWTRX_ARRAY[9]  = ST_callsign_leter_3 ;      
025AA:  MOVFF  325,164
....................    CPIC_TO_NEWTRX_ARRAY[10] = ST_callsign_leter_4 ;      
025AE:  MOVFF  326,165
....................    CPIC_TO_NEWTRX_ARRAY[11] = ST_callsign_leter_5 ;      
025B2:  MOVFF  327,166
....................    CPIC_TO_NEWTRX_ARRAY[12] = ST_callsign_leter_6 ;  
025B6:  MOVFF  328,167
....................     
....................    //----Dest SSID-----------------------------[ 13 ] 
....................    CPIC_TO_NEWTRX_ARRAY[13] = 0x30 ;    //char 0 
025BA:  MOVWF  x68
....................     
....................    //----Control-------------------------------[ 14 ] 
....................    CPIC_TO_NEWTRX_ARRAY[14] = 0x3E ;     
025BC:  MOVLW  3E
025BE:  MOVWF  x69
....................     
....................    //----PID-----------------------------------[ 15 ] 
....................    CPIC_TO_NEWTRX_ARRAY[15] = 0xF0 ;     
025C0:  MOVLW  F0
025C2:  MOVWF  x6A
....................  
....................    //----Packet specified data-----------------[ 16 - 21 ] 
....................    CPIC_TO_NEWTRX_ARRAY[16] = 0xFF ; 
025C4:  SETF   x6B
....................    CPIC_TO_NEWTRX_ARRAY[17] = 0xF0 ; 
025C6:  MOVWF  x6C
....................    CPIC_TO_NEWTRX_ARRAY[18] = 0xFf ; 
025C8:  SETF   x6D
....................    CPIC_TO_NEWTRX_ARRAY[19] = 0x00 ; 
025CA:  CLRF   x6E
....................    CPIC_TO_NEWTRX_ARRAY[20] = 0x00 ; 
025CC:  CLRF   x6F
....................    CPIC_TO_NEWTRX_ARRAY[21] = 0x01 ; 
025CE:  MOVLW  01
025D0:  MOVWF  x70
....................     
....................     
....................    //----Pay Load------------------------------[ 22 - 102 ] (81 bytes)______ 
....................    // we put CW HSK data here from 22 element to 37 th element  
....................    for (int i = 22; i < 38 ; i++) 
025D2:  MOVLW  16
025D4:  MOVLB  4
025D6:  MOVWF  xE9
025D8:  MOVF   xE9,W
025DA:  SUBLW  25
025DC:  BNC   2612
....................    {       
....................       CPIC_TO_NEWTRX_ARRAY[i] = CW_DATA[i-22]; 
025DE:  CLRF   03
025E0:  MOVF   xE9,W
025E2:  ADDLW  5B
025E4:  MOVWF  01
025E6:  MOVLW  01
025E8:  ADDWFC 03,F
025EA:  MOVFF  03,4F2
025EE:  MOVLW  16
025F0:  SUBWF  xE9,W
025F2:  CLRF   03
025F4:  ADDLW  22
025F6:  MOVWF  FE9
025F8:  MOVLW  00
025FA:  ADDWFC 03,W
025FC:  MOVWF  FEA
025FE:  MOVFF  FEF,4F3
02602:  MOVFF  4F2,FEA
02606:  MOVFF  01,FE9
0260A:  MOVFF  4F3,FEF
0260E:  INCF   xE9,F
02610:  BRA    25D8
....................    } 
....................     
....................    // just a separator 
....................    CPIC_TO_NEWTRX_ARRAY[38] = 0xAA ; 
02612:  MOVLW  AA
02614:  MOVLB  1
02616:  MOVWF  x81
....................    CPIC_TO_NEWTRX_ARRAY[39] = 0xBB ; 
02618:  MOVLW  BB
0261A:  MOVWF  x82
....................    CPIC_TO_NEWTRX_ARRAY[40] = 0xCC ; 
0261C:  MOVLW  CC
0261E:  MOVWF  x83
....................     
....................     
....................    CPIC_TO_NEWTRX_ARRAY[41] = RPIC_TO_CPIC_ARRAY[2] ; 
02620:  MOVFF  77,184
....................    CPIC_TO_NEWTRX_ARRAY[42] = RPIC_TO_CPIC_ARRAY[3]; 
02624:  MOVFF  78,185
....................    CPIC_TO_NEWTRX_ARRAY[43] = RPIC_TO_CPIC_ARRAY[4]  ; 
02628:  MOVFF  79,186
....................    CPIC_TO_NEWTRX_ARRAY[44] = RPIC_TO_CPIC_ARRAY[5] ; 
0262C:  MOVFF  7A,187
....................    CPIC_TO_NEWTRX_ARRAY[45] = RPIC_TO_CPIC_ARRAY[6]  ; 
02630:  MOVFF  7B,188
....................    CPIC_TO_NEWTRX_ARRAY[46] = RPIC_TO_CPIC_ARRAY[7]  ; 
02634:  MOVFF  7C,189
....................     
....................     
....................    for (unsigned int32 i = 47; i <= 103; i++) 
02638:  MOVLB  4
0263A:  CLRF   xED
0263C:  CLRF   xEC
0263E:  CLRF   xEB
02640:  MOVLW  2F
02642:  MOVWF  xEA
02644:  MOVF   xED,F
02646:  BNZ   26D0
02648:  MOVF   xEC,F
0264A:  BNZ   26D0
0264C:  MOVF   xEB,F
0264E:  BNZ   26D0
02650:  MOVF   xEA,W
02652:  SUBLW  67
02654:  BNC   26D0
....................    {       
....................       CPIC_TO_NEWTRX_ARRAY[i] = FM_BYTE_READ_( TLE_ADDRESS + i-47 ); 
02656:  MOVLW  5B
02658:  ADDWF  xEA,W
0265A:  MOVWF  01
0265C:  MOVLW  01
0265E:  ADDWFC xEB,W
02660:  MOVWF  03
02662:  MOVFF  01,4F1
02666:  MOVWF  xF2
02668:  MOVF   xEA,W
0266A:  MOVLB  0
0266C:  ADDWF  x6E,W
0266E:  MOVLB  4
02670:  MOVWF  xF3
02672:  MOVF   xEB,W
02674:  MOVLB  0
02676:  ADDWFC x6F,W
02678:  MOVLB  4
0267A:  MOVWF  xF4
0267C:  MOVF   xEC,W
0267E:  MOVLB  0
02680:  ADDWFC x70,W
02682:  MOVLB  4
02684:  MOVWF  xF5
02686:  MOVF   xED,W
02688:  MOVLB  0
0268A:  ADDWFC x71,W
0268C:  MOVLB  4
0268E:  MOVWF  xF6
02690:  MOVLW  2F
02692:  SUBWF  xF3,F
02694:  MOVLW  00
02696:  SUBWFB xF4,F
02698:  SUBWFB xF5,F
0269A:  SUBWFB xF6,F
0269C:  MOVFF  4F6,50D
026A0:  MOVFF  4F5,50C
026A4:  MOVFF  4F4,50B
026A8:  MOVFF  4F3,50A
026AC:  MOVLB  0
026AE:  RCALL  236E
026B0:  MOVFF  4F2,FEA
026B4:  MOVFF  4F1,FE9
026B8:  MOVFF  01,FEF
026BC:  MOVLW  01
026BE:  MOVLB  4
026C0:  ADDWF  xEA,F
026C2:  BTFSC  FD8.0
026C4:  INCF   xEB,F
026C6:  BTFSC  FD8.2
026C8:  INCF   xEC,F
026CA:  BTFSC  FD8.2
026CC:  INCF   xED,F
026CE:  BRA    2644
....................    } 
....................     
....................     
....................    NEW_TRX_TX_MODE(); // turning on trnaceiver transmit mode 
026D0:  MOVLB  0
026D2:  RCALL  2410
....................    unsigned int16 CRC_VALUE = CALCULATE_CRC(CPIC_TO_NEWTRX_ARRAY, 103);   
026D4:  MOVLW  01
026D6:  MOVLB  5
026D8:  MOVWF  x03
026DA:  MOVLW  5B
026DC:  MOVWF  x02
026DE:  MOVLW  67
026E0:  MOVWF  x04
026E2:  MOVLB  0
026E4:  RCALL  243E
026E6:  MOVFF  02,4EF
026EA:  MOVFF  01,4EE
....................    CPIC_TO_NEWTRX_ARRAY[103] = (unsigned int8) (  CRC_VALUE       & 0x00FF );  // LOW byte 
026EE:  MOVFF  4EE,1C2
026F2:  MOVLB  1
....................    CPIC_TO_NEWTRX_ARRAY[104] = (unsigned int8) ( (CRC_VALUE >> 8) & 0x00FF );  // HIGH byte 
026F4:  MOVFF  4EF,1C3
026F8:  MOVLB  1
....................     
....................    fputc(0x7E, NEW_TRX );   // header 
026FA:  MOVLW  7E
026FC:  MOVLB  0
026FE:  CALL   1AEC
....................    // trransfering data array to new tranceiver________________ 
....................    for(int i = 0; i<=104; i++) 
02702:  MOVLB  4
02704:  CLRF   xF0
02706:  MOVF   xF0,W
02708:  SUBLW  68
0270A:  BNC   272C
....................    { 
....................       fputc(CPIC_TO_NEWTRX_ARRAY[i],NEW_TRX); 
0270C:  CLRF   03
0270E:  MOVF   xF0,W
02710:  ADDLW  5B
02712:  MOVWF  FE9
02714:  MOVLW  01
02716:  ADDWFC 03,W
02718:  MOVWF  FEA
0271A:  MOVFF  FEF,4F1
0271E:  MOVF   xF1,W
02720:  MOVLB  0
02722:  CALL   1AEC
02726:  MOVLB  4
02728:  INCF   xF0,F
0272A:  BRA    2706
....................    }  
....................    fputc(0x7E, NEW_TRX );  // footer 
0272C:  MOVLW  7E
0272E:  MOVLB  0
02730:  CALL   1AEC
....................     
....................    DELAY_UNTILL_TRX_FINISH_TRANSMITTING_A_PACKET(); 
02734:  RCALL  2542
....................    NEW_TRX_RX_MODE(); // turning on trnaceiver receive mode 
02736:  CALL   1170
0273A:  GOTO   2AE8 (RETURN)
.................... } 
....................  
.................... #include <OLDTRX_Functions.c> 
.................... // PIN_D3 = GMSK ON/OFF 
.................... // PIN_D2 = CW ON/OFF 
.................... // PIN_D1 = CW_KEY 
....................  
.................... void OLD_TRX_RX_MODE() 
.................... { 
....................    Output_Low(PIN_D3);            // 0 
*
01144:  BCF    F95.3
01146:  BCF    F8C.3
....................    delay_ms(10); 
01148:  MOVLW  0A
0114A:  MOVLB  5
0114C:  MOVWF  x04
0114E:  MOVLB  0
01150:  RCALL  10AE
....................    Output_Low(PIN_D2);            // 0 
01152:  BCF    F95.2
01154:  BCF    F8C.2
....................    delay_ms(10); 
01156:  MOVLW  0A
01158:  MOVLB  5
0115A:  MOVWF  x04
0115C:  MOVLB  0
0115E:  RCALL  10AE
....................    fprintf(PC,"OLDTRX RX Mode\n\r"); 
01160:  MOVLW  1C
01162:  MOVWF  FF6
01164:  MOVLW  05
01166:  MOVWF  FF7
01168:  MOVLW  00
0116A:  MOVWF  FF8
0116C:  RCALL  111C
0116E:  RETURN 0
.................... } 
....................  
.................... void OLD_TRX_TX_MODE() 
.................... { 
....................    Output_High(PIN_D3);             // TX on pin (1) 
*
0273E:  BCF    F95.3
02740:  BSF    F8C.3
....................    delay_ms(10); 
02742:  MOVLW  0A
02744:  MOVLB  5
02746:  MOVWF  x04
02748:  MOVLB  0
0274A:  CALL   10AE
....................    Output_Low(PIN_D2);              // 0 
0274E:  BCF    F95.2
02750:  BCF    F8C.2
....................    delay_ms(10); 
02752:  MOVLW  0A
02754:  MOVLB  5
02756:  MOVWF  x04
02758:  MOVLB  0
0275A:  CALL   10AE
....................    fprintf(PC,"OLDTRX TX Mode\n\r"); 
0275E:  MOVLW  2E
02760:  MOVWF  FF6
02762:  MOVLW  05
02764:  MOVWF  FF7
02766:  MOVLW  00
02768:  MOVWF  FF8
0276A:  CALL   111C
0276E:  RETURN 0
.................... }   
....................     
.................... void OLD_TRX_CW_MODE() 
.................... { 
....................    Output_Low(PIN_D3);             // 0 
*
01C38:  BCF    F95.3
01C3A:  BCF    F8C.3
....................    delay_ms(10); 
01C3C:  MOVLW  0A
01C3E:  MOVLB  5
01C40:  MOVWF  x04
01C42:  MOVLB  0
01C44:  CALL   10AE
....................    Output_High(PIN_D2);            // CW on pin (1) 
01C48:  BCF    F95.2
01C4A:  BSF    F8C.2
....................    delay_ms(10); 
01C4C:  MOVLW  0A
01C4E:  MOVLB  5
01C50:  MOVWF  x04
01C52:  MOVLB  0
01C54:  CALL   10AE
....................    fprintf(PC,"OLDTRX CW Mode\n\r"); 
01C58:  MOVLW  40
01C5A:  MOVWF  FF6
01C5C:  MOVLW  05
01C5E:  MOVWF  FF7
01C60:  MOVLW  00
01C62:  MOVWF  FF8
01C64:  CALL   111C
01C68:  RETURN 0
.................... } 
....................     
.................... // this functions will check OLD tranceiver UART port incoming_________________ 
.................... //!void CHECK_UART_INCOMING_FROM_OLD_TRX() 
.................... //!{ 
.................... //!   if( OLDTRX_Available() ) 
.................... //!   { 
.................... //!      delay_ms(30); 
.................... //!      for(int i=0; i<=50; i++) 
.................... //!      { 
.................... //!         OLDTRX_CMD_BUFFER[i] = OLDTRX_Read(); 
.................... //!      } 
.................... //!   } 
.................... //!} 
....................  
.................... void CHECK_UART_INCOMING_FROM_OLD_TRX(char header) 
.................... { 
....................    if( OLDTRX_Available() ) 
*
01502:  BRA    14A6
01504:  MOVF   01,F
01506:  BZ    156A
....................    { 
....................       Delay_ms(50);    
01508:  MOVLW  32
0150A:  MOVLB  5
0150C:  MOVWF  x04
0150E:  MOVLB  0
01510:  RCALL  10AE
....................        
....................       for(int i = 0; i<10; i++) 
01512:  MOVLB  4
01514:  CLRF   xE6
01516:  MOVF   xE6,W
01518:  SUBLW  09
0151A:  BNC   1536
....................       { 
....................          if( OLDTRX_Read() == 0x42 )  
0151C:  MOVLB  0
0151E:  RCALL  14B2
01520:  MOVF   01,W
01522:  SUBLW  42
01524:  BNZ   1530
....................          { 
....................             OLDTRX_CMD_BUFFER[0] = header; 
01526:  MOVFF  4E5,1C9
....................             break; 
0152A:  MOVLB  4
0152C:  BRA    1536
0152E:  MOVLB  0
....................          } 
01530:  MOVLB  4
01532:  INCF   xE6,F
01534:  BRA    1516
....................       } 
....................        
....................       for(int i=1; i<=50; i++) 
01536:  MOVLW  01
01538:  MOVWF  xE7
0153A:  MOVF   xE7,W
0153C:  SUBLW  32
0153E:  BNC   156A
....................       { 
....................          OLDTRX_CMD_BUFFER[i] = OLDTRX_Read(); 
01540:  CLRF   03
01542:  MOVF   xE7,W
01544:  ADDLW  C9
01546:  MOVWF  01
01548:  MOVLW  01
0154A:  ADDWFC 03,F
0154C:  MOVFF  01,4E8
01550:  MOVFF  03,4E9
01554:  MOVLB  0
01556:  RCALL  14B2
01558:  MOVFF  4E9,FEA
0155C:  MOVFF  4E8,FE9
01560:  MOVFF  01,FEF
01564:  MOVLB  4
01566:  INCF   xE7,F
01568:  BRA    153A
0156A:  MOVLB  0
....................       } 
....................    } 
0156C:  GOTO   5A92 (RETURN)
.................... } 
....................  
.................... void EXTRACTING_OLD_TRANCEIVER_COMMAND(unsigned int8 sync_byte) 
.................... { 
....................    if( OLDTRX_CMD_BUFFER[0] == sync_byte )    // 0x42 
*
04142:  MOVLB  4
04144:  MOVF   xE5,W
04146:  MOVLB  1
04148:  SUBWF  xC9,W
0414A:  BTFSS  FD8.2
0414C:  BRA    42D2
....................    { 
....................       CLEAR_DATA_ARRAY(OLDTRX_TO_CPIC_ARRAY,50); 
0414E:  MOVLW  02
04150:  MOVLB  4
04152:  MOVWF  xF0
04154:  MOVLW  05
04156:  MOVWF  xEF
04158:  MOVLW  32
0415A:  MOVWF  xF1
0415C:  MOVLB  0
0415E:  CALL   1594
....................       for( int i = 0; i<50; i++ ) 
04162:  MOVLB  4
04164:  CLRF   xE6
04166:  MOVF   xE6,W
04168:  SUBLW  31
0416A:  BNC   419E
....................       { 
....................          OLDTRX_TO_CPIC_ARRAY[i] = OLDTRX_CMD_BUFFER[i] ; 
0416C:  CLRF   03
0416E:  MOVF   xE6,W
04170:  ADDLW  05
04172:  MOVWF  01
04174:  MOVLW  02
04176:  ADDWFC 03,F
04178:  MOVFF  03,4ED
0417C:  CLRF   03
0417E:  MOVF   xE6,W
04180:  ADDLW  C9
04182:  MOVWF  FE9
04184:  MOVLW  01
04186:  ADDWFC 03,W
04188:  MOVWF  FEA
0418A:  MOVFF  FEF,4EE
0418E:  MOVFF  4ED,FEA
04192:  MOVFF  01,FE9
04196:  MOVFF  4EE,FEF
0419A:  INCF   xE6,F
0419C:  BRA    4166
....................       } 
....................        
....................       if( ( OLDTRX_CMD_BUFFER[2] == 0xA1 ) || ( OLDTRX_CMD_BUFFER[2] == 0xA2 ) ) OLDTRX_RPL = 23 ; 
0419E:  MOVLB  1
041A0:  MOVF   xCB,W
041A2:  SUBLW  A1
041A4:  BZ    41AC
041A6:  MOVF   xCB,W
041A8:  SUBLW  A2
041AA:  BNZ   41B2
041AC:  MOVLW  17
041AE:  MOVWF  1C
041B0:  BRA    41B6
....................        
....................       else OLDTRX_RPL = 14;                             // PL packet length 
041B2:  MOVLW  0E
041B4:  MOVWF  1C
....................     
....................        
....................       unsigned int16 CRC     = CALCULATE_CRC(OLDTRX_TO_CPIC_ARRAY,OLDTRX_RPL-2); 
....................       unsigned int16 CMD_CRC = make16( OLDTRX_TO_CPIC_ARRAY[OLDTRX_RPL-1],OLDTRX_TO_CPIC_ARRAY[OLDTRX_RPL-2] ) ; 
041B6:  MOVLW  02
041B8:  SUBWF  1C,W
041BA:  MOVLB  4
041BC:  MOVWF  xEC
041BE:  MOVLW  02
041C0:  MOVLB  5
041C2:  MOVWF  x03
041C4:  MOVLW  05
041C6:  MOVWF  x02
041C8:  MOVFF  4EC,504
041CC:  MOVLB  0
041CE:  CALL   243E
041D2:  MOVFF  02,4E8
041D6:  MOVFF  01,4E7
041DA:  MOVLW  01
041DC:  SUBWF  1C,W
041DE:  CLRF   03
041E0:  ADDLW  05
041E2:  MOVWF  FE9
041E4:  MOVLW  02
041E6:  ADDWFC 03,W
041E8:  MOVWF  FEA
041EA:  MOVFF  FEF,4EA
041EE:  MOVLW  02
041F0:  SUBWF  1C,W
041F2:  CLRF   03
041F4:  ADDLW  05
041F6:  MOVWF  FE9
041F8:  MOVLW  02
041FA:  ADDWFC 03,W
041FC:  MOVWF  FEA
041FE:  MOVFF  FEF,4E9
....................        
....................       printline(); 
04202:  CALL   15B4
....................  
....................        
....................       if( CRC == CMD_CRC) 
04206:  MOVLB  4
04208:  MOVF   xE9,W
0420A:  SUBWF  xE7,W
0420C:  BNZ   42BE
0420E:  MOVF   xEA,W
04210:  SUBWF  xE8,W
04212:  BNZ   42BE
....................       { 
....................          printline();  
04214:  MOVLB  0
04216:  CALL   15B4
....................          fprintf( PC,"CRC correct, Command Length %u bytes\n\r", OLDTRX_RPL); 
0421A:  MOVLW  52
0421C:  MOVWF  FF6
0421E:  MOVLW  05
04220:  MOVWF  FF7
04222:  MOVLW  00
04224:  MOVWF  FF8
04226:  MOVLW  1C
04228:  MOVLB  4
0422A:  MOVWF  xF8
0422C:  MOVLB  0
0422E:  CALL   1184
04232:  MOVFF  1C,4ED
04236:  MOVLW  1B
04238:  MOVLB  4
0423A:  MOVWF  xEE
0423C:  MOVLB  0
0423E:  CALL   2B1C
04242:  MOVLW  70
04244:  MOVWF  FF6
04246:  MOVLW  05
04248:  MOVWF  FF7
0424A:  MOVLW  00
0424C:  MOVWF  FF8
0424E:  MOVLW  08
04250:  MOVLB  4
04252:  MOVWF  xF8
04254:  MOVLB  0
04256:  CALL   1184
....................          fprintf( PC,"Received GS CMD to OLDTRX --> "); 
0425A:  MOVLW  7A
0425C:  MOVWF  FF6
0425E:  MOVLW  05
04260:  MOVWF  FF7
04262:  MOVLW  00
04264:  MOVWF  FF8
04266:  CALL   111C
....................          OLDTRX_TO_CPIC_ARRAY[OLDTRX_RPL] = 0xBB;   // creating a footer 
0426A:  CLRF   03
0426C:  MOVF   1C,W
0426E:  ADDLW  05
04270:  MOVWF  FE9
04272:  MOVLW  02
04274:  ADDWFC 03,W
04276:  MOVWF  FEA
04278:  MOVLW  BB
0427A:  MOVWF  FEF
....................          for(int i=0; i<OLDTRX_RPL+1; i++) 
0427C:  MOVLB  4
0427E:  CLRF   xEB
04280:  MOVLW  01
04282:  ADDWF  1C,W
04284:  SUBWF  xEB,W
04286:  BC    42B6
....................          { 
....................             fprintf(PC,"%X ",  OLDTRX_TO_CPIC_ARRAY[i]);       
04288:  CLRF   03
0428A:  MOVF   xEB,W
0428C:  ADDLW  05
0428E:  MOVWF  FE9
04290:  MOVLW  02
04292:  ADDWFC 03,W
04294:  MOVWF  FEA
04296:  MOVFF  FEF,4EE
0429A:  MOVLW  37
0429C:  MOVWF  xEF
0429E:  MOVLB  0
042A0:  CALL   11B4
042A4:  MOVLW  20
042A6:  MOVLB  5
042A8:  MOVWF  x05
042AA:  MOVLB  0
042AC:  CALL   10D8
042B0:  MOVLB  4
042B2:  INCF   xEB,F
042B4:  BRA    4280
....................          } 
....................          printline();   
042B6:  MOVLB  0
042B8:  CALL   15B4
042BC:  MOVLB  4
....................       } 
....................  
.................... //!      else 
.................... //!      { 
.................... //!         printline();  
.................... //!         fprintf( PC,"CRC wrong, Command Length %u bytes\n\r", OLDTRX_RPL); 
.................... //!         fprintf( PC,"Received GS CMD to OLDTRX --> "); 
.................... //!         for(int i=0; i<OLDTRX_RPL+1; i++) 
.................... //!         { 
.................... //!            fprintf(PC,"%X ",  OLDTRX_TO_CPIC_ARRAY[i]);       
.................... //!         }           
.................... //!         CLEAR_DATA_ARRAY(OLDTRX_TO_CPIC_ARRAY,50); 
.................... //!         printline(); 
.................... //!         printline();  
.................... //!      } 
....................        
....................       CLEAR_DATA_ARRAY(OLDTRX_CMD_BUFFER,50);      
042BE:  MOVLW  01
042C0:  MOVWF  xF0
042C2:  MOVLW  C9
042C4:  MOVWF  xEF
042C6:  MOVLW  32
042C8:  MOVWF  xF1
042CA:  MOVLB  0
042CC:  CALL   1594
042D0:  MOVLB  1
....................       break; 
....................    } 
042D2:  MOVLB  0
042D4:  GOTO   5B3A (RETURN)
....................     
.................... } 
....................  
.................... Void OLDTRX_SEND_ACKNOWLEDGEMENT(unsigned int8 mode) 
.................... {      
....................     
....................    //----Ground stationCall sign---------------[ 0-----5 ] 
....................    CPIC_TO_OLDTRX_ARRAY[0] = GS_callsign_leter_1 ;      
*
04592:  MOVFF  31D,241
....................    CPIC_TO_OLDTRX_ARRAY[1] = GS_callsign_leter_2 ;                     
04596:  MOVFF  31E,242
....................    CPIC_TO_OLDTRX_ARRAY[2] = GS_callsign_leter_3 ;      
0459A:  MOVFF  31F,243
....................    CPIC_TO_OLDTRX_ARRAY[3] = GS_callsign_leter_4 ;      
0459E:  MOVFF  320,244
....................    CPIC_TO_OLDTRX_ARRAY[4] = GS_callsign_leter_5 ;      
045A2:  MOVFF  321,245
....................    CPIC_TO_OLDTRX_ARRAY[5] = GS_callsign_leter_6 ;      
045A6:  MOVFF  322,246
....................        
....................    //----Dest SSID-----------------------------[ 6 ] 
....................    CPIC_TO_OLDTRX_ARRAY[6] = 0x30 ;     //char 0 
045AA:  MOVLW  30
045AC:  MOVLB  2
045AE:  MOVWF  x47
....................  
....................    //----Satellite Call Sign-------------------[ 7 - 12 ] 
....................    CPIC_TO_OLDTRX_ARRAY[7]  = ST_callsign_leter_1 ;      
045B0:  MOVFF  323,248
....................    CPIC_TO_OLDTRX_ARRAY[8]  = ST_callsign_leter_2 ;                     
045B4:  MOVFF  324,249
....................    CPIC_TO_OLDTRX_ARRAY[9]  = ST_callsign_leter_3 ;      
045B8:  MOVFF  325,24A
....................    CPIC_TO_OLDTRX_ARRAY[10] = ST_callsign_leter_4 ;      
045BC:  MOVFF  326,24B
....................    CPIC_TO_OLDTRX_ARRAY[11] = ST_callsign_leter_5 ;      
045C0:  MOVFF  327,24C
....................    CPIC_TO_OLDTRX_ARRAY[12] = ST_callsign_leter_6 ;  
045C4:  MOVFF  328,24D
....................     
....................    //----Dest SSID-----------------------------[ 13 ] 
....................    CPIC_TO_OLDTRX_ARRAY[13] = 0x30 ;    //char 0 
045C8:  MOVWF  x4E
....................     
....................    //----Control-------------------------------[ 14 ] 
....................    CPIC_TO_OLDTRX_ARRAY[14] = 0x3E ;     
045CA:  MOVLW  3E
045CC:  MOVWF  x4F
....................     
....................    //----PID-----------------------------------[ 15 ] 
....................    CPIC_TO_OLDTRX_ARRAY[15] = 0xF0 ;     
045CE:  MOVLW  F0
045D0:  MOVWF  x50
....................  
....................    //----Packet specified data-----------------[ 16 - 21 ] 
....................    CPIC_TO_OLDTRX_ARRAY[16] = 0xFF ; 
045D2:  SETF   x51
....................    CPIC_TO_OLDTRX_ARRAY[17] = 0xF0 ; 
045D4:  MOVWF  x52
....................    CPIC_TO_OLDTRX_ARRAY[18] = 0xFf ; 
045D6:  SETF   x53
....................    CPIC_TO_OLDTRX_ARRAY[19] = 0x00 ; 
045D8:  CLRF   x54
....................    CPIC_TO_OLDTRX_ARRAY[20] = 0x00 ; 
045DA:  CLRF   x55
....................    CPIC_TO_OLDTRX_ARRAY[21] = 0x01 ;      // Packet number 
045DC:  MOVLW  01
045DE:  MOVWF  x56
....................     
....................    //----Pay Load------------------------------[ 22 - 102 ] (81 bytes) 
....................     
....................    if( mode == 0x00) 
045E0:  MOVLB  4
045E2:  MOVF   xEF,F
045E4:  BNZ   4606
....................    { 
....................       for (int i = 22; i <= 102 ; i++) 
045E6:  MOVLW  16
045E8:  MOVWF  xF0
045EA:  MOVF   xF0,W
045EC:  SUBLW  66
045EE:  BNC   4606
....................       {       
....................          CPIC_TO_OLDTRX_ARRAY[i] = 0x69 ; 
045F0:  CLRF   03
045F2:  MOVF   xF0,W
045F4:  ADDLW  41
045F6:  MOVWF  FE9
045F8:  MOVLW  02
045FA:  ADDWFC 03,W
045FC:  MOVWF  FEA
045FE:  MOVLW  69
04600:  MOVWF  FEF
04602:  INCF   xF0,F
04604:  BRA    45EA
....................       } 
....................    } 
....................     
....................    if( mode == 0x01) 
04606:  DECFSZ xEF,W
04608:  BRA    466A
....................    { 
....................       for(int i = 22; i < OLDTRX_RPL+22 ; i++) 
0460A:  MOVLW  16
0460C:  MOVWF  xF1
0460E:  MOVLW  16
04610:  ADDWF  1C,W
04612:  SUBWF  xF1,W
04614:  BC    464A
....................       {       
....................          CPIC_TO_OLDTRX_ARRAY[i] = OLDTRX_TO_CPIC_ARRAY[i-22] ; 
04616:  CLRF   03
04618:  MOVF   xF1,W
0461A:  ADDLW  41
0461C:  MOVWF  01
0461E:  MOVLW  02
04620:  ADDWFC 03,F
04622:  MOVFF  03,4F7
04626:  MOVLW  16
04628:  SUBWF  xF1,W
0462A:  CLRF   03
0462C:  ADDLW  05
0462E:  MOVWF  FE9
04630:  MOVLW  02
04632:  ADDWFC 03,W
04634:  MOVWF  FEA
04636:  MOVFF  FEF,4F8
0463A:  MOVFF  4F7,FEA
0463E:  MOVFF  01,FE9
04642:  MOVFF  4F8,FEF
04646:  INCF   xF1,F
04648:  BRA    460E
....................       } 
....................        
....................       for(int i = OLDTRX_RPL+22; i <= 102; i++) 
0464A:  MOVLW  16
0464C:  ADDWF  1C,W
0464E:  MOVWF  xF2
04650:  MOVF   xF2,W
04652:  SUBLW  66
04654:  BNC   466A
....................       {       
....................          CPIC_TO_OLDTRX_ARRAY[i] = 0x00 ; 
04656:  CLRF   03
04658:  MOVF   xF2,W
0465A:  ADDLW  41
0465C:  MOVWF  FE9
0465E:  MOVLW  02
04660:  ADDWFC 03,W
04662:  MOVWF  FEA
04664:  CLRF   FEF
04666:  INCF   xF2,F
04668:  BRA    4650
....................       } 
....................    } 
....................  
....................    //----CRC values----------------------------[ 103, 104 ]  
....................    unsigned int16 CRC_VALUE  = CALCULATE_CRC(CPIC_TO_OLDTRX_ARRAY, 103);   
0466A:  MOVLW  02
0466C:  MOVLB  5
0466E:  MOVWF  x03
04670:  MOVLW  41
04672:  MOVWF  x02
04674:  MOVLW  67
04676:  MOVWF  x04
04678:  MOVLB  0
0467A:  CALL   243E
0467E:  MOVFF  02,4F4
04682:  MOVFF  01,4F3
....................     
....................    CPIC_TO_OLDTRX_ARRAY[103] = (unsigned int8) (  CRC_VALUE       & 0x00FF );  // LOW byte 
04686:  MOVFF  4F3,2A8
0468A:  MOVLB  2
....................    CPIC_TO_OLDTRX_ARRAY[104] = (unsigned int8) ( (CRC_VALUE >> 8) & 0x00FF );  // HIGH byte 
0468C:  MOVFF  4F4,2A9
04690:  MOVLB  2
....................     
....................    // trransfering data array to new tranceiver 
....................    OLD_TRX_TX_MODE(); 
04692:  MOVLB  0
04694:  CALL   273E
....................    Delay_ms(1000); 
04698:  MOVLW  04
0469A:  MOVLB  4
0469C:  MOVWF  xF6
0469E:  MOVLW  FA
046A0:  MOVLB  5
046A2:  MOVWF  x04
046A4:  MOVLB  0
046A6:  CALL   10AE
046AA:  MOVLB  4
046AC:  DECFSZ xF6,F
046AE:  BRA    469E
....................    for(int i = 0; i<105; i++) 
046B0:  CLRF   xF5
046B2:  MOVF   xF5,W
046B4:  SUBLW  68
046B6:  BNC   46D8
....................    { 
....................       fputc(CPIC_TO_OLDTRX_ARRAY[i],OLD_TRX); 
046B8:  CLRF   03
046BA:  MOVF   xF5,W
046BC:  ADDLW  41
046BE:  MOVWF  FE9
046C0:  MOVLW  02
046C2:  ADDWFC 03,W
046C4:  MOVWF  FEA
046C6:  MOVFF  FEF,4F6
046CA:  MOVF   xF6,W
046CC:  MOVLB  0
046CE:  CALL   2770
046D2:  MOVLB  4
046D4:  INCF   xF5,F
046D6:  BRA    46B2
....................    }  
....................    Delay_ms(1000); 
046D8:  MOVLW  04
046DA:  MOVWF  xF6
046DC:  MOVLW  FA
046DE:  MOVLB  5
046E0:  MOVWF  x04
046E2:  MOVLB  0
046E4:  CALL   10AE
046E8:  MOVLB  4
046EA:  DECFSZ xF6,F
046EC:  BRA    46DC
....................    OLD_TRX_RX_MODE(); 
046EE:  MOVLB  0
046F0:  CALL   1144
046F4:  RETURN 0
.................... } 
....................  
.................... //This function will be used to send data packets using New Tranceiver_________ 
.................... Void OLD_TRX_SEND_DATA_PACKETS_TO_GS(unsigned int32 START_ADDRESS,  unsigned int32 NUM_OF_PACKETS ) 
.................... { 
....................    // not changin values assigning____________________________ 
....................   
....................    //----Ground stationCall sign---------------[ 0-----5 ] 
....................    CPIC_TO_OLDTRX_ARRAY[0] = GS_callsign_leter_1 ;      
*
042D8:  MOVFF  31D,241
....................    CPIC_TO_OLDTRX_ARRAY[1] = GS_callsign_leter_2 ;                     
042DC:  MOVFF  31E,242
....................    CPIC_TO_OLDTRX_ARRAY[2] = GS_callsign_leter_3 ;      
042E0:  MOVFF  31F,243
....................    CPIC_TO_OLDTRX_ARRAY[3] = GS_callsign_leter_4 ;      
042E4:  MOVFF  320,244
....................    CPIC_TO_OLDTRX_ARRAY[4] = GS_callsign_leter_5 ;      
042E8:  MOVFF  321,245
....................    CPIC_TO_OLDTRX_ARRAY[5] = GS_callsign_leter_6 ;      
042EC:  MOVFF  322,246
....................        
....................    //----Dest SSID-----------------------------[ 6 ] 
....................    CPIC_TO_OLDTRX_ARRAY[6] = 0x30 ;     //char 0 
042F0:  MOVLW  30
042F2:  MOVLB  2
042F4:  MOVWF  x47
....................  
....................    //----Satellite Call Sign-------------------[ 7 - 12 ] 
....................    CPIC_TO_OLDTRX_ARRAY[7]  = ST_callsign_leter_1 ;      
042F6:  MOVFF  323,248
....................    CPIC_TO_OLDTRX_ARRAY[8]  = ST_callsign_leter_2 ;                     
042FA:  MOVFF  324,249
....................    CPIC_TO_OLDTRX_ARRAY[9]  = ST_callsign_leter_3 ;      
042FE:  MOVFF  325,24A
....................    CPIC_TO_OLDTRX_ARRAY[10] = ST_callsign_leter_4 ;      
04302:  MOVFF  326,24B
....................    CPIC_TO_OLDTRX_ARRAY[11] = ST_callsign_leter_5 ;      
04306:  MOVFF  327,24C
....................    CPIC_TO_OLDTRX_ARRAY[12] = ST_callsign_leter_6 ;  
0430A:  MOVFF  328,24D
....................     
....................    //----Dest SSID-----------------------------[ 13 ] 
....................    CPIC_TO_OLDTRX_ARRAY[13] = 0x30 ;    //char 0 
0430E:  MOVWF  x4E
....................     
....................    //----Control-------------------------------[ 14 ] 
....................    CPIC_TO_OLDTRX_ARRAY[14] = 0x3E ;     
04310:  MOVLW  3E
04312:  MOVWF  x4F
....................     
....................    //----PID-----------------------------------[ 15 ] 
....................    CPIC_TO_OLDTRX_ARRAY[15] = 0xF0 ;     
04314:  MOVLW  F0
04316:  MOVWF  x50
....................  
....................    //----Packet specified data-----------------[ 16 - 21 ] 
....................    CPIC_TO_OLDTRX_ARRAY[16] = 0xFF ; 
04318:  SETF   x51
....................    CPIC_TO_OLDTRX_ARRAY[17] = 0xF0 ; 
0431A:  MOVWF  x52
....................    CPIC_TO_OLDTRX_ARRAY[18] = 0xFf ; 
0431C:  SETF   x53
....................    //________________________________________________________________ 
....................     
....................    OLD_TRX_TX_MODE(); // turning on trnaceiver transmit mode 
0431E:  MOVLB  0
04320:  CALL   273E
....................    Delay_ms(1000); 
04324:  MOVLW  04
04326:  MOVLB  5
04328:  MOVWF  x02
0432A:  MOVLW  FA
0432C:  MOVWF  x04
0432E:  MOVLB  0
04330:  CALL   10AE
04334:  MOVLB  5
04336:  DECFSZ x02,F
04338:  BRA    432A
....................     
....................    for(unsigned int32 PN = 1; PN <= NUM_OF_PACKETS ; PN++)    // PN packet number 
0433A:  MOVLB  4
0433C:  CLRF   xFA
0433E:  CLRF   xF9
04340:  CLRF   xF8
04342:  MOVLW  01
04344:  MOVWF  xF7
04346:  MOVF   xFA,W
04348:  SUBWF  xF6,W
0434A:  BTFSS  FD8.0
0434C:  BRA    4516
0434E:  BNZ   436C
04350:  MOVF   xF9,W
04352:  SUBWF  xF5,W
04354:  BTFSS  FD8.0
04356:  BRA    4516
04358:  BNZ   436C
0435A:  MOVF   xF8,W
0435C:  SUBWF  xF4,W
0435E:  BTFSS  FD8.0
04360:  BRA    4516
04362:  BNZ   436C
04364:  MOVF   xF7,W
04366:  SUBWF  xF3,W
04368:  BTFSS  FD8.0
0436A:  BRA    4516
....................    {  
....................       CPIC_TO_OLDTRX_ARRAY[19] = 0x00 ; 
0436C:  MOVLB  2
0436E:  CLRF   x54
....................       CPIC_TO_OLDTRX_ARRAY[20] = (unsigned int8) ( (PN >> 8 ) & 0x000000FF ); 
04370:  MOVFF  4F8,255
04374:  MOVFF  4F9,504
04378:  MOVFF  4FA,505
0437C:  MOVLB  5
0437E:  CLRF   03
....................       CPIC_TO_OLDTRX_ARRAY[21] = (unsigned int8) ( (PN      ) & 0x000000FF ); 
04380:  MOVLB  4
04382:  MOVFF  4F7,256
04386:  CLRF   03
....................        
....................       //----Pay Load------------------------------[ 22 - 102 ] (81 bytes)______ 
....................       // Get data from com flash memory  
....................       for (unsigned int32 i = 22; i <= 102; i++) 
04388:  CLRF   xFE
0438A:  CLRF   xFD
0438C:  CLRF   xFC
0438E:  MOVLW  16
04390:  MOVWF  xFB
04392:  MOVF   xFE,F
04394:  BTFSS  FD8.2
04396:  BRA    44A6
04398:  MOVF   xFD,F
0439A:  BTFSS  FD8.2
0439C:  BRA    44A6
0439E:  MOVF   xFC,F
043A0:  BTFSS  FD8.2
043A2:  BRA    44A6
043A4:  MOVF   xFB,W
043A6:  SUBLW  66
043A8:  BTFSS  FD8.0
043AA:  BRA    44A6
....................       {       
....................          CPIC_TO_OLDTRX_ARRAY[i] = FM_BYTE_READ_( START_ADDRESS + 81*( PN - 1 ) + (i-22) ); 
043AC:  MOVLW  41
043AE:  ADDWF  xFB,W
043B0:  MOVWF  01
043B2:  MOVLW  02
043B4:  ADDWFC xFC,W
043B6:  MOVWF  03
043B8:  MOVFF  01,502
043BC:  MOVLB  5
043BE:  MOVWF  x03
043C0:  MOVLW  01
043C2:  MOVLB  4
043C4:  SUBWF  xF7,W
043C6:  MOVWF  00
043C8:  MOVLW  00
043CA:  SUBWFB xF8,W
043CC:  MOVWF  01
043CE:  MOVLW  00
043D0:  SUBWFB xF9,W
043D2:  MOVWF  02
043D4:  MOVLW  00
043D6:  SUBWFB xFA,W
043D8:  MOVWF  03
043DA:  MOVFF  FE8,507
043DE:  MOVFF  02,506
043E2:  MOVFF  01,505
043E6:  MOVFF  00,504
043EA:  MOVFF  FEA,509
043EE:  MOVFF  FE9,508
043F2:  MOVLB  5
043F4:  CLRF   x0D
043F6:  CLRF   x0C
043F8:  CLRF   x0B
043FA:  MOVLW  51
043FC:  MOVWF  x0A
043FE:  MOVFF  03,511
04402:  MOVFF  02,510
04406:  MOVFF  01,50F
0440A:  MOVFF  00,50E
0440E:  MOVLB  0
04410:  CALL   2E58
04414:  MOVFF  509,FEA
04418:  MOVFF  508,FE9
0441C:  MOVF   00,W
0441E:  MOVLB  4
04420:  ADDWF  xEF,W
04422:  MOVLB  5
04424:  MOVWF  x04
04426:  MOVF   01,W
04428:  MOVLB  4
0442A:  ADDWFC xF0,W
0442C:  MOVLB  5
0442E:  MOVWF  x05
04430:  MOVF   02,W
04432:  MOVLB  4
04434:  ADDWFC xF1,W
04436:  MOVLB  5
04438:  MOVWF  x06
0443A:  MOVF   03,W
0443C:  MOVLB  4
0443E:  ADDWFC xF2,W
04440:  MOVLB  5
04442:  MOVWF  x07
04444:  MOVLW  16
04446:  MOVLB  4
04448:  SUBWF  xFB,W
0444A:  MOVWF  00
0444C:  MOVLW  00
0444E:  SUBWFB xFC,W
04450:  MOVWF  01
04452:  MOVLW  00
04454:  SUBWFB xFD,W
04456:  MOVWF  02
04458:  MOVLW  00
0445A:  SUBWFB xFE,W
0445C:  MOVWF  03
0445E:  MOVF   00,W
04460:  MOVLB  5
04462:  ADDWF  x04,F
04464:  MOVF   01,W
04466:  ADDWFC x05,F
04468:  MOVF   02,W
0446A:  ADDWFC x06,F
0446C:  MOVF   03,W
0446E:  ADDWFC x07,F
04470:  MOVFF  507,50D
04474:  MOVFF  506,50C
04478:  MOVFF  505,50B
0447C:  MOVFF  504,50A
04480:  MOVLB  0
04482:  CALL   236E
04486:  MOVFF  503,FEA
0448A:  MOVFF  502,FE9
0448E:  MOVFF  01,FEF
04492:  MOVLW  01
04494:  MOVLB  4
04496:  ADDWF  xFB,F
04498:  BTFSC  FD8.0
0449A:  INCF   xFC,F
0449C:  BTFSC  FD8.2
0449E:  INCF   xFD,F
044A0:  BTFSC  FD8.2
044A2:  INCF   xFE,F
044A4:  BRA    4392
....................       } 
....................        
....................       //----CRC values----------------------------[ 103, 104 ]  
....................       unsigned int16 CRC_VALUE = CALCULATE_CRC(CPIC_TO_OLDTRX_ARRAY, 103);   
044A6:  MOVLW  02
044A8:  MOVLB  5
044AA:  MOVWF  x03
044AC:  MOVLW  41
044AE:  MOVWF  x02
044B0:  MOVLW  67
044B2:  MOVWF  x04
044B4:  MOVLB  0
044B6:  CALL   243E
044BA:  MOVFF  02,500
044BE:  MOVFF  01,4FF
....................       CPIC_TO_OLDTRX_ARRAY[103] = (unsigned int8) (  CRC_VALUE       & 0x00FF );  // LOW byte 
044C2:  MOVFF  4FF,2A8
044C6:  MOVLB  2
....................       CPIC_TO_OLDTRX_ARRAY[104] = (unsigned int8) ( (CRC_VALUE >> 8) & 0x00FF );  // HIGH byte 
044C8:  MOVFF  500,2A9
044CC:  MOVLB  2
....................        
....................       // transfering data array to new tranceiver________________ 
....................       for(int i = 0; i<105; i++) 
044CE:  MOVLB  5
044D0:  CLRF   x01
044D2:  MOVF   x01,W
044D4:  SUBLW  68
044D6:  BNC   44F8
....................       { 
....................          fputc(CPIC_TO_OLDTRX_ARRAY[i],OLD_TRX); 
044D8:  CLRF   03
044DA:  MOVF   x01,W
044DC:  ADDLW  41
044DE:  MOVWF  FE9
044E0:  MOVLW  02
044E2:  ADDWFC 03,W
044E4:  MOVWF  FEA
044E6:  MOVFF  FEF,502
044EA:  MOVF   x02,W
044EC:  MOVLB  0
044EE:  CALL   2770
044F2:  MOVLB  5
044F4:  INCF   x01,F
044F6:  BRA    44D2
....................       }  
....................        
....................       // Delay untill packet transmission 
....................       Delay_ms(230);     
044F8:  MOVLW  E6
044FA:  MOVWF  x04
044FC:  MOVLB  0
044FE:  CALL   10AE
04502:  MOVLW  01
04504:  MOVLB  4
04506:  ADDWF  xF7,F
04508:  BTFSC  FD8.0
0450A:  INCF   xF8,F
0450C:  BTFSC  FD8.2
0450E:  INCF   xF9,F
04510:  BTFSC  FD8.2
04512:  INCF   xFA,F
04514:  BRA    4346
....................    } 
....................     
....................    Delay_ms(1000); 
04516:  MOVLW  04
04518:  MOVLB  5
0451A:  MOVWF  x02
0451C:  MOVLW  FA
0451E:  MOVWF  x04
04520:  MOVLB  0
04522:  CALL   10AE
04526:  MOVLB  5
04528:  DECFSZ x02,F
0452A:  BRA    451C
....................    OLD_TRX_RX_MODE(); // turning on trnaceiver receive mode 
0452C:  MOVLB  0
0452E:  CALL   1144
04532:  RETURN 0
....................     
.................... }  
....................  
....................  
.................... // this function will be used to send one packet intead of CW morse code 
.................... Void OLD_TRX_SEND_1PCKT_BEACON() 
.................... { 
....................    CW_INTERVAL = 120; 
*
02778:  CLRF   1F
0277A:  MOVLW  78
0277C:  MOVWF  1E
....................    // not changin values assigning____________________________ 
....................   
....................    //----Ground stationCall sign---------------[ 0-----5 ] 
....................    CPIC_TO_OLDTRX_ARRAY[0] = GS_callsign_leter_1 ;      
0277E:  MOVFF  31D,241
....................    CPIC_TO_OLDTRX_ARRAY[1] = GS_callsign_leter_2 ;                     
02782:  MOVFF  31E,242
....................    CPIC_TO_OLDTRX_ARRAY[2] = GS_callsign_leter_3 ;      
02786:  MOVFF  31F,243
....................    CPIC_TO_OLDTRX_ARRAY[3] = GS_callsign_leter_4 ;      
0278A:  MOVFF  320,244
....................    CPIC_TO_OLDTRX_ARRAY[4] = GS_callsign_leter_5 ;      
0278E:  MOVFF  321,245
....................    CPIC_TO_OLDTRX_ARRAY[5] = GS_callsign_leter_6 ;      
02792:  MOVFF  322,246
....................        
....................    //----Dest SSID-----------------------------[ 6 ] 
....................    CPIC_TO_OLDTRX_ARRAY[6] = 0x30 ;     //char 0 
02796:  MOVLW  30
02798:  MOVLB  2
0279A:  MOVWF  x47
....................  
....................    //----Satellite Call Sign-------------------[ 7 - 12 ] 
....................    CPIC_TO_OLDTRX_ARRAY[7]  = ST_callsign_leter_1 ;      
0279C:  MOVFF  323,248
....................    CPIC_TO_OLDTRX_ARRAY[8]  = ST_callsign_leter_2 ;                     
027A0:  MOVFF  324,249
....................    CPIC_TO_OLDTRX_ARRAY[9]  = ST_callsign_leter_3 ;      
027A4:  MOVFF  325,24A
....................    CPIC_TO_OLDTRX_ARRAY[10] = ST_callsign_leter_4 ;      
027A8:  MOVFF  326,24B
....................    CPIC_TO_OLDTRX_ARRAY[11] = ST_callsign_leter_5 ;      
027AC:  MOVFF  327,24C
....................    CPIC_TO_OLDTRX_ARRAY[12] = ST_callsign_leter_6 ;  
027B0:  MOVFF  328,24D
....................     
....................    //----Dest SSID-----------------------------[ 13 ] 
....................    CPIC_TO_OLDTRX_ARRAY[13] = 0x30 ;    //char 0 
027B4:  MOVWF  x4E
....................     
....................    //----Control-------------------------------[ 14 ] 
....................    CPIC_TO_OLDTRX_ARRAY[14] = 0x3E ;     
027B6:  MOVLW  3E
027B8:  MOVWF  x4F
....................     
....................    //----PID-----------------------------------[ 15 ] 
....................    CPIC_TO_OLDTRX_ARRAY[15] = 0xF0 ;     
027BA:  MOVLW  F0
027BC:  MOVWF  x50
....................  
....................    //----Packet specified data-----------------[ 16 - 21 ] 
....................    CPIC_TO_OLDTRX_ARRAY[16] = 0xFF ; 
027BE:  SETF   x51
....................    CPIC_TO_OLDTRX_ARRAY[17] = 0xF0 ; 
027C0:  MOVWF  x52
....................    CPIC_TO_OLDTRX_ARRAY[18] = 0xFf ; 
027C2:  SETF   x53
....................    //________________________________________________________________ 
....................     
....................    OLD_TRX_TX_MODE(); // turning on trnaceiver transmit mode 
027C4:  MOVLB  0
027C6:  RCALL  273E
....................    Delay_ms(500); 
027C8:  MOVLW  02
027CA:  MOVLB  4
027CC:  MOVWF  xF1
027CE:  MOVLW  FA
027D0:  MOVLB  5
027D2:  MOVWF  x04
027D4:  MOVLB  0
027D6:  CALL   10AE
027DA:  MOVLB  4
027DC:  DECFSZ xF1,F
027DE:  BRA    27CE
....................     
....................    CPIC_TO_OLDTRX_ARRAY[19] = 0x00 ; 
027E0:  MOVLB  2
027E2:  CLRF   x54
....................    CPIC_TO_OLDTRX_ARRAY[20] = 0x00 ; 
027E4:  CLRF   x55
....................    CPIC_TO_OLDTRX_ARRAY[21] = 0x01 ; 
027E6:  MOVLW  01
027E8:  MOVWF  x56
....................     
....................    //----Pay Load------------------------------[ 22 - 102 ] (81 bytes)______ 
....................    // we put CW HSK data here from 22 element to 37 th element  
....................    for (int i = 22; i < 38 ; i++) 
027EA:  MOVLW  16
027EC:  MOVLB  4
027EE:  MOVWF  xE9
027F0:  MOVF   xE9,W
027F2:  SUBLW  25
027F4:  BNC   282A
....................    {       
....................       CPIC_TO_OLDTRX_ARRAY[i] = CW_DATA[i-22]; 
027F6:  CLRF   03
027F8:  MOVF   xE9,W
027FA:  ADDLW  41
027FC:  MOVWF  01
027FE:  MOVLW  02
02800:  ADDWFC 03,F
02802:  MOVFF  03,4F2
02806:  MOVLW  16
02808:  SUBWF  xE9,W
0280A:  CLRF   03
0280C:  ADDLW  22
0280E:  MOVWF  FE9
02810:  MOVLW  00
02812:  ADDWFC 03,W
02814:  MOVWF  FEA
02816:  MOVFF  FEF,4F3
0281A:  MOVFF  4F2,FEA
0281E:  MOVFF  01,FE9
02822:  MOVFF  4F3,FEF
02826:  INCF   xE9,F
02828:  BRA    27F0
....................    } 
....................     
....................    // just a separator 
....................    CPIC_TO_OLDTRX_ARRAY[38] = 0xAA ; 
0282A:  MOVLW  AA
0282C:  MOVLB  2
0282E:  MOVWF  x67
....................    CPIC_TO_OLDTRX_ARRAY[39] = 0xBB ; 
02830:  MOVLW  BB
02832:  MOVWF  x68
....................    CPIC_TO_OLDTRX_ARRAY[40] = 0xCC ; 
02834:  MOVLW  CC
02836:  MOVWF  x69
....................     
....................    //Adding time 
....................     
....................    CPIC_TO_OLDTRX_ARRAY[41] = RPIC_TO_CPIC_ARRAY[2] ; 
02838:  MOVFF  77,26A
....................    CPIC_TO_OLDTRX_ARRAY[42] = RPIC_TO_CPIC_ARRAY[3]; 
0283C:  MOVFF  78,26B
....................    CPIC_TO_OLDTRX_ARRAY[43] = RPIC_TO_CPIC_ARRAY[4]  ; 
02840:  MOVFF  79,26C
....................    CPIC_TO_OLDTRX_ARRAY[44] = RPIC_TO_CPIC_ARRAY[5] ; 
02844:  MOVFF  7A,26D
....................    CPIC_TO_OLDTRX_ARRAY[45] = RPIC_TO_CPIC_ARRAY[6]  ; 
02848:  MOVFF  7B,26E
....................    CPIC_TO_OLDTRX_ARRAY[46] = RPIC_TO_CPIC_ARRAY[7]  ; 
0284C:  MOVFF  7C,26F
....................     
....................    // read FM data 
....................    for (unsigned int32 i = 47; i <= 102; i++) 
02850:  MOVLB  4
02852:  CLRF   xED
02854:  CLRF   xEC
02856:  CLRF   xEB
02858:  MOVLW  2F
0285A:  MOVWF  xEA
0285C:  MOVF   xED,F
0285E:  BNZ   28E8
02860:  MOVF   xEC,F
02862:  BNZ   28E8
02864:  MOVF   xEB,F
02866:  BNZ   28E8
02868:  MOVF   xEA,W
0286A:  SUBLW  66
0286C:  BNC   28E8
....................    {       
....................       CPIC_TO_OLDTRX_ARRAY[i] = FM_BYTE_READ_( TLE_ADDRESS + i-47 ); 
0286E:  MOVLW  41
02870:  ADDWF  xEA,W
02872:  MOVWF  01
02874:  MOVLW  02
02876:  ADDWFC xEB,W
02878:  MOVWF  03
0287A:  MOVFF  01,4F1
0287E:  MOVWF  xF2
02880:  MOVF   xEA,W
02882:  MOVLB  0
02884:  ADDWF  x6E,W
02886:  MOVLB  4
02888:  MOVWF  xF3
0288A:  MOVF   xEB,W
0288C:  MOVLB  0
0288E:  ADDWFC x6F,W
02890:  MOVLB  4
02892:  MOVWF  xF4
02894:  MOVF   xEC,W
02896:  MOVLB  0
02898:  ADDWFC x70,W
0289A:  MOVLB  4
0289C:  MOVWF  xF5
0289E:  MOVF   xED,W
028A0:  MOVLB  0
028A2:  ADDWFC x71,W
028A4:  MOVLB  4
028A6:  MOVWF  xF6
028A8:  MOVLW  2F
028AA:  SUBWF  xF3,F
028AC:  MOVLW  00
028AE:  SUBWFB xF4,F
028B0:  SUBWFB xF5,F
028B2:  SUBWFB xF6,F
028B4:  MOVFF  4F6,50D
028B8:  MOVFF  4F5,50C
028BC:  MOVFF  4F4,50B
028C0:  MOVFF  4F3,50A
028C4:  MOVLB  0
028C6:  RCALL  236E
028C8:  MOVFF  4F2,FEA
028CC:  MOVFF  4F1,FE9
028D0:  MOVFF  01,FEF
028D4:  MOVLW  01
028D6:  MOVLB  4
028D8:  ADDWF  xEA,F
028DA:  BTFSC  FD8.0
028DC:  INCF   xEB,F
028DE:  BTFSC  FD8.2
028E0:  INCF   xEC,F
028E2:  BTFSC  FD8.2
028E4:  INCF   xED,F
028E6:  BRA    285C
....................    } 
....................     
....................    //----CRC values----------------------------[ 103, 104 ]  
....................    unsigned int16 CRC_VALUE = CALCULATE_CRC(CPIC_TO_OLDTRX_ARRAY, 103);   
028E8:  MOVLW  02
028EA:  MOVLB  5
028EC:  MOVWF  x03
028EE:  MOVLW  41
028F0:  MOVWF  x02
028F2:  MOVLW  67
028F4:  MOVWF  x04
028F6:  MOVLB  0
028F8:  RCALL  243E
028FA:  MOVFF  02,4EF
028FE:  MOVFF  01,4EE
....................    CPIC_TO_OLDTRX_ARRAY[103] = (unsigned int8) (  CRC_VALUE       & 0x00FF );  // LOW byte 
02902:  MOVFF  4EE,2A8
02906:  MOVLB  2
....................    CPIC_TO_OLDTRX_ARRAY[104] = (unsigned int8) ( (CRC_VALUE >> 8) & 0x00FF );  // HIGH byte 
02908:  MOVFF  4EF,2A9
0290C:  MOVLB  2
....................     
....................    // transfering data array to old tranceiver________________ 
....................    for(int i = 0; i<105; i++) 
0290E:  MOVLB  4
02910:  CLRF   xF0
02912:  MOVF   xF0,W
02914:  SUBLW  68
02916:  BNC   2936
....................    { 
....................       fputc(CPIC_TO_OLDTRX_ARRAY[i],OLD_TRX); 
02918:  CLRF   03
0291A:  MOVF   xF0,W
0291C:  ADDLW  41
0291E:  MOVWF  FE9
02920:  MOVLW  02
02922:  ADDWFC 03,W
02924:  MOVWF  FEA
02926:  MOVFF  FEF,4F1
0292A:  MOVF   xF1,W
0292C:  MOVLB  0
0292E:  RCALL  2770
02930:  MOVLB  4
02932:  INCF   xF0,F
02934:  BRA    2912
....................    }  
....................     
....................    // Delay untill packet transmission    
....................    Delay_ms(300); 
02936:  MOVLW  02
02938:  MOVWF  xF1
0293A:  MOVLW  96
0293C:  MOVLB  5
0293E:  MOVWF  x04
02940:  MOVLB  0
02942:  CALL   10AE
02946:  MOVLB  4
02948:  DECFSZ xF1,F
0294A:  BRA    293A
....................    OLD_TRX_RX_MODE(); // turning on trnaceiver receive mode  
0294C:  MOVLB  0
0294E:  CALL   1144
02952:  GOTO   2AF8 (RETURN)
.................... }  
....................  
....................  
.................... #include <CW_Morse.c> 
....................  
.................... #define CW_PIN PIN_D1 
.................... // T = 60ms 20wpm 
....................  
.................... //___character_space_function___/////////////////////////////////// 
.................... void CH_SPACE() 
.................... { 
....................    Output_low(CW_PIN); 
*
01C8C:  BCF    F95.1
01C8E:  BCF    F8C.1
....................    delay_ms(180);   
01C90:  MOVLW  B4
01C92:  MOVLB  5
01C94:  MOVWF  x04
01C96:  MOVLB  0
01C98:  CALL   10AE
01C9C:  RETURN 0
.................... } 
....................  
.................... //___Word_space_function___//////////////////////////////////////// 
.................... void WORD_SPACE() 
.................... { 
....................    Output_low(CW_PIN); ; 
*
02204:  BCF    F95.1
02206:  BCF    F8C.1
....................    delay_ms(420);  
02208:  MOVLW  02
0220A:  MOVLB  4
0220C:  MOVWF  xEA
0220E:  MOVLW  D2
02210:  MOVLB  5
02212:  MOVWF  x04
02214:  MOVLB  0
02216:  CALL   10AE
0221A:  MOVLB  4
0221C:  DECFSZ xEA,F
0221E:  BRA    220E
02220:  MOVLB  0
02222:  RETURN 0
.................... } 
....................  
.................... //___dit_function___/////////////////////////////////////////////// 
.................... void DIT() 
.................... { 
....................    Output_high(CW_PIN); 
*
01CAE:  BCF    F95.1
01CB0:  BSF    F8C.1
....................    delay_ms(60); 
01CB2:  MOVLW  3C
01CB4:  MOVLB  5
01CB6:  MOVWF  x04
01CB8:  MOVLB  0
01CBA:  CALL   10AE
....................    Output_low(CW_PIN); 
01CBE:  BCF    F95.1
01CC0:  BCF    F8C.1
....................    delay_ms(60); 
01CC2:  MOVLW  3C
01CC4:  MOVLB  5
01CC6:  MOVWF  x04
01CC8:  MOVLB  0
01CCA:  CALL   10AE
01CCE:  RETURN 0
.................... } 
....................  
.................... //___dit_function___/////////////////////////////////////////////// 
.................... void DAH() 
.................... { 
....................    Output_high(CW_PIN);; 
*
01C6A:  BCF    F95.1
01C6C:  BSF    F8C.1
....................    delay_ms(180); 
01C6E:  MOVLW  B4
01C70:  MOVLB  5
01C72:  MOVWF  x04
01C74:  MOVLB  0
01C76:  CALL   10AE
....................    Output_low(CW_PIN);; 
01C7A:  BCF    F95.1
01C7C:  BCF    F8C.1
....................    delay_ms(60); 
01C7E:  MOVLW  3C
01C80:  MOVLB  5
01C82:  MOVWF  x04
01C84:  MOVLB  0
01C86:  CALL   10AE
01C8A:  RETURN 0
.................... } 
....................  
.................... void CW_A() { DIT(); DAH();               CH_SPACE(); } 
*
01D60:  RCALL  1CAE
01D62:  RCALL  1C6A
01D64:  RCALL  1C8C
01D66:  GOTO   21D6 (RETURN)
.................... void CW_B() { DAH(); DIT(); DIT(); DIT(); CH_SPACE(); } 
01D6A:  RCALL  1C6A
01D6C:  RCALL  1CAE
01D6E:  RCALL  1CAE
01D70:  RCALL  1CAE
01D72:  RCALL  1C8C
01D74:  GOTO   21D6 (RETURN)
.................... void CW_C() { DAH(); DIT(); DAH(); DIT(); CH_SPACE(); } 
01D78:  RCALL  1C6A
01D7A:  RCALL  1CAE
01D7C:  RCALL  1C6A
01D7E:  RCALL  1CAE
01D80:  RCALL  1C8C
01D82:  GOTO   21D6 (RETURN)
.................... void CW_D() { DAH(); DIT(); DIT();        CH_SPACE(); } 
01D86:  RCALL  1C6A
01D88:  RCALL  1CAE
01D8A:  RCALL  1CAE
01D8C:  RCALL  1C8C
01D8E:  GOTO   21D6 (RETURN)
.................... void CW_E() { DIT();                      CH_SPACE(); } 
01D92:  RCALL  1CAE
01D94:  RCALL  1C8C
01D96:  GOTO   21D6 (RETURN)
.................... void CW_F() { DIT(); DIT(); DAH(); DIT(); CH_SPACE(); } 
01D9A:  RCALL  1CAE
01D9C:  RCALL  1CAE
01D9E:  RCALL  1C6A
01DA0:  RCALL  1CAE
01DA2:  RCALL  1C8C
01DA4:  GOTO   21D6 (RETURN)
.................... void CW_G() { DAH(); DAH(); DIT();        CH_SPACE(); } 
01DA8:  RCALL  1C6A
01DAA:  RCALL  1C6A
01DAC:  RCALL  1CAE
01DAE:  RCALL  1C8C
01DB0:  GOTO   21D6 (RETURN)
.................... void CW_H() { DIT(); DIT(); DIT(); DIT(); CH_SPACE(); } 
01DB4:  RCALL  1CAE
01DB6:  RCALL  1CAE
01DB8:  RCALL  1CAE
01DBA:  RCALL  1CAE
01DBC:  RCALL  1C8C
01DBE:  GOTO   21D6 (RETURN)
.................... void CW_I() { DIT(); DIT();               CH_SPACE(); } 
01DC2:  RCALL  1CAE
01DC4:  RCALL  1CAE
01DC6:  RCALL  1C8C
01DC8:  GOTO   21D6 (RETURN)
.................... void CW_J() { DIT(); DAH(); DAH(); DAH(); CH_SPACE(); } 
01DCC:  RCALL  1CAE
01DCE:  RCALL  1C6A
01DD0:  RCALL  1C6A
01DD2:  RCALL  1C6A
01DD4:  RCALL  1C8C
01DD6:  GOTO   21D6 (RETURN)
.................... void CW_K() { DAH(); DIT(); DAH();        CH_SPACE(); } 
01DDA:  RCALL  1C6A
01DDC:  RCALL  1CAE
01DDE:  RCALL  1C6A
01DE0:  RCALL  1C8C
01DE2:  GOTO   21D6 (RETURN)
.................... void CW_L() { DIT(); DAH(); DIT(); DIT(); CH_SPACE(); } 
01DE6:  RCALL  1CAE
01DE8:  RCALL  1C6A
01DEA:  RCALL  1CAE
01DEC:  RCALL  1CAE
01DEE:  RCALL  1C8C
01DF0:  GOTO   21D6 (RETURN)
.................... void CW_M() { DAH(); DAH();               CH_SPACE(); } 
01DF4:  RCALL  1C6A
01DF6:  RCALL  1C6A
01DF8:  RCALL  1C8C
01DFA:  GOTO   21D6 (RETURN)
.................... void CW_N() { DAH(); DIT();               CH_SPACE(); } 
01DFE:  RCALL  1C6A
01E00:  RCALL  1CAE
01E02:  RCALL  1C8C
01E04:  GOTO   21D6 (RETURN)
.................... void CW_O() { DAH(); DAH(); DAH();        CH_SPACE(); } 
01E08:  RCALL  1C6A
01E0A:  RCALL  1C6A
01E0C:  RCALL  1C6A
01E0E:  RCALL  1C8C
01E10:  GOTO   21D6 (RETURN)
.................... void CW_P() { DIT(); DAH(); DAH(); DIT(); CH_SPACE(); } 
01E14:  RCALL  1CAE
01E16:  RCALL  1C6A
01E18:  RCALL  1C6A
01E1A:  RCALL  1CAE
01E1C:  RCALL  1C8C
01E1E:  GOTO   21D6 (RETURN)
.................... void CW_Q() { DAH(); DAH(); DIT(); DAH(); CH_SPACE(); } 
01E22:  RCALL  1C6A
01E24:  RCALL  1C6A
01E26:  RCALL  1CAE
01E28:  RCALL  1C6A
01E2A:  RCALL  1C8C
01E2C:  GOTO   21D6 (RETURN)
.................... void CW_R() { DIT(); DAH(); DIT();        CH_SPACE(); } 
01E30:  RCALL  1CAE
01E32:  RCALL  1C6A
01E34:  RCALL  1CAE
01E36:  RCALL  1C8C
01E38:  GOTO   21D6 (RETURN)
.................... void CW_S() { DIT(); DIT(); DIT();        CH_SPACE(); } 
01E3C:  RCALL  1CAE
01E3E:  RCALL  1CAE
01E40:  RCALL  1CAE
01E42:  RCALL  1C8C
01E44:  GOTO   21D6 (RETURN)
.................... void CW_T() { DAH();                      CH_SPACE(); } 
01E48:  RCALL  1C6A
01E4A:  RCALL  1C8C
01E4C:  GOTO   21D6 (RETURN)
.................... void CW_U() { DIT(); DIT(); DAH();        CH_SPACE(); } 
01E50:  RCALL  1CAE
01E52:  RCALL  1CAE
01E54:  RCALL  1C6A
01E56:  RCALL  1C8C
01E58:  GOTO   21D6 (RETURN)
.................... void CW_V() { DIT(); DIT(); DIT(); DAH(); CH_SPACE(); } 
01E5C:  RCALL  1CAE
01E5E:  RCALL  1CAE
01E60:  RCALL  1CAE
01E62:  RCALL  1C6A
01E64:  RCALL  1C8C
01E66:  GOTO   21D6 (RETURN)
.................... void CW_W() { DIT(); DAH(); DAH();        CH_SPACE(); } 
01E6A:  RCALL  1CAE
01E6C:  RCALL  1C6A
01E6E:  RCALL  1C6A
01E70:  RCALL  1C8C
01E72:  GOTO   21D6 (RETURN)
.................... void CW_X() { DAH(); DIT(); DIT(); DAH(); CH_SPACE(); } 
01E76:  RCALL  1C6A
01E78:  RCALL  1CAE
01E7A:  RCALL  1CAE
01E7C:  RCALL  1C6A
01E7E:  RCALL  1C8C
01E80:  GOTO   21D6 (RETURN)
.................... void CW_Y() { DAH(); DIT(); DAH(); DAH(); CH_SPACE(); } 
01E84:  RCALL  1C6A
01E86:  RCALL  1CAE
01E88:  RCALL  1C6A
01E8A:  RCALL  1C6A
01E8C:  RCALL  1C8C
01E8E:  GOTO   21D6 (RETURN)
.................... void CW_Z() { DAH(); DAH(); DIT(); DIT(); CH_SPACE(); } 
01E92:  RCALL  1C6A
01E94:  RCALL  1C6A
01E96:  RCALL  1CAE
01E98:  RCALL  1CAE
01E9A:  RCALL  1C8C
01E9C:  GOTO   21D6 (RETURN)
....................  
.................... // Numbers morse code   
.................... void CW_0() { DAH(); DAH(); DAH(); DAH(); DAH(); CH_SPACE(); } 
*
01C9E:  RCALL  1C6A
01CA0:  RCALL  1C6A
01CA2:  RCALL  1C6A
01CA4:  RCALL  1C6A
01CA6:  RCALL  1C6A
01CA8:  RCALL  1C8C
01CAA:  GOTO   21D6 (RETURN)
.................... void CW_1() { DIT(); DAH(); DAH(); DAH(); DAH(); CH_SPACE(); } 
*
01CD0:  RCALL  1CAE
01CD2:  RCALL  1C6A
01CD4:  RCALL  1C6A
01CD6:  RCALL  1C6A
01CD8:  RCALL  1C6A
01CDA:  RCALL  1C8C
01CDC:  GOTO   21D6 (RETURN)
.................... void CW_2() { DIT(); DIT(); DAH(); DAH(); DAH(); CH_SPACE(); } 
01CE0:  RCALL  1CAE
01CE2:  RCALL  1CAE
01CE4:  RCALL  1C6A
01CE6:  RCALL  1C6A
01CE8:  RCALL  1C6A
01CEA:  RCALL  1C8C
01CEC:  GOTO   21D6 (RETURN)
.................... void CW_3() { DIT(); DIT(); DIT(); DAH(); DAH(); CH_SPACE(); } 
01CF0:  RCALL  1CAE
01CF2:  RCALL  1CAE
01CF4:  RCALL  1CAE
01CF6:  RCALL  1C6A
01CF8:  RCALL  1C6A
01CFA:  RCALL  1C8C
01CFC:  GOTO   21D6 (RETURN)
.................... void CW_4() { DIT(); DIT(); DIT(); DIT(); DAH(); CH_SPACE(); } 
01D00:  RCALL  1CAE
01D02:  RCALL  1CAE
01D04:  RCALL  1CAE
01D06:  RCALL  1CAE
01D08:  RCALL  1C6A
01D0A:  RCALL  1C8C
01D0C:  GOTO   21D6 (RETURN)
.................... void CW_5() { DIT(); DIT(); DIT(); DIT(); DIT(); CH_SPACE(); } 
01D10:  RCALL  1CAE
01D12:  RCALL  1CAE
01D14:  RCALL  1CAE
01D16:  RCALL  1CAE
01D18:  RCALL  1CAE
01D1A:  RCALL  1C8C
01D1C:  GOTO   21D6 (RETURN)
.................... void CW_6() { DAH(); DIT(); DIT(); DIT(); DIT(); CH_SPACE(); } 
01D20:  RCALL  1C6A
01D22:  RCALL  1CAE
01D24:  RCALL  1CAE
01D26:  RCALL  1CAE
01D28:  RCALL  1CAE
01D2A:  RCALL  1C8C
01D2C:  GOTO   21D6 (RETURN)
.................... void CW_7() { DAH(); DAH(); DIT(); DIT(); DIT(); CH_SPACE(); } 
01D30:  RCALL  1C6A
01D32:  RCALL  1C6A
01D34:  RCALL  1CAE
01D36:  RCALL  1CAE
01D38:  RCALL  1CAE
01D3A:  RCALL  1C8C
01D3C:  GOTO   21D6 (RETURN)
.................... void CW_8() { DAH(); DAH(); DAH(); DIT(); DIT(); CH_SPACE(); } 
01D40:  RCALL  1C6A
01D42:  RCALL  1C6A
01D44:  RCALL  1C6A
01D46:  RCALL  1CAE
01D48:  RCALL  1CAE
01D4A:  RCALL  1C8C
01D4C:  GOTO   21D6 (RETURN)
.................... void CW_9() { DAH(); DAH(); DAH(); DAH(); DIT(); CH_SPACE(); } 
01D50:  RCALL  1C6A
01D52:  RCALL  1C6A
01D54:  RCALL  1C6A
01D56:  RCALL  1C6A
01D58:  RCALL  1CAE
01D5A:  RCALL  1C8C
01D5C:  GOTO   21D6 (RETURN)
....................  
.................... void CW_LTR(char CWL) 
.................... { 
....................    //Hexa decimal values 
....................         if(CWL == 0x00||CWL ==0x30) CW_0(); 
*
01EA0:  MOVLB  4
01EA2:  MOVF   xED,F
01EA4:  BZ    1EAC
01EA6:  MOVF   xED,W
01EA8:  SUBLW  30
01EAA:  BNZ   1EB6
01EAC:  MOVLB  0
01EAE:  BRA    1C9E
01EB0:  MOVLB  0
01EB2:  BRA    21D6
01EB4:  MOVLB  4
....................    else if(CWL == 0x01||CWL ==0x31) CW_1(); 
01EB6:  DECFSZ xED,W
01EB8:  BRA    1EBC
01EBA:  BRA    1EC2
01EBC:  MOVF   xED,W
01EBE:  SUBLW  31
01EC0:  BNZ   1ECC
01EC2:  MOVLB  0
01EC4:  BRA    1CD0
01EC6:  MOVLB  0
01EC8:  BRA    21D6
01ECA:  MOVLB  4
....................    else if(CWL == 0x02||CWL ==0x32) CW_2(); 
01ECC:  MOVF   xED,W
01ECE:  SUBLW  02
01ED0:  BZ    1ED8
01ED2:  MOVF   xED,W
01ED4:  SUBLW  32
01ED6:  BNZ   1EE2
01ED8:  MOVLB  0
01EDA:  BRA    1CE0
01EDC:  MOVLB  0
01EDE:  BRA    21D6
01EE0:  MOVLB  4
....................    else if(CWL == 0x03||CWL ==0x33) CW_3(); 
01EE2:  MOVF   xED,W
01EE4:  SUBLW  03
01EE6:  BZ    1EEE
01EE8:  MOVF   xED,W
01EEA:  SUBLW  33
01EEC:  BNZ   1EF8
01EEE:  MOVLB  0
01EF0:  BRA    1CF0
01EF2:  MOVLB  0
01EF4:  BRA    21D6
01EF6:  MOVLB  4
....................    else if(CWL == 0x04||CWL ==0x34) CW_4(); 
01EF8:  MOVF   xED,W
01EFA:  SUBLW  04
01EFC:  BZ    1F04
01EFE:  MOVF   xED,W
01F00:  SUBLW  34
01F02:  BNZ   1F0E
01F04:  MOVLB  0
01F06:  BRA    1D00
01F08:  MOVLB  0
01F0A:  BRA    21D6
01F0C:  MOVLB  4
....................    else if(CWL == 0x05||CWL ==0x35) CW_5(); 
01F0E:  MOVF   xED,W
01F10:  SUBLW  05
01F12:  BZ    1F1A
01F14:  MOVF   xED,W
01F16:  SUBLW  35
01F18:  BNZ   1F24
01F1A:  MOVLB  0
01F1C:  BRA    1D10
01F1E:  MOVLB  0
01F20:  BRA    21D6
01F22:  MOVLB  4
....................    else if(CWL == 0x06||CWL ==0x36) CW_6(); 
01F24:  MOVF   xED,W
01F26:  SUBLW  06
01F28:  BZ    1F30
01F2A:  MOVF   xED,W
01F2C:  SUBLW  36
01F2E:  BNZ   1F3A
01F30:  MOVLB  0
01F32:  BRA    1D20
01F34:  MOVLB  0
01F36:  BRA    21D6
01F38:  MOVLB  4
....................    else if(CWL == 0x07||CWL ==0x37) CW_7(); 
01F3A:  MOVF   xED,W
01F3C:  SUBLW  07
01F3E:  BZ    1F46
01F40:  MOVF   xED,W
01F42:  SUBLW  37
01F44:  BNZ   1F50
01F46:  MOVLB  0
01F48:  BRA    1D30
01F4A:  MOVLB  0
01F4C:  BRA    21D6
01F4E:  MOVLB  4
....................    else if(CWL == 0x08||CWL ==0x38) CW_8(); 
01F50:  MOVF   xED,W
01F52:  SUBLW  08
01F54:  BZ    1F5C
01F56:  MOVF   xED,W
01F58:  SUBLW  38
01F5A:  BNZ   1F66
01F5C:  MOVLB  0
01F5E:  BRA    1D40
01F60:  MOVLB  0
01F62:  BRA    21D6
01F64:  MOVLB  4
....................    else if(CWL == 0x09||CWL ==0x39) CW_9(); 
01F66:  MOVF   xED,W
01F68:  SUBLW  09
01F6A:  BZ    1F72
01F6C:  MOVF   xED,W
01F6E:  SUBLW  39
01F70:  BNZ   1F7C
01F72:  MOVLB  0
01F74:  BRA    1D50
01F76:  MOVLB  0
01F78:  BRA    21D6
01F7A:  MOVLB  4
....................    else if(CWL == 0x0A||CWL ==0x61||CWL ==0x41) CW_A(); 
01F7C:  MOVF   xED,W
01F7E:  SUBLW  0A
01F80:  BZ    1F8E
01F82:  MOVF   xED,W
01F84:  SUBLW  61
01F86:  BZ    1F8E
01F88:  MOVF   xED,W
01F8A:  SUBLW  41
01F8C:  BNZ   1F98
01F8E:  MOVLB  0
01F90:  BRA    1D60
01F92:  MOVLB  0
01F94:  BRA    21D6
01F96:  MOVLB  4
....................    else if(CWL == 0x0B||CWL ==0x62||CWL ==0x42) CW_B(); 
01F98:  MOVF   xED,W
01F9A:  SUBLW  0B
01F9C:  BZ    1FAA
01F9E:  MOVF   xED,W
01FA0:  SUBLW  62
01FA2:  BZ    1FAA
01FA4:  MOVF   xED,W
01FA6:  SUBLW  42
01FA8:  BNZ   1FB4
01FAA:  MOVLB  0
01FAC:  BRA    1D6A
01FAE:  MOVLB  0
01FB0:  BRA    21D6
01FB2:  MOVLB  4
....................    else if(CWL == 0x0C||CWL ==0x63||CWL ==0x43) CW_C(); 
01FB4:  MOVF   xED,W
01FB6:  SUBLW  0C
01FB8:  BZ    1FC6
01FBA:  MOVF   xED,W
01FBC:  SUBLW  63
01FBE:  BZ    1FC6
01FC0:  MOVF   xED,W
01FC2:  SUBLW  43
01FC4:  BNZ   1FD0
01FC6:  MOVLB  0
01FC8:  BRA    1D78
01FCA:  MOVLB  0
01FCC:  BRA    21D6
01FCE:  MOVLB  4
....................    else if(CWL == 0x0D||CWL ==0x64||CWL ==0x44) CW_D(); 
01FD0:  MOVF   xED,W
01FD2:  SUBLW  0D
01FD4:  BZ    1FE2
01FD6:  MOVF   xED,W
01FD8:  SUBLW  64
01FDA:  BZ    1FE2
01FDC:  MOVF   xED,W
01FDE:  SUBLW  44
01FE0:  BNZ   1FEC
01FE2:  MOVLB  0
01FE4:  BRA    1D86
01FE6:  MOVLB  0
01FE8:  BRA    21D6
01FEA:  MOVLB  4
....................    else if(CWL == 0x0E||CWL ==0x65||CWL ==0x45) CW_E(); 
01FEC:  MOVF   xED,W
01FEE:  SUBLW  0E
01FF0:  BZ    1FFE
01FF2:  MOVF   xED,W
01FF4:  SUBLW  65
01FF6:  BZ    1FFE
01FF8:  MOVF   xED,W
01FFA:  SUBLW  45
01FFC:  BNZ   2008
01FFE:  MOVLB  0
02000:  BRA    1D92
02002:  MOVLB  0
02004:  BRA    21D6
02006:  MOVLB  4
....................    else if(CWL == 0x0F||CWL ==0x66||CWL ==0x46) CW_F(); 
02008:  MOVF   xED,W
0200A:  SUBLW  0F
0200C:  BZ    201A
0200E:  MOVF   xED,W
02010:  SUBLW  66
02012:  BZ    201A
02014:  MOVF   xED,W
02016:  SUBLW  46
02018:  BNZ   2024
0201A:  MOVLB  0
0201C:  BRA    1D9A
0201E:  MOVLB  0
02020:  BRA    21D6
02022:  MOVLB  4
....................    //------------------------- 
....................     
....................    //normal ascii for CW mission 
....................    else if(CWL == 0x67||CWL ==0x47) CW_G(); 
02024:  MOVF   xED,W
02026:  SUBLW  67
02028:  BZ    2030
0202A:  MOVF   xED,W
0202C:  SUBLW  47
0202E:  BNZ   203A
02030:  MOVLB  0
02032:  BRA    1DA8
02034:  MOVLB  0
02036:  BRA    21D6
02038:  MOVLB  4
....................    else if(CWL == 0x68||CWL ==0x48) CW_H(); 
0203A:  MOVF   xED,W
0203C:  SUBLW  68
0203E:  BZ    2046
02040:  MOVF   xED,W
02042:  SUBLW  48
02044:  BNZ   2050
02046:  MOVLB  0
02048:  BRA    1DB4
0204A:  MOVLB  0
0204C:  BRA    21D6
0204E:  MOVLB  4
....................    else if(CWL == 0x69||CWL ==0x49) CW_I(); 
02050:  MOVF   xED,W
02052:  SUBLW  69
02054:  BZ    205C
02056:  MOVF   xED,W
02058:  SUBLW  49
0205A:  BNZ   2066
0205C:  MOVLB  0
0205E:  BRA    1DC2
02060:  MOVLB  0
02062:  BRA    21D6
02064:  MOVLB  4
....................    else if(CWL == 0x6a||CWL ==0x4a) CW_J(); 
02066:  MOVF   xED,W
02068:  SUBLW  6A
0206A:  BZ    2072
0206C:  MOVF   xED,W
0206E:  SUBLW  4A
02070:  BNZ   207C
02072:  MOVLB  0
02074:  BRA    1DCC
02076:  MOVLB  0
02078:  BRA    21D6
0207A:  MOVLB  4
....................    else if(CWL == 0x6b||CWL ==0x4b) CW_K(); 
0207C:  MOVF   xED,W
0207E:  SUBLW  6B
02080:  BZ    2088
02082:  MOVF   xED,W
02084:  SUBLW  4B
02086:  BNZ   2092
02088:  MOVLB  0
0208A:  BRA    1DDA
0208C:  MOVLB  0
0208E:  BRA    21D6
02090:  MOVLB  4
....................    else if(CWL == 0x6c||CWL ==0x4c) CW_L(); 
02092:  MOVF   xED,W
02094:  SUBLW  6C
02096:  BZ    209E
02098:  MOVF   xED,W
0209A:  SUBLW  4C
0209C:  BNZ   20A8
0209E:  MOVLB  0
020A0:  BRA    1DE6
020A2:  MOVLB  0
020A4:  BRA    21D6
020A6:  MOVLB  4
....................    else if(CWL == 0x6d||CWL ==0x4d) CW_M(); 
020A8:  MOVF   xED,W
020AA:  SUBLW  6D
020AC:  BZ    20B4
020AE:  MOVF   xED,W
020B0:  SUBLW  4D
020B2:  BNZ   20BE
020B4:  MOVLB  0
020B6:  BRA    1DF4
020B8:  MOVLB  0
020BA:  BRA    21D6
020BC:  MOVLB  4
....................    else if(CWL == 0x6e||CWL ==0x4e) CW_N(); 
020BE:  MOVF   xED,W
020C0:  SUBLW  6E
020C2:  BZ    20CA
020C4:  MOVF   xED,W
020C6:  SUBLW  4E
020C8:  BNZ   20D4
020CA:  MOVLB  0
020CC:  BRA    1DFE
020CE:  MOVLB  0
020D0:  BRA    21D6
020D2:  MOVLB  4
....................    else if(CWL == 0x6f||CWL ==0x4f) CW_O(); 
020D4:  MOVF   xED,W
020D6:  SUBLW  6F
020D8:  BZ    20E0
020DA:  MOVF   xED,W
020DC:  SUBLW  4F
020DE:  BNZ   20EA
020E0:  MOVLB  0
020E2:  BRA    1E08
020E4:  MOVLB  0
020E6:  BRA    21D6
020E8:  MOVLB  4
....................    else if(CWL == 0x70||CWL ==0x50) CW_P(); 
020EA:  MOVF   xED,W
020EC:  SUBLW  70
020EE:  BZ    20F6
020F0:  MOVF   xED,W
020F2:  SUBLW  50
020F4:  BNZ   2100
020F6:  MOVLB  0
020F8:  BRA    1E14
020FA:  MOVLB  0
020FC:  BRA    21D6
020FE:  MOVLB  4
....................    else if(CWL == 0x71||CWL ==0x51) CW_Q(); 
02100:  MOVF   xED,W
02102:  SUBLW  71
02104:  BZ    210C
02106:  MOVF   xED,W
02108:  SUBLW  51
0210A:  BNZ   2116
0210C:  MOVLB  0
0210E:  BRA    1E22
02110:  MOVLB  0
02112:  BRA    21D6
02114:  MOVLB  4
....................    else if(CWL == 0x72||CWL ==0x52) CW_R(); 
02116:  MOVF   xED,W
02118:  SUBLW  72
0211A:  BZ    2122
0211C:  MOVF   xED,W
0211E:  SUBLW  52
02120:  BNZ   212C
02122:  MOVLB  0
02124:  BRA    1E30
02126:  MOVLB  0
02128:  BRA    21D6
0212A:  MOVLB  4
....................    else if(CWL == 0x73||CWL ==0x53) CW_S(); 
0212C:  MOVF   xED,W
0212E:  SUBLW  73
02130:  BZ    2138
02132:  MOVF   xED,W
02134:  SUBLW  53
02136:  BNZ   2142
02138:  MOVLB  0
0213A:  BRA    1E3C
0213C:  MOVLB  0
0213E:  BRA    21D6
02140:  MOVLB  4
....................    else if(CWL == 0x74||CWL ==0x54) CW_T(); 
02142:  MOVF   xED,W
02144:  SUBLW  74
02146:  BZ    214E
02148:  MOVF   xED,W
0214A:  SUBLW  54
0214C:  BNZ   2158
0214E:  MOVLB  0
02150:  BRA    1E48
02152:  MOVLB  0
02154:  BRA    21D6
02156:  MOVLB  4
....................    else if(CWL == 0x75||CWL ==0x55) CW_U(); 
02158:  MOVF   xED,W
0215A:  SUBLW  75
0215C:  BZ    2164
0215E:  MOVF   xED,W
02160:  SUBLW  55
02162:  BNZ   216E
02164:  MOVLB  0
02166:  BRA    1E50
02168:  MOVLB  0
0216A:  BRA    21D6
0216C:  MOVLB  4
....................    else if(CWL == 0x76||CWL ==0x56) CW_V(); 
0216E:  MOVF   xED,W
02170:  SUBLW  76
02172:  BZ    217A
02174:  MOVF   xED,W
02176:  SUBLW  56
02178:  BNZ   2184
0217A:  MOVLB  0
0217C:  BRA    1E5C
0217E:  MOVLB  0
02180:  BRA    21D6
02182:  MOVLB  4
....................    else if(CWL == 0x77||CWL ==0x57) CW_W(); 
02184:  MOVF   xED,W
02186:  SUBLW  77
02188:  BZ    2190
0218A:  MOVF   xED,W
0218C:  SUBLW  57
0218E:  BNZ   219A
02190:  MOVLB  0
02192:  BRA    1E6A
02194:  MOVLB  0
02196:  BRA    21D6
02198:  MOVLB  4
....................    else if(CWL == 0x78||CWL ==0x58) CW_X(); 
0219A:  MOVF   xED,W
0219C:  SUBLW  78
0219E:  BZ    21A6
021A0:  MOVF   xED,W
021A2:  SUBLW  58
021A4:  BNZ   21B0
021A6:  MOVLB  0
021A8:  BRA    1E76
021AA:  MOVLB  0
021AC:  BRA    21D6
021AE:  MOVLB  4
....................    else if(CWL == 0x79||CWL ==0x59) CW_Y(); 
021B0:  MOVF   xED,W
021B2:  SUBLW  79
021B4:  BZ    21BC
021B6:  MOVF   xED,W
021B8:  SUBLW  59
021BA:  BNZ   21C6
021BC:  MOVLB  0
021BE:  BRA    1E84
021C0:  MOVLB  0
021C2:  BRA    21D6
021C4:  MOVLB  4
....................    else if(CWL == 0x7a||CWL ==0x6a) CW_Z(); 
021C6:  MOVF   xED,W
021C8:  SUBLW  7A
021CA:  BZ    21D2
021CC:  MOVF   xED,W
021CE:  SUBLW  6A
021D0:  BNZ   21D8
021D2:  MOVLB  0
021D4:  BRA    1E92
021D6:  MOVLB  4
021D8:  MOVLB  0
021DA:  RETURN 0
.................... } 
....................  
.................... //char ACK[3]; 
....................  
.................... void SEND_CW_NEWTRX() 
.................... { 
....................    CLEAR_DATA_ARRAY(CW_DATA_TO_NEWTRX,53); 
*
01AF8:  MOVLB  4
01AFA:  CLRF   xF0
01AFC:  MOVLW  32
01AFE:  MOVWF  xEF
01B00:  MOVLW  35
01B02:  MOVWF  xF1
01B04:  MOVLB  0
01B06:  RCALL  1594
....................    Fprintf(PC,"Transmismiting CW using NEW TRX\n\r");   
01B08:  MOVLW  9A
01B0A:  MOVWF  FF6
01B0C:  MOVLW  05
01B0E:  MOVWF  FF7
01B10:  MOVLW  00
01B12:  MOVWF  FF8
01B14:  CALL   111C
....................     
....................     
....................    CW_DATA_TO_NEWTRX[0]  = 0x7E; 
01B18:  MOVLW  7E
01B1A:  MOVWF  32
....................     
....................    if( CW_FLAG == NEWTRX_CW ) CW_DATA_TO_NEWTRX[1]  = 0xAA ; 
01B1C:  MOVF   x6A,W
01B1E:  SUBWF  x69,W
01B20:  BNZ   1B28
01B22:  MOVLW  AA
01B24:  MOVWF  33
01B26:  BRA    1B2A
....................    else                       CW_DATA_TO_NEWTRX[1]  = 0x00 ; 
01B28:  CLRF   33
....................     
....................    CW_DATA_TO_NEWTRX[2]  = 0x1E;    // 0x1E = 30 = 6 letters of sat name + word space + 6 leters of call sign + word space + 16 letters HSK  
01B2A:  MOVLW  1E
01B2C:  MOVWF  34
....................     
....................    // BIRDSx = 62 69 72 64 73 78 
....................    CW_DATA_TO_NEWTRX[3]  = 0x62;    // B 
01B2E:  MOVLW  62
01B30:  MOVWF  35
....................    CW_DATA_TO_NEWTRX[4]  = 0x69;    // I 
01B32:  MOVLW  69
01B34:  MOVWF  36
....................    CW_DATA_TO_NEWTRX[5]  = 0x72;    // R 
01B36:  MOVLW  72
01B38:  MOVWF  37
....................    CW_DATA_TO_NEWTRX[6]  = 0x64;    // D 
01B3A:  MOVLW  64
01B3C:  MOVWF  38
....................    CW_DATA_TO_NEWTRX[7]  = 0x73;    // S 
01B3E:  MOVLW  73
01B40:  MOVWF  39
....................    CW_DATA_TO_NEWTRX[8]  = 0x78;    // X 
01B42:  MOVLW  78
01B44:  MOVWF  3A
....................     
....................    CW_DATA_TO_NEWTRX[9]  = 0xAA;    // word space 
01B46:  MOVLW  AA
01B48:  MOVWF  3B
....................     
....................    // JG6YOW = 6A 67 36 79 6F 77 
....................    CW_DATA_TO_NEWTRX[10] = 0x6A ; 
01B4A:  MOVLW  6A
01B4C:  MOVWF  3C
....................    CW_DATA_TO_NEWTRX[11] = 0x67 ; 
01B4E:  MOVLW  67
01B50:  MOVWF  3D
....................    CW_DATA_TO_NEWTRX[12] = 0x36 ; 
01B52:  MOVLW  36
01B54:  MOVWF  3E
....................    CW_DATA_TO_NEWTRX[13] = 0x79 ; 
01B56:  MOVLW  79
01B58:  MOVWF  3F
....................    CW_DATA_TO_NEWTRX[14] = 0x6F ; 
01B5A:  MOVLW  6F
01B5C:  MOVWF  40
....................    CW_DATA_TO_NEWTRX[15] = 0x77 ; 
01B5E:  MOVLW  77
01B60:  MOVWF  41
....................     
....................    CW_DATA_TO_NEWTRX[16] = 0xAA; // word space 
01B62:  MOVLW  AA
01B64:  MOVWF  42
....................     
....................    // CW data 
....................    for(int i = 0; i<16; i++) 
01B66:  MOVLB  4
01B68:  CLRF   xE9
01B6A:  MOVF   xE9,W
01B6C:  SUBLW  0F
01B6E:  BNC   1BA4
....................    { 
....................       CW_DATA_TO_NEWTRX[17+i] = CW_DATA[i]; 
01B70:  MOVLW  11
01B72:  ADDWF  xE9,W
01B74:  CLRF   03
01B76:  ADDLW  32
01B78:  MOVWF  01
01B7A:  MOVLW  00
01B7C:  ADDWFC 03,F
01B7E:  MOVFF  03,4ED
01B82:  CLRF   03
01B84:  MOVF   xE9,W
01B86:  ADDLW  22
01B88:  MOVWF  FE9
01B8A:  MOVLW  00
01B8C:  ADDWFC 03,W
01B8E:  MOVWF  FEA
01B90:  MOVFF  FEF,4EE
01B94:  MOVFF  4ED,FEA
01B98:  MOVFF  01,FE9
01B9C:  MOVFF  4EE,FEF
01BA0:  INCF   xE9,F
01BA2:  BRA    1B6A
....................    } 
....................     
....................    CW_DATA_TO_NEWTRX[50]  = 0x7E; 
01BA4:  MOVLW  7E
01BA6:  MOVLB  0
01BA8:  MOVWF  x64
....................     
....................    // sending data to tranceiver 
....................    for(int i = 0; i<51; i++) 
01BAA:  MOVLB  4
01BAC:  CLRF   xEA
01BAE:  MOVF   xEA,W
01BB0:  SUBLW  32
01BB2:  BNC   1BD2
....................    { 
....................       fputc(CW_DATA_TO_NEWTRX[i],NEW_TRX); 
01BB4:  CLRF   03
01BB6:  MOVF   xEA,W
01BB8:  ADDLW  32
01BBA:  MOVWF  FE9
01BBC:  MOVLW  00
01BBE:  ADDWFC 03,W
01BC0:  MOVWF  FEA
01BC2:  MOVFF  FEF,4EC
01BC6:  MOVF   xEC,W
01BC8:  MOVLB  0
01BCA:  RCALL  1AEC
01BCC:  MOVLB  4
01BCE:  INCF   xEA,F
01BD0:  BRA    1BAE
....................    } 
....................     
....................    Fprintf(PC,"Sent CW data to New TRX = "); 
01BD2:  MOVLW  BC
01BD4:  MOVWF  FF6
01BD6:  MOVLW  05
01BD8:  MOVWF  FF7
01BDA:  MOVLW  00
01BDC:  MOVWF  FF8
01BDE:  MOVLB  0
01BE0:  CALL   111C
....................    for(int i = 0; i<51; i++) 
01BE4:  MOVLB  4
01BE6:  CLRF   xEB
01BE8:  MOVF   xEB,W
01BEA:  SUBLW  32
01BEC:  BNC   1C10
....................    { 
....................       Fprintf(PC,"%X",CW_DATA_TO_NEWTRX[i]); 
01BEE:  CLRF   03
01BF0:  MOVF   xEB,W
01BF2:  ADDLW  32
01BF4:  MOVWF  FE9
01BF6:  MOVLW  00
01BF8:  ADDWFC 03,W
01BFA:  MOVWF  FEA
01BFC:  MOVFF  FEF,4EE
01C00:  MOVLW  37
01C02:  MOVWF  xEF
01C04:  MOVLB  0
01C06:  CALL   11B4
01C0A:  MOVLB  4
01C0C:  INCF   xEB,F
01C0E:  BRA    1BE8
....................    } 
....................    Fprintf(PC,"\n\r"); 
01C10:  MOVLW  0A
01C12:  MOVLB  5
01C14:  MOVWF  x05
01C16:  MOVLB  0
01C18:  CALL   10D8
01C1C:  MOVLW  0D
01C1E:  MOVLB  5
01C20:  MOVWF  x05
01C22:  MOVLB  0
01C24:  CALL   10D8
....................    Delay_ms(100);   
01C28:  MOVLW  64
01C2A:  MOVLB  5
01C2C:  MOVWF  x04
01C2E:  MOVLB  0
01C30:  CALL   10AE
01C34:  GOTO   2AC6 (RETURN)
.................... } 
....................  
.................... void SEND_CW_OLDTRX() 
.................... { 
....................    Fprintf(PC,"Transmismiting CW using OLD TRX\n\r");   
*
02224:  MOVLW  D8
02226:  MOVWF  FF6
02228:  MOVLW  05
0222A:  MOVWF  FF7
0222C:  MOVLW  00
0222E:  MOVWF  FF8
02230:  CALL   111C
....................     
....................    OLD_TRX_CW_MODE(); 
02234:  RCALL  1C38
....................     
....................    CW_LTR("B");  
02236:  MOVLW  FA
02238:  MOVWF  FF6
0223A:  MOVLW  05
0223C:  MOVWF  FF7
0223E:  MOVLW  00
02240:  MOVWF  FF8
02242:  RCALL  21DC
....................    CW_LTR("I");  
02244:  MOVLW  FC
02246:  MOVWF  FF6
02248:  MOVLW  05
0224A:  MOVWF  FF7
0224C:  MOVLW  00
0224E:  MOVWF  FF8
02250:  RCALL  21DC
....................    CW_LTR("R");  
02252:  MOVLW  FE
02254:  MOVWF  FF6
02256:  MOVLW  05
02258:  MOVWF  FF7
0225A:  MOVLW  00
0225C:  MOVWF  FF8
0225E:  RCALL  21DC
....................    CW_LTR("D");  
02260:  MOVLW  00
02262:  MOVWF  FF6
02264:  MOVLW  06
02266:  MOVWF  FF7
02268:  MOVLW  00
0226A:  MOVWF  FF8
0226C:  RCALL  21DC
....................    CW_LTR("S");  
0226E:  MOVLW  02
02270:  MOVWF  FF6
02272:  MOVLW  06
02274:  MOVWF  FF7
02276:  MOVLW  00
02278:  MOVWF  FF8
0227A:  RCALL  21DC
....................    CW_LTR("X"); 
0227C:  MOVLW  04
0227E:  MOVWF  FF6
02280:  MOVLW  06
02282:  MOVWF  FF7
02284:  MOVLW  00
02286:  MOVWF  FF8
02288:  RCALL  21DC
....................     
....................    WORD_SPACE();  
0228A:  RCALL  2204
....................     
....................    CW_LTR(ST_callsign_leter_1); 
0228C:  MOVFF  323,4ED
02290:  RCALL  1EA0
....................    CW_LTR(ST_callsign_leter_2); 
02292:  MOVFF  324,4ED
02296:  RCALL  1EA0
....................    CW_LTR(ST_callsign_leter_3); 
02298:  MOVFF  325,4ED
0229C:  RCALL  1EA0
....................    CW_LTR(ST_callsign_leter_4); 
0229E:  MOVFF  326,4ED
022A2:  RCALL  1EA0
....................    CW_LTR(ST_callsign_leter_5); 
022A4:  MOVFF  327,4ED
022A8:  RCALL  1EA0
....................    CW_LTR(ST_callsign_leter_6);  
022AA:  MOVFF  328,4ED
022AE:  RCALL  1EA0
....................     
....................    WORD_SPACE(); 
022B0:  RCALL  2204
....................    Fprintf(PC,"CW :");   
022B2:  MOVLW  06
022B4:  MOVWF  FF6
022B6:  MOVLW  06
022B8:  MOVWF  FF7
022BA:  MOVLW  00
022BC:  MOVWF  FF8
022BE:  CALL   111C
....................    for(int i = 0; i<16; i++) 
022C2:  MOVLB  4
022C4:  CLRF   xE9
022C6:  MOVF   xE9,W
022C8:  SUBLW  0F
022CA:  BNC   2312
....................    { 
....................       CW_LTR(CW_DATA[i]); 
022CC:  CLRF   03
022CE:  MOVF   xE9,W
022D0:  ADDLW  22
022D2:  MOVWF  FE9
022D4:  MOVLW  00
022D6:  ADDWFC 03,W
022D8:  MOVWF  FEA
022DA:  MOVFF  FEF,4ED
022DE:  MOVLB  0
022E0:  RCALL  1EA0
....................       Fprintf(PC,"%X ", CW_DATA[i]);   
022E2:  CLRF   03
022E4:  MOVLB  4
022E6:  MOVF   xE9,W
022E8:  ADDLW  22
022EA:  MOVWF  FE9
022EC:  MOVLW  00
022EE:  ADDWFC 03,W
022F0:  MOVWF  FEA
022F2:  MOVFF  FEF,4EE
022F6:  MOVLW  37
022F8:  MOVWF  xEF
022FA:  MOVLB  0
022FC:  CALL   11B4
02300:  MOVLW  20
02302:  MOVLB  5
02304:  MOVWF  x05
02306:  MOVLB  0
02308:  CALL   10D8
0230C:  MOVLB  4
0230E:  INCF   xE9,F
02310:  BRA    22C6
....................    } 
....................    Fprintf(PC,"\n\r"); 
02312:  MOVLW  0A
02314:  MOVLB  5
02316:  MOVWF  x05
02318:  MOVLB  0
0231A:  CALL   10D8
0231E:  MOVLW  0D
02320:  MOVLB  5
02322:  MOVWF  x05
02324:  MOVLB  0
02326:  CALL   10D8
....................    OLD_TRX_RX_MODE(); 
0232A:  CALL   1144
0232E:  GOTO   2AD8 (RETURN)
.................... } 
....................  
....................  
....................     
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #include <GS_CMD.c> 
.................... // Followings are already writen in the compic 
.................... //_______________________________________________________________________________________________________________________________________________________ 
.................... //!   PACKETS_DOWNLOAD_WITHOUT_FM_ACCESS()       ;       // 54 77 00 10 __ __ __ __ 00 00 00 __ 
.................... //!   PACKETS_DOWNLOAD_WITH_FM_FULL_ACCESS()     ;       // 54 77 00 11 __ __ __ __ 00 00 00 __ 
.................... //!   DATA_DOWNLOAD_FROM_MAIN_FM_OR_MSN_FM()     ;       // 54 77 00 PP __ __ __ __ 00 00 __ __    PP = 12 (MSNFM), PP = 13 (MAINFM) 
.................... //!   FLASH_MEMORY_SECTOR_ERASE()                ;       // 54 77 00 10 __ __ __ __ 00 00 00 FM    FM = F1 (com FM), FM = F2 (main FM), FM = F3 (msn FM), 
.................... //!    
.................... //!   UPDATE_RST_PIC_TIME_BY_GS_CMD()            ;       // 54 77 00 EA __ __ __ __ __ __ 00 00 
.................... //!   SEND_CUURENT_TIME_OF_THE_SATELLITE()       ;       // 54 77 00 EB 00 00 00 00 00 00 00 00 
.................... //!    
.................... //!   CONTROL_CW_TX_MODE()                       ;       // 54 77 00 CA MM 00 00 00 00 00 00 00    MM = AA newtrx cw, MM = BB oldtrx CW, else = no cw 
.................... //!   CONTROL_NEW_TRX_POWER()                    ;       // 54 77 00 CB MM 00 00 00 00 00 00 00    MM = AA newtrx board on, MM = BB newtrx board off 
.................... //!   FAB_KILL_SWITCH_CONTROL()                  ;       // 54 77 00 FF MM __ 00 00 00 00 00 00    MM = F1 fab kill, MM = F2 obc kill 
.................... //!    
.................... //!   SENDING_APRS_MISSION_CMD_TO_MAINPIC()      ;       // 54 77 __ BX 
.................... //______________________________________________________________________________________________________________________________________________________ 
....................  
....................  
....................  
.................... // this function is used to download data from flash memory without getting full acces of flash memry 
.................... // there can be a intant Main Pic get fm acces to write HSK data. com pic will not be able to get data  
.................... // at that momment 
....................  
.................... //========================================================================================================================================= 
.................... Void PACKETS_DOWNLOAD_WITHOUT_FM_ACCESS() 
.................... { 
....................    if( NEWTRX_TO_CPIC_ARRAY[2] == 0x00 && NEWTRX_TO_CPIC_ARRAY[3] == 0x10 )                  
*
030EC:  MOVLB  1
030EE:  MOVF   x21,F
030F0:  BNZ   3144
030F2:  MOVF   x22,W
030F4:  SUBLW  10
030F6:  BNZ   3144
....................    { 
....................       Fprintf(PC,"NEW_TRX_PACKETS_DOWNLOAD_WITHOUT_FM_ACCESS\n\r"); 
030F8:  MOVLW  0C
030FA:  MOVWF  FF6
030FC:  MOVLW  06
030FE:  MOVWF  FF7
03100:  MOVLW  00
03102:  MOVWF  FF8
03104:  MOVLB  0
03106:  CALL   111C
....................        
....................       unsigned int32 START_ADDRESS = make32( NEWTRX_TO_CPIC_ARRAY[4] , NEWTRX_TO_CPIC_ARRAY[5], NEWTRX_TO_CPIC_ARRAY[6], NEWTRX_TO_CPIC_ARRAY[7] ); 
....................       unsigned int16 NUM_OF_PCKT   = NEWTRX_TO_CPIC_ARRAY[11]; 
0310A:  MOVFF  123,4E8
0310E:  MOVFF  124,4E7
03112:  MOVFF  125,4E6
03116:  MOVFF  126,4E5
0311A:  MOVLB  4
0311C:  CLRF   xEA
0311E:  MOVFF  12A,4E9
....................        
....................       NEW_TRX_SEND_DATA_PACKETS_TO_GS(START_ADDRESS, NUM_OF_PCKT);  
03122:  MOVFF  4E8,4F2
03126:  MOVFF  4E7,4F1
0312A:  MOVFF  4E6,4F0
0312E:  MOVFF  4E5,4EF
03132:  CLRF   xF6
03134:  CLRF   xF5
03136:  MOVFF  4EA,4F4
0313A:  MOVFF  4E9,4F3
0313E:  MOVLB  0
03140:  RCALL  2EB4
03142:  MOVLB  1
....................    } 
03144:  MOVLB  0
03146:  GOTO   5AE2 (RETURN)
.................... } 
....................  
.................... Void _PACKETS_DOWNLOAD_WITHOUT_FM_ACCESS() 
.................... { 
....................    if( OLDTRX_TO_CPIC_ARRAY[2] == 0x00 && OLDTRX_TO_CPIC_ARRAY[3] == 0x10 )                  
*
04534:  MOVLB  2
04536:  MOVF   x07,F
04538:  BNZ   458C
0453A:  MOVF   x08,W
0453C:  SUBLW  10
0453E:  BNZ   458C
....................    { 
....................       Fprintf(PC,"OLD_TRX_PACKETS_DOWNLOAD_WITHOUT_FM_ACCESS\n\r"); 
04540:  MOVLW  3A
04542:  MOVWF  FF6
04544:  MOVLW  06
04546:  MOVWF  FF7
04548:  MOVLW  00
0454A:  MOVWF  FF8
0454C:  MOVLB  0
0454E:  CALL   111C
....................        
....................       unsigned int32 START_ADDRESS = make32( OLDTRX_TO_CPIC_ARRAY[4] , OLDTRX_TO_CPIC_ARRAY[5], OLDTRX_TO_CPIC_ARRAY[6], OLDTRX_TO_CPIC_ARRAY[7] ); 
....................       unsigned int16 NUM_OF_PCKT   = OLDTRX_TO_CPIC_ARRAY[11]; 
04552:  MOVFF  209,4E8
04556:  MOVFF  20A,4E7
0455A:  MOVFF  20B,4E6
0455E:  MOVFF  20C,4E5
04562:  MOVLB  4
04564:  CLRF   xEA
04566:  MOVFF  210,4E9
....................        
....................       OLD_TRX_SEND_DATA_PACKETS_TO_GS(START_ADDRESS, NUM_OF_PCKT);  
0456A:  MOVFF  4E8,4F2
0456E:  MOVFF  4E7,4F1
04572:  MOVFF  4E6,4F0
04576:  MOVFF  4E5,4EF
0457A:  CLRF   xF6
0457C:  CLRF   xF5
0457E:  MOVFF  4EA,4F4
04582:  MOVFF  4E9,4F3
04586:  MOVLB  0
04588:  RCALL  42D8
0458A:  MOVLB  2
....................    } 
0458C:  MOVLB  0
0458E:  GOTO   5B72 (RETURN)
.................... } 
.................... //========================================================================================================================================= 
....................  
....................  
.................... //========================================================================================================================================= 
.................... // Download data from FM with full access to Flash memory 
.................... Void PACKETS_DOWNLOAD_WITH_FM_FULL_ACCESS() 
.................... { 
....................    if( NEWTRX_TO_CPIC_ARRAY[2] == 0x00 && NEWTRX_TO_CPIC_ARRAY[3] == 0x11 )                  
*
032DC:  MOVLB  1
032DE:  MOVF   x21,F
032E0:  BTFSS  FD8.2
032E2:  BRA    33E0
032E4:  MOVF   x22,W
032E6:  SUBLW  11
032E8:  BTFSS  FD8.2
032EA:  BRA    33E0
....................    { 
....................       Fprintf(PC,"NEW_TRX_PACKETS_DOWNLOAD_WITH_FM_ACCESS\n\r"); 
032EC:  MOVLW  68
032EE:  MOVWF  FF6
032F0:  MOVLW  06
032F2:  MOVWF  FF7
032F4:  MOVLW  00
032F6:  MOVWF  FF8
032F8:  MOVLB  0
032FA:  CALL   111C
....................        
....................       unsigned int32 START_ADDRESS = make32( NEWTRX_TO_CPIC_ARRAY[4] , NEWTRX_TO_CPIC_ARRAY[5], NEWTRX_TO_CPIC_ARRAY[6], NEWTRX_TO_CPIC_ARRAY[7] ); 
....................       unsigned int16 NUM_OF_PCKT   = NEWTRX_TO_CPIC_ARRAY[11]; 
....................       unsigned int8 acces_time = 0; 
032FE:  MOVFF  123,4E8
03302:  MOVFF  124,4E7
03306:  MOVFF  125,4E6
0330A:  MOVFF  126,4E5
0330E:  MOVLB  4
03310:  CLRF   xEA
03312:  MOVFF  12A,4E9
03316:  CLRF   xEB
....................        
....................       // calculating acces time 
....................       if( ( 0<NUM_OF_PCKT ) && (NUM_OF_PCKT<=100) ) acces_time = 50  ;    // adjust this values after checking 
03318:  MOVF   xEA,F
0331A:  BNZ   3322
0331C:  MOVF   xE9,W
0331E:  SUBLW  00
03320:  BC    3330
03322:  MOVF   xEA,F
03324:  BNZ   3330
03326:  MOVF   xE9,W
03328:  SUBLW  64
0332A:  BNC   3330
0332C:  MOVLW  32
0332E:  MOVWF  xEB
....................       if( (100<NUM_OF_PCKT) && (NUM_OF_PCKT<=200) ) acces_time = 100 ; 
03330:  MOVF   xEA,F
03332:  BNZ   333A
03334:  MOVF   xE9,W
03336:  SUBLW  64
03338:  BC    3348
0333A:  MOVF   xEA,F
0333C:  BNZ   3348
0333E:  MOVF   xE9,W
03340:  SUBLW  C8
03342:  BNC   3348
03344:  MOVLW  64
03346:  MOVWF  xEB
....................       if( (200<NUM_OF_PCKT) && (NUM_OF_PCKT<=255) ) acces_time = 150 ; 
03348:  MOVF   xEA,F
0334A:  BNZ   3352
0334C:  MOVF   xE9,W
0334E:  SUBLW  C8
03350:  BC    335C
03352:  MOVF   xEA,W
03354:  SUBLW  00
03356:  BNC   335C
03358:  MOVLW  96
0335A:  MOVWF  xEB
....................        
....................       GET_FM_ACCESS_FROM_MAIN_PIC(acces_time); 
0335C:  MOVFF  4EB,4EC
03360:  MOVLB  0
03362:  RCALL  314A
....................        
....................       if( MPIC_TO_CPIC_ARRAY[0] == 0xB0 && MPIC_TO_CPIC_ARRAY[1] == 0xFA && MPIC_TO_CPIC_ARRAY[31] == 0xB1 ) 
03364:  MOVLB  2
03366:  MOVF   xAF,W
03368:  SUBLW  B0
0336A:  BNZ   33B0
0336C:  MOVF   xB0,W
0336E:  SUBLW  FA
03370:  BNZ   33B0
03372:  MOVF   xCE,W
03374:  SUBLW  B1
03376:  BNZ   33B0
....................       { 
....................          Fprintf(PC,"FM access request succeful\n\r"); 
03378:  MOVLW  92
0337A:  MOVWF  FF6
0337C:  MOVLW  06
0337E:  MOVWF  FF7
03380:  MOVLW  00
03382:  MOVWF  FF8
03384:  MOVLB  0
03386:  CALL   111C
....................          NEW_TRX_SEND_DATA_PACKETS_TO_GS(START_ADDRESS, NUM_OF_PCKT);    // send packets 
0338A:  MOVFF  4E8,4F2
0338E:  MOVFF  4E7,4F1
03392:  MOVFF  4E6,4F0
03396:  MOVFF  4E5,4EF
0339A:  MOVLB  4
0339C:  CLRF   xF6
0339E:  CLRF   xF5
033A0:  MOVFF  4EA,4F4
033A4:  MOVFF  4E9,4F3
033A8:  MOVLB  0
033AA:  RCALL  2EB4
....................       } 
033AC:  BRA    33CA
033AE:  MOVLB  2
....................        
....................       else 
....................       { 
....................          Fprintf(PC,"FM access request not-succeful\n\r"); 
033B0:  MOVLW  B0
033B2:  MOVWF  FF6
033B4:  MOVLW  06
033B6:  MOVWF  FF7
033B8:  MOVLW  00
033BA:  MOVWF  FF8
033BC:  MOVLB  0
033BE:  CALL   111C
....................          NEWTRX_SEND_ACKNOWLEDGEMENT(0); 
033C2:  MOVLB  4
033C4:  CLRF   xEF
033C6:  MOVLB  0
033C8:  RCALL  3192
....................       } 
....................        
....................       CLEAR_DATA_ARRAY(MPIC_TO_CPIC_ARRAY, 50); 
033CA:  MOVLW  02
033CC:  MOVLB  4
033CE:  MOVWF  xF0
033D0:  MOVLW  AF
033D2:  MOVWF  xEF
033D4:  MOVLW  32
033D6:  MOVWF  xF1
033D8:  MOVLB  0
033DA:  CALL   1594
033DE:  MOVLB  1
....................    } 
033E0:  MOVLB  0
033E2:  GOTO   5AE6 (RETURN)
.................... } 
....................  
.................... Void _PACKETS_DOWNLOAD_WITH_FM_FULL_ACCESS() 
.................... { 
....................    if( OLDTRX_TO_CPIC_ARRAY[2] == 0x00 && OLDTRX_TO_CPIC_ARRAY[3] == 0x11 )                  
*
046F6:  MOVLB  2
046F8:  MOVF   x07,F
046FA:  BTFSS  FD8.2
046FC:  BRA    47FC
046FE:  MOVF   x08,W
04700:  SUBLW  11
04702:  BTFSS  FD8.2
04704:  BRA    47FC
....................    { 
....................       Fprintf(PC,"OLD_TRX_PACKETS_DOWNLOAD_WITH_FM_ACCESS\n\r"); 
04706:  MOVLW  D2
04708:  MOVWF  FF6
0470A:  MOVLW  06
0470C:  MOVWF  FF7
0470E:  MOVLW  00
04710:  MOVWF  FF8
04712:  MOVLB  0
04714:  CALL   111C
....................        
....................       unsigned int32 START_ADDRESS = make32( OLDTRX_TO_CPIC_ARRAY[4] , OLDTRX_TO_CPIC_ARRAY[5], OLDTRX_TO_CPIC_ARRAY[6], OLDTRX_TO_CPIC_ARRAY[7] ); 
....................       unsigned int16 NUM_OF_PCKT   = OLDTRX_TO_CPIC_ARRAY[11]; 
....................       unsigned int8 acces_time = 0; 
04718:  MOVFF  209,4E8
0471C:  MOVFF  20A,4E7
04720:  MOVFF  20B,4E6
04724:  MOVFF  20C,4E5
04728:  MOVLB  4
0472A:  CLRF   xEA
0472C:  MOVFF  210,4E9
04730:  CLRF   xEB
....................        
....................       // calculating acces time 
....................       if( ( 0<NUM_OF_PCKT ) && (NUM_OF_PCKT<=100) ) acces_time = 50  ;    // adjust this values after checking 
04732:  MOVF   xEA,F
04734:  BNZ   473C
04736:  MOVF   xE9,W
04738:  SUBLW  00
0473A:  BC    474A
0473C:  MOVF   xEA,F
0473E:  BNZ   474A
04740:  MOVF   xE9,W
04742:  SUBLW  64
04744:  BNC   474A
04746:  MOVLW  32
04748:  MOVWF  xEB
....................       if( (100<NUM_OF_PCKT) && (NUM_OF_PCKT<=200) ) acces_time = 100 ; 
0474A:  MOVF   xEA,F
0474C:  BNZ   4754
0474E:  MOVF   xE9,W
04750:  SUBLW  64
04752:  BC    4762
04754:  MOVF   xEA,F
04756:  BNZ   4762
04758:  MOVF   xE9,W
0475A:  SUBLW  C8
0475C:  BNC   4762
0475E:  MOVLW  64
04760:  MOVWF  xEB
....................       if( (200<NUM_OF_PCKT) && (NUM_OF_PCKT<=255) ) acces_time = 150 ; 
04762:  MOVF   xEA,F
04764:  BNZ   476C
04766:  MOVF   xE9,W
04768:  SUBLW  C8
0476A:  BC    4776
0476C:  MOVF   xEA,W
0476E:  SUBLW  00
04770:  BNC   4776
04772:  MOVLW  96
04774:  MOVWF  xEB
....................        
....................       GET_FM_ACCESS_FROM_MAIN_PIC(acces_time); 
04776:  MOVFF  4EB,4EC
0477A:  MOVLB  0
0477C:  CALL   314A
....................        
....................       if( MPIC_TO_CPIC_ARRAY[0] == 0xB0 && MPIC_TO_CPIC_ARRAY[1] == 0xFA && MPIC_TO_CPIC_ARRAY[31] == 0xB1 ) 
04780:  MOVLB  2
04782:  MOVF   xAF,W
04784:  SUBLW  B0
04786:  BNZ   47CC
04788:  MOVF   xB0,W
0478A:  SUBLW  FA
0478C:  BNZ   47CC
0478E:  MOVF   xCE,W
04790:  SUBLW  B1
04792:  BNZ   47CC
....................       { 
....................          Fprintf(PC,"FM access request succeful\n\r"); 
04794:  MOVLW  FC
04796:  MOVWF  FF6
04798:  MOVLW  06
0479A:  MOVWF  FF7
0479C:  MOVLW  00
0479E:  MOVWF  FF8
047A0:  MOVLB  0
047A2:  CALL   111C
....................          OLD_TRX_SEND_DATA_PACKETS_TO_GS(START_ADDRESS, NUM_OF_PCKT);    // send packets 
047A6:  MOVFF  4E8,4F2
047AA:  MOVFF  4E7,4F1
047AE:  MOVFF  4E6,4F0
047B2:  MOVFF  4E5,4EF
047B6:  MOVLB  4
047B8:  CLRF   xF6
047BA:  CLRF   xF5
047BC:  MOVFF  4EA,4F4
047C0:  MOVFF  4E9,4F3
047C4:  MOVLB  0
047C6:  RCALL  42D8
....................       } 
047C8:  BRA    47E6
047CA:  MOVLB  2
....................        
....................       else 
....................       { 
....................          Fprintf(PC,"FM access request not-succeful\n\r"); 
047CC:  MOVLW  1A
047CE:  MOVWF  FF6
047D0:  MOVLW  07
047D2:  MOVWF  FF7
047D4:  MOVLW  00
047D6:  MOVWF  FF8
047D8:  MOVLB  0
047DA:  CALL   111C
....................          OLDTRX_SEND_ACKNOWLEDGEMENT(0); 
047DE:  MOVLB  4
047E0:  CLRF   xEF
047E2:  MOVLB  0
047E4:  RCALL  4592
....................       } 
....................        
....................       CLEAR_DATA_ARRAY(MPIC_TO_CPIC_ARRAY, 50); 
047E6:  MOVLW  02
047E8:  MOVLB  4
047EA:  MOVWF  xF0
047EC:  MOVLW  AF
047EE:  MOVWF  xEF
047F0:  MOVLW  32
047F2:  MOVWF  xF1
047F4:  MOVLB  0
047F6:  CALL   1594
047FA:  MOVLB  2
....................    } 
047FC:  MOVLB  0
047FE:  GOTO   5B76 (RETURN)
.................... } 
.................... //========================================================================================================================================= 
....................  
....................  
....................  
....................  
....................  
.................... //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
.................... //========================================================================================================================================= 
.................... void DATA_DOWNLOAD_FROM_MAIN_FM_OR_MSN_FM() 
.................... { 
....................    if( NEWTRX_TO_CPIC_ARRAY[2] == 0x00 && ( NEWTRX_TO_CPIC_ARRAY[3] == 0x12 || NEWTRX_TO_CPIC_ARRAY[3] == 0x13 ) ) 
*
033E6:  MOVLB  1
033E8:  MOVF   x21,F
033EA:  BTFSS  FD8.2
033EC:  BRA    35F8
033EE:  MOVF   x22,W
033F0:  SUBLW  12
033F2:  BZ    33FC
033F4:  MOVF   x22,W
033F6:  SUBLW  13
033F8:  BTFSS  FD8.2
033FA:  BRA    35F8
....................    { 
....................       unsigned int8 _FM = NEWTRX_TO_CPIC_ARRAY[3]; 
033FC:  MOVFF  122,4E5
....................        
....................       if( _FM == 0x12 ) Fprintf(PC,"DATA_DOWNLOAD_FROM_MSN_FM  NEWTRX\n\r"); 
03400:  MOVLB  4
03402:  MOVF   xE5,W
03404:  SUBLW  12
03406:  BNZ   341C
03408:  MOVLW  3C
0340A:  MOVWF  FF6
0340C:  MOVLW  07
0340E:  MOVWF  FF7
03410:  MOVLW  00
03412:  MOVWF  FF8
03414:  MOVLB  0
03416:  CALL   111C
0341A:  MOVLB  4
....................       if( _FM == 0x13 ) Fprintf(PC,"DATA_DOWNLOAD_FROM_MAIN_FM NEWTRX\n\r");   
0341C:  MOVF   xE5,W
0341E:  SUBLW  13
03420:  BNZ   3436
03422:  MOVLW  60
03424:  MOVWF  FF6
03426:  MOVLW  07
03428:  MOVWF  FF7
0342A:  MOVLW  00
0342C:  MOVWF  FF8
0342E:  MOVLB  0
03430:  CALL   111C
03434:  MOVLB  4
....................        
....................       //_________________________________________________________________ 
....................       CLEAR_DATA_ARRAY(CPIC_TO_MPIC_ARRAY, 40); 
03436:  MOVLW  02
03438:  MOVWF  xF0
0343A:  MOVLW  E6
0343C:  MOVWF  xEF
0343E:  MOVLW  28
03440:  MOVWF  xF1
03442:  MOVLB  0
03444:  CALL   1594
....................       CLEAR_DATA_ARRAY(MPIC_TO_CPIC_ARRAY, 40); 
03448:  MOVLW  02
0344A:  MOVLB  4
0344C:  MOVWF  xF0
0344E:  MOVLW  AF
03450:  MOVWF  xEF
03452:  MOVLW  28
03454:  MOVWF  xF1
03456:  MOVLB  0
03458:  CALL   1594
....................       CPIC_TO_MPIC_ARRAY[0]  = 0xB0 ;                       // header 
0345C:  MOVLW  B0
0345E:  MOVLB  2
03460:  MOVWF  xE6
....................       for(int i = 1; i<=10; i++) 
03462:  MOVLW  01
03464:  MOVLB  4
03466:  MOVWF  xE6
03468:  MOVF   xE6,W
0346A:  SUBLW  0A
0346C:  BNC   34A2
....................       { 
....................          CPIC_TO_MPIC_ARRAY[i] = NEWTRX_TO_CPIC_ARRAY[i+1]; 
0346E:  CLRF   03
03470:  MOVF   xE6,W
03472:  ADDLW  E6
03474:  MOVWF  01
03476:  MOVLW  02
03478:  ADDWFC 03,F
0347A:  MOVFF  03,4F0
0347E:  MOVLW  01
03480:  ADDWF  xE6,W
03482:  CLRF   03
03484:  ADDLW  1F
03486:  MOVWF  FE9
03488:  MOVLW  01
0348A:  ADDWFC 03,W
0348C:  MOVWF  FEA
0348E:  MOVFF  FEF,4F1
03492:  MOVFF  4F0,FEA
03496:  MOVFF  01,FE9
0349A:  MOVFF  4F1,FEF
0349E:  INCF   xE6,F
034A0:  BRA    3468
....................       } 
....................       CPIC_TO_MPIC_ARRAY[39] = 0xB1 ;                       // footer 
034A2:  MOVLW  B1
034A4:  MOVLB  3
034A6:  MOVWF  x0D
....................       //_________________________________________________________________ 
....................        
....................       COMUNICATION_WITH_MAIN_PIC_AND_WAIT_FOR_RESPONE(2, 1000,200); 
034A8:  MOVLB  4
034AA:  CLRF   xF0
034AC:  MOVLW  02
034AE:  MOVWF  xEF
034B0:  MOVLW  03
034B2:  MOVWF  xF2
034B4:  MOVLW  E8
034B6:  MOVWF  xF1
034B8:  CLRF   xF4
034BA:  MOVLW  C8
034BC:  MOVWF  xF3
034BE:  MOVLB  0
034C0:  CALL   19DE
....................        
....................       if( MPIC_TO_CPIC_ARRAY[0] == 0xB0 &&  MPIC_TO_CPIC_ARRAY[1] == _FM  && MPIC_TO_CPIC_ARRAY[31] == 0xB1 ) 
034C4:  MOVLB  2
034C6:  MOVF   xAF,W
034C8:  SUBLW  B0
034CA:  BTFSS  FD8.2
034CC:  BRA    35DC
034CE:  MOVLB  4
034D0:  MOVF   xE5,W
034D2:  MOVLB  2
034D4:  SUBWF  xB0,W
034D6:  BTFSS  FD8.2
034D8:  BRA    35DC
034DA:  MOVF   xCE,W
034DC:  SUBLW  B1
034DE:  BTFSS  FD8.2
034E0:  BRA    35DC
....................       { 
....................          CLEAR_DATA_ARRAY(MPIC_TO_CPIC_ARRAY, 40); 
034E2:  MOVLW  02
034E4:  MOVLB  4
034E6:  MOVWF  xF0
034E8:  MOVLW  AF
034EA:  MOVWF  xEF
034EC:  MOVLW  28
034EE:  MOVWF  xF1
034F0:  MOVLB  0
034F2:  CALL   1594
....................          Fprintf(PC,"Main PIC responded copying started \n\r");  
034F6:  MOVLW  84
034F8:  MOVWF  FF6
034FA:  MOVLW  07
034FC:  MOVWF  FF7
034FE:  MOVLW  00
03500:  MOVWF  FF8
03502:  CALL   111C
....................          int16 count = 0; 
03506:  MOVLB  4
03508:  CLRF   xE8
0350A:  CLRF   xE7
....................          while( !(MPIC_TO_CPIC_ARRAY[0] == 0xB0 &&  MPIC_TO_CPIC_ARRAY[1] == _FM  && MPIC_TO_CPIC_ARRAY[31] == 0xB1) ) 
0350C:  MOVLB  2
0350E:  MOVF   xAF,W
03510:  SUBLW  B0
03512:  BNZ   3524
03514:  MOVLB  4
03516:  MOVF   xE5,W
03518:  MOVLB  2
0351A:  SUBWF  xB0,W
0351C:  BNZ   3524
0351E:  MOVF   xCE,W
03520:  SUBLW  B1
03522:  BZ    3558
....................          { 
....................             CHECK_UART_INCOMING_FROM_MAIN_PIC() ;  
03524:  MOVLB  0
03526:  CALL   196E
....................             Delay_ms(1); 
0352A:  MOVLW  01
0352C:  MOVLB  5
0352E:  MOVWF  x04
03530:  MOVLB  0
03532:  CALL   10AE
....................             count++; 
03536:  MOVLB  4
03538:  INCF   xE7,F
0353A:  BTFSC  FD8.2
0353C:  INCF   xE8,F
....................             if( count >= 10000) break; 
0353E:  MOVF   xE8,W
03540:  SUBLW  26
03542:  BC    3554
03544:  XORLW  FF
03546:  BNZ   354E
03548:  MOVF   xE7,W
0354A:  SUBLW  0F
0354C:  BC    3554
0354E:  MOVLB  2
03550:  BRA    3558
03552:  MOVLB  4
03554:  BRA    350C
03556:  MOVLB  2
....................          } 
....................           
....................          if( MPIC_TO_CPIC_ARRAY[0] == 0xB0 &&  MPIC_TO_CPIC_ARRAY[1] == _FM  && MPIC_TO_CPIC_ARRAY[31] == 0xB1 ) 
03558:  MOVF   xAF,W
0355A:  SUBLW  B0
0355C:  BNZ   35BE
0355E:  MOVLB  4
03560:  MOVF   xE5,W
03562:  MOVLB  2
03564:  SUBWF  xB0,W
03566:  BNZ   35BE
03568:  MOVF   xCE,W
0356A:  SUBLW  B1
0356C:  BNZ   35BE
....................          { 
....................             Fprintf(PC,"Main PIC responded copying finish sendinf data to GS\n\r"); 
0356E:  MOVLW  AA
03570:  MOVWF  FF6
03572:  MOVLW  07
03574:  MOVWF  FF7
03576:  MOVLW  00
03578:  MOVWF  FF8
0357A:  MOVLB  0
0357C:  CALL   111C
....................             unsigned int32 START_ADDRESS = make32( NEWTRX_TO_CPIC_ARRAY[4]  , NEWTRX_TO_CPIC_ARRAY[5], NEWTRX_TO_CPIC_ARRAY[6], NEWTRX_TO_CPIC_ARRAY[7] ); 
....................             unsigned int16 NUM_OF_PCKT   = make16( NEWTRX_TO_CPIC_ARRAY[10] , NEWTRX_TO_CPIC_ARRAY[11] ); 
03580:  MOVFF  123,4EC
03584:  MOVFF  124,4EB
03588:  MOVFF  125,4EA
0358C:  MOVFF  126,4E9
03590:  MOVFF  129,4EE
03594:  MOVFF  12A,4ED
....................              
....................             NEW_TRX_SEND_DATA_PACKETS_TO_GS(START_ADDRESS, NUM_OF_PCKT); 
03598:  MOVFF  4EC,4F2
0359C:  MOVFF  4EB,4F1
035A0:  MOVFF  4EA,4F0
035A4:  MOVFF  4E9,4EF
035A8:  MOVLB  4
035AA:  CLRF   xF6
035AC:  CLRF   xF5
035AE:  MOVFF  4EE,4F4
035B2:  MOVFF  4ED,4F3
035B6:  MOVLB  0
035B8:  RCALL  2EB4
....................          }    
035BA:  BRA    35D8
035BC:  MOVLB  2
....................          else 
....................          { 
....................             Fprintf(PC,"Copying timeout \n\r"); 
035BE:  MOVLW  E2
035C0:  MOVWF  FF6
035C2:  MOVLW  07
035C4:  MOVWF  FF7
035C6:  MOVLW  00
035C8:  MOVWF  FF8
035CA:  MOVLB  0
035CC:  CALL   111C
....................             NEWTRX_SEND_ACKNOWLEDGEMENT(0); 
035D0:  MOVLB  4
035D2:  CLRF   xEF
035D4:  MOVLB  0
035D6:  RCALL  3192
....................          }   
....................       } 
035D8:  BRA    35F6
035DA:  MOVLB  2
....................        
....................       else 
....................       { 
....................          Fprintf(PC,"Main PIC not responded\n\r"); 
035DC:  MOVLW  F6
035DE:  MOVWF  FF6
035E0:  MOVLW  07
035E2:  MOVWF  FF7
035E4:  MOVLW  00
035E6:  MOVWF  FF8
035E8:  MOVLB  0
035EA:  CALL   111C
....................          NEWTRX_SEND_ACKNOWLEDGEMENT(0); 
035EE:  MOVLB  4
035F0:  CLRF   xEF
035F2:  MOVLB  0
035F4:  RCALL  3192
035F6:  MOVLB  1
....................       } 
....................    } 
035F8:  MOVLB  0
035FA:  GOTO   5AEA (RETURN)
....................     
....................  
.................... } 
....................  
.................... void _DATA_DOWNLOAD_FROM_MAIN_FM_OR_MSN_FM() 
.................... { 
....................    if( OLDTRX_TO_CPIC_ARRAY[2] == 0x00 && ( OLDTRX_TO_CPIC_ARRAY[3] == 0x12 || OLDTRX_TO_CPIC_ARRAY[3] == 0x13 ) ) 
*
04802:  MOVLB  2
04804:  MOVF   x07,F
04806:  BTFSS  FD8.2
04808:  BRA    4A14
0480A:  MOVF   x08,W
0480C:  SUBLW  12
0480E:  BZ    4818
04810:  MOVF   x08,W
04812:  SUBLW  13
04814:  BTFSS  FD8.2
04816:  BRA    4A14
....................    { 
....................       unsigned int8 _FM = OLDTRX_TO_CPIC_ARRAY[3]; 
04818:  MOVFF  208,4E5
....................        
....................       if( _FM == 0x12 ) Fprintf(PC,"DATA_DOWNLOAD_FROM_MSN_FM  OLDTRX\n\r"); 
0481C:  MOVLB  4
0481E:  MOVF   xE5,W
04820:  SUBLW  12
04822:  BNZ   4838
04824:  MOVLW  10
04826:  MOVWF  FF6
04828:  MOVLW  08
0482A:  MOVWF  FF7
0482C:  MOVLW  00
0482E:  MOVWF  FF8
04830:  MOVLB  0
04832:  CALL   111C
04836:  MOVLB  4
....................       if( _FM == 0x13 ) Fprintf(PC,"DATA_DOWNLOAD_FROM_MAIN_FM OLDTRX\n\r");   
04838:  MOVF   xE5,W
0483A:  SUBLW  13
0483C:  BNZ   4852
0483E:  MOVLW  34
04840:  MOVWF  FF6
04842:  MOVLW  08
04844:  MOVWF  FF7
04846:  MOVLW  00
04848:  MOVWF  FF8
0484A:  MOVLB  0
0484C:  CALL   111C
04850:  MOVLB  4
....................        
....................       //_________________________________________________________________ 
....................       CLEAR_DATA_ARRAY(CPIC_TO_MPIC_ARRAY, 40); 
04852:  MOVLW  02
04854:  MOVWF  xF0
04856:  MOVLW  E6
04858:  MOVWF  xEF
0485A:  MOVLW  28
0485C:  MOVWF  xF1
0485E:  MOVLB  0
04860:  CALL   1594
....................       CLEAR_DATA_ARRAY(MPIC_TO_CPIC_ARRAY, 40); 
04864:  MOVLW  02
04866:  MOVLB  4
04868:  MOVWF  xF0
0486A:  MOVLW  AF
0486C:  MOVWF  xEF
0486E:  MOVLW  28
04870:  MOVWF  xF1
04872:  MOVLB  0
04874:  CALL   1594
....................       CPIC_TO_MPIC_ARRAY[0]  = 0xB0 ;                       // header 
04878:  MOVLW  B0
0487A:  MOVLB  2
0487C:  MOVWF  xE6
....................       for(int i = 1; i<=10; i++) 
0487E:  MOVLW  01
04880:  MOVLB  4
04882:  MOVWF  xE6
04884:  MOVF   xE6,W
04886:  SUBLW  0A
04888:  BNC   48BE
....................       { 
....................          CPIC_TO_MPIC_ARRAY[i] = OLDTRX_TO_CPIC_ARRAY[i+1]; 
0488A:  CLRF   03
0488C:  MOVF   xE6,W
0488E:  ADDLW  E6
04890:  MOVWF  01
04892:  MOVLW  02
04894:  ADDWFC 03,F
04896:  MOVFF  03,4F0
0489A:  MOVLW  01
0489C:  ADDWF  xE6,W
0489E:  CLRF   03
048A0:  ADDLW  05
048A2:  MOVWF  FE9
048A4:  MOVLW  02
048A6:  ADDWFC 03,W
048A8:  MOVWF  FEA
048AA:  MOVFF  FEF,4F1
048AE:  MOVFF  4F0,FEA
048B2:  MOVFF  01,FE9
048B6:  MOVFF  4F1,FEF
048BA:  INCF   xE6,F
048BC:  BRA    4884
....................       } 
....................       CPIC_TO_MPIC_ARRAY[39] = 0xB1 ;                       // footer 
048BE:  MOVLW  B1
048C0:  MOVLB  3
048C2:  MOVWF  x0D
....................       //_________________________________________________________________ 
....................        
....................       COMUNICATION_WITH_MAIN_PIC_AND_WAIT_FOR_RESPONE(2, 1000,200); 
048C4:  MOVLB  4
048C6:  CLRF   xF0
048C8:  MOVLW  02
048CA:  MOVWF  xEF
048CC:  MOVLW  03
048CE:  MOVWF  xF2
048D0:  MOVLW  E8
048D2:  MOVWF  xF1
048D4:  CLRF   xF4
048D6:  MOVLW  C8
048D8:  MOVWF  xF3
048DA:  MOVLB  0
048DC:  CALL   19DE
....................        
....................       if( MPIC_TO_CPIC_ARRAY[0] == 0xB0 &&  MPIC_TO_CPIC_ARRAY[1] == _FM  && MPIC_TO_CPIC_ARRAY[31] == 0xB1 ) 
048E0:  MOVLB  2
048E2:  MOVF   xAF,W
048E4:  SUBLW  B0
048E6:  BTFSS  FD8.2
048E8:  BRA    49F8
048EA:  MOVLB  4
048EC:  MOVF   xE5,W
048EE:  MOVLB  2
048F0:  SUBWF  xB0,W
048F2:  BTFSS  FD8.2
048F4:  BRA    49F8
048F6:  MOVF   xCE,W
048F8:  SUBLW  B1
048FA:  BTFSS  FD8.2
048FC:  BRA    49F8
....................       { 
....................          CLEAR_DATA_ARRAY(MPIC_TO_CPIC_ARRAY, 40); 
048FE:  MOVLW  02
04900:  MOVLB  4
04902:  MOVWF  xF0
04904:  MOVLW  AF
04906:  MOVWF  xEF
04908:  MOVLW  28
0490A:  MOVWF  xF1
0490C:  MOVLB  0
0490E:  CALL   1594
....................          Fprintf(PC,"Main PIC responded copying started \n\r");  
04912:  MOVLW  58
04914:  MOVWF  FF6
04916:  MOVLW  08
04918:  MOVWF  FF7
0491A:  MOVLW  00
0491C:  MOVWF  FF8
0491E:  CALL   111C
....................          int16 count = 0; 
04922:  MOVLB  4
04924:  CLRF   xE8
04926:  CLRF   xE7
....................          while( !(MPIC_TO_CPIC_ARRAY[0] == 0xB0 &&  MPIC_TO_CPIC_ARRAY[1] == _FM  && MPIC_TO_CPIC_ARRAY[31] == 0xB1) ) 
04928:  MOVLB  2
0492A:  MOVF   xAF,W
0492C:  SUBLW  B0
0492E:  BNZ   4940
04930:  MOVLB  4
04932:  MOVF   xE5,W
04934:  MOVLB  2
04936:  SUBWF  xB0,W
04938:  BNZ   4940
0493A:  MOVF   xCE,W
0493C:  SUBLW  B1
0493E:  BZ    4974
....................          { 
....................             CHECK_UART_INCOMING_FROM_MAIN_PIC() ;  
04940:  MOVLB  0
04942:  CALL   196E
....................             Delay_ms(1); 
04946:  MOVLW  01
04948:  MOVLB  5
0494A:  MOVWF  x04
0494C:  MOVLB  0
0494E:  CALL   10AE
....................             count++; 
04952:  MOVLB  4
04954:  INCF   xE7,F
04956:  BTFSC  FD8.2
04958:  INCF   xE8,F
....................             if( count >= 10000) break; 
0495A:  MOVF   xE8,W
0495C:  SUBLW  26
0495E:  BC    4970
04960:  XORLW  FF
04962:  BNZ   496A
04964:  MOVF   xE7,W
04966:  SUBLW  0F
04968:  BC    4970
0496A:  MOVLB  2
0496C:  BRA    4974
0496E:  MOVLB  4
04970:  BRA    4928
04972:  MOVLB  2
....................          } 
....................           
....................          if( MPIC_TO_CPIC_ARRAY[0] == 0xB0 &&  MPIC_TO_CPIC_ARRAY[1] == _FM  && MPIC_TO_CPIC_ARRAY[31] == 0xB1 ) 
04974:  MOVF   xAF,W
04976:  SUBLW  B0
04978:  BNZ   49DA
0497A:  MOVLB  4
0497C:  MOVF   xE5,W
0497E:  MOVLB  2
04980:  SUBWF  xB0,W
04982:  BNZ   49DA
04984:  MOVF   xCE,W
04986:  SUBLW  B1
04988:  BNZ   49DA
....................          { 
....................             Fprintf(PC,"Main PIC responded copying finish sendinf data to GS\n\r"); 
0498A:  MOVLW  7E
0498C:  MOVWF  FF6
0498E:  MOVLW  08
04990:  MOVWF  FF7
04992:  MOVLW  00
04994:  MOVWF  FF8
04996:  MOVLB  0
04998:  CALL   111C
....................             unsigned int32 START_ADDRESS = make32( OLDTRX_TO_CPIC_ARRAY[4]  , OLDTRX_TO_CPIC_ARRAY[5], OLDTRX_TO_CPIC_ARRAY[6], OLDTRX_TO_CPIC_ARRAY[7] ); 
....................             unsigned int16 NUM_OF_PCKT   = make16( OLDTRX_TO_CPIC_ARRAY[10] , OLDTRX_TO_CPIC_ARRAY[11] ); 
0499C:  MOVFF  209,4EC
049A0:  MOVFF  20A,4EB
049A4:  MOVFF  20B,4EA
049A8:  MOVFF  20C,4E9
049AC:  MOVFF  20F,4EE
049B0:  MOVFF  210,4ED
....................              
....................             OLD_TRX_SEND_DATA_PACKETS_TO_GS(START_ADDRESS, NUM_OF_PCKT); 
049B4:  MOVFF  4EC,4F2
049B8:  MOVFF  4EB,4F1
049BC:  MOVFF  4EA,4F0
049C0:  MOVFF  4E9,4EF
049C4:  MOVLB  4
049C6:  CLRF   xF6
049C8:  CLRF   xF5
049CA:  MOVFF  4EE,4F4
049CE:  MOVFF  4ED,4F3
049D2:  MOVLB  0
049D4:  RCALL  42D8
....................          }    
049D6:  BRA    49F4
049D8:  MOVLB  2
....................          else 
....................          { 
....................             Fprintf(PC,"Copying timeout \n\r"); 
049DA:  MOVLW  B6
049DC:  MOVWF  FF6
049DE:  MOVLW  08
049E0:  MOVWF  FF7
049E2:  MOVLW  00
049E4:  MOVWF  FF8
049E6:  MOVLB  0
049E8:  CALL   111C
....................             OLDTRX_SEND_ACKNOWLEDGEMENT(0); 
049EC:  MOVLB  4
049EE:  CLRF   xEF
049F0:  MOVLB  0
049F2:  RCALL  4592
....................          }   
....................       } 
049F4:  BRA    4A12
049F6:  MOVLB  2
....................        
....................       else 
....................       { 
....................          Fprintf(PC,"Main PIC not responded\n\r"); 
049F8:  MOVLW  CA
049FA:  MOVWF  FF6
049FC:  MOVLW  08
049FE:  MOVWF  FF7
04A00:  MOVLW  00
04A02:  MOVWF  FF8
04A04:  MOVLB  0
04A06:  CALL   111C
....................          OLDTRX_SEND_ACKNOWLEDGEMENT(0); 
04A0A:  MOVLB  4
04A0C:  CLRF   xEF
04A0E:  MOVLB  0
04A10:  RCALL  4592
04A12:  MOVLB  2
....................       } 
....................    } 
04A14:  MOVLB  0
04A16:  GOTO   5B7A (RETURN)
....................     
....................  
.................... } 
....................  
....................  
.................... //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
.................... //=============================================================================================================================================== 
.................... void FLASH_MEMORY_SECTOR_ERASE() 
.................... { 
....................    if( NEWTRX_TO_CPIC_ARRAY[2] == 0x00 && NEWTRX_TO_CPIC_ARRAY[3] == 0x14  ) 
*
035FE:  MOVLB  1
03600:  MOVF   x21,F
03602:  BTFSS  FD8.2
03604:  BRA    36FE
03606:  MOVF   x22,W
03608:  SUBLW  14
0360A:  BTFSS  FD8.2
0360C:  BRA    36FE
....................    { 
....................       Fprintf(PC,"FLASH_MEMORY_SECTOR_ERASE_NEWTRX\n\r"); 
0360E:  MOVLW  E4
03610:  MOVWF  FF6
03612:  MOVLW  08
03614:  MOVWF  FF7
03616:  MOVLW  00
03618:  MOVWF  FF8
0361A:  MOVLB  0
0361C:  CALL   111C
....................        
....................       //_________________________________________________________________ 
....................       CLEAR_DATA_ARRAY(CPIC_TO_MPIC_ARRAY, 40); 
03620:  MOVLW  02
03622:  MOVLB  4
03624:  MOVWF  xF0
03626:  MOVLW  E6
03628:  MOVWF  xEF
0362A:  MOVLW  28
0362C:  MOVWF  xF1
0362E:  MOVLB  0
03630:  CALL   1594
....................       CLEAR_DATA_ARRAY(MPIC_TO_CPIC_ARRAY, 40); 
03634:  MOVLW  02
03636:  MOVLB  4
03638:  MOVWF  xF0
0363A:  MOVLW  AF
0363C:  MOVWF  xEF
0363E:  MOVLW  28
03640:  MOVWF  xF1
03642:  MOVLB  0
03644:  CALL   1594
....................       CPIC_TO_MPIC_ARRAY[0]  = 0xB0 ;                       // header 
03648:  MOVLW  B0
0364A:  MOVLB  2
0364C:  MOVWF  xE6
....................       for(int i = 1; i<=10; i++) 
0364E:  MOVLW  01
03650:  MOVLB  4
03652:  MOVWF  xE5
03654:  MOVF   xE5,W
03656:  SUBLW  0A
03658:  BNC   368E
....................       { 
....................          CPIC_TO_MPIC_ARRAY[i] = NEWTRX_TO_CPIC_ARRAY[i+1]; 
0365A:  CLRF   03
0365C:  MOVF   xE5,W
0365E:  ADDLW  E6
03660:  MOVWF  01
03662:  MOVLW  02
03664:  ADDWFC 03,F
03666:  MOVFF  03,4E7
0366A:  MOVLW  01
0366C:  ADDWF  xE5,W
0366E:  CLRF   03
03670:  ADDLW  1F
03672:  MOVWF  FE9
03674:  MOVLW  01
03676:  ADDWFC 03,W
03678:  MOVWF  FEA
0367A:  MOVFF  FEF,4E8
0367E:  MOVFF  4E7,FEA
03682:  MOVFF  01,FE9
03686:  MOVFF  4E8,FEF
0368A:  INCF   xE5,F
0368C:  BRA    3654
....................       } 
....................       CPIC_TO_MPIC_ARRAY[39] = 0xB1 ;                       // footer 
0368E:  MOVLW  B1
03690:  MOVLB  3
03692:  MOVWF  x0D
....................       //_________________________________________________________________ 
....................       COMUNICATION_WITH_MAIN_PIC_AND_WAIT_FOR_RESPONE(2, 200,170); 
03694:  MOVLB  4
03696:  CLRF   xF0
03698:  MOVLW  02
0369A:  MOVWF  xEF
0369C:  CLRF   xF2
0369E:  MOVLW  C8
036A0:  MOVWF  xF1
036A2:  CLRF   xF4
036A4:  MOVLW  AA
036A6:  MOVWF  xF3
036A8:  MOVLB  0
036AA:  CALL   19DE
....................        
....................       if( MPIC_TO_CPIC_ARRAY[0] == 0xB0 && MPIC_TO_CPIC_ARRAY[1] == 0x14 && MPIC_TO_CPIC_ARRAY[31] == 0xB1 ) 
036AE:  MOVLB  2
036B0:  MOVF   xAF,W
036B2:  SUBLW  B0
036B4:  BNZ   36E2
036B6:  MOVF   xB0,W
036B8:  SUBLW  14
036BA:  BNZ   36E2
036BC:  MOVF   xCE,W
036BE:  SUBLW  B1
036C0:  BNZ   36E2
....................       { 
....................          Fprintf(PC,"Main pic responded\n\r"); 
036C2:  MOVLW  08
036C4:  MOVWF  FF6
036C6:  MOVLW  09
036C8:  MOVWF  FF7
036CA:  MOVLW  00
036CC:  MOVWF  FF8
036CE:  MOVLB  0
036D0:  CALL   111C
....................          NEWTRX_SEND_ACKNOWLEDGEMENT(1); 
036D4:  MOVLW  01
036D6:  MOVLB  4
036D8:  MOVWF  xEF
036DA:  MOVLB  0
036DC:  RCALL  3192
....................       } 
036DE:  BRA    36FC
036E0:  MOVLB  2
....................        
....................       else 
....................       { 
....................          Fprintf(PC,"Main pic did not respond\n\r"); 
036E2:  MOVLW  1E
036E4:  MOVWF  FF6
036E6:  MOVLW  09
036E8:  MOVWF  FF7
036EA:  MOVLW  00
036EC:  MOVWF  FF8
036EE:  MOVLB  0
036F0:  CALL   111C
....................          NEWTRX_SEND_ACKNOWLEDGEMENT(0); 
036F4:  MOVLB  4
036F6:  CLRF   xEF
036F8:  MOVLB  0
036FA:  RCALL  3192
036FC:  MOVLB  1
....................       } 
....................    } 
036FE:  MOVLB  0
03700:  GOTO   5AEE (RETURN)
.................... } 
....................  
.................... void _FLASH_MEMORY_SECTOR_ERASE() 
.................... { 
....................    if( OLDTRX_TO_CPIC_ARRAY[2] == 0x00 && OLDTRX_TO_CPIC_ARRAY[3] == 0x14  ) 
*
04A1A:  MOVLB  2
04A1C:  MOVF   x07,F
04A1E:  BTFSS  FD8.2
04A20:  BRA    4B1A
04A22:  MOVF   x08,W
04A24:  SUBLW  14
04A26:  BTFSS  FD8.2
04A28:  BRA    4B1A
....................    { 
....................       Fprintf(PC,"FLASH_MEMORY_SECTOR_ERASE_OLDTRX\n\r"); 
04A2A:  MOVLW  3A
04A2C:  MOVWF  FF6
04A2E:  MOVLW  09
04A30:  MOVWF  FF7
04A32:  MOVLW  00
04A34:  MOVWF  FF8
04A36:  MOVLB  0
04A38:  CALL   111C
....................        
....................       //_________________________________________________________________ 
....................       CLEAR_DATA_ARRAY(CPIC_TO_MPIC_ARRAY, 40); 
04A3C:  MOVLW  02
04A3E:  MOVLB  4
04A40:  MOVWF  xF0
04A42:  MOVLW  E6
04A44:  MOVWF  xEF
04A46:  MOVLW  28
04A48:  MOVWF  xF1
04A4A:  MOVLB  0
04A4C:  CALL   1594
....................       CLEAR_DATA_ARRAY(MPIC_TO_CPIC_ARRAY, 40); 
04A50:  MOVLW  02
04A52:  MOVLB  4
04A54:  MOVWF  xF0
04A56:  MOVLW  AF
04A58:  MOVWF  xEF
04A5A:  MOVLW  28
04A5C:  MOVWF  xF1
04A5E:  MOVLB  0
04A60:  CALL   1594
....................       CPIC_TO_MPIC_ARRAY[0]  = 0xB0 ;                       // header 
04A64:  MOVLW  B0
04A66:  MOVLB  2
04A68:  MOVWF  xE6
....................       for(int i = 1; i<=10; i++) 
04A6A:  MOVLW  01
04A6C:  MOVLB  4
04A6E:  MOVWF  xE5
04A70:  MOVF   xE5,W
04A72:  SUBLW  0A
04A74:  BNC   4AAA
....................       { 
....................          CPIC_TO_MPIC_ARRAY[i] = OLDTRX_TO_CPIC_ARRAY[i+1]; 
04A76:  CLRF   03
04A78:  MOVF   xE5,W
04A7A:  ADDLW  E6
04A7C:  MOVWF  01
04A7E:  MOVLW  02
04A80:  ADDWFC 03,F
04A82:  MOVFF  03,4E7
04A86:  MOVLW  01
04A88:  ADDWF  xE5,W
04A8A:  CLRF   03
04A8C:  ADDLW  05
04A8E:  MOVWF  FE9
04A90:  MOVLW  02
04A92:  ADDWFC 03,W
04A94:  MOVWF  FEA
04A96:  MOVFF  FEF,4E8
04A9A:  MOVFF  4E7,FEA
04A9E:  MOVFF  01,FE9
04AA2:  MOVFF  4E8,FEF
04AA6:  INCF   xE5,F
04AA8:  BRA    4A70
....................       } 
....................       CPIC_TO_MPIC_ARRAY[39] = 0xB1 ;                       // footer 
04AAA:  MOVLW  B1
04AAC:  MOVLB  3
04AAE:  MOVWF  x0D
....................       //_________________________________________________________________ 
....................       COMUNICATION_WITH_MAIN_PIC_AND_WAIT_FOR_RESPONE(2, 200,170); 
04AB0:  MOVLB  4
04AB2:  CLRF   xF0
04AB4:  MOVLW  02
04AB6:  MOVWF  xEF
04AB8:  CLRF   xF2
04ABA:  MOVLW  C8
04ABC:  MOVWF  xF1
04ABE:  CLRF   xF4
04AC0:  MOVLW  AA
04AC2:  MOVWF  xF3
04AC4:  MOVLB  0
04AC6:  CALL   19DE
....................        
....................       if( MPIC_TO_CPIC_ARRAY[0] == 0xB0 && MPIC_TO_CPIC_ARRAY[1] == 0x14 && MPIC_TO_CPIC_ARRAY[31] == 0xB1 ) 
04ACA:  MOVLB  2
04ACC:  MOVF   xAF,W
04ACE:  SUBLW  B0
04AD0:  BNZ   4AFE
04AD2:  MOVF   xB0,W
04AD4:  SUBLW  14
04AD6:  BNZ   4AFE
04AD8:  MOVF   xCE,W
04ADA:  SUBLW  B1
04ADC:  BNZ   4AFE
....................       { 
....................          Fprintf(PC,"Main pic responded\n\r"); 
04ADE:  MOVLW  5E
04AE0:  MOVWF  FF6
04AE2:  MOVLW  09
04AE4:  MOVWF  FF7
04AE6:  MOVLW  00
04AE8:  MOVWF  FF8
04AEA:  MOVLB  0
04AEC:  CALL   111C
....................          OLDTRX_SEND_ACKNOWLEDGEMENT(1); 
04AF0:  MOVLW  01
04AF2:  MOVLB  4
04AF4:  MOVWF  xEF
04AF6:  MOVLB  0
04AF8:  RCALL  4592
....................       } 
04AFA:  BRA    4B18
04AFC:  MOVLB  2
....................        
....................       else 
....................       { 
....................          Fprintf(PC,"Main pic did not respond\n\r"); 
04AFE:  MOVLW  74
04B00:  MOVWF  FF6
04B02:  MOVLW  09
04B04:  MOVWF  FF7
04B06:  MOVLW  00
04B08:  MOVWF  FF8
04B0A:  MOVLB  0
04B0C:  CALL   111C
....................          OLDTRX_SEND_ACKNOWLEDGEMENT(0); 
04B10:  MOVLB  4
04B12:  CLRF   xEF
04B14:  MOVLB  0
04B16:  RCALL  4592
04B18:  MOVLB  2
....................       } 
....................    } 
04B1A:  MOVLB  0
04B1C:  GOTO   5B7E (RETURN)
.................... } 
.................... //========================================================================================================================================= 
....................  
....................  
....................  
.................... //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
.................... //========================================================================================================================================= 
.................... void TRANSFERING_ANTENNA_RELATED_CMD_TO_MAINPIC() 
.................... { 
....................    if( (NEWTRX_TO_CPIC_ARRAY[2] == 0x00) && ( (NEWTRX_TO_CPIC_ARRAY[3] & 0xF0) == 0xD0 ) )                  
*
04032:  MOVLB  1
04034:  MOVF   x21,F
04036:  BTFSS  FD8.2
04038:  BRA    413C
0403A:  MOVF   x22,W
0403C:  ANDLW  F0
0403E:  SUBLW  D0
04040:  BTFSS  FD8.2
04042:  BRA    413C
....................    { 
....................       Fprintf(PC,"TRANSFERING_ANTENNA_RELATED_CMD_TO_MAINPIC_ADDTRX\n\r"); 
04044:  MOVLW  90
04046:  MOVWF  FF6
04048:  MOVLW  09
0404A:  MOVWF  FF7
0404C:  MOVLW  00
0404E:  MOVWF  FF8
04050:  MOVLB  0
04052:  CALL   111C
....................        
....................       //_________________________________________________________________ 
....................       CLEAR_DATA_ARRAY(CPIC_TO_MPIC_ARRAY, 40); 
04056:  MOVLW  02
04058:  MOVLB  4
0405A:  MOVWF  xF0
0405C:  MOVLW  E6
0405E:  MOVWF  xEF
04060:  MOVLW  28
04062:  MOVWF  xF1
04064:  MOVLB  0
04066:  CALL   1594
....................       CLEAR_DATA_ARRAY(MPIC_TO_CPIC_ARRAY, 40); 
0406A:  MOVLW  02
0406C:  MOVLB  4
0406E:  MOVWF  xF0
04070:  MOVLW  AF
04072:  MOVWF  xEF
04074:  MOVLW  28
04076:  MOVWF  xF1
04078:  MOVLB  0
0407A:  CALL   1594
....................       CPIC_TO_MPIC_ARRAY[0]  = 0xB0 ;                       // header 
0407E:  MOVLW  B0
04080:  MOVLB  2
04082:  MOVWF  xE6
....................       for(int i = 1; i<=10; i++) 
04084:  MOVLW  01
04086:  MOVLB  4
04088:  MOVWF  xE5
0408A:  MOVF   xE5,W
0408C:  SUBLW  0A
0408E:  BNC   40C4
....................       { 
....................          CPIC_TO_MPIC_ARRAY[i] = NEWTRX_TO_CPIC_ARRAY[i+1]; 
04090:  CLRF   03
04092:  MOVF   xE5,W
04094:  ADDLW  E6
04096:  MOVWF  01
04098:  MOVLW  02
0409A:  ADDWFC 03,F
0409C:  MOVFF  03,4E7
040A0:  MOVLW  01
040A2:  ADDWF  xE5,W
040A4:  CLRF   03
040A6:  ADDLW  1F
040A8:  MOVWF  FE9
040AA:  MOVLW  01
040AC:  ADDWFC 03,W
040AE:  MOVWF  FEA
040B0:  MOVFF  FEF,4E8
040B4:  MOVFF  4E7,FEA
040B8:  MOVFF  01,FE9
040BC:  MOVFF  4E8,FEF
040C0:  INCF   xE5,F
040C2:  BRA    408A
....................       } 
....................       CPIC_TO_MPIC_ARRAY[39] = 0xB1 ;                       // footer 
040C4:  MOVLW  B1
040C6:  MOVLB  3
040C8:  MOVWF  x0D
....................       //_________________________________________________________________ 
....................       COMUNICATION_WITH_MAIN_PIC_AND_WAIT_FOR_RESPONE(2, 1000,200); 
040CA:  MOVLB  4
040CC:  CLRF   xF0
040CE:  MOVLW  02
040D0:  MOVWF  xEF
040D2:  MOVLW  03
040D4:  MOVWF  xF2
040D6:  MOVLW  E8
040D8:  MOVWF  xF1
040DA:  CLRF   xF4
040DC:  MOVLW  C8
040DE:  MOVWF  xF3
040E0:  MOVLB  0
040E2:  CALL   19DE
....................        
....................        
....................       if( MPIC_TO_CPIC_ARRAY[0] == 0xB0 &&  (MPIC_TO_CPIC_ARRAY[1]&0xF0) == 0xD0  && MPIC_TO_CPIC_ARRAY[31] == 0xB1 ) 
040E6:  MOVLB  2
040E8:  MOVF   xAF,W
040EA:  SUBLW  B0
040EC:  BNZ   411E
040EE:  MOVF   xB0,W
040F0:  ANDLW  F0
040F2:  SUBLW  D0
040F4:  BNZ   411E
040F6:  MOVF   xCE,W
040F8:  SUBLW  B1
040FA:  BNZ   411E
....................       { 
....................          Fprintf(PC,"Main pic responded\n\r"); 
040FC:  MOVLW  C4
040FE:  MOVWF  FF6
04100:  MOVLW  09
04102:  MOVWF  FF7
04104:  MOVLW  00
04106:  MOVWF  FF8
04108:  MOVLB  0
0410A:  CALL   111C
....................          NEWTRX_SEND_ACKNOWLEDGEMENT(1); 
0410E:  MOVLW  01
04110:  MOVLB  4
04112:  MOVWF  xEF
04114:  MOVLB  0
04116:  CALL   3192
....................       } 
0411A:  BRA    413A
0411C:  MOVLB  2
....................        
....................       else 
....................       { 
....................          Fprintf(PC,"Main pic did not respond\n\r"); 
0411E:  MOVLW  DA
04120:  MOVWF  FF6
04122:  MOVLW  09
04124:  MOVWF  FF7
04126:  MOVLW  00
04128:  MOVWF  FF8
0412A:  MOVLB  0
0412C:  CALL   111C
....................          NEWTRX_SEND_ACKNOWLEDGEMENT(0); 
04130:  MOVLB  4
04132:  CLRF   xEF
04134:  MOVLB  0
04136:  CALL   3192
0413A:  MOVLB  1
....................       } 
....................    } 
0413C:  MOVLB  0
0413E:  GOTO   5B16 (RETURN)
.................... } 
....................  
....................  
.................... void _TRANSFERING_ANTENNA_RELATED_CMD_TO_MAINPIC() 
.................... { 
....................    if( (OLDTRX_TO_CPIC_ARRAY[2] == 0x00) && ( (OLDTRX_TO_CPIC_ARRAY[3] & 0xF0) == 0xD0 ) )                  
*
055B4:  MOVLB  2
055B6:  MOVF   x07,F
055B8:  BTFSS  FD8.2
055BA:  BRA    56BE
055BC:  MOVF   x08,W
055BE:  ANDLW  F0
055C0:  SUBLW  D0
055C2:  BTFSS  FD8.2
055C4:  BRA    56BE
....................    { 
....................       Fprintf(PC,"TRANSFERING_ANTENNA_RELATED_CMD_TO_MAINPIC_ADDTRX\n\r"); 
055C6:  MOVLW  F6
055C8:  MOVWF  FF6
055CA:  MOVLW  09
055CC:  MOVWF  FF7
055CE:  MOVLW  00
055D0:  MOVWF  FF8
055D2:  MOVLB  0
055D4:  CALL   111C
....................        
....................       //_________________________________________________________________ 
....................       CLEAR_DATA_ARRAY(CPIC_TO_MPIC_ARRAY, 40); 
055D8:  MOVLW  02
055DA:  MOVLB  4
055DC:  MOVWF  xF0
055DE:  MOVLW  E6
055E0:  MOVWF  xEF
055E2:  MOVLW  28
055E4:  MOVWF  xF1
055E6:  MOVLB  0
055E8:  CALL   1594
....................       CLEAR_DATA_ARRAY(MPIC_TO_CPIC_ARRAY, 40); 
055EC:  MOVLW  02
055EE:  MOVLB  4
055F0:  MOVWF  xF0
055F2:  MOVLW  AF
055F4:  MOVWF  xEF
055F6:  MOVLW  28
055F8:  MOVWF  xF1
055FA:  MOVLB  0
055FC:  CALL   1594
....................       CPIC_TO_MPIC_ARRAY[0]  = 0xB0 ;                       // header 
05600:  MOVLW  B0
05602:  MOVLB  2
05604:  MOVWF  xE6
....................       for(int i = 1; i<=10; i++) 
05606:  MOVLW  01
05608:  MOVLB  4
0560A:  MOVWF  xE5
0560C:  MOVF   xE5,W
0560E:  SUBLW  0A
05610:  BNC   5646
....................       { 
....................          CPIC_TO_MPIC_ARRAY[i] = OLDTRX_TO_CPIC_ARRAY[i+1]; 
05612:  CLRF   03
05614:  MOVF   xE5,W
05616:  ADDLW  E6
05618:  MOVWF  01
0561A:  MOVLW  02
0561C:  ADDWFC 03,F
0561E:  MOVFF  03,4E7
05622:  MOVLW  01
05624:  ADDWF  xE5,W
05626:  CLRF   03
05628:  ADDLW  05
0562A:  MOVWF  FE9
0562C:  MOVLW  02
0562E:  ADDWFC 03,W
05630:  MOVWF  FEA
05632:  MOVFF  FEF,4E8
05636:  MOVFF  4E7,FEA
0563A:  MOVFF  01,FE9
0563E:  MOVFF  4E8,FEF
05642:  INCF   xE5,F
05644:  BRA    560C
....................       } 
....................       CPIC_TO_MPIC_ARRAY[39] = 0xB1 ;                       // footer 
05646:  MOVLW  B1
05648:  MOVLB  3
0564A:  MOVWF  x0D
....................       //_________________________________________________________________ 
....................       COMUNICATION_WITH_MAIN_PIC_AND_WAIT_FOR_RESPONE(2, 1000,200); 
0564C:  MOVLB  4
0564E:  CLRF   xF0
05650:  MOVLW  02
05652:  MOVWF  xEF
05654:  MOVLW  03
05656:  MOVWF  xF2
05658:  MOVLW  E8
0565A:  MOVWF  xF1
0565C:  CLRF   xF4
0565E:  MOVLW  C8
05660:  MOVWF  xF3
05662:  MOVLB  0
05664:  CALL   19DE
....................        
....................        
....................       if( MPIC_TO_CPIC_ARRAY[0] == 0xB0 &&  (MPIC_TO_CPIC_ARRAY[1]&0xF0) == 0xD0  && MPIC_TO_CPIC_ARRAY[31] == 0xB1 ) 
05668:  MOVLB  2
0566A:  MOVF   xAF,W
0566C:  SUBLW  B0
0566E:  BNZ   56A0
05670:  MOVF   xB0,W
05672:  ANDLW  F0
05674:  SUBLW  D0
05676:  BNZ   56A0
05678:  MOVF   xCE,W
0567A:  SUBLW  B1
0567C:  BNZ   56A0
....................       { 
....................          Fprintf(PC,"Main pic responded\n\r"); 
0567E:  MOVLW  2A
05680:  MOVWF  FF6
05682:  MOVLW  0A
05684:  MOVWF  FF7
05686:  MOVLW  00
05688:  MOVWF  FF8
0568A:  MOVLB  0
0568C:  CALL   111C
....................          OLDTRX_SEND_ACKNOWLEDGEMENT(1); 
05690:  MOVLW  01
05692:  MOVLB  4
05694:  MOVWF  xEF
05696:  MOVLB  0
05698:  CALL   4592
....................       } 
0569C:  BRA    56BC
0569E:  MOVLB  2
....................        
....................       else 
....................       { 
....................          Fprintf(PC,"Main pic did not respond\n\r"); 
056A0:  MOVLW  40
056A2:  MOVWF  FF6
056A4:  MOVLW  0A
056A6:  MOVWF  FF7
056A8:  MOVLW  00
056AA:  MOVWF  FF8
056AC:  MOVLB  0
056AE:  CALL   111C
....................          OLDTRX_SEND_ACKNOWLEDGEMENT(0); 
056B2:  MOVLB  4
056B4:  CLRF   xEF
056B6:  MOVLB  0
056B8:  CALL   4592
056BC:  MOVLB  2
....................       } 
....................    } 
056BE:  MOVLB  0
056C0:  GOTO   5BA6 (RETURN)
.................... } 
....................  
....................  
....................  
.................... // MISION_COMMANDS MISION_COMMANDS MISION_COMMANDS MISION_COMMANDS MISION_COMMANDS MISION_COMMANDS MISION_COMMANDS MISION_COMMANDS MISION_COMMANDS 
.................... // MISION_COMMANDS MISION_COMMANDS MISION_COMMANDS MISION_COMMANDS MISION_COMMANDS MISION_COMMANDS MISION_COMMANDS MISION_COMMANDS MISION_COMMANDS  
.................... //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
.................... //========================================================================================================================================= 
.................... void SENDING_APRS_MISSION_CMD_TO_MAINPIC() 
.................... { 
....................    if( (NEWTRX_TO_CPIC_ARRAY[2] == 0x00) && ( (NEWTRX_TO_CPIC_ARRAY[3] & 0xF0) == 0xB0 ) )                  
*
03E18:  MOVLB  1
03E1A:  MOVF   x21,F
03E1C:  BTFSS  FD8.2
03E1E:  BRA    3F22
03E20:  MOVF   x22,W
03E22:  ANDLW  F0
03E24:  SUBLW  B0
03E26:  BTFSS  FD8.2
03E28:  BRA    3F22
....................    { 
....................       Fprintf(PC,"SENDING_APRS_MISSION_CMD_TO_MAINPIC_NEWTRX\n\r"); 
03E2A:  MOVLW  5C
03E2C:  MOVWF  FF6
03E2E:  MOVLW  0A
03E30:  MOVWF  FF7
03E32:  MOVLW  00
03E34:  MOVWF  FF8
03E36:  MOVLB  0
03E38:  CALL   111C
....................        
....................       //_________________________________________________________________ 
....................       CLEAR_DATA_ARRAY(CPIC_TO_MPIC_ARRAY, 40); 
03E3C:  MOVLW  02
03E3E:  MOVLB  4
03E40:  MOVWF  xF0
03E42:  MOVLW  E6
03E44:  MOVWF  xEF
03E46:  MOVLW  28
03E48:  MOVWF  xF1
03E4A:  MOVLB  0
03E4C:  CALL   1594
....................       CLEAR_DATA_ARRAY(MPIC_TO_CPIC_ARRAY, 40); 
03E50:  MOVLW  02
03E52:  MOVLB  4
03E54:  MOVWF  xF0
03E56:  MOVLW  AF
03E58:  MOVWF  xEF
03E5A:  MOVLW  28
03E5C:  MOVWF  xF1
03E5E:  MOVLB  0
03E60:  CALL   1594
....................       CPIC_TO_MPIC_ARRAY[0]  = 0xB0 ;                       // header 
03E64:  MOVLW  B0
03E66:  MOVLB  2
03E68:  MOVWF  xE6
....................       for(int i = 1; i<=10; i++) 
03E6A:  MOVLW  01
03E6C:  MOVLB  4
03E6E:  MOVWF  xE5
03E70:  MOVF   xE5,W
03E72:  SUBLW  0A
03E74:  BNC   3EAA
....................       { 
....................          CPIC_TO_MPIC_ARRAY[i] = NEWTRX_TO_CPIC_ARRAY[i+1]; 
03E76:  CLRF   03
03E78:  MOVF   xE5,W
03E7A:  ADDLW  E6
03E7C:  MOVWF  01
03E7E:  MOVLW  02
03E80:  ADDWFC 03,F
03E82:  MOVFF  03,4E7
03E86:  MOVLW  01
03E88:  ADDWF  xE5,W
03E8A:  CLRF   03
03E8C:  ADDLW  1F
03E8E:  MOVWF  FE9
03E90:  MOVLW  01
03E92:  ADDWFC 03,W
03E94:  MOVWF  FEA
03E96:  MOVFF  FEF,4E8
03E9A:  MOVFF  4E7,FEA
03E9E:  MOVFF  01,FE9
03EA2:  MOVFF  4E8,FEF
03EA6:  INCF   xE5,F
03EA8:  BRA    3E70
....................       } 
....................       CPIC_TO_MPIC_ARRAY[39] = 0xB1 ;                       // footer 
03EAA:  MOVLW  B1
03EAC:  MOVLB  3
03EAE:  MOVWF  x0D
....................       //_________________________________________________________________ 
....................       COMUNICATION_WITH_MAIN_PIC_AND_WAIT_FOR_RESPONE(2, 1000,200); 
03EB0:  MOVLB  4
03EB2:  CLRF   xF0
03EB4:  MOVLW  02
03EB6:  MOVWF  xEF
03EB8:  MOVLW  03
03EBA:  MOVWF  xF2
03EBC:  MOVLW  E8
03EBE:  MOVWF  xF1
03EC0:  CLRF   xF4
03EC2:  MOVLW  C8
03EC4:  MOVWF  xF3
03EC6:  MOVLB  0
03EC8:  CALL   19DE
....................        
....................        
....................       if( MPIC_TO_CPIC_ARRAY[0] == 0xB0 && (MPIC_TO_CPIC_ARRAY[1]&0xF0) == 0xB0 && MPIC_TO_CPIC_ARRAY[31] == 0xB1 ) 
03ECC:  MOVLB  2
03ECE:  MOVF   xAF,W
03ED0:  SUBLW  B0
03ED2:  BNZ   3F04
03ED4:  MOVF   xB0,W
03ED6:  ANDLW  F0
03ED8:  SUBLW  B0
03EDA:  BNZ   3F04
03EDC:  MOVF   xCE,W
03EDE:  SUBLW  B1
03EE0:  BNZ   3F04
....................       { 
....................          Fprintf(PC,"Main pic responded\n\r"); 
03EE2:  MOVLW  8A
03EE4:  MOVWF  FF6
03EE6:  MOVLW  0A
03EE8:  MOVWF  FF7
03EEA:  MOVLW  00
03EEC:  MOVWF  FF8
03EEE:  MOVLB  0
03EF0:  CALL   111C
....................          NEWTRX_SEND_ACKNOWLEDGEMENT(1); 
03EF4:  MOVLW  01
03EF6:  MOVLB  4
03EF8:  MOVWF  xEF
03EFA:  MOVLB  0
03EFC:  CALL   3192
....................       } 
03F00:  BRA    3F20
03F02:  MOVLB  2
....................        
....................       else 
....................       { 
....................          Fprintf(PC,"Main pic did not respond\n\r"); 
03F04:  MOVLW  A0
03F06:  MOVWF  FF6
03F08:  MOVLW  0A
03F0A:  MOVWF  FF7
03F0C:  MOVLW  00
03F0E:  MOVWF  FF8
03F10:  MOVLB  0
03F12:  CALL   111C
....................          NEWTRX_SEND_ACKNOWLEDGEMENT(0); 
03F16:  MOVLB  4
03F18:  CLRF   xEF
03F1A:  MOVLB  0
03F1C:  CALL   3192
03F20:  MOVLB  1
....................       } 
....................    } 
03F22:  MOVLB  0
03F24:  GOTO   5B0E (RETURN)
.................... } 
....................  
.................... void _SENDING_APRS_MISSION_CMD_TO_MAINPIC() 
.................... { 
....................    if( (OLDTRX_TO_CPIC_ARRAY[2] == 0x00) && ( (OLDTRX_TO_CPIC_ARRAY[3] & 0xF0) == 0xB0 ) )                  
*
0539A:  MOVLB  2
0539C:  MOVF   x07,F
0539E:  BTFSS  FD8.2
053A0:  BRA    54A4
053A2:  MOVF   x08,W
053A4:  ANDLW  F0
053A6:  SUBLW  B0
053A8:  BTFSS  FD8.2
053AA:  BRA    54A4
....................    { 
....................       Fprintf(PC,"SENDING_APRS_MISSION_CMD_TO_MAINPIC_OLDTRX\n\r"); 
053AC:  MOVLW  BC
053AE:  MOVWF  FF6
053B0:  MOVLW  0A
053B2:  MOVWF  FF7
053B4:  MOVLW  00
053B6:  MOVWF  FF8
053B8:  MOVLB  0
053BA:  CALL   111C
....................        
....................       //_________________________________________________________________ 
....................       CLEAR_DATA_ARRAY(CPIC_TO_MPIC_ARRAY, 40); 
053BE:  MOVLW  02
053C0:  MOVLB  4
053C2:  MOVWF  xF0
053C4:  MOVLW  E6
053C6:  MOVWF  xEF
053C8:  MOVLW  28
053CA:  MOVWF  xF1
053CC:  MOVLB  0
053CE:  CALL   1594
....................       CLEAR_DATA_ARRAY(MPIC_TO_CPIC_ARRAY, 40); 
053D2:  MOVLW  02
053D4:  MOVLB  4
053D6:  MOVWF  xF0
053D8:  MOVLW  AF
053DA:  MOVWF  xEF
053DC:  MOVLW  28
053DE:  MOVWF  xF1
053E0:  MOVLB  0
053E2:  CALL   1594
....................       CPIC_TO_MPIC_ARRAY[0]  = 0xB0 ;                       // header 
053E6:  MOVLW  B0
053E8:  MOVLB  2
053EA:  MOVWF  xE6
....................       for(int i = 1; i<=10; i++) 
053EC:  MOVLW  01
053EE:  MOVLB  4
053F0:  MOVWF  xE5
053F2:  MOVF   xE5,W
053F4:  SUBLW  0A
053F6:  BNC   542C
....................       { 
....................          CPIC_TO_MPIC_ARRAY[i] = OLDTRX_TO_CPIC_ARRAY[i+1]; 
053F8:  CLRF   03
053FA:  MOVF   xE5,W
053FC:  ADDLW  E6
053FE:  MOVWF  01
05400:  MOVLW  02
05402:  ADDWFC 03,F
05404:  MOVFF  03,4E7
05408:  MOVLW  01
0540A:  ADDWF  xE5,W
0540C:  CLRF   03
0540E:  ADDLW  05
05410:  MOVWF  FE9
05412:  MOVLW  02
05414:  ADDWFC 03,W
05416:  MOVWF  FEA
05418:  MOVFF  FEF,4E8
0541C:  MOVFF  4E7,FEA
05420:  MOVFF  01,FE9
05424:  MOVFF  4E8,FEF
05428:  INCF   xE5,F
0542A:  BRA    53F2
....................       } 
....................       CPIC_TO_MPIC_ARRAY[39] = 0xB1 ;                       // footer 
0542C:  MOVLW  B1
0542E:  MOVLB  3
05430:  MOVWF  x0D
....................       //_________________________________________________________________ 
....................       COMUNICATION_WITH_MAIN_PIC_AND_WAIT_FOR_RESPONE(2, 1000,200); 
05432:  MOVLB  4
05434:  CLRF   xF0
05436:  MOVLW  02
05438:  MOVWF  xEF
0543A:  MOVLW  03
0543C:  MOVWF  xF2
0543E:  MOVLW  E8
05440:  MOVWF  xF1
05442:  CLRF   xF4
05444:  MOVLW  C8
05446:  MOVWF  xF3
05448:  MOVLB  0
0544A:  CALL   19DE
....................        
....................        
....................       if( MPIC_TO_CPIC_ARRAY[0] == 0xB0 && (MPIC_TO_CPIC_ARRAY[1]&0xF0) == 0xB0 && MPIC_TO_CPIC_ARRAY[31] == 0xB1 ) 
0544E:  MOVLB  2
05450:  MOVF   xAF,W
05452:  SUBLW  B0
05454:  BNZ   5486
05456:  MOVF   xB0,W
05458:  ANDLW  F0
0545A:  SUBLW  B0
0545C:  BNZ   5486
0545E:  MOVF   xCE,W
05460:  SUBLW  B1
05462:  BNZ   5486
....................       { 
....................          Fprintf(PC,"Main pic responded\n\r"); 
05464:  MOVLW  EA
05466:  MOVWF  FF6
05468:  MOVLW  0A
0546A:  MOVWF  FF7
0546C:  MOVLW  00
0546E:  MOVWF  FF8
05470:  MOVLB  0
05472:  CALL   111C
....................          OLDTRX_SEND_ACKNOWLEDGEMENT(1); 
05476:  MOVLW  01
05478:  MOVLB  4
0547A:  MOVWF  xEF
0547C:  MOVLB  0
0547E:  CALL   4592
....................       } 
05482:  BRA    54A2
05484:  MOVLB  2
....................        
....................       else 
....................       { 
....................          Fprintf(PC,"Main pic did not respond\n\r"); 
05486:  MOVLW  00
05488:  MOVWF  FF6
0548A:  MOVLW  0B
0548C:  MOVWF  FF7
0548E:  MOVLW  00
05490:  MOVWF  FF8
05492:  MOVLB  0
05494:  CALL   111C
....................          OLDTRX_SEND_ACKNOWLEDGEMENT(0); 
05498:  MOVLB  4
0549A:  CLRF   xEF
0549C:  MOVLB  0
0549E:  CALL   4592
054A2:  MOVLB  2
....................       } 
....................    } 
054A4:  MOVLB  0
054A6:  GOTO   5BA2 (RETURN)
.................... } 
.................... //========================================================================================================================================= 
....................  
....................  
....................  
.................... //COMPIC COMMANDS COMPIC COMMANDS COMPIC COMMANDS COMPIC COMMANDS COMPIC COMMANDS COMPIC COMMANDS COMPIC COMMANDS COMPIC COMMANDS COMPIC COMMANDS 
.................... //COMPIC COMMANDS COMPIC COMMANDS COMPIC COMMANDS COMPIC COMMANDS COMPIC COMMANDS COMPIC COMMANDS COMPIC COMMANDS COMPIC COMMANDS COMPIC COMMANDS 
.................... //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
.................... //========================================================================================================================================= 
.................... void CONTROL_CW_TX_MODE() 
.................... { 
....................    if( NEWTRX_TO_CPIC_ARRAY[2] == 0x00 && NEWTRX_TO_CPIC_ARRAY[3] == 0xCA )                  
*
03966:  MOVLB  1
03968:  MOVF   x21,F
0396A:  BNZ   3A2E
0396C:  MOVF   x22,W
0396E:  SUBLW  CA
03970:  BNZ   3A2E
....................    { 
....................       Fprintf(PC,"CONTROL_CW_TX_MODE_NEW_TRX\n\r"); 
03972:  MOVLW  1C
03974:  MOVWF  FF6
03976:  MOVLW  0B
03978:  MOVWF  FF7
0397A:  MOVLW  00
0397C:  MOVWF  FF8
0397E:  MOVLB  0
03980:  CALL   111C
....................       unsigned int16 CWMODE  = (unsigned int16) NEWTRX_TO_CPIC_ARRAY[4]; 
....................       unsigned int16 TRXMODE = READ_PROGRAM_EEPROM(0x18002); 
03984:  MOVLB  4
03986:  CLRF   xE6
03988:  MOVFF  123,4E5
0398C:  MOVFF  FF2,4E9
03990:  BCF    FF2.7
03992:  MOVLW  01
03994:  MOVWF  FF8
03996:  MOVLW  80
03998:  MOVWF  FF7
0399A:  MOVLW  02
0399C:  MOVWF  FF6
0399E:  TBLRD*+
039A0:  MOVF   FF5,W
039A2:  TBLRD*
039A4:  MOVFF  FF5,03
039A8:  CLRF   FF8
039AA:  BTFSC  xE9.7
039AC:  BSF    FF2.7
039AE:  MOVWF  xE7
039B0:  MOVFF  03,4E8
....................        
....................       ERASE_PROGRAM_EEPROM(0x18000); 
039B4:  BSF    FD0.6
039B6:  MOVLW  01
039B8:  MOVWF  FF8
039BA:  MOVLW  80
039BC:  MOVWF  FF7
039BE:  CLRF   FF6
039C0:  BSF    F7F.4
039C2:  MOVLB  0
039C4:  RCALL  3932
039C6:  CLRF   FF8
....................       WRITE_PROGRAM_EEPROM(0x18000,CWMODE ); 
039C8:  BSF    FD0.6
039CA:  MOVLW  01
039CC:  MOVWF  FF8
039CE:  MOVLW  80
039D0:  MOVWF  FF7
039D2:  CLRF   FF6
039D4:  RCALL  3950
039D6:  CLRF   FF6
039D8:  MOVFF  4E5,FF5
039DC:  TBLWT*+
039DE:  MOVFF  4E6,FF5
039E2:  TBLWT*
039E4:  RCALL  3932
039E6:  CLRF   FF8
039E8:  CLRF   FF8
....................       WRITE_PROGRAM_EEPROM(0x18002,TRXMODE); 
039EA:  BSF    FD0.6
039EC:  MOVLW  01
039EE:  MOVWF  FF8
039F0:  MOVLW  80
039F2:  MOVWF  FF7
039F4:  MOVLW  02
039F6:  MOVWF  FF6
039F8:  RCALL  3950
039FA:  MOVLW  02
039FC:  MOVWF  FF6
039FE:  MOVFF  4E7,FF5
03A02:  TBLWT*+
03A04:  MOVFF  4E8,FF5
03A08:  TBLWT*
03A0A:  RCALL  3932
03A0C:  CLRF   FF8
03A0E:  CLRF   FF8
....................       Delay_ms(10); 
03A10:  MOVLW  0A
03A12:  MOVLB  5
03A14:  MOVWF  x04
03A16:  MOVLB  0
03A18:  CALL   10AE
....................       LOAD_CW_MODE_AND_NEW_TRX_STATUS(); 
03A1C:  CALL   11FA
....................        
....................       NEWTRX_SEND_ACKNOWLEDGEMENT(1); 
03A20:  MOVLW  01
03A22:  MOVLB  4
03A24:  MOVWF  xEF
03A26:  MOVLB  0
03A28:  CALL   3192
03A2C:  MOVLB  1
....................    } 
03A2E:  MOVLB  0
03A30:  GOTO   5AFE (RETURN)
.................... } 
....................  
.................... void _CONTROL_CW_TX_MODE() 
.................... { 
....................    if( OLDTRX_TO_CPIC_ARRAY[2] == 0x00 && OLDTRX_TO_CPIC_ARRAY[3] == 0xCA )                  
*
04CF6:  MOVLB  2
04CF8:  MOVF   x07,F
04CFA:  BNZ   4DC8
04CFC:  MOVF   x08,W
04CFE:  SUBLW  CA
04D00:  BNZ   4DC8
....................    { 
....................       Fprintf(PC,"CONTROL_CW_TX_MODE_OLD_TRX\n\r"); 
04D02:  MOVLW  3A
04D04:  MOVWF  FF6
04D06:  MOVLW  0B
04D08:  MOVWF  FF7
04D0A:  MOVLW  00
04D0C:  MOVWF  FF8
04D0E:  MOVLB  0
04D10:  CALL   111C
....................       unsigned int16 CWMODE  = (unsigned int16) OLDTRX_TO_CPIC_ARRAY[4]; 
....................       unsigned int16 TRXMODE = READ_PROGRAM_EEPROM(0x18002); 
04D14:  MOVLB  4
04D16:  CLRF   xE6
04D18:  MOVFF  209,4E5
04D1C:  MOVFF  FF2,4E9
04D20:  BCF    FF2.7
04D22:  MOVLW  01
04D24:  MOVWF  FF8
04D26:  MOVLW  80
04D28:  MOVWF  FF7
04D2A:  MOVLW  02
04D2C:  MOVWF  FF6
04D2E:  TBLRD*+
04D30:  MOVF   FF5,W
04D32:  TBLRD*
04D34:  MOVFF  FF5,03
04D38:  CLRF   FF8
04D3A:  BTFSC  xE9.7
04D3C:  BSF    FF2.7
04D3E:  MOVWF  xE7
04D40:  MOVFF  03,4E8
....................        
....................       ERASE_PROGRAM_EEPROM(0x18000); 
04D44:  BSF    FD0.6
04D46:  MOVLW  01
04D48:  MOVWF  FF8
04D4A:  MOVLW  80
04D4C:  MOVWF  FF7
04D4E:  CLRF   FF6
04D50:  BSF    F7F.4
04D52:  MOVLB  0
04D54:  CALL   3932
04D58:  CLRF   FF8
....................       WRITE_PROGRAM_EEPROM(0x18000,CWMODE ); 
04D5A:  BSF    FD0.6
04D5C:  MOVLW  01
04D5E:  MOVWF  FF8
04D60:  MOVLW  80
04D62:  MOVWF  FF7
04D64:  CLRF   FF6
04D66:  CALL   3950
04D6A:  CLRF   FF6
04D6C:  MOVFF  4E5,FF5
04D70:  TBLWT*+
04D72:  MOVFF  4E6,FF5
04D76:  TBLWT*
04D78:  CALL   3932
04D7C:  CLRF   FF8
04D7E:  CLRF   FF8
....................       WRITE_PROGRAM_EEPROM(0x18002,TRXMODE); 
04D80:  BSF    FD0.6
04D82:  MOVLW  01
04D84:  MOVWF  FF8
04D86:  MOVLW  80
04D88:  MOVWF  FF7
04D8A:  MOVLW  02
04D8C:  MOVWF  FF6
04D8E:  CALL   3950
04D92:  MOVLW  02
04D94:  MOVWF  FF6
04D96:  MOVFF  4E7,FF5
04D9A:  TBLWT*+
04D9C:  MOVFF  4E8,FF5
04DA0:  TBLWT*
04DA2:  CALL   3932
04DA6:  CLRF   FF8
04DA8:  CLRF   FF8
....................       Delay_ms(10); 
04DAA:  MOVLW  0A
04DAC:  MOVLB  5
04DAE:  MOVWF  x04
04DB0:  MOVLB  0
04DB2:  CALL   10AE
....................       LOAD_CW_MODE_AND_NEW_TRX_STATUS(); 
04DB6:  CALL   11FA
....................        
....................       OLDTRX_SEND_ACKNOWLEDGEMENT(1); 
04DBA:  MOVLW  01
04DBC:  MOVLB  4
04DBE:  MOVWF  xEF
04DC0:  MOVLB  0
04DC2:  CALL   4592
04DC6:  MOVLB  2
....................    } 
04DC8:  MOVLB  0
04DCA:  GOTO   5B8E (RETURN)
.................... } 
.................... //========================================================================================================================================= 
....................  
....................  
.................... //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
.................... //========================================================================================================================================= 
.................... void CONTROL_NEW_TRX_POWER() 
.................... { 
....................    if( NEWTRX_TO_CPIC_ARRAY[2] == 0x00 && NEWTRX_TO_CPIC_ARRAY[3] == 0xCB )                  
*
03A34:  MOVLB  1
03A36:  MOVF   x21,F
03A38:  BNZ   3AFE
03A3A:  MOVF   x22,W
03A3C:  SUBLW  CB
03A3E:  BNZ   3AFE
....................    { 
....................       Fprintf(PC,"CONTROL_NEW_TRX_POWER__NEWTRX\n\r"); 
03A40:  MOVLW  58
03A42:  MOVWF  FF6
03A44:  MOVLW  0B
03A46:  MOVWF  FF7
03A48:  MOVLW  00
03A4A:  MOVWF  FF8
03A4C:  MOVLB  0
03A4E:  CALL   111C
....................       unsigned int16 CWMODE  = READ_PROGRAM_EEPROM(0x18000);  
....................       unsigned int16 TRXMODE = (unsigned int16) NEWTRX_TO_CPIC_ARRAY[4]; 
03A52:  MOVFF  FF2,4E9
03A56:  BCF    FF2.7
03A58:  MOVLW  01
03A5A:  MOVWF  FF8
03A5C:  MOVLW  80
03A5E:  MOVWF  FF7
03A60:  CLRF   FF6
03A62:  TBLRD*+
03A64:  MOVF   FF5,W
03A66:  TBLRD*
03A68:  MOVFF  FF5,03
03A6C:  CLRF   FF8
03A6E:  MOVLB  4
03A70:  BTFSC  xE9.7
03A72:  BSF    FF2.7
03A74:  MOVWF  xE5
03A76:  MOVFF  03,4E6
03A7A:  CLRF   xE8
03A7C:  MOVFF  123,4E7
....................        
....................       ERASE_PROGRAM_EEPROM(0x18000); 
03A80:  BSF    FD0.6
03A82:  MOVLW  01
03A84:  MOVWF  FF8
03A86:  MOVLW  80
03A88:  MOVWF  FF7
03A8A:  CLRF   FF6
03A8C:  BSF    F7F.4
03A8E:  MOVLB  0
03A90:  RCALL  3932
03A92:  CLRF   FF8
....................       WRITE_PROGRAM_EEPROM(0x18000,CWMODE ); 
03A94:  BSF    FD0.6
03A96:  MOVLW  01
03A98:  MOVWF  FF8
03A9A:  MOVLW  80
03A9C:  MOVWF  FF7
03A9E:  CLRF   FF6
03AA0:  RCALL  3950
03AA2:  CLRF   FF6
03AA4:  MOVFF  4E5,FF5
03AA8:  TBLWT*+
03AAA:  MOVFF  4E6,FF5
03AAE:  TBLWT*
03AB0:  RCALL  3932
03AB2:  CLRF   FF8
03AB4:  CLRF   FF8
....................       WRITE_PROGRAM_EEPROM(0x18002,TRXMODE); 
03AB6:  BSF    FD0.6
03AB8:  MOVLW  01
03ABA:  MOVWF  FF8
03ABC:  MOVLW  80
03ABE:  MOVWF  FF7
03AC0:  MOVLW  02
03AC2:  MOVWF  FF6
03AC4:  RCALL  3950
03AC6:  MOVLW  02
03AC8:  MOVWF  FF6
03ACA:  MOVFF  4E7,FF5
03ACE:  TBLWT*+
03AD0:  MOVFF  4E8,FF5
03AD4:  TBLWT*
03AD6:  RCALL  3932
03AD8:  CLRF   FF8
03ADA:  CLRF   FF8
....................       Delay_ms(10); 
03ADC:  MOVLW  0A
03ADE:  MOVLB  5
03AE0:  MOVWF  x04
03AE2:  MOVLB  0
03AE4:  CALL   10AE
....................       NEWTRX_SEND_ACKNOWLEDGEMENT(1); 
03AE8:  MOVLW  01
03AEA:  MOVLB  4
03AEC:  MOVWF  xEF
03AEE:  MOVLB  0
03AF0:  CALL   3192
....................              
....................       LOAD_CW_MODE_AND_NEW_TRX_STATUS(); 
03AF4:  CALL   11FA
....................       ENABLE_DISABLE_NEW_TRX_POWER();                   // check new trx should be on or not 
03AF8:  CALL   1356
03AFC:  MOVLB  1
....................    } 
03AFE:  MOVLB  0
03B00:  GOTO   5B02 (RETURN)
.................... } 
....................  
.................... void _CONTROL_NEW_TRX_POWER() 
.................... { 
....................    if( OLDTRX_TO_CPIC_ARRAY[2] == 0x00 && OLDTRX_TO_CPIC_ARRAY[3] == 0xCB )                  
*
04DCE:  MOVLB  2
04DD0:  MOVF   x07,F
04DD2:  BNZ   4EA2
04DD4:  MOVF   x08,W
04DD6:  SUBLW  CB
04DD8:  BNZ   4EA2
....................    { 
....................       Fprintf(PC,"CONTROL_NEW_TRX_POWER__OLDTRX\n\r"); 
04DDA:  MOVLW  78
04DDC:  MOVWF  FF6
04DDE:  MOVLW  0B
04DE0:  MOVWF  FF7
04DE2:  MOVLW  00
04DE4:  MOVWF  FF8
04DE6:  MOVLB  0
04DE8:  CALL   111C
....................       unsigned int16 CWMODE  = READ_PROGRAM_EEPROM(0x18000);  
....................       unsigned int16 TRXMODE = (unsigned int16) OLDTRX_TO_CPIC_ARRAY[4]; 
04DEC:  MOVFF  FF2,4E9
04DF0:  BCF    FF2.7
04DF2:  MOVLW  01
04DF4:  MOVWF  FF8
04DF6:  MOVLW  80
04DF8:  MOVWF  FF7
04DFA:  CLRF   FF6
04DFC:  TBLRD*+
04DFE:  MOVF   FF5,W
04E00:  TBLRD*
04E02:  MOVFF  FF5,03
04E06:  CLRF   FF8
04E08:  MOVLB  4
04E0A:  BTFSC  xE9.7
04E0C:  BSF    FF2.7
04E0E:  MOVWF  xE5
04E10:  MOVFF  03,4E6
04E14:  CLRF   xE8
04E16:  MOVFF  209,4E7
....................        
....................       ERASE_PROGRAM_EEPROM(0x18000); 
04E1A:  BSF    FD0.6
04E1C:  MOVLW  01
04E1E:  MOVWF  FF8
04E20:  MOVLW  80
04E22:  MOVWF  FF7
04E24:  CLRF   FF6
04E26:  BSF    F7F.4
04E28:  MOVLB  0
04E2A:  CALL   3932
04E2E:  CLRF   FF8
....................       WRITE_PROGRAM_EEPROM(0x18000,CWMODE ); 
04E30:  BSF    FD0.6
04E32:  MOVLW  01
04E34:  MOVWF  FF8
04E36:  MOVLW  80
04E38:  MOVWF  FF7
04E3A:  CLRF   FF6
04E3C:  CALL   3950
04E40:  CLRF   FF6
04E42:  MOVFF  4E5,FF5
04E46:  TBLWT*+
04E48:  MOVFF  4E6,FF5
04E4C:  TBLWT*
04E4E:  CALL   3932
04E52:  CLRF   FF8
04E54:  CLRF   FF8
....................       WRITE_PROGRAM_EEPROM(0x18002,TRXMODE); 
04E56:  BSF    FD0.6
04E58:  MOVLW  01
04E5A:  MOVWF  FF8
04E5C:  MOVLW  80
04E5E:  MOVWF  FF7
04E60:  MOVLW  02
04E62:  MOVWF  FF6
04E64:  CALL   3950
04E68:  MOVLW  02
04E6A:  MOVWF  FF6
04E6C:  MOVFF  4E7,FF5
04E70:  TBLWT*+
04E72:  MOVFF  4E8,FF5
04E76:  TBLWT*
04E78:  CALL   3932
04E7C:  CLRF   FF8
04E7E:  CLRF   FF8
....................       Delay_ms(10); 
04E80:  MOVLW  0A
04E82:  MOVLB  5
04E84:  MOVWF  x04
04E86:  MOVLB  0
04E88:  CALL   10AE
....................       OLDTRX_SEND_ACKNOWLEDGEMENT(1); 
04E8C:  MOVLW  01
04E8E:  MOVLB  4
04E90:  MOVWF  xEF
04E92:  MOVLB  0
04E94:  CALL   4592
....................        
....................       LOAD_CW_MODE_AND_NEW_TRX_STATUS(); 
04E98:  CALL   11FA
....................       ENABLE_DISABLE_NEW_TRX_POWER();                   // check new trx should be on or not 
04E9C:  CALL   1356
04EA0:  MOVLB  2
....................    } 
04EA2:  MOVLB  0
04EA4:  GOTO   5B92 (RETURN)
.................... } 
....................  
.................... //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
.................... //========================================================================================================================================= 
.................... void _TURN_ON_CW_FOR_ONE_MINUTE() 
.................... { 
....................    if( OLDTRX_TO_CPIC_ARRAY[2] == 0x00 && OLDTRX_TO_CPIC_ARRAY[3] == 0xCC )                  
04EA8:  MOVLB  2
04EAA:  MOVF   x07,F
04EAC:  BNZ   4F0A
04EAE:  MOVF   x08,W
04EB0:  SUBLW  CC
04EB2:  BNZ   4F0A
....................    { 
....................       Fprintf(PC,"TURN_ON_CW_FOR_ONE_MINUTE__OLDTRX\n\r"); 
04EB4:  MOVLW  98
04EB6:  MOVWF  FF6
04EB8:  MOVLW  0B
04EBA:  MOVWF  FF7
04EBC:  MOVLW  00
04EBE:  MOVWF  FF8
04EC0:  MOVLB  0
04EC2:  CALL   111C
....................        
....................       OLDTRX_SEND_ACKNOWLEDGEMENT(1); 
04EC6:  MOVLW  01
04EC8:  MOVLB  4
04ECA:  MOVWF  xEF
04ECC:  MOVLB  0
04ECE:  CALL   4592
....................       OLD_TRX_CW_MODE(); 
04ED2:  CALL   1C38
....................       Output_high(CW_PIN); 
04ED6:  BCF    F95.1
04ED8:  BSF    F8C.1
....................       for(int i = 0; i<60; i++) 
04EDA:  MOVLB  4
04EDC:  CLRF   xE5
04EDE:  MOVF   xE5,W
04EE0:  SUBLW  3B
04EE2:  BNC   4EFE
....................       { 
....................          Delay_ms(1000); 
04EE4:  MOVLW  04
04EE6:  MOVWF  xE6
04EE8:  MOVLW  FA
04EEA:  MOVLB  5
04EEC:  MOVWF  x04
04EEE:  MOVLB  0
04EF0:  CALL   10AE
04EF4:  MOVLB  4
04EF6:  DECFSZ xE6,F
04EF8:  BRA    4EE8
04EFA:  INCF   xE5,F
04EFC:  BRA    4EDE
....................       } 
....................       Output_low(CW_PIN); 
04EFE:  BCF    F95.1
04F00:  BCF    F8C.1
....................       OLD_TRX_RX_MODE(); 
04F02:  MOVLB  0
04F04:  CALL   1144
04F08:  MOVLB  2
....................    } 
04F0A:  MOVLB  0
04F0C:  GOTO   5B96 (RETURN)
.................... } 
....................  
.................... // new t 
.................... void TLE_DOWNLINK_MISSION() 
.................... { 
....................    if( NEWTRX_TO_CPIC_ARRAY[2] == 0xA1 && NEWTRX_TO_CPIC_ARRAY[3] == 0xCE )                  
*
03C7E:  MOVLB  1
03C80:  MOVF   x21,W
03C82:  SUBLW  A1
03C84:  BNZ   3D2E
03C86:  MOVF   x22,W
03C88:  SUBLW  CE
03C8A:  BNZ   3D2E
....................    { 
....................       Fprintf(PC,"TLE_DOWNLINK_MISSION__NEWTRX\n\r"); 
03C8C:  MOVLW  BC
03C8E:  MOVWF  FF6
03C90:  MOVLW  0B
03C92:  MOVWF  FF7
03C94:  MOVLW  00
03C96:  MOVWF  FF8
03C98:  MOVLB  0
03C9A:  CALL   111C
....................       NEWTRX_SEND_ACKNOWLEDGEMENT(1); 
03C9E:  MOVLW  01
03CA0:  MOVLB  4
03CA2:  MOVWF  xEF
03CA4:  MOVLB  0
03CA6:  CALL   3192
....................        
....................       FM_SECTOR_ERASE( TLE_ADDRESS, 4 );  // we earse only first 4KB 
03CAA:  MOVFF  71,4EF
03CAE:  MOVFF  70,4EE
03CB2:  MOVFF  6F,4ED
03CB6:  MOVFF  6E,4EC
03CBA:  MOVLW  04
03CBC:  MOVLB  4
03CBE:  MOVWF  xF0
03CC0:  MOVLW  03
03CC2:  MOVWF  xF2
03CC4:  MOVLW  E8
03CC6:  MOVWF  xF1
03CC8:  MOVLB  0
03CCA:  RCALL  3B1E
....................        
....................       for( int i = 0; i<34 ; i++) 
03CCC:  MOVLB  4
03CCE:  CLRF   xE5
03CD0:  MOVF   xE5,W
03CD2:  SUBLW  21
03CD4:  BNC   3D2C
....................       { 
....................          FM_BYTE_WRITE( (TLE_ADDRESS + i) , NEWTRX_TO_CPIC_ARRAY[i+4] ) ; 
03CD6:  MOVF   xE5,W
03CD8:  MOVLB  0
03CDA:  ADDWF  x6E,W
03CDC:  MOVLB  4
03CDE:  MOVWF  xE6
03CE0:  MOVLW  00
03CE2:  MOVLB  0
03CE4:  ADDWFC x6F,W
03CE6:  MOVLB  4
03CE8:  MOVWF  xE7
03CEA:  MOVLW  00
03CEC:  MOVLB  0
03CEE:  ADDWFC x70,W
03CF0:  MOVLB  4
03CF2:  MOVWF  xE8
03CF4:  MOVLW  00
03CF6:  MOVLB  0
03CF8:  ADDWFC x71,W
03CFA:  MOVLB  4
03CFC:  MOVWF  xE9
03CFE:  MOVLW  04
03D00:  ADDWF  xE5,W
03D02:  CLRF   03
03D04:  ADDLW  1F
03D06:  MOVWF  FE9
03D08:  MOVLW  01
03D0A:  ADDWFC 03,W
03D0C:  MOVWF  FEA
03D0E:  MOVFF  FEF,4F5
03D12:  MOVFF  4E9,4F4
03D16:  MOVFF  4E8,4F3
03D1A:  MOVFF  4E7,4F2
03D1E:  MOVFF  4E6,4F1
03D22:  MOVLB  0
03D24:  RCALL  3BF6
03D26:  MOVLB  4
03D28:  INCF   xE5,F
03D2A:  BRA    3CD0
03D2C:  MOVLB  1
....................       } 
....................    } 
03D2E:  MOVLB  0
03D30:  GOTO   5B06 (RETURN)
.................... } 
....................  
.................... void _TLE_DOWNLINK_MISSION() 
.................... { 
....................    if( (OLDTRX_TO_CPIC_ARRAY[2] & 0xF0) == 0xA0  && OLDTRX_TO_CPIC_ARRAY[3] == 0xCE )                  
*
04F10:  MOVLB  2
04F12:  MOVF   x07,W
04F14:  ANDLW  F0
04F16:  SUBLW  A0
04F18:  BTFSS  FD8.2
04F1A:  BRA    52B0
04F1C:  MOVF   x08,W
04F1E:  SUBLW  CE
04F20:  BTFSS  FD8.2
04F22:  BRA    52B0
....................    { 
....................       Fprintf(PC,"TLE_DOWNLINK_MISSION__OLDTRX\n\r"); 
04F24:  MOVLW  DC
04F26:  MOVWF  FF6
04F28:  MOVLW  0B
04F2A:  MOVWF  FF7
04F2C:  MOVLW  00
04F2E:  MOVWF  FF8
04F30:  MOVLB  0
04F32:  CALL   111C
....................        
....................       if( OLDTRX_TO_CPIC_ARRAY[2] == 0xA1 ) 
04F36:  MOVLB  2
04F38:  MOVF   x07,W
04F3A:  SUBLW  A1
04F3C:  BTFSS  FD8.2
04F3E:  BRA    5066
....................       { 
....................          FM_SECTOR_ERASE( TLE_ADDRESS, 4 );  // we earse only first 4KB 
04F40:  MOVFF  71,4EF
04F44:  MOVFF  70,4EE
04F48:  MOVFF  6F,4ED
04F4C:  MOVFF  6E,4EC
04F50:  MOVLW  04
04F52:  MOVLB  4
04F54:  MOVWF  xF0
04F56:  MOVLW  03
04F58:  MOVWF  xF2
04F5A:  MOVLW  E8
04F5C:  MOVWF  xF1
04F5E:  MOVLB  0
04F60:  CALL   3B1E
....................        
....................          for( int i = 0; i<17 ; i++) 
04F64:  MOVLB  4
04F66:  CLRF   xE5
04F68:  MOVF   xE5,W
04F6A:  SUBLW  10
04F6C:  BNC   4FC6
....................          { 
....................             FM_BYTE_WRITE( (TLE_ADDRESS + i) , OLDTRX_TO_CPIC_ARRAY[i+4] ) ; 
04F6E:  MOVF   xE5,W
04F70:  MOVLB  0
04F72:  ADDWF  x6E,W
04F74:  MOVLB  4
04F76:  MOVWF  xEC
04F78:  MOVLW  00
04F7A:  MOVLB  0
04F7C:  ADDWFC x6F,W
04F7E:  MOVLB  4
04F80:  MOVWF  xED
04F82:  MOVLW  00
04F84:  MOVLB  0
04F86:  ADDWFC x70,W
04F88:  MOVLB  4
04F8A:  MOVWF  xEE
04F8C:  MOVLW  00
04F8E:  MOVLB  0
04F90:  ADDWFC x71,W
04F92:  MOVLB  4
04F94:  MOVWF  xEF
04F96:  MOVLW  04
04F98:  ADDWF  xE5,W
04F9A:  CLRF   03
04F9C:  ADDLW  05
04F9E:  MOVWF  FE9
04FA0:  MOVLW  02
04FA2:  ADDWFC 03,W
04FA4:  MOVWF  FEA
04FA6:  MOVFF  FEF,4F5
04FAA:  MOVFF  4EF,4F4
04FAE:  MOVFF  4EE,4F3
04FB2:  MOVFF  4ED,4F2
04FB6:  MOVFF  4EC,4F1
04FBA:  MOVLB  0
04FBC:  CALL   3BF6
04FC0:  MOVLB  4
04FC2:  INCF   xE5,F
04FC4:  BRA    4F68
....................          } 
....................           
....................          printline(); 
04FC6:  MOVLB  0
04FC8:  CALL   15B4
....................          for( int i = 0; i<34 ; i++) 
04FCC:  MOVLB  4
04FCE:  CLRF   xE6
04FD0:  MOVF   xE6,W
04FD2:  SUBLW  21
04FD4:  BNC   503A
....................          { 
....................             fprintf(PC , "%X ", FM_BYTE_READ_( TLE_ADDRESS + i ) ); 
04FD6:  MOVF   xE6,W
04FD8:  MOVLB  0
04FDA:  ADDWF  x6E,W
04FDC:  MOVLB  4
04FDE:  MOVWF  xEC
04FE0:  MOVLW  00
04FE2:  MOVLB  0
04FE4:  ADDWFC x6F,W
04FE6:  MOVLB  4
04FE8:  MOVWF  xED
04FEA:  MOVLW  00
04FEC:  MOVLB  0
04FEE:  ADDWFC x70,W
04FF0:  MOVLB  4
04FF2:  MOVWF  xEE
04FF4:  MOVLW  00
04FF6:  MOVLB  0
04FF8:  ADDWFC x71,W
04FFA:  MOVLB  4
04FFC:  MOVWF  xEF
04FFE:  MOVFF  FE8,50D
05002:  MOVFF  4EE,50C
05006:  MOVFF  4ED,50B
0500A:  MOVFF  4EC,50A
0500E:  MOVLB  0
05010:  CALL   236E
05014:  MOVFF  01,4EC
05018:  MOVFF  01,4EE
0501C:  MOVLW  37
0501E:  MOVLB  4
05020:  MOVWF  xEF
05022:  MOVLB  0
05024:  CALL   11B4
05028:  MOVLW  20
0502A:  MOVLB  5
0502C:  MOVWF  x05
0502E:  MOVLB  0
05030:  CALL   10D8
05034:  MOVLB  4
05036:  INCF   xE6,F
05038:  BRA    4FD0
....................          } 
....................          printline(); 
0503A:  MOVLB  0
0503C:  CALL   15B4
....................          OLD_TRX_SEND_DATA_PACKETS_TO_GS(TLE_ADDRESS, 1); 
05040:  MOVFF  71,4F2
05044:  MOVFF  70,4F1
05048:  MOVFF  6F,4F0
0504C:  MOVFF  6E,4EF
05050:  MOVLB  4
05052:  CLRF   xF6
05054:  CLRF   xF5
05056:  CLRF   xF4
05058:  MOVLW  01
0505A:  MOVWF  xF3
0505C:  MOVLB  0
0505E:  CALL   42D8
....................       } 
05062:  BRA    52AE
05064:  MOVLB  2
....................        
....................       else if( OLDTRX_TO_CPIC_ARRAY[2] == 0xA2 ) 
05066:  MOVF   x07,W
05068:  SUBLW  A2
0506A:  BTFSS  FD8.2
0506C:  BRA    5172
....................       { 
....................          //FM_SECTOR_ERASE( TLE_ADDRESS, 4 );  // we earse only first 4KB 
....................        
....................          for( int i = 17; i<34 ; i++) 
0506E:  MOVLW  11
05070:  MOVLB  4
05072:  MOVWF  xE7
05074:  MOVF   xE7,W
05076:  SUBLW  21
05078:  BNC   50D2
....................          { 
....................             FM_BYTE_WRITE( (TLE_ADDRESS + i) , OLDTRX_TO_CPIC_ARRAY[i-13] ) ; 
0507A:  MOVF   xE7,W
0507C:  MOVLB  0
0507E:  ADDWF  x6E,W
05080:  MOVLB  4
05082:  MOVWF  xEC
05084:  MOVLW  00
05086:  MOVLB  0
05088:  ADDWFC x6F,W
0508A:  MOVLB  4
0508C:  MOVWF  xED
0508E:  MOVLW  00
05090:  MOVLB  0
05092:  ADDWFC x70,W
05094:  MOVLB  4
05096:  MOVWF  xEE
05098:  MOVLW  00
0509A:  MOVLB  0
0509C:  ADDWFC x71,W
0509E:  MOVLB  4
050A0:  MOVWF  xEF
050A2:  MOVLW  0D
050A4:  SUBWF  xE7,W
050A6:  CLRF   03
050A8:  ADDLW  05
050AA:  MOVWF  FE9
050AC:  MOVLW  02
050AE:  ADDWFC 03,W
050B0:  MOVWF  FEA
050B2:  MOVFF  FEF,4F5
050B6:  MOVFF  4EF,4F4
050BA:  MOVFF  4EE,4F3
050BE:  MOVFF  4ED,4F2
050C2:  MOVFF  4EC,4F1
050C6:  MOVLB  0
050C8:  CALL   3BF6
050CC:  MOVLB  4
050CE:  INCF   xE7,F
050D0:  BRA    5074
....................          } 
....................           
....................          printline(); 
050D2:  MOVLB  0
050D4:  CALL   15B4
....................          for( int i = 0; i<34 ; i++) 
050D8:  MOVLB  4
050DA:  CLRF   xE8
050DC:  MOVF   xE8,W
050DE:  SUBLW  21
050E0:  BNC   5146
....................          { 
....................             fprintf(PC , "%X ", FM_BYTE_READ_( TLE_ADDRESS + i ) ); 
050E2:  MOVF   xE8,W
050E4:  MOVLB  0
050E6:  ADDWF  x6E,W
050E8:  MOVLB  4
050EA:  MOVWF  xEC
050EC:  MOVLW  00
050EE:  MOVLB  0
050F0:  ADDWFC x6F,W
050F2:  MOVLB  4
050F4:  MOVWF  xED
050F6:  MOVLW  00
050F8:  MOVLB  0
050FA:  ADDWFC x70,W
050FC:  MOVLB  4
050FE:  MOVWF  xEE
05100:  MOVLW  00
05102:  MOVLB  0
05104:  ADDWFC x71,W
05106:  MOVLB  4
05108:  MOVWF  xEF
0510A:  MOVFF  FE8,50D
0510E:  MOVFF  4EE,50C
05112:  MOVFF  4ED,50B
05116:  MOVFF  4EC,50A
0511A:  MOVLB  0
0511C:  CALL   236E
05120:  MOVFF  01,4EC
05124:  MOVFF  01,4EE
05128:  MOVLW  37
0512A:  MOVLB  4
0512C:  MOVWF  xEF
0512E:  MOVLB  0
05130:  CALL   11B4
05134:  MOVLW  20
05136:  MOVLB  5
05138:  MOVWF  x05
0513A:  MOVLB  0
0513C:  CALL   10D8
05140:  MOVLB  4
05142:  INCF   xE8,F
05144:  BRA    50DC
....................          } 
....................          printline(); 
05146:  MOVLB  0
05148:  CALL   15B4
....................          OLD_TRX_SEND_DATA_PACKETS_TO_GS(TLE_ADDRESS, 1); 
0514C:  MOVFF  71,4F2
05150:  MOVFF  70,4F1
05154:  MOVFF  6F,4F0
05158:  MOVFF  6E,4EF
0515C:  MOVLB  4
0515E:  CLRF   xF6
05160:  CLRF   xF5
05162:  CLRF   xF4
05164:  MOVLW  01
05166:  MOVWF  xF3
05168:  MOVLB  0
0516A:  CALL   42D8
....................       } 
0516E:  BRA    52AE
05170:  MOVLB  2
....................        
....................        
....................       //14 byte length format 
....................       else 
....................       { 
....................          unsigned int8 CMD_NUM = OLDTRX_TO_CPIC_ARRAY[2] - 0xA3 ;              // A3-A3 = 1 
05172:  MOVLW  A3
05174:  SUBWF  x07,W
05176:  MOVLB  4
05178:  MOVWF  xE9
....................          if( CMD_NUM == 0) FM_SECTOR_ERASE( TLE_ADDRESS, 4 );                  // we earse only first 4KB       
0517A:  MOVF   xE9,F
0517C:  BNZ   51A2
0517E:  MOVFF  71,4EF
05182:  MOVFF  70,4EE
05186:  MOVFF  6F,4ED
0518A:  MOVFF  6E,4EC
0518E:  MOVLW  04
05190:  MOVWF  xF0
05192:  MOVLW  03
05194:  MOVWF  xF2
05196:  MOVLW  E8
05198:  MOVWF  xF1
0519A:  MOVLB  0
0519C:  CALL   3B1E
051A0:  MOVLB  4
....................           
....................          for( int i = 0 ; i<8 ; i++) 
051A2:  CLRF   xEA
051A4:  MOVF   xEA,W
051A6:  SUBLW  07
051A8:  BNC   5212
....................          { 
....................             FM_BYTE_WRITE( (TLE_ADDRESS + i + (CMD_NUM*8) ) , OLDTRX_TO_CPIC_ARRAY[i+4] ) ; 
051AA:  MOVF   xEA,W
051AC:  MOVLB  0
051AE:  ADDWF  x6E,W
051B0:  MOVLB  4
051B2:  MOVWF  xEC
051B4:  MOVLW  00
051B6:  MOVLB  0
051B8:  ADDWFC x6F,W
051BA:  MOVLB  4
051BC:  MOVWF  xED
051BE:  MOVLW  00
051C0:  MOVLB  0
051C2:  ADDWFC x70,W
051C4:  MOVLB  4
051C6:  MOVWF  xEE
051C8:  MOVLW  00
051CA:  MOVLB  0
051CC:  ADDWFC x71,W
051CE:  MOVLB  4
051D0:  MOVWF  xEF
051D2:  MOVF   xE9,W
051D4:  MULLW  08
051D6:  MOVF   FF3,W
051D8:  ADDWF  xEC,F
051DA:  MOVLW  00
051DC:  ADDWFC xED,F
051DE:  ADDWFC xEE,F
051E0:  ADDWFC xEF,F
051E2:  MOVLW  04
051E4:  ADDWF  xEA,W
051E6:  CLRF   03
051E8:  ADDLW  05
051EA:  MOVWF  FE9
051EC:  MOVLW  02
051EE:  ADDWFC 03,W
051F0:  MOVWF  FEA
051F2:  MOVFF  FEF,4F5
051F6:  MOVFF  4EF,4F4
051FA:  MOVFF  4EE,4F3
051FE:  MOVFF  4ED,4F2
05202:  MOVFF  4EC,4F1
05206:  MOVLB  0
05208:  CALL   3BF6
0520C:  MOVLB  4
0520E:  INCF   xEA,F
05210:  BRA    51A4
....................          } 
....................           
....................          printline(); 
05212:  MOVLB  0
05214:  CALL   15B4
....................          for( int i = 0; i<34 ; i++) 
05218:  MOVLB  4
0521A:  CLRF   xEB
0521C:  MOVF   xEB,W
0521E:  SUBLW  21
05220:  BNC   5286
....................          { 
....................             fprintf(PC , "%X ", FM_BYTE_READ_( TLE_ADDRESS + i ) ); 
05222:  MOVF   xEB,W
05224:  MOVLB  0
05226:  ADDWF  x6E,W
05228:  MOVLB  4
0522A:  MOVWF  xEC
0522C:  MOVLW  00
0522E:  MOVLB  0
05230:  ADDWFC x6F,W
05232:  MOVLB  4
05234:  MOVWF  xED
05236:  MOVLW  00
05238:  MOVLB  0
0523A:  ADDWFC x70,W
0523C:  MOVLB  4
0523E:  MOVWF  xEE
05240:  MOVLW  00
05242:  MOVLB  0
05244:  ADDWFC x71,W
05246:  MOVLB  4
05248:  MOVWF  xEF
0524A:  MOVFF  FE8,50D
0524E:  MOVFF  4EE,50C
05252:  MOVFF  4ED,50B
05256:  MOVFF  4EC,50A
0525A:  MOVLB  0
0525C:  CALL   236E
05260:  MOVFF  01,4EC
05264:  MOVFF  01,4EE
05268:  MOVLW  37
0526A:  MOVLB  4
0526C:  MOVWF  xEF
0526E:  MOVLB  0
05270:  CALL   11B4
05274:  MOVLW  20
05276:  MOVLB  5
05278:  MOVWF  x05
0527A:  MOVLB  0
0527C:  CALL   10D8
05280:  MOVLB  4
05282:  INCF   xEB,F
05284:  BRA    521C
....................          } 
....................          printline(); 
05286:  MOVLB  0
05288:  CALL   15B4
....................          OLD_TRX_SEND_DATA_PACKETS_TO_GS(TLE_ADDRESS, 1); 
0528C:  MOVFF  71,4F2
05290:  MOVFF  70,4F1
05294:  MOVFF  6F,4F0
05298:  MOVFF  6E,4EF
0529C:  MOVLB  4
0529E:  CLRF   xF6
052A0:  CLRF   xF5
052A2:  CLRF   xF4
052A4:  MOVLW  01
052A6:  MOVWF  xF3
052A8:  MOVLB  0
052AA:  CALL   42D8
052AE:  MOVLB  2
....................       } 
....................  
....................    } 
052B0:  MOVLB  0
052B2:  GOTO   5B9A (RETURN)
.................... } 
....................  
....................  
....................  
.................... //RESETPIC_COMMANDS RESETPIC_COMMANDS RESETPIC_COMMANDS RESETPIC_COMMANDS RESETPIC_COMMANDS RESETPIC_COMMANDS RESETPIC_COMMANDS RESETPIC_COMMANDS 
.................... //RESETPIC_COMMANDS RESETPIC_COMMANDS RESETPIC_COMMANDS RESETPIC_COMMANDS RESETPIC_COMMANDS RESETPIC_COMMANDS RESETPIC_COMMANDS RESETPIC_COMMANDS 
.................... //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
.................... //========================================================================================================================================= 
.................... // updating rest pic time using GS command new trx 
.................... Void UPDATE_RST_PIC_TIME_BY_GS_CMD() 
.................... { 
....................    if( NEWTRX_TO_CPIC_ARRAY[2] == 0x00 && NEWTRX_TO_CPIC_ARRAY[3] == 0xEA )                  
*
0375E:  MOVLB  1
03760:  MOVF   x21,F
03762:  BNZ   37F0
03764:  MOVF   x22,W
03766:  SUBLW  EA
03768:  BNZ   37F0
....................    { 
....................       Fprintf(PC,"NEW_TRX_UPDATE_RST_PIC_TIME_BY_GS_CMD\n\r"); 
0376A:  MOVLW  FC
0376C:  MOVWF  FF6
0376E:  MOVLW  0B
03770:  MOVWF  FF7
03772:  MOVLW  00
03774:  MOVWF  FF8
03776:  MOVLB  0
03778:  CALL   111C
....................        
....................       UPDATE_RESET_PIC_TIME_BY_COM_PIC(NEWTRX_TO_CPIC_ARRAY[4],NEWTRX_TO_CPIC_ARRAY[5], NEWTRX_TO_CPIC_ARRAY[6], NEWTRX_TO_CPIC_ARRAY[7], NEWTRX_TO_CPIC_ARRAY[8], NEWTRX_TO_CPIC_ARRAY[9] ) ; 
0377C:  MOVFF  123,4E5
03780:  MOVFF  124,4E6
03784:  MOVFF  125,4E7
03788:  MOVFF  126,4E8
0378C:  MOVFF  127,4E9
03790:  MOVFF  128,4EA
03794:  RCALL  3704
....................              
....................       if( RPIC_TO_CPIC_ARRAY[0] == 0xC0 && RPIC_TO_CPIC_ARRAY[1] == 0xEA && RPIC_TO_CPIC_ARRAY[19] == 0xC1 ) 
03796:  MOVF   x75,W
03798:  SUBLW  C0
0379A:  BNZ   37C4
0379C:  MOVF   x76,W
0379E:  SUBLW  EA
037A0:  BNZ   37C4
037A2:  MOVF   x88,W
037A4:  SUBLW  C1
037A6:  BNZ   37C4
....................       { 
....................          Fprintf(PC,"Reset pic time updated\n\r"); 
037A8:  MOVLW  24
037AA:  MOVWF  FF6
037AC:  MOVLW  0C
037AE:  MOVWF  FF7
037B0:  MOVLW  00
037B2:  MOVWF  FF8
037B4:  CALL   111C
....................          NEWTRX_SEND_ACKNOWLEDGEMENT(1);                       // send succes ack 
037B8:  MOVLW  01
037BA:  MOVLB  4
037BC:  MOVWF  xEF
037BE:  MOVLB  0
037C0:  RCALL  3192
....................       } 
037C2:  BRA    37DC
....................        
....................       else 
....................       { 
....................          Fprintf(PC,"Reset pic did not respond\n\r"); 
037C4:  MOVLW  3E
037C6:  MOVWF  FF6
037C8:  MOVLW  0C
037CA:  MOVWF  FF7
037CC:  MOVLW  00
037CE:  MOVWF  FF8
037D0:  CALL   111C
....................          NEWTRX_SEND_ACKNOWLEDGEMENT(0); 
037D4:  MOVLB  4
037D6:  CLRF   xEF
037D8:  MOVLB  0
037DA:  RCALL  3192
....................       } 
....................        
....................       CLEAR_DATA_ARRAY(RPIC_TO_CPIC_ARRAY, 20); 
037DC:  MOVLB  4
037DE:  CLRF   xF0
037E0:  MOVLW  75
037E2:  MOVWF  xEF
037E4:  MOVLW  14
037E6:  MOVWF  xF1
037E8:  MOVLB  0
037EA:  CALL   1594
037EE:  MOVLB  1
....................    } 
037F0:  MOVLB  0
037F2:  GOTO   5AF2 (RETURN)
.................... } 
....................  
.................... // updating rest pic time using GS command old trx 
.................... Void _UPDATE_RST_PIC_TIME_BY_GS_CMD() 
.................... { 
....................    if( OLDTRX_TO_CPIC_ARRAY[2] == 0x00 && OLDTRX_TO_CPIC_ARRAY[3] == 0xEA )                  
*
04B20:  MOVLB  2
04B22:  MOVF   x07,F
04B24:  BNZ   4BB4
04B26:  MOVF   x08,W
04B28:  SUBLW  EA
04B2A:  BNZ   4BB4
....................    { 
....................       Fprintf(PC,"OLD_TRX_UPDATE_RST_PIC_TIME_BY_GS_CMD\n\r"); 
04B2C:  MOVLW  5A
04B2E:  MOVWF  FF6
04B30:  MOVLW  0C
04B32:  MOVWF  FF7
04B34:  MOVLW  00
04B36:  MOVWF  FF8
04B38:  MOVLB  0
04B3A:  CALL   111C
....................        
....................       UPDATE_RESET_PIC_TIME_BY_COM_PIC(OLDTRX_TO_CPIC_ARRAY[4],OLDTRX_TO_CPIC_ARRAY[5], OLDTRX_TO_CPIC_ARRAY[6], OLDTRX_TO_CPIC_ARRAY[7], OLDTRX_TO_CPIC_ARRAY[8], OLDTRX_TO_CPIC_ARRAY[9] ) ; 
04B3E:  MOVFF  209,4E5
04B42:  MOVFF  20A,4E6
04B46:  MOVFF  20B,4E7
04B4A:  MOVFF  20C,4E8
04B4E:  MOVFF  20D,4E9
04B52:  MOVFF  20E,4EA
04B56:  CALL   3704
....................        
....................       if( RPIC_TO_CPIC_ARRAY[0] == 0xC0 && RPIC_TO_CPIC_ARRAY[1] == 0xEA && RPIC_TO_CPIC_ARRAY[19] == 0xC1 ) 
04B5A:  MOVF   x75,W
04B5C:  SUBLW  C0
04B5E:  BNZ   4B88
04B60:  MOVF   x76,W
04B62:  SUBLW  EA
04B64:  BNZ   4B88
04B66:  MOVF   x88,W
04B68:  SUBLW  C1
04B6A:  BNZ   4B88
....................       { 
....................          Fprintf(PC,"Reset pic time updated\n\r"); 
04B6C:  MOVLW  82
04B6E:  MOVWF  FF6
04B70:  MOVLW  0C
04B72:  MOVWF  FF7
04B74:  MOVLW  00
04B76:  MOVWF  FF8
04B78:  CALL   111C
....................          OLDTRX_SEND_ACKNOWLEDGEMENT(1);                       // send succes ack 
04B7C:  MOVLW  01
04B7E:  MOVLB  4
04B80:  MOVWF  xEF
04B82:  MOVLB  0
04B84:  RCALL  4592
....................       } 
04B86:  BRA    4BA0
....................        
....................       else 
....................       { 
....................          Fprintf(PC,"Reset pic did not respond\n\r"); 
04B88:  MOVLW  9C
04B8A:  MOVWF  FF6
04B8C:  MOVLW  0C
04B8E:  MOVWF  FF7
04B90:  MOVLW  00
04B92:  MOVWF  FF8
04B94:  CALL   111C
....................          OLDTRX_SEND_ACKNOWLEDGEMENT(0); 
04B98:  MOVLB  4
04B9A:  CLRF   xEF
04B9C:  MOVLB  0
04B9E:  RCALL  4592
....................       } 
....................        
....................       CLEAR_DATA_ARRAY(RPIC_TO_CPIC_ARRAY, 20); 
04BA0:  MOVLB  4
04BA2:  CLRF   xF0
04BA4:  MOVLW  75
04BA6:  MOVWF  xEF
04BA8:  MOVLW  14
04BAA:  MOVWF  xF1
04BAC:  MOVLB  0
04BAE:  CALL   1594
04BB2:  MOVLB  2
....................    } 
04BB4:  MOVLB  0
04BB6:  GOTO   5B82 (RETURN)
.................... } 
.................... //=============================================================================================================================================== 
....................  
....................  
.................... //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
.................... //========================================================================================================================================= 
.................... // updating rest pic time using GS command new trx 
.................... Void SEND_CUURENT_TIME_OF_THE_SATELLITE() 
.................... { 
....................    if( NEWTRX_TO_CPIC_ARRAY[2] == 0x00 && NEWTRX_TO_CPIC_ARRAY[3] == 0xEB )                  
*
037F6:  MOVLB  1
037F8:  MOVF   x21,F
037FA:  BTFSS  FD8.2
037FC:  BRA    38F8
037FE:  MOVF   x22,W
03800:  SUBLW  EB
03802:  BTFSS  FD8.2
03804:  BRA    38F8
....................    { 
....................       Fprintf(PC,"SEND_CUURENT_TIME_OF_THE_SATELLITE\n\r"); 
03806:  MOVLW  B8
03808:  MOVWF  FF6
0380A:  MOVLW  0C
0380C:  MOVWF  FF7
0380E:  MOVLW  00
03810:  MOVWF  FF8
03812:  MOVLB  0
03814:  CALL   111C
....................        
....................       CLEAR_DATA_ARRAY(CPIC_TO_RPIC_ARRAY,20); 
03818:  MOVLB  4
0381A:  CLRF   xF0
0381C:  MOVLW  AC
0381E:  MOVWF  xEF
03820:  MOVLW  14
03822:  MOVWF  xF1
03824:  MOVLB  0
03826:  CALL   1594
....................       CLEAR_DATA_ARRAY(RPIC_TO_CPIC_ARRAY,20); 
0382A:  MOVLB  4
0382C:  CLRF   xF0
0382E:  MOVLW  75
03830:  MOVWF  xEF
03832:  MOVLW  14
03834:  MOVWF  xF1
03836:  MOVLB  0
03838:  CALL   1594
....................       CPIC_TO_RPIC_ARRAY[0]  = 0xC0; 
0383C:  MOVLW  C0
0383E:  MOVWF  xAC
....................       CPIC_TO_RPIC_ARRAY[1]  = 0xEB; 
03840:  MOVLW  EB
03842:  MOVWF  xAD
....................       CPIC_TO_RPIC_ARRAY[19] = 0xC1; 
03844:  MOVLW  C1
03846:  MOVWF  xBF
....................       COMUNICATION_WITH_RST_PIC_AND_WAIT_FOR_RESPONE(2, 500, 400); 
03848:  MOVLB  4
0384A:  CLRF   xEC
0384C:  MOVLW  02
0384E:  MOVWF  xEB
03850:  MOVLW  01
03852:  MOVWF  xEE
03854:  MOVLW  F4
03856:  MOVWF  xED
03858:  MOVLW  01
0385A:  MOVWF  xF0
0385C:  MOVLW  90
0385E:  MOVWF  xEF
03860:  MOVLB  0
03862:  CALL   17AE
....................       PRINT_RECIVED_COMMAND_FROM_RESET_PIC(); 
03866:  CALL   18AA
....................        
....................        
....................       if( RPIC_TO_CPIC_ARRAY[0] == 0xC0 && RPIC_TO_CPIC_ARRAY[1] == 0xEB && RPIC_TO_CPIC_ARRAY[19] == 0xC1 ) 
0386A:  MOVF   x75,W
0386C:  SUBLW  C0
0386E:  BNZ   38DE
03870:  MOVF   x76,W
03872:  SUBLW  EB
03874:  BNZ   38DE
03876:  MOVF   x88,W
03878:  SUBLW  C1
0387A:  BNZ   38DE
....................       { 
....................          for( int i = 4; i<=10; i++) NEWTRX_TO_CPIC_ARRAY[i] = RPIC_TO_CPIC_ARRAY[i-2]; 
0387C:  MOVLW  04
0387E:  MOVLB  4
03880:  MOVWF  xE5
03882:  MOVF   xE5,W
03884:  SUBLW  0A
03886:  BNC   38C0
03888:  CLRF   03
0388A:  MOVF   xE5,W
0388C:  ADDLW  1F
0388E:  MOVWF  01
03890:  MOVLW  01
03892:  ADDWFC 03,F
03894:  MOVFF  01,4E6
03898:  MOVFF  03,4E7
0389C:  MOVLW  02
0389E:  SUBWF  xE5,W
038A0:  CLRF   03
038A2:  ADDLW  75
038A4:  MOVWF  FE9
038A6:  MOVLW  00
038A8:  ADDWFC 03,W
038AA:  MOVWF  FEA
038AC:  MOVFF  FEF,4E8
038B0:  MOVFF  4E7,FEA
038B4:  MOVFF  01,FE9
038B8:  MOVFF  4E8,FEF
038BC:  INCF   xE5,F
038BE:  BRA    3882
....................           
....................          Fprintf(PC,"Reset pic responded\n\r"); 
038C0:  MOVLW  DE
038C2:  MOVWF  FF6
038C4:  MOVLW  0C
038C6:  MOVWF  FF7
038C8:  MOVLW  00
038CA:  MOVWF  FF8
038CC:  MOVLB  0
038CE:  CALL   111C
....................          NEWTRX_SEND_ACKNOWLEDGEMENT(1);                       // send succes ack 
038D2:  MOVLW  01
038D4:  MOVLB  4
038D6:  MOVWF  xEF
038D8:  MOVLB  0
038DA:  RCALL  3192
....................       } 
038DC:  BRA    38F6
....................        
....................       else  
....................       { 
....................          Fprintf(PC,"Reset pic did not responded\n\r"); 
038DE:  MOVLW  F4
038E0:  MOVWF  FF6
038E2:  MOVLW  0C
038E4:  MOVWF  FF7
038E6:  MOVLW  00
038E8:  MOVWF  FF8
038EA:  CALL   111C
....................          NEWTRX_SEND_ACKNOWLEDGEMENT(0);                       // send succes ack 
038EE:  MOVLB  4
038F0:  CLRF   xEF
038F2:  MOVLB  0
038F4:  RCALL  3192
038F6:  MOVLB  1
....................       } 
....................    } 
038F8:  MOVLB  0
038FA:  GOTO   5AF6 (RETURN)
.................... } 
....................  
.................... Void _SEND_CUURENT_TIME_OF_THE_SATELLITE() 
.................... { 
....................    if( OLDTRX_TO_CPIC_ARRAY[2] == 0x00 && OLDTRX_TO_CPIC_ARRAY[3] == 0xEB )                  
*
04BBA:  MOVLB  2
04BBC:  MOVF   x07,F
04BBE:  BTFSS  FD8.2
04BC0:  BRA    4CBC
04BC2:  MOVF   x08,W
04BC4:  SUBLW  EB
04BC6:  BTFSS  FD8.2
04BC8:  BRA    4CBC
....................    { 
....................       Fprintf(PC,"SEND_CUURENT_TIME_OF_THE_SATELLITE\n\r"); 
04BCA:  MOVLW  12
04BCC:  MOVWF  FF6
04BCE:  MOVLW  0D
04BD0:  MOVWF  FF7
04BD2:  MOVLW  00
04BD4:  MOVWF  FF8
04BD6:  MOVLB  0
04BD8:  CALL   111C
....................        
....................       CLEAR_DATA_ARRAY(CPIC_TO_RPIC_ARRAY,20); 
04BDC:  MOVLB  4
04BDE:  CLRF   xF0
04BE0:  MOVLW  AC
04BE2:  MOVWF  xEF
04BE4:  MOVLW  14
04BE6:  MOVWF  xF1
04BE8:  MOVLB  0
04BEA:  CALL   1594
....................       CLEAR_DATA_ARRAY(RPIC_TO_CPIC_ARRAY,20); 
04BEE:  MOVLB  4
04BF0:  CLRF   xF0
04BF2:  MOVLW  75
04BF4:  MOVWF  xEF
04BF6:  MOVLW  14
04BF8:  MOVWF  xF1
04BFA:  MOVLB  0
04BFC:  CALL   1594
....................       CPIC_TO_RPIC_ARRAY[0]  = 0xC0; 
04C00:  MOVLW  C0
04C02:  MOVWF  xAC
....................       CPIC_TO_RPIC_ARRAY[1]  = 0xEB; 
04C04:  MOVLW  EB
04C06:  MOVWF  xAD
....................       CPIC_TO_RPIC_ARRAY[19] = 0xC1; 
04C08:  MOVLW  C1
04C0A:  MOVWF  xBF
....................       COMUNICATION_WITH_RST_PIC_AND_WAIT_FOR_RESPONE(2, 500, 500); 
04C0C:  MOVLB  4
04C0E:  CLRF   xEC
04C10:  MOVLW  02
04C12:  MOVWF  xEB
04C14:  MOVLW  01
04C16:  MOVWF  xEE
04C18:  MOVLW  F4
04C1A:  MOVWF  xED
04C1C:  MOVLW  01
04C1E:  MOVWF  xF0
04C20:  MOVLW  F4
04C22:  MOVWF  xEF
04C24:  MOVLB  0
04C26:  CALL   17AE
....................       PRINT_RECIVED_COMMAND_FROM_RESET_PIC(); 
04C2A:  CALL   18AA
....................        
....................       if( RPIC_TO_CPIC_ARRAY[0] == 0xC0 && RPIC_TO_CPIC_ARRAY[1] == 0xEB && RPIC_TO_CPIC_ARRAY[19] == 0xC1 ) 
04C2E:  MOVF   x75,W
04C30:  SUBLW  C0
04C32:  BNZ   4CA2
04C34:  MOVF   x76,W
04C36:  SUBLW  EB
04C38:  BNZ   4CA2
04C3A:  MOVF   x88,W
04C3C:  SUBLW  C1
04C3E:  BNZ   4CA2
....................       { 
....................          for( int i = 4; i<=10; i++) OLDTRX_TO_CPIC_ARRAY[i] = RPIC_TO_CPIC_ARRAY[i-2]; 
04C40:  MOVLW  04
04C42:  MOVLB  4
04C44:  MOVWF  xE5
04C46:  MOVF   xE5,W
04C48:  SUBLW  0A
04C4A:  BNC   4C84
04C4C:  CLRF   03
04C4E:  MOVF   xE5,W
04C50:  ADDLW  05
04C52:  MOVWF  01
04C54:  MOVLW  02
04C56:  ADDWFC 03,F
04C58:  MOVFF  01,4E6
04C5C:  MOVFF  03,4E7
04C60:  MOVLW  02
04C62:  SUBWF  xE5,W
04C64:  CLRF   03
04C66:  ADDLW  75
04C68:  MOVWF  FE9
04C6A:  MOVLW  00
04C6C:  ADDWFC 03,W
04C6E:  MOVWF  FEA
04C70:  MOVFF  FEF,4E8
04C74:  MOVFF  4E7,FEA
04C78:  MOVFF  01,FE9
04C7C:  MOVFF  4E8,FEF
04C80:  INCF   xE5,F
04C82:  BRA    4C46
....................           
....................          Fprintf(PC,"Reset pic responded\n\r"); 
04C84:  MOVLW  38
04C86:  MOVWF  FF6
04C88:  MOVLW  0D
04C8A:  MOVWF  FF7
04C8C:  MOVLW  00
04C8E:  MOVWF  FF8
04C90:  MOVLB  0
04C92:  CALL   111C
....................          OLDTRX_SEND_ACKNOWLEDGEMENT(1);                       // send succes ack 
04C96:  MOVLW  01
04C98:  MOVLB  4
04C9A:  MOVWF  xEF
04C9C:  MOVLB  0
04C9E:  RCALL  4592
....................       } 
04CA0:  BRA    4CBA
....................        
....................       else  
....................       { 
....................          Fprintf(PC,"Reset pic did not responded\n\r"); 
04CA2:  MOVLW  4E
04CA4:  MOVWF  FF6
04CA6:  MOVLW  0D
04CA8:  MOVWF  FF7
04CAA:  MOVLW  00
04CAC:  MOVWF  FF8
04CAE:  CALL   111C
....................          OLDTRX_SEND_ACKNOWLEDGEMENT(0);                       // send succes ack 
04CB2:  MOVLB  4
04CB4:  CLRF   xEF
04CB6:  MOVLB  0
04CB8:  RCALL  4592
04CBA:  MOVLB  2
....................       } 
....................    } 
04CBC:  MOVLB  0
04CBE:  GOTO   5B86 (RETURN)
.................... } 
....................  
....................  
....................  
....................  
.................... //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
.................... //========================================================================================================================================= 
.................... // Restart Reset pic using gs command 
.................... Void RESTART_RESET_PIC_BY_GS_CMD() 
.................... { 
....................    if( NEWTRX_TO_CPIC_ARRAY[2] == 0x00 && NEWTRX_TO_CPIC_ARRAY[3] == 0xEC )                  
*
038FE:  MOVLB  1
03900:  MOVF   x21,F
03902:  BNZ   392C
03904:  MOVF   x22,W
03906:  SUBLW  EC
03908:  BNZ   392C
....................    { 
....................       Fprintf(PC,"RESTART_RESET_PIC_BY_GS_CMD_NEWTRX\n\r"); 
0390A:  MOVLW  6C
0390C:  MOVWF  FF6
0390E:  MOVLW  0D
03910:  MOVWF  FF7
03912:  MOVLW  00
03914:  MOVWF  FF8
03916:  MOVLB  0
03918:  CALL   111C
....................       NEWTRX_SEND_ACKNOWLEDGEMENT(1);                       // send succes ack 
0391C:  MOVLW  01
0391E:  MOVLB  4
03920:  MOVWF  xEF
03922:  MOVLB  0
03924:  RCALL  3192
....................        
....................       OUtput_HIGH(RSTPIC_RESTART_PIN) ; 
03926:  BCF    F97.7
03928:  BSF    F8E.7
0392A:  MOVLB  1
....................    } 
0392C:  MOVLB  0
0392E:  GOTO   5AFA (RETURN)
.................... } 
....................  
.................... Void _RESTART_RESET_PIC_BY_GS_CMD() 
.................... { 
....................    if( OLDTRX_TO_CPIC_ARRAY[2] == 0x00 && OLDTRX_TO_CPIC_ARRAY[3] == 0xEC )                  
*
04CC2:  MOVLB  2
04CC4:  MOVF   x07,F
04CC6:  BNZ   4CF0
04CC8:  MOVF   x08,W
04CCA:  SUBLW  EC
04CCC:  BNZ   4CF0
....................    { 
....................       Fprintf(PC,"RESTART_RESET_PIC_BY_GS_CMD_ADDTRX\n\r"); 
04CCE:  MOVLW  92
04CD0:  MOVWF  FF6
04CD2:  MOVLW  0D
04CD4:  MOVWF  FF7
04CD6:  MOVLW  00
04CD8:  MOVWF  FF8
04CDA:  MOVLB  0
04CDC:  CALL   111C
....................       OLDTRX_SEND_ACKNOWLEDGEMENT(1);                       // send succes ack 
04CE0:  MOVLW  01
04CE2:  MOVLB  4
04CE4:  MOVWF  xEF
04CE6:  MOVLB  0
04CE8:  RCALL  4592
....................        
....................       OUtput_HIGH(RSTPIC_RESTART_PIN) ; 
04CEA:  BCF    F97.7
04CEC:  BSF    F8E.7
04CEE:  MOVLB  2
....................        
....................    } 
04CF0:  MOVLB  0
04CF2:  GOTO   5B8A (RETURN)
.................... } 
....................  
....................  
.................... //FAB_COMMANDS FAB_COMMANDS FAB_COMMANDS FAB_COMMANDS FAB_COMMANDS FAB_COMMANDS FAB_COMMANDS FAB_COMMANDS FAB_COMMANDS FAB_COMMANDS FAB_COMMANDS   
.................... //FAB_COMMANDS FAB_COMMANDS FAB_COMMANDS FAB_COMMANDS FAB_COMMANDS FAB_COMMANDS FAB_COMMANDS FAB_COMMANDS FAB_COMMANDS FAB_COMMANDS FAB_COMMANDS   
.................... //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
.................... //=============================================================================================================================================== 
.................... //control FAB kill switch 
.................... Void FAB_KILL_SWITCH_CONTROL() 
.................... { 
....................    if( NEWTRX_TO_CPIC_ARRAY[2] == 0x00 && NEWTRX_TO_CPIC_ARRAY[3] == 0xFF )                  
*
03D34:  MOVLB  1
03D36:  MOVF   x21,F
03D38:  BNZ   3E12
03D3A:  INCFSZ x22,W
03D3C:  BRA    3E12
....................    { 
....................       Fprintf(PC,"FAB_KILL_SWITCH_CONTROL_NEWTRX\n\r"); 
03D3E:  MOVLW  B8
03D40:  MOVWF  FF6
03D42:  MOVLW  0D
03D44:  MOVWF  FF7
03D46:  MOVLW  00
03D48:  MOVWF  FF8
03D4A:  MOVLB  0
03D4C:  CALL   111C
....................        
....................       CLEAR_DATA_ARRAY(CPIC_TO_MPIC_ARRAY, 40); 
03D50:  MOVLW  02
03D52:  MOVLB  4
03D54:  MOVWF  xF0
03D56:  MOVLW  E6
03D58:  MOVWF  xEF
03D5A:  MOVLW  28
03D5C:  MOVWF  xF1
03D5E:  MOVLB  0
03D60:  CALL   1594
....................       CPIC_TO_MPIC_ARRAY[0]  = 0xB0 ;                              // header 
03D64:  MOVLW  B0
03D66:  MOVLB  2
03D68:  MOVWF  xE6
....................       CPIC_TO_MPIC_ARRAY[1]  = NEWTRX_TO_CPIC_ARRAY[2];            //  
03D6A:  MOVFF  121,2E7
....................       CPIC_TO_MPIC_ARRAY[2]  = NEWTRX_TO_CPIC_ARRAY[3];            // command 
03D6E:  MOVFF  122,2E8
....................       CPIC_TO_MPIC_ARRAY[3]  = NEWTRX_TO_CPIC_ARRAY[4];            // FAB select Obc kill = 0xF1, Fab kill = 0xF2 
03D72:  MOVFF  123,2E9
....................       CPIC_TO_MPIC_ARRAY[4]  = NEWTRX_TO_CPIC_ARRAY[5];            // Close = 0x01, Open = 0x00 
03D76:  MOVFF  124,2EA
....................       CPIC_TO_MPIC_ARRAY[39] = 0xB1 ;                              // footer 
03D7A:  MOVLW  B1
03D7C:  MOVLB  3
03D7E:  MOVWF  x0D
....................       COMUNICATION_WITH_MAIN_PIC_AND_WAIT_FOR_RESPONE(1, 1,1000);   
03D80:  MOVLB  4
03D82:  CLRF   xF0
03D84:  MOVLW  01
03D86:  MOVWF  xEF
03D88:  CLRF   xF2
03D8A:  MOVWF  xF1
03D8C:  MOVLW  03
03D8E:  MOVWF  xF4
03D90:  MOVLW  E8
03D92:  MOVWF  xF3
03D94:  MOVLB  0
03D96:  CALL   19DE
....................        
....................       if( MPIC_TO_CPIC_ARRAY[0] == 0xB0 && MPIC_TO_CPIC_ARRAY[1] == 0xFF && MPIC_TO_CPIC_ARRAY[31] == 0xB1 ) 
03D9A:  MOVLB  2
03D9C:  MOVF   xAF,W
03D9E:  SUBLW  B0
03DA0:  BNZ   3DCC
03DA2:  INCFSZ xB0,W
03DA4:  BRA    3DCC
03DA6:  MOVF   xCE,W
03DA8:  SUBLW  B1
03DAA:  BNZ   3DCC
....................       { 
....................          Fprintf(PC,"Kill switch operation succesfull\n\r"); 
03DAC:  MOVLW  DA
03DAE:  MOVWF  FF6
03DB0:  MOVLW  0D
03DB2:  MOVWF  FF7
03DB4:  MOVLW  00
03DB6:  MOVWF  FF8
03DB8:  MOVLB  0
03DBA:  CALL   111C
....................          NEWTRX_SEND_ACKNOWLEDGEMENT(1); 
03DBE:  MOVLW  01
03DC0:  MOVLB  4
03DC2:  MOVWF  xEF
03DC4:  MOVLB  0
03DC6:  CALL   3192
03DCA:  MOVLB  2
....................       } 
....................        
....................       if( MPIC_TO_CPIC_ARRAY[0] == 0xB0 && MPIC_TO_CPIC_ARRAY[1] == 0xF0 && MPIC_TO_CPIC_ARRAY[31] == 0xB1 ) 
03DCC:  MOVF   xAF,W
03DCE:  SUBLW  B0
03DD0:  BNZ   3DFC
03DD2:  MOVF   xB0,W
03DD4:  SUBLW  F0
03DD6:  BNZ   3DFC
03DD8:  MOVF   xCE,W
03DDA:  SUBLW  B1
03DDC:  BNZ   3DFC
....................       { 
....................          Fprintf(PC,"Kill switch operation not succesfull\n\r"); 
03DDE:  MOVLW  FE
03DE0:  MOVWF  FF6
03DE2:  MOVLW  0D
03DE4:  MOVWF  FF7
03DE6:  MOVLW  00
03DE8:  MOVWF  FF8
03DEA:  MOVLB  0
03DEC:  CALL   111C
....................          NEWTRX_SEND_ACKNOWLEDGEMENT(0); 
03DF0:  MOVLB  4
03DF2:  CLRF   xEF
03DF4:  MOVLB  0
03DF6:  CALL   3192
03DFA:  MOVLB  2
....................       } 
....................       CLEAR_DATA_ARRAY(MPIC_TO_CPIC_ARRAY, 50); 
03DFC:  MOVLW  02
03DFE:  MOVLB  4
03E00:  MOVWF  xF0
03E02:  MOVLW  AF
03E04:  MOVWF  xEF
03E06:  MOVLW  32
03E08:  MOVWF  xF1
03E0A:  MOVLB  0
03E0C:  CALL   1594
03E10:  MOVLB  1
....................    } 
03E12:  MOVLB  0
03E14:  GOTO   5B0A (RETURN)
.................... } 
....................  
.................... Void _FAB_KILL_SWITCH_CONTROL() 
.................... { 
....................    if( OLDTRX_TO_CPIC_ARRAY[2] == 0x00 && OLDTRX_TO_CPIC_ARRAY[3] == 0xFF )                  
*
052B6:  MOVLB  2
052B8:  MOVF   x07,F
052BA:  BNZ   5394
052BC:  INCFSZ x08,W
052BE:  BRA    5394
....................    { 
....................       Fprintf(PC,"FAB_KILL_SWITCH_CONTROL_OLDTRX\n\r"); 
052C0:  MOVLW  26
052C2:  MOVWF  FF6
052C4:  MOVLW  0E
052C6:  MOVWF  FF7
052C8:  MOVLW  00
052CA:  MOVWF  FF8
052CC:  MOVLB  0
052CE:  CALL   111C
....................        
....................       CLEAR_DATA_ARRAY(CPIC_TO_MPIC_ARRAY, 40); 
052D2:  MOVLW  02
052D4:  MOVLB  4
052D6:  MOVWF  xF0
052D8:  MOVLW  E6
052DA:  MOVWF  xEF
052DC:  MOVLW  28
052DE:  MOVWF  xF1
052E0:  MOVLB  0
052E2:  CALL   1594
....................       CPIC_TO_MPIC_ARRAY[0]  = 0xB0 ;                              // header 
052E6:  MOVLW  B0
052E8:  MOVLB  2
052EA:  MOVWF  xE6
....................       CPIC_TO_MPIC_ARRAY[1]  = OLDTRX_TO_CPIC_ARRAY[2];            //  
052EC:  MOVFF  207,2E7
....................       CPIC_TO_MPIC_ARRAY[2]  = OLDTRX_TO_CPIC_ARRAY[3];            // command 
052F0:  MOVFF  208,2E8
....................       CPIC_TO_MPIC_ARRAY[3]  = OLDTRX_TO_CPIC_ARRAY[4];            // FAB select Obc kill = 0xF1, Fab kill = 0xF2 
052F4:  MOVFF  209,2E9
....................       CPIC_TO_MPIC_ARRAY[4]  = OLDTRX_TO_CPIC_ARRAY[5];            // Close = 0x01, Open = 0x00 
052F8:  MOVFF  20A,2EA
....................       CPIC_TO_MPIC_ARRAY[39] = 0xB1 ;                              // footer 
052FC:  MOVLW  B1
052FE:  MOVLB  3
05300:  MOVWF  x0D
....................       COMUNICATION_WITH_MAIN_PIC_AND_WAIT_FOR_RESPONE(1, 1,1000);   
05302:  MOVLB  4
05304:  CLRF   xF0
05306:  MOVLW  01
05308:  MOVWF  xEF
0530A:  CLRF   xF2
0530C:  MOVWF  xF1
0530E:  MOVLW  03
05310:  MOVWF  xF4
05312:  MOVLW  E8
05314:  MOVWF  xF3
05316:  MOVLB  0
05318:  CALL   19DE
....................        
....................       if( MPIC_TO_CPIC_ARRAY[0] == 0xB0 && MPIC_TO_CPIC_ARRAY[1] == 0xFF && MPIC_TO_CPIC_ARRAY[31] == 0xB1 ) 
0531C:  MOVLB  2
0531E:  MOVF   xAF,W
05320:  SUBLW  B0
05322:  BNZ   534E
05324:  INCFSZ xB0,W
05326:  BRA    534E
05328:  MOVF   xCE,W
0532A:  SUBLW  B1
0532C:  BNZ   534E
....................       { 
....................          Fprintf(PC,"Kill switch operation succesfull\n\r"); 
0532E:  MOVLW  48
05330:  MOVWF  FF6
05332:  MOVLW  0E
05334:  MOVWF  FF7
05336:  MOVLW  00
05338:  MOVWF  FF8
0533A:  MOVLB  0
0533C:  CALL   111C
....................          OLDTRX_SEND_ACKNOWLEDGEMENT(1); 
05340:  MOVLW  01
05342:  MOVLB  4
05344:  MOVWF  xEF
05346:  MOVLB  0
05348:  CALL   4592
0534C:  MOVLB  2
....................       } 
....................        
....................       if( MPIC_TO_CPIC_ARRAY[0] == 0xB0 && MPIC_TO_CPIC_ARRAY[1] == 0xF0 && MPIC_TO_CPIC_ARRAY[31] == 0xB1 ) 
0534E:  MOVF   xAF,W
05350:  SUBLW  B0
05352:  BNZ   537E
05354:  MOVF   xB0,W
05356:  SUBLW  F0
05358:  BNZ   537E
0535A:  MOVF   xCE,W
0535C:  SUBLW  B1
0535E:  BNZ   537E
....................       { 
....................          Fprintf(PC,"Kill switch operation not succesfull\n\r"); 
05360:  MOVLW  6C
05362:  MOVWF  FF6
05364:  MOVLW  0E
05366:  MOVWF  FF7
05368:  MOVLW  00
0536A:  MOVWF  FF8
0536C:  MOVLB  0
0536E:  CALL   111C
....................          OLDTRX_SEND_ACKNOWLEDGEMENT(0); 
05372:  MOVLB  4
05374:  CLRF   xEF
05376:  MOVLB  0
05378:  CALL   4592
0537C:  MOVLB  2
....................       } 
....................       CLEAR_DATA_ARRAY(MPIC_TO_CPIC_ARRAY, 50); 
0537E:  MOVLW  02
05380:  MOVLB  4
05382:  MOVWF  xF0
05384:  MOVLW  AF
05386:  MOVWF  xEF
05388:  MOVLW  32
0538A:  MOVWF  xF1
0538C:  MOVLB  0
0538E:  CALL   1594
05392:  MOVLB  2
....................    } 
05394:  MOVLB  0
05396:  GOTO   5B9E (RETURN)
.................... } 
.................... //=============================================================================================================================================== 
....................  
....................  
....................  
.................... // NEWTRX setting commands NEWTRX setting commands NEWTRX setting commands NEWTRX setting commands NEWTRX setting commands NEWTRX setting commands NEWTRX setting commands 
.................... // NEWTRX setting commands NEWTRX setting commands NEWTRX setting commands NEWTRX setting commands NEWTRX setting commands NEWTRX setting commands NEWTRX setting commands 
.................... // NEWTRX setting commands NEWTRX setting commands NEWTRX setting commands NEWTRX setting commands NEWTRX setting commands NEWTRX setting commands NEWTRX setting commands 
....................  
....................  
.................... void _UPDATING_NEWTRX_SETTINGS_BY_GS_CMD() 
.................... { 
....................    if( OLDTRX_TO_CPIC_ARRAY[2] == 0x00 && ( (OLDTRX_TO_CPIC_ARRAY[3] == 0xD1) ||  (OLDTRX_TO_CPIC_ARRAY[3] == 0xD2) || (OLDTRX_TO_CPIC_ARRAY[3] == 0xD3) ) )                  
*
056D6:  MOVLB  2
056D8:  MOVF   x07,F
056DA:  BTFSS  FD8.2
056DC:  BRA    590C
056DE:  MOVF   x08,W
056E0:  SUBLW  D1
056E2:  BZ    56F2
056E4:  MOVF   x08,W
056E6:  SUBLW  D2
056E8:  BZ    56F2
056EA:  MOVF   x08,W
056EC:  SUBLW  D3
056EE:  BTFSS  FD8.2
056F0:  BRA    590C
....................    { 
....................       Fprintf(PC,"_UPDATING_NEWTRX_SETTINGS_BY_GS_CMD\n\r"); 
056F2:  MOVLW  94
056F4:  MOVWF  FF6
056F6:  MOVLW  0E
056F8:  MOVWF  FF7
056FA:  MOVLW  00
056FC:  MOVWF  FF8
056FE:  MOVLB  0
05700:  CALL   111C
....................        
....................       CLEAR_DATA_ARRAY(CPIC_TO_NEWTRX_ARRAY, 60); 
05704:  MOVLW  01
05706:  MOVLB  4
05708:  MOVWF  xF0
0570A:  MOVLW  5B
0570C:  MOVWF  xEF
0570E:  MOVLW  3C
05710:  MOVWF  xF1
05712:  MOVLB  0
05714:  CALL   1594
....................       CPIC_TO_NEWTRX_ARRAY[0]  = 0x7E ;                              // header 
05718:  MOVLW  7E
0571A:  MOVLB  1
0571C:  MOVWF  x5B
....................       for(int i = 3; i<=11; i++)  
0571E:  MOVLW  03
05720:  MOVLB  4
05722:  MOVWF  xE5
05724:  MOVF   xE5,W
05726:  SUBLW  0B
05728:  BNC   575E
....................       { 
....................          CPIC_TO_NEWTRX_ARRAY[i-2] = OLDTRX_TO_CPIC_ARRAY[i] ; 
0572A:  MOVLW  02
0572C:  SUBWF  xE5,W
0572E:  CLRF   03
05730:  ADDLW  5B
05732:  MOVWF  01
05734:  MOVLW  01
05736:  ADDWFC 03,F
05738:  MOVFF  03,4EB
0573C:  CLRF   03
0573E:  MOVF   xE5,W
05740:  ADDLW  05
05742:  MOVWF  FE9
05744:  MOVLW  02
05746:  ADDWFC 03,W
05748:  MOVWF  FEA
0574A:  MOVFF  FEF,4EC
0574E:  MOVFF  4EB,FEA
05752:  MOVFF  01,FE9
05756:  MOVFF  4EC,FEF
0575A:  INCF   xE5,F
0575C:  BRA    5724
....................       } 
....................       CPIC_TO_NEWTRX_ARRAY[50] = 0x7E ;                              // footer 
0575E:  MOVLW  7E
05760:  MOVLB  1
05762:  MOVWF  x8D
....................        
....................       NEWTRX_flush(); 
05764:  MOVLB  0
05766:  BRA    56C4
....................       // sending command to new trx 
....................       for(int i = 0; i<=50; i++) 
05768:  MOVLB  4
0576A:  CLRF   xE6
0576C:  MOVF   xE6,W
0576E:  SUBLW  32
05770:  BNC   5792
....................       { 
....................          fputc(CPIC_TO_NEWTRX_ARRAY[i],NEW_TRX); 
05772:  CLRF   03
05774:  MOVF   xE6,W
05776:  ADDLW  5B
05778:  MOVWF  FE9
0577A:  MOVLW  01
0577C:  ADDWFC 03,W
0577E:  MOVWF  FEA
05780:  MOVFF  FEF,4EA
05784:  MOVF   xEA,W
05786:  MOVLB  0
05788:  CALL   1AEC
0578C:  MOVLB  4
0578E:  INCF   xE6,F
05790:  BRA    576C
....................       }  
....................       delay_ms(500); 
05792:  MOVLW  02
05794:  MOVWF  xEA
05796:  MOVLW  FA
05798:  MOVLB  5
0579A:  MOVWF  x04
0579C:  MOVLB  0
0579E:  CALL   10AE
057A2:  MOVLB  4
057A4:  DECFSZ xEA,F
057A6:  BRA    5796
....................        
....................       char D1 = NEWTRX_READ(); 
....................       char D2 = NEWTRX_READ(); 
....................       char D3 = NEWTRX_READ(); 
057A8:  MOVLB  0
057AA:  CALL   13EE
057AE:  MOVFF  01,4E7
057B2:  CALL   13EE
057B6:  MOVFF  01,4E8
057BA:  CALL   13EE
057BE:  MOVFF  01,4E9
....................  
....................        
....................       if( (D1 == 0x7E) && (D3 == 0x7E)) 
057C2:  MOVLB  4
057C4:  MOVF   xE7,W
057C6:  SUBLW  7E
057C8:  BTFSS  FD8.2
057CA:  BRA    58DA
057CC:  MOVF   xE9,W
057CE:  SUBLW  7E
057D0:  BTFSS  FD8.2
057D2:  BRA    58DA
....................       { 
....................          fprintf(PC, "Respons %X %X %X \n\r", D1, D2, D3); 
057D4:  MOVLW  BA
057D6:  MOVWF  FF6
057D8:  MOVLW  0E
057DA:  MOVWF  FF7
057DC:  MOVLW  00
057DE:  MOVWF  FF8
057E0:  MOVLW  08
057E2:  MOVWF  xF8
057E4:  MOVLB  0
057E6:  CALL   1184
057EA:  MOVFF  4E7,4EE
057EE:  MOVLW  37
057F0:  MOVLB  4
057F2:  MOVWF  xEF
057F4:  MOVLB  0
057F6:  CALL   11B4
057FA:  MOVLW  20
057FC:  MOVLB  5
057FE:  MOVWF  x05
05800:  MOVLB  0
05802:  CALL   10D8
05806:  MOVFF  4E8,4EE
0580A:  MOVLW  37
0580C:  MOVLB  4
0580E:  MOVWF  xEF
05810:  MOVLB  0
05812:  CALL   11B4
05816:  MOVLW  20
05818:  MOVLB  5
0581A:  MOVWF  x05
0581C:  MOVLB  0
0581E:  CALL   10D8
05822:  MOVFF  4E9,4EE
05826:  MOVLW  37
05828:  MOVLB  4
0582A:  MOVWF  xEF
0582C:  MOVLB  0
0582E:  CALL   11B4
05832:  MOVLW  CA
05834:  MOVWF  FF6
05836:  MOVLW  0E
05838:  MOVWF  FF7
0583A:  MOVLW  00
0583C:  MOVWF  FF8
0583E:  MOVLW  03
05840:  MOVLB  4
05842:  MOVWF  xF8
05844:  MOVLB  0
05846:  CALL   1184
....................          if(D2 == 0xD1)  
0584A:  MOVLB  4
0584C:  MOVF   xE8,W
0584E:  SUBLW  D1
05850:  BNZ   5874
....................          { 
....................             Fprintf(PC,"New TRX setting updated correctly \n\r"); 
05852:  MOVLW  CE
05854:  MOVWF  FF6
05856:  MOVLW  0E
05858:  MOVWF  FF7
0585A:  MOVLW  00
0585C:  MOVWF  FF8
0585E:  MOVLB  0
05860:  CALL   111C
....................             OLDTRX_SEND_ACKNOWLEDGEMENT(1); 
05864:  MOVLW  01
05866:  MOVLB  4
05868:  MOVWF  xEF
0586A:  MOVLB  0
0586C:  CALL   4592
....................          } 
05870:  BRA    58D6
05872:  MOVLB  4
....................           
....................          else if(D2 == 0xD2) 
05874:  MOVF   xE8,W
05876:  SUBLW  D2
05878:  BNZ   589C
....................          { 
....................             Fprintf(PC,"New TRX Receive frequency updated correctly \n\r"); 
0587A:  MOVLW  F4
0587C:  MOVWF  FF6
0587E:  MOVLW  0E
05880:  MOVWF  FF7
05882:  MOVLW  00
05884:  MOVWF  FF8
05886:  MOVLB  0
05888:  CALL   111C
....................             OLDTRX_SEND_ACKNOWLEDGEMENT(1); 
0588C:  MOVLW  01
0588E:  MOVLB  4
05890:  MOVWF  xEF
05892:  MOVLB  0
05894:  CALL   4592
....................          } 
05898:  BRA    58D6
0589A:  MOVLB  4
....................           
....................          else if(D2 == 0xD3) 
0589C:  MOVF   xE8,W
0589E:  SUBLW  D3
058A0:  BNZ   58C4
....................          { 
....................             Fprintf(PC,"New TRX transmit frequency updated correctly \n\r"); 
058A2:  MOVLW  24
058A4:  MOVWF  FF6
058A6:  MOVLW  0F
058A8:  MOVWF  FF7
058AA:  MOVLW  00
058AC:  MOVWF  FF8
058AE:  MOVLB  0
058B0:  CALL   111C
....................             OLDTRX_SEND_ACKNOWLEDGEMENT(1);             
058B4:  MOVLW  01
058B6:  MOVLB  4
058B8:  MOVWF  xEF
058BA:  MOVLB  0
058BC:  CALL   4592
....................          } 
058C0:  BRA    58D6
058C2:  MOVLB  4
....................           
....................          else Fprintf(PC,"different response \n\r"); 
058C4:  MOVLW  54
058C6:  MOVWF  FF6
058C8:  MOVLW  0F
058CA:  MOVWF  FF7
058CC:  MOVLW  00
058CE:  MOVWF  FF8
058D0:  MOVLB  0
058D2:  CALL   111C
....................       } 
058D6:  BRA    58F6
058D8:  MOVLB  4
....................        
....................       else 
....................       { 
....................          Fprintf(PC,"New TRX did not respond\n\r"); 
058DA:  MOVLW  6A
058DC:  MOVWF  FF6
058DE:  MOVLW  0F
058E0:  MOVWF  FF7
058E2:  MOVLW  00
058E4:  MOVWF  FF8
058E6:  MOVLB  0
058E8:  CALL   111C
....................          OLDTRX_SEND_ACKNOWLEDGEMENT(0); 
058EC:  MOVLB  4
058EE:  CLRF   xEF
058F0:  MOVLB  0
058F2:  CALL   4592
....................       } 
....................       CLEAR_DATA_ARRAY(MPIC_TO_CPIC_ARRAY, 50); 
058F6:  MOVLW  02
058F8:  MOVLB  4
058FA:  MOVWF  xF0
058FC:  MOVLW  AF
058FE:  MOVWF  xEF
05900:  MOVLW  32
05902:  MOVWF  xF1
05904:  MOVLB  0
05906:  CALL   1594
0590A:  MOVLB  2
....................    } 
0590C:  MOVLB  0
0590E:  GOTO   5BA8 (RETURN)
.................... } 
....................  
....................  
....................  
.................... // Reservation Commands Reservation Commands Reservation Commands Reservation Commands Reservation Commands Reservation Commands Reservation Commands Reservation Commands 
.................... // Reservation Commands Reservation Commands Reservation Commands Reservation Commands Reservation Commands Reservation Commands Reservation Commands Reservation Commands 
.................... // Reservation Commands Reservation Commands Reservation Commands Reservation Commands Reservation Commands Reservation Commands Reservation Commands Reservation Commands 
.................... void TRANSFER_RESERVATION_CMD_TO_MAINPIC() 
.................... { 
....................    if( (NEWTRX_TO_CPIC_ARRAY[2] & 0xF0) == 0x20 )                  
*
03F28:  MOVLB  1
03F2A:  MOVF   x21,W
03F2C:  ANDLW  F0
03F2E:  SUBLW  20
03F30:  BTFSS  FD8.2
03F32:  BRA    402C
....................    { 
....................       Fprintf(PC,"TRANSFER_RESERVATION_CMD_TO_MAINPIC_NEWTRX\n\r"); 
03F34:  MOVLW  84
03F36:  MOVWF  FF6
03F38:  MOVLW  0F
03F3A:  MOVWF  FF7
03F3C:  MOVLW  00
03F3E:  MOVWF  FF8
03F40:  MOVLB  0
03F42:  CALL   111C
....................        
....................       //_________________________________________________________________ 
....................       CLEAR_DATA_ARRAY(CPIC_TO_MPIC_ARRAY, 40); 
03F46:  MOVLW  02
03F48:  MOVLB  4
03F4A:  MOVWF  xF0
03F4C:  MOVLW  E6
03F4E:  MOVWF  xEF
03F50:  MOVLW  28
03F52:  MOVWF  xF1
03F54:  MOVLB  0
03F56:  CALL   1594
....................       CLEAR_DATA_ARRAY(MPIC_TO_CPIC_ARRAY, 40); 
03F5A:  MOVLW  02
03F5C:  MOVLB  4
03F5E:  MOVWF  xF0
03F60:  MOVLW  AF
03F62:  MOVWF  xEF
03F64:  MOVLW  28
03F66:  MOVWF  xF1
03F68:  MOVLB  0
03F6A:  CALL   1594
....................       CPIC_TO_MPIC_ARRAY[0]  = 0xB0 ;                       // header 
03F6E:  MOVLW  B0
03F70:  MOVLB  2
03F72:  MOVWF  xE6
....................       for(int i = 1; i<=10; i++) 
03F74:  MOVLW  01
03F76:  MOVLB  4
03F78:  MOVWF  xE5
03F7A:  MOVF   xE5,W
03F7C:  SUBLW  0A
03F7E:  BNC   3FB4
....................       { 
....................          CPIC_TO_MPIC_ARRAY[i] = NEWTRX_TO_CPIC_ARRAY[i+1]; 
03F80:  CLRF   03
03F82:  MOVF   xE5,W
03F84:  ADDLW  E6
03F86:  MOVWF  01
03F88:  MOVLW  02
03F8A:  ADDWFC 03,F
03F8C:  MOVFF  03,4E7
03F90:  MOVLW  01
03F92:  ADDWF  xE5,W
03F94:  CLRF   03
03F96:  ADDLW  1F
03F98:  MOVWF  FE9
03F9A:  MOVLW  01
03F9C:  ADDWFC 03,W
03F9E:  MOVWF  FEA
03FA0:  MOVFF  FEF,4E8
03FA4:  MOVFF  4E7,FEA
03FA8:  MOVFF  01,FE9
03FAC:  MOVFF  4E8,FEF
03FB0:  INCF   xE5,F
03FB2:  BRA    3F7A
....................       } 
....................       CPIC_TO_MPIC_ARRAY[39] = 0xB1 ;                       // footer 
03FB4:  MOVLW  B1
03FB6:  MOVLB  3
03FB8:  MOVWF  x0D
....................       //_________________________________________________________________ 
....................       COMUNICATION_WITH_MAIN_PIC_AND_WAIT_FOR_RESPONE(2, 1000,200); 
03FBA:  MOVLB  4
03FBC:  CLRF   xF0
03FBE:  MOVLW  02
03FC0:  MOVWF  xEF
03FC2:  MOVLW  03
03FC4:  MOVWF  xF2
03FC6:  MOVLW  E8
03FC8:  MOVWF  xF1
03FCA:  CLRF   xF4
03FCC:  MOVLW  C8
03FCE:  MOVWF  xF3
03FD0:  MOVLB  0
03FD2:  CALL   19DE
....................        
....................        
....................       if( MPIC_TO_CPIC_ARRAY[0] == 0xB0 && (MPIC_TO_CPIC_ARRAY[1]&0xF0) == 0x20 && MPIC_TO_CPIC_ARRAY[31] == 0xB1 ) 
03FD6:  MOVLB  2
03FD8:  MOVF   xAF,W
03FDA:  SUBLW  B0
03FDC:  BNZ   400E
03FDE:  MOVF   xB0,W
03FE0:  ANDLW  F0
03FE2:  SUBLW  20
03FE4:  BNZ   400E
03FE6:  MOVF   xCE,W
03FE8:  SUBLW  B1
03FEA:  BNZ   400E
....................       { 
....................          Fprintf(PC,"Main pic responded\n\r"); 
03FEC:  MOVLW  B2
03FEE:  MOVWF  FF6
03FF0:  MOVLW  0F
03FF2:  MOVWF  FF7
03FF4:  MOVLW  00
03FF6:  MOVWF  FF8
03FF8:  MOVLB  0
03FFA:  CALL   111C
....................          NEWTRX_SEND_ACKNOWLEDGEMENT(1); 
03FFE:  MOVLW  01
04000:  MOVLB  4
04002:  MOVWF  xEF
04004:  MOVLB  0
04006:  CALL   3192
....................       } 
0400A:  BRA    402A
0400C:  MOVLB  2
....................        
....................       else 
....................       { 
....................          Fprintf(PC,"Main pic did not respond\n\r"); 
0400E:  MOVLW  C8
04010:  MOVWF  FF6
04012:  MOVLW  0F
04014:  MOVWF  FF7
04016:  MOVLW  00
04018:  MOVWF  FF8
0401A:  MOVLB  0
0401C:  CALL   111C
....................          NEWTRX_SEND_ACKNOWLEDGEMENT(0); 
04020:  MOVLB  4
04022:  CLRF   xEF
04024:  MOVLB  0
04026:  CALL   3192
0402A:  MOVLB  1
....................       } 
....................    } 
0402C:  MOVLB  0
0402E:  GOTO   5B12 (RETURN)
.................... } 
....................  
....................  
.................... void _TRANSFER_RESERVATION_CMD_TO_MAINPIC() 
.................... { 
....................    if( (OLDTRX_TO_CPIC_ARRAY[2] & 0xF0) == 0x20 )                  
*
054AA:  MOVLB  2
054AC:  MOVF   x07,W
054AE:  ANDLW  F0
054B0:  SUBLW  20
054B2:  BTFSS  FD8.2
054B4:  BRA    55AE
....................    { 
....................       Fprintf(PC,"TRANSFER_RESERVATION_CMD_TO_MAINPIC_OLDTRX\n\r"); 
054B6:  MOVLW  E4
054B8:  MOVWF  FF6
054BA:  MOVLW  0F
054BC:  MOVWF  FF7
054BE:  MOVLW  00
054C0:  MOVWF  FF8
054C2:  MOVLB  0
054C4:  CALL   111C
....................        
....................       //_________________________________________________________________ 
....................       CLEAR_DATA_ARRAY(CPIC_TO_MPIC_ARRAY, 40); 
054C8:  MOVLW  02
054CA:  MOVLB  4
054CC:  MOVWF  xF0
054CE:  MOVLW  E6
054D0:  MOVWF  xEF
054D2:  MOVLW  28
054D4:  MOVWF  xF1
054D6:  MOVLB  0
054D8:  CALL   1594
....................       CLEAR_DATA_ARRAY(MPIC_TO_CPIC_ARRAY, 40); 
054DC:  MOVLW  02
054DE:  MOVLB  4
054E0:  MOVWF  xF0
054E2:  MOVLW  AF
054E4:  MOVWF  xEF
054E6:  MOVLW  28
054E8:  MOVWF  xF1
054EA:  MOVLB  0
054EC:  CALL   1594
....................       CPIC_TO_MPIC_ARRAY[0]  = 0xB0 ;                       // header 
054F0:  MOVLW  B0
054F2:  MOVLB  2
054F4:  MOVWF  xE6
....................       for(int i = 1; i<=10; i++) 
054F6:  MOVLW  01
054F8:  MOVLB  4
054FA:  MOVWF  xE5
054FC:  MOVF   xE5,W
054FE:  SUBLW  0A
05500:  BNC   5536
....................       { 
....................          CPIC_TO_MPIC_ARRAY[i] = OLDTRX_TO_CPIC_ARRAY[i+1]; 
05502:  CLRF   03
05504:  MOVF   xE5,W
05506:  ADDLW  E6
05508:  MOVWF  01
0550A:  MOVLW  02
0550C:  ADDWFC 03,F
0550E:  MOVFF  03,4E7
05512:  MOVLW  01
05514:  ADDWF  xE5,W
05516:  CLRF   03
05518:  ADDLW  05
0551A:  MOVWF  FE9
0551C:  MOVLW  02
0551E:  ADDWFC 03,W
05520:  MOVWF  FEA
05522:  MOVFF  FEF,4E8
05526:  MOVFF  4E7,FEA
0552A:  MOVFF  01,FE9
0552E:  MOVFF  4E8,FEF
05532:  INCF   xE5,F
05534:  BRA    54FC
....................       } 
....................       CPIC_TO_MPIC_ARRAY[39] = 0xB1 ;                       // footer 
05536:  MOVLW  B1
05538:  MOVLB  3
0553A:  MOVWF  x0D
....................       //_________________________________________________________________ 
....................       COMUNICATION_WITH_MAIN_PIC_AND_WAIT_FOR_RESPONE(2, 1000,200); 
0553C:  MOVLB  4
0553E:  CLRF   xF0
05540:  MOVLW  02
05542:  MOVWF  xEF
05544:  MOVLW  03
05546:  MOVWF  xF2
05548:  MOVLW  E8
0554A:  MOVWF  xF1
0554C:  CLRF   xF4
0554E:  MOVLW  C8
05550:  MOVWF  xF3
05552:  MOVLB  0
05554:  CALL   19DE
....................        
....................        
....................       if( MPIC_TO_CPIC_ARRAY[0] == 0xB0 && (MPIC_TO_CPIC_ARRAY[1]&0xF0) == 0x20 && MPIC_TO_CPIC_ARRAY[31] == 0xB1 ) 
05558:  MOVLB  2
0555A:  MOVF   xAF,W
0555C:  SUBLW  B0
0555E:  BNZ   5590
05560:  MOVF   xB0,W
05562:  ANDLW  F0
05564:  SUBLW  20
05566:  BNZ   5590
05568:  MOVF   xCE,W
0556A:  SUBLW  B1
0556C:  BNZ   5590
....................       { 
....................          Fprintf(PC,"Main pic responded\n\r"); 
0556E:  MOVLW  12
05570:  MOVWF  FF6
05572:  MOVLW  10
05574:  MOVWF  FF7
05576:  MOVLW  00
05578:  MOVWF  FF8
0557A:  MOVLB  0
0557C:  CALL   111C
....................          OLDTRX_SEND_ACKNOWLEDGEMENT(1); 
05580:  MOVLW  01
05582:  MOVLB  4
05584:  MOVWF  xEF
05586:  MOVLB  0
05588:  CALL   4592
....................       } 
0558C:  BRA    55AC
0558E:  MOVLB  2
....................        
....................       else 
....................       { 
....................          Fprintf(PC,"Main pic did not respond\n\r"); 
05590:  MOVLW  28
05592:  MOVWF  FF6
05594:  MOVLW  10
05596:  MOVWF  FF7
05598:  MOVLW  00
0559A:  MOVWF  FF8
0559C:  MOVLB  0
0559E:  CALL   111C
....................          OLDTRX_SEND_ACKNOWLEDGEMENT(0); 
055A2:  MOVLB  4
055A4:  CLRF   xEF
055A6:  MOVLB  0
055A8:  CALL   4592
055AC:  MOVLB  2
....................       } 
....................    } 
055AE:  MOVLB  0
055B0:  GOTO   5BA4 (RETURN)
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
.................... #priority INT_RDA, INT_RDA4, INT_RDA3, INT_RDA2 
....................  
.................... char B_6, B_7 ; 
....................  
.................... void Settings() 
.................... { 
....................    B_6 = input(PIN_B6); 
*
01388:  BSF    F93.6
0138A:  MOVLB  4
0138C:  CLRF   xE3
0138E:  BTFSC  F81.6
01390:  INCF   xE3,F
....................    B_7 = input(PIN_B7); 
01392:  BSF    F93.7
01394:  CLRF   xE4
01396:  BTFSC  F81.7
01398:  INCF   xE4,F
....................     
....................    OUtput_Low(RSTPIC_RESTART_PIN) ;                  // reset pic Restart pin low 
0139A:  BCF    F97.7
0139C:  BCF    F8E.7
....................    OLD_TRX_RX_MODE(); 
0139E:  MOVLB  0
013A0:  RCALL  1144
....................    OUtput_LOW(TRXPWR_PIN);                           // New TRX off start 
013A2:  BCF    F92.3
013A4:  BCF    F89.3
....................    NEW_TRX_RX_MODE(); 
013A6:  RCALL  1170
....................       
....................    enable_interrupts(INT_RDA)  ;                      // enabling OLDTRX UART interupt 
013A8:  BSF    F9D.5
....................    enable_interrupts(INT_RDA2) ;                      // enabling MAIN PIC UART interupt 
013AA:  BSF    FA3.5
....................    enable_interrupts(INT_RDA3) ;                      // enabling RESET PIC UART interupt 
013AC:  BSF    F61.5
....................    enable_interrupts(INT_RDA4) ;                      // enabling NEWTRX UART interupt 
013AE:  BSF    F61.7
....................    
....................    enable_interrupts(GLOBAL);                        // start interupt procesing 
013B0:  MOVLW  C0
013B2:  IORWF  FF2,F
....................     
....................    LOAD_CW_MODE_AND_NEW_TRX_STATUS();                // check cw tranmitter and new trx status 
013B4:  RCALL  11FA
....................    ENABLE_DISABLE_NEW_TRX_POWER();                   // check new trx should be on or not 
013B6:  RCALL  1356
....................        
....................    SETUP_WDT(WDT_128S); 
013B8:  BSF    F7D.5
....................  
....................    Delay_ms(2000); 
013BA:  MOVLW  08
013BC:  MOVLB  4
013BE:  MOVWF  xE5
013C0:  MOVLW  FA
013C2:  MOVLB  5
013C4:  MOVWF  x04
013C6:  MOVLB  0
013C8:  RCALL  10AE
013CA:  MOVLB  4
013CC:  DECFSZ xE5,F
013CE:  BRA    13C0
....................    fprintf(PC, "Compic booting..........\n\r"); 
013D0:  MOVLW  44
013D2:  MOVWF  FF6
013D4:  MOVLW  10
013D6:  MOVWF  FF7
013D8:  MOVLW  00
013DA:  MOVWF  FF8
013DC:  MOVLB  0
013DE:  RCALL  111C
013E0:  GOTO   5A7A (RETURN)
....................     
....................    //output_high(TRXPWR_PIN); 
.................... } 
....................  
.................... void main() 
*
05912:  CLRF   FF8
05914:  BCF    FD0.7
05916:  BSF    07.7
05918:  MOVLB  E
0591A:  MOVLW  55
0591C:  MOVWF  F7E
0591E:  MOVLW  AA
05920:  MOVWF  F7E
05922:  BCF    F66.6
05924:  MOVLW  F4
05926:  MOVWF  x2A
05928:  MOVLW  FA
0592A:  MOVWF  x2B
0592C:  MOVLW  F8
0592E:  MOVWF  x2C
05930:  MOVLW  F2
05932:  MOVWF  x2D
05934:  MOVLW  30
05936:  MOVWF  x16
05938:  MOVLW  01
0593A:  MOVWF  x1B
0593C:  MOVLW  20
0593E:  MOVWF  x22
05940:  MOVWF  x25
05942:  MOVLW  55
05944:  MOVWF  F7E
05946:  MOVLW  AA
05948:  MOVWF  F7E
0594A:  BSF    F66.6
0594C:  CLRF   F9B
0594E:  CLRF   F64
05950:  CLRF   F65
05952:  CLRF   F66
05954:  MOVLW  02
05956:  MOVWF  FD3
05958:  MOVLW  77
0595A:  MOVWF  1B
0595C:  CLRF   1C
0595E:  CLRF   1D
05960:  CLRF   1F
05962:  MOVLW  64
05964:  MOVWF  1E
05966:  CLRF   21
05968:  CLRF   20
0596A:  MOVLB  0
0596C:  CLRF   x69
0596E:  MOVLW  AA
05970:  MOVWF  x6A
05972:  MOVLW  BB
05974:  MOVWF  x6B
05976:  MOVLW  CC
05978:  MOVWF  x6C
0597A:  MOVLW  DD
0597C:  MOVWF  x6D
0597E:  MOVLW  07
05980:  MOVWF  x71
05982:  MOVLW  D0
05984:  MOVWF  x70
05986:  CLRF   x6F
05988:  CLRF   x6E
0598A:  CLRF   x72
0598C:  MOVLW  AA
0598E:  MOVWF  x73
05990:  MOVLW  BB
05992:  MOVWF  x74
05994:  MOVLW  4A
05996:  MOVLB  3
05998:  MOVWF  x1D
0599A:  MOVLW  47
0599C:  MOVWF  x1E
0599E:  MOVLW  36
059A0:  MOVWF  x1F
059A2:  MOVLW  59
059A4:  MOVWF  x20
059A6:  MOVLW  42
059A8:  MOVWF  x21
059AA:  MOVLW  57
059AC:  MOVWF  x22
059AE:  MOVLW  6A
059B0:  MOVWF  x23
059B2:  MOVLW  67
059B4:  MOVWF  x24
059B6:  MOVLW  36
059B8:  MOVWF  x25
059BA:  MOVLW  79
059BC:  MOVWF  x26
059BE:  MOVLW  6F
059C0:  MOVWF  x27
059C2:  MOVLW  77
059C4:  MOVWF  x28
059C6:  BCF    F95.7
059C8:  BSF    F8C.7
059CA:  CLRF   x29
059CC:  MOVLB  F
059CE:  BCF    x31.3
059D0:  MOVLW  19
059D2:  MOVWF  x1F
059D4:  MOVLW  A6
059D6:  MOVWF  x32
059D8:  MOVLW  90
059DA:  MOVWF  x33
059DC:  MOVLB  3
059DE:  CLRF   x5D
059E0:  CLRF   x5C
059E2:  CLRF   x5E
059E4:  CLRF   x60
059E6:  CLRF   x5F
059E8:  CLRF   x61
059EA:  MOVLB  F
059EC:  BCF    x2D.3
059EE:  MOVLW  19
059F0:  MOVWF  x2B
059F2:  MOVLW  A6
059F4:  MOVWF  x2E
059F6:  MOVLW  90
059F8:  MOVWF  x2F
059FA:  MOVLB  3
059FC:  CLRF   x95
059FE:  CLRF   x94
05A00:  CLRF   x96
05A02:  CLRF   x98
05A04:  CLRF   x97
05A06:  CLRF   x99
05A08:  BSF    F67.3
05A0A:  MOVLW  22
05A0C:  MOVWF  FAF
05A0E:  MOVLW  00
05A10:  MOVLB  F
05A12:  MOVWF  x30
05A14:  MOVLW  A6
05A16:  MOVWF  FAC
05A18:  MOVLW  90
05A1A:  MOVWF  FAB
05A1C:  MOVLB  3
05A1E:  CLRF   xCD
05A20:  CLRF   xCC
05A22:  CLRF   xCE
05A24:  CLRF   xD0
05A26:  CLRF   xCF
05A28:  CLRF   xD1
05A2A:  MOVLB  E
05A2C:  BSF    xFD.3
05A2E:  MOVLW  22
05A30:  MOVWF  xFB
05A32:  MOVLW  00
05A34:  MOVWF  xFC
05A36:  MOVLW  A6
05A38:  MOVWF  xFE
05A3A:  MOVLW  90
05A3C:  MOVWF  xFF
05A3E:  MOVLB  4
05A40:  CLRF   x37
05A42:  CLRF   x36
05A44:  CLRF   x38
05A46:  CLRF   x3A
05A48:  CLRF   x39
05A4A:  CLRF   x3B
05A4C:  BSF    F96.0
05A4E:  BCF    F96.6
05A50:  BCF    F96.1
05A52:  BCF    F8D.1
05A54:  CLRF   xE0
05A56:  CLRF   xE2
05A58:  CLRF   xE1
05A5A:  MOVLB  E
05A5C:  CLRF   xD9
05A5E:  CLRF   xDA
05A60:  CLRF   x45
05A62:  CLRF   x46
05A64:  CLRF   x47
05A66:  BCF    x8D.7
05A68:  BCF    x8D.6
05A6A:  BCF    x8D.5
05A6C:  MOVLB  F
05A6E:  CLRF   x53
05A70:  CLRF   x38
05A72:  CLRF   x37
.................... { 
....................    Settings(); 
05A74:  MOVLB  0
05A76:  GOTO   1388
....................     
....................    while(true) 
....................    { 
....................       CHECK_UART_INCOMING_FROM_NEW_TRX(0x54)  ; 
05A7A:  MOVLW  54
05A7C:  MOVLB  4
05A7E:  MOVWF  xE5
05A80:  MOVLB  0
05A82:  GOTO   1438
....................       CHECK_UART_INCOMING_FROM_OLD_TRX(0x42)  ; 
05A86:  MOVLW  42
05A88:  MOVLB  4
05A8A:  MOVWF  xE5
05A8C:  MOVLB  0
05A8E:  GOTO   1502
....................         
....................       COMUNICATE_WITH_RSTPIC_EVERY90SEC_AND_ASK_CW_DATA_FROM_MAINPIC(CW_INTERVAL); 
05A92:  MOVFF  1F,4E6
05A96:  MOVFF  1E,4E5
05A9A:  GOTO   2956
....................  
....................       // ===================================================================================================================================== 
....................       // Processing command coming from New UHF Tranceiver_____________________ 
....................       EXTRACTING_NEW_TRANCEIVER_COMMAND(0x54); 
05A9E:  MOVLW  54
05AA0:  MOVLB  4
05AA2:  MOVWF  xE5
05AA4:  MOVLB  0
05AA6:  GOTO   2BA2
....................        
....................       if( NEWTRX_TO_CPIC_ARRAY[0] == 0x54 && NEWTRX_TO_CPIC_ARRAY[1] == SAT_ID && NEWTRX_TO_CPIC_ARRAY[NEWTRX_RPL] == 0xAA )     // 0x54 = "T" 
05AAA:  MOVLB  1
05AAC:  MOVF   x1F,W
05AAE:  SUBLW  54
05AB0:  BNZ   5B2E
05AB2:  MOVF   1B,W
05AB4:  SUBWF  x20,W
05AB6:  BNZ   5B2E
05AB8:  CLRF   03
05ABA:  MOVF   1D,W
05ABC:  ADDLW  1F
05ABE:  MOVWF  FE9
05AC0:  MOVLW  01
05AC2:  ADDWFC 03,W
05AC4:  MOVWF  FEA
05AC6:  MOVF   FEF,W
05AC8:  SUBLW  AA
05ACA:  BNZ   5B2E
....................       { 
....................          fprintf(PC, "Command from Tharindu's new Transceiver\n\r"); 
05ACC:  MOVLW  60
05ACE:  MOVWF  FF6
05AD0:  MOVLW  10
05AD2:  MOVWF  FF7
05AD4:  MOVLW  00
05AD6:  MOVWF  FF8
05AD8:  MOVLB  0
05ADA:  CALL   111C
....................           
....................          PACKETS_DOWNLOAD_WITHOUT_FM_ACCESS()         ;       // 54 77 00 10 __ __ __ __ 00 00 00 __ 
05ADE:  GOTO   30EC
....................          PACKETS_DOWNLOAD_WITH_FM_FULL_ACCESS()       ;       // 54 77 00 11 __ __ __ __ 00 00 00 __ 
05AE2:  GOTO   32DC
....................          DATA_DOWNLOAD_FROM_MAIN_FM_OR_MSN_FM()       ;       // 54 77 00 PP __ __ __ __ 00 00 __ __    PP = 12 (MSNFM), PP = 13 (MAINFM) 
05AE6:  GOTO   33E6
....................          FLASH_MEMORY_SECTOR_ERASE()                  ;       // 54 77 00 10 __ __ __ __ 00 00 00 FM    FM = F1 (com FM), FM = F2 (main FM), FM = F3 (msn FM), 
05AEA:  GOTO   35FE
....................           
....................          UPDATE_RST_PIC_TIME_BY_GS_CMD()              ;       // 54 77 00 EA __ __ __ __ __ __ 00 00 
05AEE:  GOTO   375E
....................          SEND_CUURENT_TIME_OF_THE_SATELLITE()         ;       // 54 77 00 EB 00 00 00 00 00 00 00 00 
05AF2:  GOTO   37F6
....................          RESTART_RESET_PIC_BY_GS_CMD()                ;       // 54 77 00 EC 00 00 00 00 00 00 00 00 
05AF6:  GOTO   38FE
....................           
....................          CONTROL_CW_TX_MODE()                         ;       // 54 77 00 CA MM 00 00 00 00 00 00 00    MM = AA newtrx cw, MM = BB oldtrx CW, else = no cw 
05AFA:  GOTO   3966
....................          CONTROL_NEW_TRX_POWER()                      ;       // 54 77 00 CB MM 00 00 00 00 00 00 00    MM = AA newtrx board on, MM = BB newtrx board off 
05AFE:  GOTO   3A34
....................          TLE_DOWNLINK_MISSION()                       ;       // 54 77 AA CE 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
05B02:  GOTO   3C7E
....................           
....................          FAB_KILL_SWITCH_CONTROL()                    ;       // 54 77 00 FF MM __ 00 00 00 00 00 00    MM = F1 fab kill, MM = F2 obc kill 
05B06:  GOTO   3D34
....................           
....................          SENDING_APRS_MISSION_CMD_TO_MAINPIC()        ;       // 54 77 __ BX 
05B0A:  GOTO   3E18
....................          TRANSFER_RESERVATION_CMD_TO_MAINPIC()        ;       // 54 77 2X YY __ __ DD HH MM DD HH MM    X = 1 to A 
05B0E:  GOTO   3F28
....................           
....................          TRANSFERING_ANTENNA_RELATED_CMD_TO_MAINPIC() ;       // 54 77 00 DX 00 00 00 00 00 00 00 00  
05B12:  GOTO   4032
....................           
....................          // finally crear the buffer_______________ 
....................          CLEAR_DATA_ARRAY(NEWTRX_TO_CPIC_ARRAY,50); 
05B16:  MOVLW  01
05B18:  MOVLB  4
05B1A:  MOVWF  xF0
05B1C:  MOVLW  1F
05B1E:  MOVWF  xEF
05B20:  MOVLW  32
05B22:  MOVWF  xF1
05B24:  MOVLB  0
05B26:  CALL   1594
....................          NEWTRX_RPL  = 0;      // clearing new tranceiver receive packet length 
05B2A:  CLRF   1D
05B2C:  MOVLB  1
....................       } 
....................       // ____________________________________________________________________________________________________________________________________ 
....................  
....................        
....................       
....................       // ===================================================================================================================================== 
....................       // Processing command coming from ADDNICS Tranceiver_____________________ 
....................       EXTRACTING_OLD_TRANCEIVER_COMMAND(0x42); 
05B2E:  MOVLW  42
05B30:  MOVLB  4
05B32:  MOVWF  xE5
05B34:  MOVLB  0
05B36:  GOTO   4142
....................        
....................       if( OLDTRX_TO_CPIC_ARRAY[0] == 0x42 && OLDTRX_TO_CPIC_ARRAY[1] == SAT_ID && OLDTRX_TO_CPIC_ARRAY[OLDTRX_RPL] == 0xBB )     // 0x4E = "B" 
05B3A:  MOVLB  2
05B3C:  MOVF   x05,W
05B3E:  SUBLW  42
05B40:  BNZ   5BC0
05B42:  MOVF   1B,W
05B44:  SUBWF  x06,W
05B46:  BNZ   5BC0
05B48:  CLRF   03
05B4A:  MOVF   1C,W
05B4C:  ADDLW  05
05B4E:  MOVWF  FE9
05B50:  MOVLW  02
05B52:  ADDWFC 03,W
05B54:  MOVWF  FEA
05B56:  MOVF   FEF,W
05B58:  SUBLW  BB
05B5A:  BNZ   5BC0
....................       { 
....................          fprintf(PC, "Command from ADDNICS Transceiver\n\r"); 
05B5C:  MOVLW  8A
05B5E:  MOVWF  FF6
05B60:  MOVLW  10
05B62:  MOVWF  FF7
05B64:  MOVLW  00
05B66:  MOVWF  FF8
05B68:  MOVLB  0
05B6A:  CALL   111C
....................           
....................          _PACKETS_DOWNLOAD_WITHOUT_FM_ACCESS()         ;       // 42 77 00 10 __ __ __ __ 00 00 00 __ 
05B6E:  GOTO   4534
....................          _PACKETS_DOWNLOAD_WITH_FM_FULL_ACCESS()       ;       // 42 77 00 11 __ __ __ __ 00 00 00 __ 
05B72:  GOTO   46F6
....................          _DATA_DOWNLOAD_FROM_MAIN_FM_OR_MSN_FM()       ;       // 42 77 00 PP __ __ __ __ 00 00 __ __    PP = 12 (MSNFM), PP = 13 (MAINFM) 
05B76:  GOTO   4802
....................          _FLASH_MEMORY_SECTOR_ERASE()                  ;       // 42 77 00 10 __ __ __ __ 00 00 00 FM    FM = F1 (com FM), FM = F2 (main FM), FM = F3 (msn FM), 
05B7A:  GOTO   4A1A
....................           
....................          _UPDATE_RST_PIC_TIME_BY_GS_CMD()              ;       // 42 77 00 EA __ __ __ __ __ __ 00 00 
05B7E:  GOTO   4B20
....................          _SEND_CUURENT_TIME_OF_THE_SATELLITE()         ;       // 42 77 00 EB 00 00 00 00 00 00 00 00 
05B82:  GOTO   4BBA
....................          _RESTART_RESET_PIC_BY_GS_CMD()                ;       // 42 77 00 EC 00 00 00 00 00 00 00 00 
05B86:  GOTO   4CC2
....................           
....................          _CONTROL_CW_TX_MODE()                         ;       // 42 77 00 CA MM 00 00 00 00 00 00 00    MM = AA newtrx cw, MM = BB oldtrx CW, else = no cw 
05B8A:  GOTO   4CF6
....................          _CONTROL_NEW_TRX_POWER()                      ;       // 42 77 00 CB MM 00 00 00 00 00 00 00    MM = AA newtrx board on, MM = BB newtrx board off 
05B8E:  GOTO   4DCE
....................          _TURN_ON_CW_FOR_ONE_MINUTE()                  ;       // 42 77 00 CC MM 00 00 00 00 00 00 00 
05B92:  GOTO   4EA8
....................          _TLE_DOWNLINK_MISSION()                       ;       // 42 77 AA CE 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
05B96:  GOTO   4F10
....................           
....................          _FAB_KILL_SWITCH_CONTROL()                    ;       // 42 77 00 FF __ __ 00 00 00 00 00 00    MM = F1 fab kill, MM = F2 obc kill 
05B9A:  GOTO   52B6
....................           
....................          _SENDING_APRS_MISSION_CMD_TO_MAINPIC()        ;       // 42 77 __ BX 
05B9E:  GOTO   539A
....................          _TRANSFER_RESERVATION_CMD_TO_MAINPIC()        ;       // 42 77 2X YY __ __ DD HH MM DD HH MM    X = 1 to A 
05BA2:  BRA    54AA
....................           
....................          _TRANSFERING_ANTENNA_RELATED_CMD_TO_MAINPIC() ;       // 42 77 00 DX 00 00 00 00 00 00 00 00  
05BA4:  BRA    55B4
....................           
....................          _UPDATING_NEWTRX_SETTINGS_BY_GS_CMD()         ;       // 42 77 00 D1 
05BA6:  BRA    56D6
....................           
....................          // finally crear the buffer_______________ 
....................          CLEAR_DATA_ARRAY(OLDTRX_TO_CPIC_ARRAY,50); 
05BA8:  MOVLW  02
05BAA:  MOVLB  4
05BAC:  MOVWF  xF0
05BAE:  MOVLW  05
05BB0:  MOVWF  xEF
05BB2:  MOVLW  32
05BB4:  MOVWF  xF1
05BB6:  MOVLB  0
05BB8:  CALL   1594
....................          OLDTRX_RPL = 0;     // clearing old tranceiver receive packet length 
05BBC:  CLRF   1C
05BBE:  MOVLB  2
....................       } 
....................       // _____________________________________________________________________________________________________________________________________ 
....................        
....................       delay_ms(10); 
05BC0:  MOVLW  0A
05BC2:  MOVLB  5
05BC4:  MOVWF  x04
05BC6:  MOVLB  0
05BC8:  CALL   10AE
....................        
....................       RESTART_WDT(); 
05BCC:  CLRWDT
....................       MLC++; 
05BCE:  INCF   20,F
05BD0:  BTFSC  FD8.2
05BD2:  INCF   21,F
05BD4:  BRA    5A7A
....................    } 
.................... } 
05BD6:  SLEEP 

Configuration Fuses:
   Word  1: F6A0   STVREN NOXINST NODEBUG NOBROWNOUT BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FFFF   WDTWIN_25% WDTCLK_FRC WDT32768 WDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS DSWDT DSWDTOSC_SOSC
