CCS PCH C Compiler, Version 5.078, 43599               06-3-24 22:00

               Filename:   G:\マイドライブ\OBC\OBC&MissionBoss Codes\MAIN_PIC\MP V7.7\MainPICmain.lst

               ROM used:   45790 bytes (35%)
                           Largest free fragment is 65520
               RAM used:   1022 (29%) at main() level
                           1108 (31%) worst case
               Stack used: 6 locations (4 in main + 2 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   AF4C
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F61.7
0005E:  GOTO   0068
00062:  BTFSC  FA6.7
00064:  GOTO   016A
00068:  BTFSS  FA3.5
0006A:  GOTO   0074
0006E:  BTFSC  FA4.5
00070:  GOTO   01D8
00074:  BTFSS  F61.5
00076:  GOTO   0080
0007A:  BTFSC  FA6.5
0007C:  GOTO   0246
00080:  BTFSS  F9D.5
00082:  GOTO   008C
00086:  BTFSC  F9E.5
00088:  GOTO   00FC
0008C:  MOVFF  0E,00
00090:  MOVFF  0F,01
00094:  MOVFF  10,02
00098:  MOVFF  11,03
0009C:  MOVFF  0C,FE9
000A0:  MOVFF  07,FEA
000A4:  BSF    07.7
000A6:  MOVFF  08,FE1
000AA:  MOVFF  09,FE2
000AE:  MOVFF  0A,FD9
000B2:  MOVFF  0B,FDA
000B6:  MOVFF  12,FF3
000BA:  MOVFF  13,FF4
000BE:  MOVFF  14,FFA
000C2:  MOVFF  15,FF5
000C6:  MOVFF  16,FF6
000CA:  MOVFF  17,FF7
000CE:  MOVFF  18,FF8
000D2:  MOVFF  19,FFB
000D6:  MOVF   04,W
000D8:  MOVFF  06,FE0
000DC:  MOVFF  05,FD8
000E0:  RETFIE 0
.................... #include <18F67J94.h> 
.................... //////////// Standard Header file for the PIC18F67J94 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F67J94 
*
00296:  DATA 4D,61
00298:  DATA 69,6E
0029A:  DATA 50,49
0029C:  DATA 43,20
0029E:  DATA 54,69
002A0:  DATA 6D,65
002A2:  DATA 20,3E
002A4:  DATA 3E,3E
002A6:  DATA 20,00
002A8:  DATA 4D,50
002AA:  DATA 20,25
002AC:  DATA 30,32
002AE:  DATA 75,00
002B0:  DATA 52,53
002B2:  DATA 56,53
002B4:  DATA 4E,20
002B6:  DATA 4C,6F
002B8:  DATA 63,61
002BA:  DATA 74,69
002BC:  DATA 6F,6E
002BE:  DATA 20,2D
002C0:  DATA 20,25
002C2:  DATA 58,20
002C4:  DATA 3E,3E
002C6:  DATA 20,00
002C8:  DATA 52,53
002CA:  DATA 56,53
002CC:  DATA 4E,20
002CE:  DATA 43,4D
002D0:  DATA 44,20
002D2:  DATA 6F,6E
002D4:  DATA 20,74
002D6:  DATA 69,6D
002D8:  DATA 65,20
002DA:  DATA 6C,6F
002DC:  DATA 61,64
002DE:  DATA 65,64
002E0:  DATA 2C,20
002E2:  DATA 4C,6F
002E4:  DATA 63,61
002E6:  DATA 74,69
002E8:  DATA 6F,6E
002EA:  DATA 20,3D
002EC:  DATA 20,25
002EE:  DATA 58,20
002F0:  DATA 7C,20
002F2:  DATA 25,58
002F4:  DATA 2D,25
002F6:  DATA 58,3A
002F8:  DATA 25,58
002FA:  DATA 0A,0D
002FC:  DATA 00,00
002FE:  DATA 52,53
00300:  DATA 56,53
00302:  DATA 4E,20
00304:  DATA 43,4D
00306:  DATA 44,20
00308:  DATA 6F,66
0030A:  DATA 66,20
0030C:  DATA 74,69
0030E:  DATA 6D,65
00310:  DATA 20,6C
00312:  DATA 6F,61
00314:  DATA 64,65
00316:  DATA 64,2C
00318:  DATA 20,4C
0031A:  DATA 6F,63
0031C:  DATA 61,74
0031E:  DATA 69,6F
00320:  DATA 6E,20
00322:  DATA 3D,20
00324:  DATA 25,58
00326:  DATA 20,7C
00328:  DATA 20,25
0032A:  DATA 58,2D
0032C:  DATA 25,58
0032E:  DATA 3A,25
00330:  DATA 58,0A
00332:  DATA 0D,00
00334:  DATA 45,78
00336:  DATA 65,63
00338:  DATA 75,74
0033A:  DATA 69,6E
0033C:  DATA 67,20
0033E:  DATA 6C,6F
00340:  DATA 63,61
00342:  DATA 74,69
00344:  DATA 6F,6E
00346:  DATA 20,2D
00348:  DATA 20,25
0034A:  DATA 58,20
0034C:  DATA 72,65
0034E:  DATA 73,65
00350:  DATA 72,76
00352:  DATA 61,74
00354:  DATA 69,6F
00356:  DATA 6E,20
00358:  DATA 63,6F
0035A:  DATA 6D,6D
0035C:  DATA 61,6E
0035E:  DATA 64,20
00360:  DATA 0A,0D
00362:  DATA 00,00
00364:  DATA 4C,6F
00366:  DATA 63,61
00368:  DATA 74,69
0036A:  DATA 6F,6E
0036C:  DATA 20,2D
0036E:  DATA 20,25
00370:  DATA 58,20
00372:  DATA 72,65
00374:  DATA 73,65
00376:  DATA 72,76
00378:  DATA 61,74
0037A:  DATA 69,6F
0037C:  DATA 6E,20
0037E:  DATA 63,6C
00380:  DATA 65,61
00382:  DATA 72,65
00384:  DATA 64,20
00386:  DATA 0A,0D
00388:  DATA 00,00
0038A:  DATA 52,53
0038C:  DATA 56,53
0038E:  DATA 4E,20
00390:  DATA 4C,6F
00392:  DATA 63,61
00394:  DATA 74,69
00396:  DATA 6F,6E
00398:  DATA 20,2D
0039A:  DATA 20,25
0039C:  DATA 58,20
0039E:  DATA 3E,3E
003A0:  DATA 20,00
003A2:  DATA 52,65
003A4:  DATA 73,65
003A6:  DATA 72,76
003A8:  DATA 61,74
003AA:  DATA 69,6F
003AC:  DATA 6E,20
003AE:  DATA 63,6F
003B0:  DATA 6D,6D
003B2:  DATA 61,6E
003B4:  DATA 64,20
003B6:  DATA 52,65
003B8:  DATA 63,65
003BA:  DATA 69,76
003BC:  DATA 65,64
003BE:  DATA 0A,0D
003C0:  DATA 00,00
003C2:  DATA 52,65
003C4:  DATA 73,65
003C6:  DATA 72,76
003C8:  DATA 61,74
003CA:  DATA 69,6F
003CC:  DATA 6E,20
003CE:  DATA 4C,6F
003D0:  DATA 63,61
003D2:  DATA 74,69
003D4:  DATA 6F,6E
003D6:  DATA 20,3D
003D8:  DATA 20,25
003DA:  DATA 58,0A
003DC:  DATA 0D,00
003DE:  DATA 52,65
003E0:  DATA 62,6F
003E2:  DATA 6F,69
003E4:  DATA 6E,67
003E6:  DATA 20,61
003E8:  DATA 20,72
003EA:  DATA 65,73
003EC:  DATA 65,72
003EE:  DATA 76,61
003F0:  DATA 74,69
003F2:  DATA 6F,6E
003F4:  DATA 20,63
003F6:  DATA 6F,6D
003F8:  DATA 6D,61
003FA:  DATA 6E,64
003FC:  DATA 20,6D
003FE:  DATA 69,73
00400:  DATA 73,69
00402:  DATA 6F,6E
00404:  DATA 20,61
00406:  DATA 66,74
00408:  DATA 65,72
0040A:  DATA 20,61
0040C:  DATA 20,73
0040E:  DATA 79,73
00410:  DATA 74,65
00412:  DATA 6D,20
00414:  DATA 72,65
00416:  DATA 73,65
00418:  DATA 74,2C
0041A:  DATA 20,4C
0041C:  DATA 6F,63
0041E:  DATA 61,74
00420:  DATA 69,6F
00422:  DATA 6E,20
00424:  DATA 3D,20
00426:  DATA 25,58
00428:  DATA 20,7C
0042A:  DATA 20,30
0042C:  DATA 78,25
0042E:  DATA 4C,58
00430:  DATA 0A,0D
00432:  DATA 00,00
00434:  DATA 4E,6F
00436:  DATA 74,68
00438:  DATA 69,6E
0043A:  DATA 67,20
0043C:  DATA 74,6F
0043E:  DATA 2C,20
00440:  DATA 72,65
00442:  DATA 62,6F
00444:  DATA 6F,74
00446:  DATA 20,61
00448:  DATA 74,20
0044A:  DATA 72,65
0044C:  DATA 73,65
0044E:  DATA 72,76
00450:  DATA 61,74
00452:  DATA 69,6F
00454:  DATA 6E,20
00456:  DATA 4C,6F
00458:  DATA 63,61
0045A:  DATA 74,69
0045C:  DATA 6F,6E
0045E:  DATA 20,3D
00460:  DATA 20,25
00462:  DATA 58,0A
00464:  DATA 0D,00
00466:  DATA 52,65
00468:  DATA 73,65
0046A:  DATA 74,20
0046C:  DATA 50,49
0046E:  DATA 43,20
00470:  DATA 52,65
00472:  DATA 73,70
00474:  DATA 6F,6E
00476:  DATA 73,65
00478:  DATA 20,3E
0047A:  DATA 3E,20
0047C:  DATA 00,00
0047E:  DATA 4E,75
00480:  DATA 6D,20
00482:  DATA 6F,66
00484:  DATA 20,63
00486:  DATA 6F,6D
00488:  DATA 75,6E
0048A:  DATA 69,63
0048C:  DATA 74,69
0048E:  DATA 6F,6E
00490:  DATA 20,74
00492:  DATA 72,69
00494:  DATA 65,73
00496:  DATA 20,74
00498:  DATA 6F,20
0049A:  DATA 52,45
0049C:  DATA 53,45
0049E:  DATA 54,20
004A0:  DATA 50,49
004A2:  DATA 43,20
004A4:  DATA 3D,20
004A6:  DATA 25,64
004A8:  DATA 0A,0D
004AA:  DATA 00,00
004AC:  DATA 52,65
004AE:  DATA 73,65
004B0:  DATA 74,20
004B2:  DATA 50,49
004B4:  DATA 43,20
004B6:  DATA 72,65
004B8:  DATA 73,70
004BA:  DATA 6F,6E
004BC:  DATA 64,65
004BE:  DATA 64,20
004C0:  DATA 63,6F
004C2:  DATA 72,72
004C4:  DATA 65,63
004C6:  DATA 74,6C
004C8:  DATA 79,0A
004CA:  DATA 0D,00
004CC:  DATA 52,65
004CE:  DATA 63,65
004D0:  DATA 69,76
004D2:  DATA 65,64
004D4:  DATA 20,77
004D6:  DATA 72,6F
004D8:  DATA 6E,67
004DA:  DATA 20,72
004DC:  DATA 65,73
004DE:  DATA 70,6F
004E0:  DATA 6E,73
004E2:  DATA 65,20
004E4:  DATA 66,72
004E6:  DATA 6F,6D
004E8:  DATA 20,72
004EA:  DATA 65,73
004EC:  DATA 65,74
004EE:  DATA 20,70
004F0:  DATA 69,63
004F2:  DATA 20,3E
004F4:  DATA 3E,20
004F6:  DATA 00,00
004F8:  DATA 52,65
004FA:  DATA 73,65
004FC:  DATA 74,20
004FE:  DATA 50,49
00500:  DATA 43,20
00502:  DATA 74,69
00504:  DATA 6D,65
00506:  DATA 20,3D
00508:  DATA 20,25
0050A:  DATA 30,32
0050C:  DATA 75,3A
0050E:  DATA 25,30
00510:  DATA 32,75
00512:  DATA 3A,25
00514:  DATA 30,32
00516:  DATA 75,20
00518:  DATA 25,30
0051A:  DATA 32,75
0051C:  DATA 3A,25
0051E:  DATA 30,32
00520:  DATA 75,3A
00522:  DATA 25,30
00524:  DATA 32,75
00526:  DATA 3A,0A
00528:  DATA 0D,00
0052A:  DATA 54,69
0052C:  DATA 6D,65
0052E:  DATA 20,75
00530:  DATA 70,64
00532:  DATA 61,74
00534:  DATA 65,64
00536:  DATA 0A,0D
00538:  DATA 00,00
0053A:  DATA 47,65
0053C:  DATA 6E,61
0053E:  DATA 72,65
00540:  DATA 74,64
00542:  DATA 20,43
00544:  DATA 57,20
00546:  DATA 64,61
00548:  DATA 74,61
0054A:  DATA 20,3D
0054C:  DATA 20,00
0054E:  DATA 53,65
00550:  DATA 6E,74
00552:  DATA 20,63
00554:  DATA 6F,6D
00556:  DATA 61,6E
00558:  DATA 64,20
0055A:  DATA 74,6F
0055C:  DATA 20,52
0055E:  DATA 65,73
00560:  DATA 65,74
00562:  DATA 20,50
00564:  DATA 49,43
00566:  DATA 20,3E
00568:  DATA 3E,20
0056A:  DATA 00,00
0056C:  DATA 44,61
0056E:  DATA 79,20
00570:  DATA 6E,75
00572:  DATA 6D,62
00574:  DATA 65,72
00576:  DATA 20,3D
00578:  DATA 20,25
0057A:  DATA 30,33
0057C:  DATA 4C,75
0057E:  DATA 0A,0D
00580:  DATA 00,00
00582:  DATA 52,65
00584:  DATA 73,65
00586:  DATA 74,20
00588:  DATA 50,49
0058A:  DATA 43,20
0058C:  DATA 48,53
0058E:  DATA 4B,20
00590:  DATA 64,61
00592:  DATA 74,61
00594:  DATA 20,53
00596:  DATA 74,61
00598:  DATA 72,74
0059A:  DATA 69,6E
0059C:  DATA 67,20
0059E:  DATA 61,64
005A0:  DATA 64,72
005A2:  DATA 65,73
005A4:  DATA 73,20
005A6:  DATA 66,6F
005A8:  DATA 72,20
005AA:  DATA 74,6F
005AC:  DATA 64,61
005AE:  DATA 79,20
005B0:  DATA 2D,20
005B2:  DATA 30,78
005B4:  DATA 25,4C
005B6:  DATA 58,0A
005B8:  DATA 0D,00
005BA:  DATA 46,41
005BC:  DATA 42,20
005BE:  DATA 2D,20
005C0:  DATA 50,49
005C2:  DATA 43,20
005C4:  DATA 48,53
005C6:  DATA 4B,20
005C8:  DATA 64,61
005CA:  DATA 74,61
005CC:  DATA 20,53
005CE:  DATA 74,61
005D0:  DATA 72,74
005D2:  DATA 69,6E
005D4:  DATA 67,20
005D6:  DATA 61,64
005D8:  DATA 64,72
005DA:  DATA 65,73
005DC:  DATA 73,20
005DE:  DATA 66,6F
005E0:  DATA 72,20
005E2:  DATA 74,6F
005E4:  DATA 64,61
005E6:  DATA 79,20
005E8:  DATA 2D,20
005EA:  DATA 30,78
005EC:  DATA 25,4C
005EE:  DATA 58,0A
005F0:  DATA 0D,00
005F2:  DATA 52,53
005F4:  DATA 54,50
005F6:  DATA 49,43
005F8:  DATA 20,63
005FA:  DATA 6F,6D
005FC:  DATA 75,6E
005FE:  DATA 69,63
00600:  DATA 61,74
00602:  DATA 69,6F
00604:  DATA 6E,2D
00606:  DATA 3E,20
00608:  DATA 73,75
0060A:  DATA 63,65
0060C:  DATA 73,73
0060E:  DATA 3A,6E
00610:  DATA 6F,74
00612:  DATA 73,75
00614:  DATA 63,63
00616:  DATA 65,73
00618:  DATA 73,20
0061A:  DATA 3D,20
0061C:  DATA 25,4C
0061E:  DATA 64,3A
00620:  DATA 25,4C
00622:  DATA 64,0A
00624:  DATA 0D,00
00626:  DATA 52,65
00628:  DATA 63,65
0062A:  DATA 6E,74
0062C:  DATA 20,48
0062E:  DATA 53,4B
00630:  DATA 20,64
00632:  DATA 61,74
00634:  DATA 61,20
00636:  DATA 77,72
00638:  DATA 69,74
0063A:  DATA 69,6E
0063C:  DATA 67,20
0063E:  DATA 6C,6F
00640:  DATA 63,61
00642:  DATA 74,69
00644:  DATA 6F,6E
00646:  DATA 20,20
00648:  DATA 20,20
0064A:  DATA 20,2D
0064C:  DATA 20,30
0064E:  DATA 78,25
00650:  DATA 4C,58
00652:  DATA 20,20
00654:  DATA 20,53
00656:  DATA 65,63
00658:  DATA 5F,6E
0065A:  DATA 75,6D
0065C:  DATA 20,3D
0065E:  DATA 20,25
00660:  DATA 4C,75
00662:  DATA 0A,0D
00664:  DATA 00,00
00666:  DATA 53,61
00668:  DATA 76,65
0066A:  DATA 64,20
0066C:  DATA 64,61
0066E:  DATA 74,61
00670:  DATA 20,52
00672:  DATA 65,73
00674:  DATA 65,74
00676:  DATA 70,69
00678:  DATA 63,20
0067A:  DATA 48,53
0067C:  DATA 4B,20
0067E:  DATA 2D,20
00680:  DATA 00,00
00682:  DATA 43,61
00684:  DATA 6E,6E
00686:  DATA 6F,74
00688:  DATA 20,77
0068A:  DATA 72,69
0068C:  DATA 74,65
0068E:  DATA 20,52
00690:  DATA 65,73
00692:  DATA 65,74
00694:  DATA 20,50
00696:  DATA 49,43
00698:  DATA 20,68
0069A:  DATA 6F,75
0069C:  DATA 73,65
0069E:  DATA 20,6B
006A0:  DATA 65,65
006A2:  DATA 70,69
006A4:  DATA 6E,67
006A6:  DATA 20,64
006A8:  DATA 61,74
006AA:  DATA 61,20
006AC:  DATA 69,6E
006AE:  DATA 20,43
006B0:  DATA 6F,6D
006B2:  DATA 20,46
006B4:  DATA 4D,20
006B6:  DATA 64,75
006B8:  DATA 65,20
006BA:  DATA 74,6F
006BC:  DATA 20,61
006BE:  DATA 63,63
006C0:  DATA 65,73
006C2:  DATA 73,20
006C4:  DATA 69,73
006C6:  DATA 20,67
006C8:  DATA 69,76
006CA:  DATA 65,6E
006CC:  DATA 20,74
006CE:  DATA 6F,20
006D0:  DATA 43,6F
006D2:  DATA 6D,50
006D4:  DATA 49,43
006D6:  DATA 20,2D
006D8:  DATA 20,00
006DA:  DATA 39,30
006DC:  DATA 20,73
006DE:  DATA 65,63
006E0:  DATA 6F,6E
006E2:  DATA 64,73
006E4:  DATA 20,63
006E6:  DATA 6F,6D
006E8:  DATA 75,6E
006EA:  DATA 69,63
006EC:  DATA 61,74
006EE:  DATA 69,6F
006F0:  DATA 6E,20
006F2:  DATA 77,69
006F4:  DATA 74,68
006F6:  DATA 20,72
006F8:  DATA 65,73
006FA:  DATA 65,74
006FC:  DATA 20,70
006FE:  DATA 69,63
00700:  DATA 20,77
00702:  DATA 61,73
00704:  DATA 20,6E
00706:  DATA 6F,74
00708:  DATA 20,73
0070A:  DATA 75,63
0070C:  DATA 63,65
0070E:  DATA 73,66
00710:  DATA 75,6C
00712:  DATA 6C,0A
00714:  DATA 0D,00
00716:  DATA 46,41
00718:  DATA 42,50
0071A:  DATA 49,43
0071C:  DATA 20,63
0071E:  DATA 6F,6D
00720:  DATA 75,6E
00722:  DATA 69,63
00724:  DATA 61,74
00726:  DATA 69,6F
00728:  DATA 6E,2D
0072A:  DATA 3E,20
0072C:  DATA 73,75
0072E:  DATA 63,65
00730:  DATA 73,73
00732:  DATA 3A,6E
00734:  DATA 6F,74
00736:  DATA 73,75
00738:  DATA 63,63
0073A:  DATA 65,73
0073C:  DATA 73,20
0073E:  DATA 3D,20
00740:  DATA 25,4C
00742:  DATA 64,3A
00744:  DATA 25,4C
00746:  DATA 64,0A
00748:  DATA 0D,00
0074A:  DATA 52,65
0074C:  DATA 63,65
0074E:  DATA 6E,74
00750:  DATA 20,46
00752:  DATA 41,42
00754:  DATA 20,48
00756:  DATA 53,4B
00758:  DATA 20,64
0075A:  DATA 61,74
0075C:  DATA 61,20
0075E:  DATA 77,72
00760:  DATA 69,74
00762:  DATA 69,6E
00764:  DATA 67,20
00766:  DATA 6C,6F
00768:  DATA 63,61
0076A:  DATA 74,69
0076C:  DATA 6F,6E
0076E:  DATA 20,20
00770:  DATA 20,20
00772:  DATA 20,2D
00774:  DATA 20,30
00776:  DATA 78,25
00778:  DATA 4C,58
0077A:  DATA 20,20
0077C:  DATA 20,53
0077E:  DATA 65,63
00780:  DATA 5F,6E
00782:  DATA 75,6D
00784:  DATA 20,3D
00786:  DATA 20,25
00788:  DATA 4C,75
0078A:  DATA 0A,0D
0078C:  DATA 00,00
0078E:  DATA 53,61
00790:  DATA 76,65
00792:  DATA 64,20
00794:  DATA 64,61
00796:  DATA 74,61
00798:  DATA 20,46
0079A:  DATA 41,42
0079C:  DATA 20,70
0079E:  DATA 69,63
007A0:  DATA 20,48
007A2:  DATA 53,4B
007A4:  DATA 20,2D
007A6:  DATA 20,00
007A8:  DATA 43,61
007AA:  DATA 6E,6E
007AC:  DATA 6F,74
007AE:  DATA 20,77
007B0:  DATA 72,69
007B2:  DATA 74,65
007B4:  DATA 20,46
007B6:  DATA 41,42
007B8:  DATA 20,50
007BA:  DATA 49,43
007BC:  DATA 20,68
007BE:  DATA 6F,75
007C0:  DATA 73,65
007C2:  DATA 20,6B
007C4:  DATA 65,65
007C6:  DATA 70,69
007C8:  DATA 6E,67
007CA:  DATA 20,64
007CC:  DATA 61,74
007CE:  DATA 61,20
007D0:  DATA 69,6E
007D2:  DATA 20,43
007D4:  DATA 6F,6D
007D6:  DATA 20,46
007D8:  DATA 4D,20
007DA:  DATA 64,75
007DC:  DATA 65,20
007DE:  DATA 74,6F
007E0:  DATA 20,61
007E2:  DATA 63,63
007E4:  DATA 65,73
007E6:  DATA 73,20
007E8:  DATA 69,73
007EA:  DATA 20,67
007EC:  DATA 69,76
007EE:  DATA 65,6E
007F0:  DATA 20,74
007F2:  DATA 6F,20
007F4:  DATA 43,6F
007F6:  DATA 6D,50
007F8:  DATA 49,43
007FA:  DATA 20,2D
007FC:  DATA 20,00
007FE:  DATA 39,30
00800:  DATA 20,73
00802:  DATA 65,63
00804:  DATA 6F,6E
00806:  DATA 64,73
00808:  DATA 20,63
0080A:  DATA 6F,6D
0080C:  DATA 75,6E
0080E:  DATA 69,63
00810:  DATA 61,74
00812:  DATA 69,6F
00814:  DATA 6E,20
00816:  DATA 77,69
00818:  DATA 74,68
0081A:  DATA 20,46
0081C:  DATA 41,42
0081E:  DATA 20,70
00820:  DATA 69,63
00822:  DATA 20,77
00824:  DATA 61,73
00826:  DATA 20,6E
00828:  DATA 6F,74
0082A:  DATA 20,73
0082C:  DATA 75,63
0082E:  DATA 63,65
00830:  DATA 73,66
00832:  DATA 75,6C
00834:  DATA 6C,0A
00836:  DATA 0D,00
00838:  DATA 52,65
0083A:  DATA 73,65
0083C:  DATA 74,20
0083E:  DATA 50,49
00840:  DATA 43,20
00842:  DATA 44,61
00844:  DATA 74,61
00846:  DATA 20,23
00848:  DATA 23,23
0084A:  DATA 23,23
0084C:  DATA 23,23
0084E:  DATA 23,23
00850:  DATA 23,23
00852:  DATA 23,0A
00854:  DATA 0D,00
00856:  DATA 52,65
00858:  DATA 73,65
0085A:  DATA 74,20
0085C:  DATA 50,49
0085E:  DATA 43,20
00860:  DATA 54,69
00862:  DATA 6D,65
00864:  DATA 20,3D
00866:  DATA 20,25
00868:  DATA 30,32
0086A:  DATA 75,2F
0086C:  DATA 25,30
0086E:  DATA 32,75
00870:  DATA 2F,25
00872:  DATA 30,32
00874:  DATA 75,20
00876:  DATA 20,25
00878:  DATA 30,32
0087A:  DATA 75,3A
0087C:  DATA 25,30
0087E:  DATA 32,75
00880:  DATA 3A,25
00882:  DATA 30,32
00884:  DATA 75,0A
00886:  DATA 0D,00
00888:  DATA 52,41
0088A:  DATA 57,20
0088C:  DATA 56,6F
0088E:  DATA 6C,74
00890:  DATA 61,67
00892:  DATA 65,20
00894:  DATA 3D,20
00896:  DATA 25,2E
00898:  DATA 33,66
0089A:  DATA 20,56
0089C:  DATA 0A,0D
0089E:  DATA 00,00
008A0:  DATA 33,56
008A2:  DATA 33,5F
008A4:  DATA 31,5F
008A6:  DATA 43,75
008A8:  DATA 72,72
008AA:  DATA 65,6E
008AC:  DATA 74,20
008AE:  DATA 3D,20
008B0:  DATA 25,2E
008B2:  DATA 33,66
008B4:  DATA 20,6D
008B6:  DATA 41,0A
008B8:  DATA 0D,00
008BA:  DATA 33,56
008BC:  DATA 33,5F
008BE:  DATA 32,5F
008C0:  DATA 43,75
008C2:  DATA 72,72
008C4:  DATA 65,6E
008C6:  DATA 74,20
008C8:  DATA 3D,20
008CA:  DATA 25,2E
008CC:  DATA 33,66
008CE:  DATA 20,6D
008D0:  DATA 41,0A
008D2:  DATA 0D,00
008D4:  DATA 35,56
008D6:  DATA 30,5F
008D8:  DATA 43,75
008DA:  DATA 72,72
008DC:  DATA 65,6E
008DE:  DATA 74,20
008E0:  DATA 3D,20
008E2:  DATA 25,2E
008E4:  DATA 33,66
008E6:  DATA 20,6D
008E8:  DATA 41,0A
008EA:  DATA 0D,00
008EC:  DATA 55,4E
008EE:  DATA 5F,31
008F0:  DATA 5F,43
008F2:  DATA 75,72
008F4:  DATA 72,65
008F6:  DATA 6E,74
008F8:  DATA 20,3D
008FA:  DATA 20,25
008FC:  DATA 2E,33
008FE:  DATA 66,20
00900:  DATA 6D,41
00902:  DATA 0A,0D
00904:  DATA 00,00
00906:  DATA 55,4E
00908:  DATA 5F,32
0090A:  DATA 5F,43
0090C:  DATA 75,72
0090E:  DATA 72,65
00910:  DATA 6E,74
00912:  DATA 20,3D
00914:  DATA 20,25
00916:  DATA 2E,33
00918:  DATA 66,20
0091A:  DATA 6D,41
0091C:  DATA 0A,0D
0091E:  DATA 00,00
00920:  DATA 4E,75
00922:  DATA 6D,20
00924:  DATA 6F,66
00926:  DATA 20,4D
00928:  DATA 61,69
0092A:  DATA 6E,50
0092C:  DATA 49,43
0092E:  DATA 20,52
00930:  DATA 65,73
00932:  DATA 65,74
00934:  DATA 20,3D
00936:  DATA 20,25
00938:  DATA 75,0A
0093A:  DATA 0D,00
0093C:  DATA 4E,75
0093E:  DATA 6D,20
00940:  DATA 6F,66
00942:  DATA 20,43
00944:  DATA 6F,6D
00946:  DATA 50,49
00948:  DATA 43,20
0094A:  DATA 20,52
0094C:  DATA 65,73
0094E:  DATA 65,74
00950:  DATA 20,3D
00952:  DATA 20,25
00954:  DATA 75,0A
00956:  DATA 0D,00
00958:  DATA 50,6F
0095A:  DATA 77,65
0095C:  DATA 72,20
0095E:  DATA 4C,69
00960:  DATA 6E,65
00962:  DATA 20,53
00964:  DATA 74,61
00966:  DATA 74,75
00968:  DATA 73,20
0096A:  DATA 3D,20
0096C:  DATA 25,58
0096E:  DATA 0A,0D
00970:  DATA 00,00
00972:  DATA 4C,61
00974:  DATA 73,74
00976:  DATA 20,52
00978:  DATA 65,73
0097A:  DATA 65,74
0097C:  DATA 20,48
0097E:  DATA 6F,75
00980:  DATA 72,20
00982:  DATA 20,20
00984:  DATA 3D,20
00986:  DATA 25,4C
00988:  DATA 75,0A
0098A:  DATA 0D,00
0098C:  DATA 46,41
0098E:  DATA 42,20
00990:  DATA 50,49
00992:  DATA 43,20
00994:  DATA 44,61
00996:  DATA 74,61
00998:  DATA 20,23
0099A:  DATA 23,23
0099C:  DATA 23,23
0099E:  DATA 23,23
009A0:  DATA 23,23
009A2:  DATA 23,23
009A4:  DATA 23,0A
009A6:  DATA 0D,00
009A8:  DATA 52,41
009AA:  DATA 57,20
009AC:  DATA 56,6F
009AE:  DATA 6C,20
009B0:  DATA 3D,20
009B2:  DATA 25,2E
009B4:  DATA 33,66
009B6:  DATA 20,56
009B8:  DATA 20,20
009BA:  DATA 20,00
009BC:  DATA 43,75
009BE:  DATA 72,20
009C0:  DATA 3D,20
009C2:  DATA 25,2E
009C4:  DATA 31,66
009C6:  DATA 20,6D
009C8:  DATA 41,0A
009CA:  DATA 0D,00
009CC:  DATA 42,41
009CE:  DATA 54,20
009D0:  DATA 56,6F
009D2:  DATA 6C,20
009D4:  DATA 3D,20
009D6:  DATA 25,2E
009D8:  DATA 33,66
009DA:  DATA 20,56
009DC:  DATA 20,20
009DE:  DATA 20,00
009E0:  DATA 43,75
009E2:  DATA 72,20
009E4:  DATA 3D,20
009E6:  DATA 25,2E
009E8:  DATA 31,66
009EA:  DATA 20,6D
009EC:  DATA 41,20
009EE:  DATA 20,20
009F0:  DATA 00,00
009F2:  DATA 46,50
009F4:  DATA 5F,53
009F6:  DATA 41,56
009F8:  DATA 45,44
009FA:  DATA 5F,44
009FC:  DATA 41,54
009FE:  DATA 41,5B
00A00:  DATA 37,5D
00A02:  DATA 20,3D
00A04:  DATA 20,25
00A06:  DATA 78,20
00A08:  DATA 20,0A
00A0A:  DATA 0D,00
00A0C:  DATA 54,65
00A0E:  DATA 6D,70
00A10:  DATA 20,3D
00A12:  DATA 20,25
00A14:  DATA 2E,31
00A16:  DATA 66,20
00A18:  DATA 43,20
00A1A:  DATA 20,0A
00A1C:  DATA 0D,00
00A1E:  DATA 53,5F
00A20:  DATA 42,20
00A22:  DATA 56,6F
00A24:  DATA 6C,20
00A26:  DATA 3D,20
00A28:  DATA 25,2E
00A2A:  DATA 33,66
00A2C:  DATA 20,56
00A2E:  DATA 20,20
00A30:  DATA 20,00
00A32:  DATA 43,75
00A34:  DATA 72,20
00A36:  DATA 3D,20
00A38:  DATA 25,2E
00A3A:  DATA 31,66
00A3C:  DATA 20,6D
00A3E:  DATA 41,0A
00A40:  DATA 0D,00
00A42:  DATA 2D,58
00A44:  DATA 20,56
00A46:  DATA 6F,6C
00A48:  DATA 20,3D
00A4A:  DATA 20,25
00A4C:  DATA 2E,33
00A4E:  DATA 66,20
00A50:  DATA 56,20
00A52:  DATA 20,20
00A54:  DATA 00,00
00A56:  DATA 43,75
00A58:  DATA 72,20
00A5A:  DATA 3D,20
00A5C:  DATA 25,2E
00A5E:  DATA 31,66
00A60:  DATA 20,6D
00A62:  DATA 41,20
00A64:  DATA 20,20
00A66:  DATA 00,00
00A68:  DATA 54,65
00A6A:  DATA 6D,70
00A6C:  DATA 20,3D
00A6E:  DATA 20,25
00A70:  DATA 2E,31
00A72:  DATA 66,20
00A74:  DATA 43,0A
00A76:  DATA 0D,00
00A78:  DATA 2B,58
00A7A:  DATA 20,56
00A7C:  DATA 6F,6C
00A7E:  DATA 20,3D
00A80:  DATA 20,25
00A82:  DATA 2E,33
00A84:  DATA 66,20
00A86:  DATA 56,20
00A88:  DATA 20,20
00A8A:  DATA 00,00
00A8C:  DATA 43,75
00A8E:  DATA 72,20
00A90:  DATA 3D,20
00A92:  DATA 25,2E
00A94:  DATA 31,66
00A96:  DATA 20,6D
00A98:  DATA 41,20
00A9A:  DATA 20,20
00A9C:  DATA 00,00
00A9E:  DATA 54,65
00AA0:  DATA 6D,70
00AA2:  DATA 20,3D
00AA4:  DATA 20,25
00AA6:  DATA 2E,31
00AA8:  DATA 66,20
00AAA:  DATA 43,0A
00AAC:  DATA 0D,00
00AAE:  DATA 2D,59
00AB0:  DATA 20,56
00AB2:  DATA 6F,6C
00AB4:  DATA 20,3D
00AB6:  DATA 20,25
00AB8:  DATA 2E,33
00ABA:  DATA 66,20
00ABC:  DATA 56,20
00ABE:  DATA 20,20
00AC0:  DATA 00,00
00AC2:  DATA 43,75
00AC4:  DATA 72,20
00AC6:  DATA 3D,20
00AC8:  DATA 25,2E
00ACA:  DATA 31,66
00ACC:  DATA 20,6D
00ACE:  DATA 41,20
00AD0:  DATA 20,20
00AD2:  DATA 00,00
00AD4:  DATA 54,65
00AD6:  DATA 6D,70
00AD8:  DATA 20,3D
00ADA:  DATA 20,25
00ADC:  DATA 2E,31
00ADE:  DATA 66,20
00AE0:  DATA 43,0A
00AE2:  DATA 0D,00
00AE4:  DATA 2B,59
00AE6:  DATA 20,56
00AE8:  DATA 6F,6C
00AEA:  DATA 20,3D
00AEC:  DATA 20,25
00AEE:  DATA 2E,33
00AF0:  DATA 66,20
00AF2:  DATA 56,20
00AF4:  DATA 20,20
00AF6:  DATA 00,00
00AF8:  DATA 43,75
00AFA:  DATA 72,20
00AFC:  DATA 3D,20
00AFE:  DATA 25,2E
00B00:  DATA 31,66
00B02:  DATA 20,6D
00B04:  DATA 41,20
00B06:  DATA 20,20
00B08:  DATA 00,00
00B0A:  DATA 54,65
00B0C:  DATA 6D,70
00B0E:  DATA 20,3D
00B10:  DATA 20,25
00B12:  DATA 2E,31
00B14:  DATA 66,20
00B16:  DATA 43,0A
00B18:  DATA 0D,00
00B1A:  DATA 2D,5A
00B1C:  DATA 20,56
00B1E:  DATA 6F,6C
00B20:  DATA 20,3D
00B22:  DATA 20,25
00B24:  DATA 2E,33
00B26:  DATA 66,20
00B28:  DATA 56,20
00B2A:  DATA 20,20
00B2C:  DATA 00,00
00B2E:  DATA 43,75
00B30:  DATA 72,20
00B32:  DATA 3D,20
00B34:  DATA 25,2E
00B36:  DATA 31,66
00B38:  DATA 20,6D
00B3A:  DATA 41,20
00B3C:  DATA 20,20
00B3E:  DATA 00,00
00B40:  DATA 54,65
00B42:  DATA 6D,70
00B44:  DATA 20,3D
00B46:  DATA 20,25
00B48:  DATA 2E,31
00B4A:  DATA 66,20
00B4C:  DATA 43,0A
00B4E:  DATA 0D,00
00B50:  DATA 2B,5A
00B52:  DATA 20,56
00B54:  DATA 6F,6C
00B56:  DATA 20,3D
00B58:  DATA 20,25
00B5A:  DATA 2E,33
00B5C:  DATA 66,20
00B5E:  DATA 56,20
00B60:  DATA 20,20
00B62:  DATA 00,00
00B64:  DATA 43,75
00B66:  DATA 72,20
00B68:  DATA 3D,20
00B6A:  DATA 25,2E
00B6C:  DATA 31,66
00B6E:  DATA 20,6D
00B70:  DATA 41,20
00B72:  DATA 20,20
00B74:  DATA 00,00
00B76:  DATA 54,65
00B78:  DATA 6D,70
00B7A:  DATA 20,3D
00B7C:  DATA 20,25
00B7E:  DATA 2E,31
00B80:  DATA 66,20
00B82:  DATA 43,0A
00B84:  DATA 0D,00
00B86:  DATA 42,61
00B88:  DATA 63,6B
00B8A:  DATA 70,6C
00B8C:  DATA 61,6E
00B8E:  DATA 65,20
00B90:  DATA 74,65
00B92:  DATA 6D,70
00B94:  DATA 20,3D
00B96:  DATA 20,25
00B98:  DATA 2E,31
00B9A:  DATA 66,20
00B9C:  DATA 43,0A
00B9E:  DATA 0D,00
00BA0:  DATA 46,41
00BA2:  DATA 42,20
00BA4:  DATA 4B,69
00BA6:  DATA 6C,6C
00BA8:  DATA 20,53
00BAA:  DATA 77,69
00BAC:  DATA 74,63
00BAE:  DATA 68,20
00BB0:  DATA 43,6C
00BB2:  DATA 6F,73
00BB4:  DATA 65,0A
00BB6:  DATA 0D,00
00BB8:  DATA 46,41
00BBA:  DATA 42,20
00BBC:  DATA 4B,69
00BBE:  DATA 6C,6C
00BC0:  DATA 20,53
00BC2:  DATA 77,69
00BC4:  DATA 74,63
00BC6:  DATA 68,20
00BC8:  DATA 4F,70
00BCA:  DATA 65,6E
00BCC:  DATA 0A,0D
00BCE:  DATA 00,00
00BD0:  DATA 4F,42
00BD2:  DATA 43,20
00BD4:  DATA 4B,69
00BD6:  DATA 6C,6C
00BD8:  DATA 20,53
00BDA:  DATA 77,69
00BDC:  DATA 74,63
00BDE:  DATA 68,20
00BE0:  DATA 43,6C
00BE2:  DATA 6F,73
00BE4:  DATA 65,0A
00BE6:  DATA 0D,00
00BE8:  DATA 4F,42
00BEA:  DATA 43,20
00BEC:  DATA 4B,69
00BEE:  DATA 6C,6C
00BF0:  DATA 20,53
00BF2:  DATA 77,69
00BF4:  DATA 74,63
00BF6:  DATA 68,20
00BF8:  DATA 4F,70
00BFA:  DATA 65,6E
00BFC:  DATA 0A,0D
00BFE:  DATA 00,00
00C00:  DATA 52,65
00C02:  DATA 73,65
00C04:  DATA 74,20
00C06:  DATA 70,69
00C08:  DATA 63,20
00C0A:  DATA 74,69
00C0C:  DATA 6D,65
00C0E:  DATA 20,75
00C10:  DATA 70,64
00C12:  DATA 61,74
00C14:  DATA 65,64
00C16:  DATA 0A,0D
00C18:  DATA 00,00
00C1A:  DATA 52,65
00C1C:  DATA 73,65
00C1E:  DATA 74,20
00C20:  DATA 70,69
00C22:  DATA 63,20
00C24:  DATA 74,69
00C26:  DATA 6D,65
00C28:  DATA 20,6E
00C2A:  DATA 6F,74
00C2C:  DATA 20,75
00C2E:  DATA 70,64
00C30:  DATA 61,74
00C32:  DATA 65,64
00C34:  DATA 0A,0D
00C36:  DATA 00,00
00C38:  DATA 50,6F
00C3A:  DATA 77,65
00C3C:  DATA 72,20
00C3E:  DATA 6C,69
00C40:  DATA 6E,65
00C42:  DATA 20,63
00C44:  DATA 6F,6E
00C46:  DATA 74,72
00C48:  DATA 6F,6C
00C4A:  DATA 20,75
00C4C:  DATA 73,69
00C4E:  DATA 6E,67
00C50:  DATA 20,6D
00C52:  DATA 61,69
00C54:  DATA 6E,20
00C56:  DATA 70,69
00C58:  DATA 63,20
00C5A:  DATA 63,6F
00C5C:  DATA 6D,6D
00C5E:  DATA 61,6E
00C60:  DATA 64,20
00C62:  DATA 74,6F
00C64:  DATA 20,72
00C66:  DATA 65,73
00C68:  DATA 65,74
00C6A:  DATA 20,70
00C6C:  DATA 69,63
00C6E:  DATA 0A,0D
00C70:  DATA 00,00
00C72:  DATA 52,65
00C74:  DATA 73,65
00C76:  DATA 74,20
00C78:  DATA 70,69
00C7A:  DATA 63,20
00C7C:  DATA 70,6F
00C7E:  DATA 77,65
00C80:  DATA 72,20
00C82:  DATA 6C,69
00C84:  DATA 6E,65
00C86:  DATA 20,63
00C88:  DATA 6F,6E
00C8A:  DATA 74,72
00C8C:  DATA 6F,6C
00C8E:  DATA 6C,65
00C90:  DATA 64,0A
00C92:  DATA 0D,00
00C94:  DATA 52,65
00C96:  DATA 73,65
00C98:  DATA 74,20
00C9A:  DATA 70,69
00C9C:  DATA 63,20
00C9E:  DATA 64,69
00CA0:  DATA 64,20
00CA2:  DATA 6E,6F
00CA4:  DATA 74,20
00CA6:  DATA 72,65
00CA8:  DATA 73,70
00CAA:  DATA 6F,6E
00CAC:  DATA 64,0A
00CAE:  DATA 0D,00
00CB0:  DATA 54,69
00CB2:  DATA 6D,65
00CB4:  DATA 20,25
00CB6:  DATA 75,3A
00CB8:  DATA 20,25
00CBA:  DATA 75,3A
00CBC:  DATA 20,25
00CBE:  DATA 75,0A
00CC0:  DATA 0D,00
00CC2:  DATA 41,6E
00CC4:  DATA 74,65
00CC6:  DATA 6E,6E
00CC8:  DATA 61,20
00CCA:  DATA 73,65
00CCC:  DATA 74,2D
00CCE:  DATA 31,20
00CD0:  DATA 64,65
00CD2:  DATA 70,6C
00CD4:  DATA 6F,79
00CD6:  DATA 6D,65
00CD8:  DATA 6E,74
00CDA:  DATA 73,0A
00CDC:  DATA 0D,00
00CDE:  DATA 63,75
00CE0:  DATA 72,72
00CE2:  DATA 65,6E
00CE4:  DATA 74,20
00CE6:  DATA 61,6E
00CE8:  DATA 74,65
00CEA:  DATA 6E,6E
00CEC:  DATA 61,20
00CEE:  DATA 72,65
00CF0:  DATA 6C,61
00CF2:  DATA 74,65
00CF4:  DATA 64,20
00CF6:  DATA 76,61
00CF8:  DATA 72,69
00CFA:  DATA 61,62
00CFC:  DATA 6C,65
00CFE:  DATA 20,76
00D00:  DATA 61,6C
00D02:  DATA 75,65
00D04:  DATA 73,20
00D06:  DATA 62,65
00D08:  DATA 66,6F
00D0A:  DATA 72,65
00D0C:  DATA 20,64
00D0E:  DATA 65,70
00D10:  DATA 6C,6F
00D12:  DATA 79,6D
00D14:  DATA 65,6E
00D16:  DATA 74,0A
00D18:  DATA 0D,00
00D1A:  DATA 41,4E
00D1C:  DATA 54,5F
00D1E:  DATA 53,45
00D20:  DATA 54,5F
00D22:  DATA 31,5F
00D24:  DATA 44,45
00D26:  DATA 50,5F
00D28:  DATA 46,4C
00D2A:  DATA 41,47
00D2C:  DATA 20,3D
00D2E:  DATA 20,25
00D30:  DATA 4C,58
00D32:  DATA 0A,0D
00D34:  DATA 00,00
00D36:  DATA 41,4E
00D38:  DATA 54,53
00D3A:  DATA 45,54
00D3C:  DATA 5F,31
00D3E:  DATA 5F,43
00D40:  DATA 4F,55
00D42:  DATA 4E,54
00D44:  DATA 20,3D
00D46:  DATA 20,25
00D48:  DATA 4C,58
00D4A:  DATA 0A,0D
00D4C:  DATA 00,00
00D4E:  DATA 41,4E
00D50:  DATA 54,5F
00D52:  DATA 53,45
00D54:  DATA 54,5F
00D56:  DATA 32,5F
00D58:  DATA 44,45
00D5A:  DATA 50,5F
00D5C:  DATA 46,4C
00D5E:  DATA 41,47
00D60:  DATA 20,3D
00D62:  DATA 20,25
00D64:  DATA 4C,58
00D66:  DATA 0A,0D
00D68:  DATA 00,00
00D6A:  DATA 41,4E
00D6C:  DATA 54,53
00D6E:  DATA 45,54
00D70:  DATA 5F,32
00D72:  DATA 5F,43
00D74:  DATA 4F,55
00D76:  DATA 4E,54
00D78:  DATA 20,3D
00D7A:  DATA 20,25
00D7C:  DATA 4C,58
00D7E:  DATA 0A,0D
00D80:  DATA 00,00
00D82:  DATA 52,65
00D84:  DATA 73,65
00D86:  DATA 74,50
00D88:  DATA 49,43
00D8A:  DATA 20,72
00D8C:  DATA 65,73
00D8E:  DATA 70,6F
00D90:  DATA 6E,64
00D92:  DATA 65,64
00D94:  DATA 20,63
00D96:  DATA 6F,72
00D98:  DATA 72,65
00D9A:  DATA 63,74
00D9C:  DATA 6C,79
00D9E:  DATA 0A,0D
00DA0:  DATA 00,00
00DA2:  DATA 41,6E
00DA4:  DATA 74,65
00DA6:  DATA 6E,6E
00DA8:  DATA 61,20
00DAA:  DATA 73,65
00DAC:  DATA 74,2D
00DAE:  DATA 31,20
00DB0:  DATA 64,65
00DB2:  DATA 70,6C
00DB4:  DATA 6F,79
00DB6:  DATA 6D,65
00DB8:  DATA 6E,74
00DBA:  DATA 20,73
00DBC:  DATA 74,61
00DBE:  DATA 72,74
00DC0:  DATA 65,64
00DC2:  DATA 0A,0D
00DC4:  DATA 00,00
00DC6:  DATA 43,6F
00DC8:  DATA 75,6E
00DCA:  DATA 74,69
00DCC:  DATA 6E,67
00DCE:  DATA 20,64
00DD0:  DATA 65,70
00DD2:  DATA 6C,6F
00DD4:  DATA 79,6D
00DD6:  DATA 65,6E
00DD8:  DATA 74,20
00DDA:  DATA 74,69
00DDC:  DATA 6D,65
00DDE:  DATA 20,25
00DE0:  DATA 30,32
00DE2:  DATA 64,20
00DE4:  DATA 53,65
00DE6:  DATA 63,0A
00DE8:  DATA 0D,00
00DEA:  DATA 41,6E
00DEC:  DATA 74,65
00DEE:  DATA 6E,6E
00DF0:  DATA 61,2D
00DF2:  DATA 31,20
00DF4:  DATA 64,65
00DF6:  DATA 70,6C
00DF8:  DATA 6F,79
00DFA:  DATA 6D,65
00DFC:  DATA 6E,74
00DFE:  DATA 20,66
00E00:  DATA 69,6E
00E02:  DATA 69,73
00E04:  DATA 68,65
00E06:  DATA 64,0A
00E08:  DATA 0D,00
00E0A:  DATA 63,75
00E0C:  DATA 72,72
00E0E:  DATA 65,6E
00E10:  DATA 74,20
00E12:  DATA 61,6E
00E14:  DATA 74,65
00E16:  DATA 6E,6E
00E18:  DATA 61,20
00E1A:  DATA 72,65
00E1C:  DATA 6C,61
00E1E:  DATA 74,65
00E20:  DATA 64,20
00E22:  DATA 76,61
00E24:  DATA 72,69
00E26:  DATA 61,62
00E28:  DATA 6C,65
00E2A:  DATA 20,76
00E2C:  DATA 61,6C
00E2E:  DATA 75,65
00E30:  DATA 73,20
00E32:  DATA 61,66
00E34:  DATA 74,65
00E36:  DATA 72,20
00E38:  DATA 64,65
00E3A:  DATA 70,6C
00E3C:  DATA 6F,79
00E3E:  DATA 6D,65
00E40:  DATA 6E,74
00E42:  DATA 0A,0D
00E44:  DATA 00,00
00E46:  DATA 41,4E
00E48:  DATA 54,5F
00E4A:  DATA 53,45
00E4C:  DATA 54,5F
00E4E:  DATA 31,5F
00E50:  DATA 44,45
00E52:  DATA 50,5F
00E54:  DATA 46,4C
00E56:  DATA 41,47
00E58:  DATA 20,3D
00E5A:  DATA 20,25
00E5C:  DATA 4C,58
00E5E:  DATA 0A,0D
00E60:  DATA 00,00
00E62:  DATA 41,4E
00E64:  DATA 54,53
00E66:  DATA 45,54
00E68:  DATA 5F,31
00E6A:  DATA 5F,43
00E6C:  DATA 4F,55
00E6E:  DATA 4E,54
00E70:  DATA 20,3D
00E72:  DATA 20,25
00E74:  DATA 4C,58
00E76:  DATA 0A,0D
00E78:  DATA 00,00
00E7A:  DATA 41,4E
00E7C:  DATA 54,5F
00E7E:  DATA 53,45
00E80:  DATA 54,5F
00E82:  DATA 32,5F
00E84:  DATA 44,45
00E86:  DATA 50,5F
00E88:  DATA 46,4C
00E8A:  DATA 41,47
00E8C:  DATA 20,3D
00E8E:  DATA 20,25
00E90:  DATA 4C,58
00E92:  DATA 0A,0D
00E94:  DATA 00,00
00E96:  DATA 41,4E
00E98:  DATA 54,53
00E9A:  DATA 45,54
00E9C:  DATA 5F,32
00E9E:  DATA 5F,43
00EA0:  DATA 4F,55
00EA2:  DATA 4E,54
00EA4:  DATA 20,3D
00EA6:  DATA 20,25
00EA8:  DATA 4C,58
00EAA:  DATA 0A,0D
00EAC:  DATA 00,00
00EAE:  DATA 41,6E
00EB0:  DATA 74,65
00EB2:  DATA 6E,6E
00EB4:  DATA 61,20
00EB6:  DATA 73,65
00EB8:  DATA 74,2D
00EBA:  DATA 32,20
00EBC:  DATA 64,65
00EBE:  DATA 70,6C
00EC0:  DATA 6F,79
00EC2:  DATA 6D,65
00EC4:  DATA 6E,74
00EC6:  DATA 73,0A
00EC8:  DATA 0D,00
00ECA:  DATA 63,75
00ECC:  DATA 72,72
00ECE:  DATA 65,6E
00ED0:  DATA 74,20
00ED2:  DATA 61,6E
00ED4:  DATA 74,65
00ED6:  DATA 6E,6E
00ED8:  DATA 61,20
00EDA:  DATA 72,65
00EDC:  DATA 6C,61
00EDE:  DATA 74,65
00EE0:  DATA 64,20
00EE2:  DATA 76,61
00EE4:  DATA 72,69
00EE6:  DATA 61,62
00EE8:  DATA 6C,65
00EEA:  DATA 20,76
00EEC:  DATA 61,6C
00EEE:  DATA 75,65
00EF0:  DATA 73,20
00EF2:  DATA 62,65
00EF4:  DATA 66,6F
00EF6:  DATA 72,65
00EF8:  DATA 20,64
00EFA:  DATA 65,70
00EFC:  DATA 6C,6F
00EFE:  DATA 79,6D
00F00:  DATA 65,6E
00F02:  DATA 74,0A
00F04:  DATA 0D,00
00F06:  DATA 41,4E
00F08:  DATA 54,5F
00F0A:  DATA 53,45
00F0C:  DATA 54,5F
00F0E:  DATA 31,5F
00F10:  DATA 44,45
00F12:  DATA 50,5F
00F14:  DATA 46,4C
00F16:  DATA 41,47
00F18:  DATA 20,3D
00F1A:  DATA 20,25
00F1C:  DATA 4C,58
00F1E:  DATA 0A,0D
00F20:  DATA 00,00
00F22:  DATA 41,4E
00F24:  DATA 54,53
00F26:  DATA 45,54
00F28:  DATA 5F,31
00F2A:  DATA 5F,43
00F2C:  DATA 4F,55
00F2E:  DATA 4E,54
00F30:  DATA 20,3D
00F32:  DATA 20,25
00F34:  DATA 4C,58
00F36:  DATA 0A,0D
00F38:  DATA 00,00
00F3A:  DATA 41,4E
00F3C:  DATA 54,5F
00F3E:  DATA 53,45
00F40:  DATA 54,5F
00F42:  DATA 32,5F
00F44:  DATA 44,45
00F46:  DATA 50,5F
00F48:  DATA 46,4C
00F4A:  DATA 41,47
00F4C:  DATA 20,3D
00F4E:  DATA 20,25
00F50:  DATA 4C,58
00F52:  DATA 0A,0D
00F54:  DATA 00,00
00F56:  DATA 41,4E
00F58:  DATA 54,53
00F5A:  DATA 45,54
00F5C:  DATA 5F,32
00F5E:  DATA 5F,43
00F60:  DATA 4F,55
00F62:  DATA 4E,54
00F64:  DATA 20,3D
00F66:  DATA 20,25
00F68:  DATA 4C,58
00F6A:  DATA 0A,0D
00F6C:  DATA 00,00
00F6E:  DATA 41,6E
00F70:  DATA 74,65
00F72:  DATA 6E,6E
00F74:  DATA 61,20
00F76:  DATA 73,65
00F78:  DATA 74,2D
00F7A:  DATA 32,20
00F7C:  DATA 64,65
00F7E:  DATA 70,6C
00F80:  DATA 6F,79
00F82:  DATA 6D,65
00F84:  DATA 6E,74
00F86:  DATA 20,73
00F88:  DATA 74,61
00F8A:  DATA 72,74
00F8C:  DATA 65,64
00F8E:  DATA 0A,0D
00F90:  DATA 00,00
00F92:  DATA 43,6F
00F94:  DATA 75,6E
00F96:  DATA 74,69
00F98:  DATA 6E,67
00F9A:  DATA 20,64
00F9C:  DATA 65,70
00F9E:  DATA 6C,6F
00FA0:  DATA 79,6D
00FA2:  DATA 65,6E
00FA4:  DATA 74,20
00FA6:  DATA 74,69
00FA8:  DATA 6D,65
00FAA:  DATA 20,25
00FAC:  DATA 30,32
00FAE:  DATA 64,20
00FB0:  DATA 53,65
00FB2:  DATA 63,0A
00FB4:  DATA 0D,00
00FB6:  DATA 41,6E
00FB8:  DATA 74,65
00FBA:  DATA 6E,6E
00FBC:  DATA 61,2D
00FBE:  DATA 32,20
00FC0:  DATA 64,65
00FC2:  DATA 70,6C
00FC4:  DATA 6F,79
00FC6:  DATA 6D,65
00FC8:  DATA 6E,74
00FCA:  DATA 20,66
00FCC:  DATA 69,6E
00FCE:  DATA 69,73
00FD0:  DATA 68,65
00FD2:  DATA 64,0A
00FD4:  DATA 0D,00
00FD6:  DATA 63,75
00FD8:  DATA 72,72
00FDA:  DATA 65,6E
00FDC:  DATA 74,20
00FDE:  DATA 61,6E
00FE0:  DATA 74,65
00FE2:  DATA 6E,6E
00FE4:  DATA 61,20
00FE6:  DATA 72,65
00FE8:  DATA 6C,61
00FEA:  DATA 74,65
00FEC:  DATA 64,20
00FEE:  DATA 76,61
00FF0:  DATA 72,69
00FF2:  DATA 61,62
00FF4:  DATA 6C,65
00FF6:  DATA 20,76
00FF8:  DATA 61,6C
00FFA:  DATA 75,65
00FFC:  DATA 73,20
00FFE:  DATA 61,66
01000:  DATA 74,65
01002:  DATA 72,20
01004:  DATA 64,65
01006:  DATA 70,6C
01008:  DATA 6F,79
0100A:  DATA 6D,65
0100C:  DATA 6E,74
0100E:  DATA 0A,0D
01010:  DATA 00,00
01012:  DATA 41,4E
01014:  DATA 54,5F
01016:  DATA 53,45
01018:  DATA 54,5F
0101A:  DATA 31,5F
0101C:  DATA 44,45
0101E:  DATA 50,5F
01020:  DATA 46,4C
01022:  DATA 41,47
01024:  DATA 20,3D
01026:  DATA 20,25
01028:  DATA 4C,58
0102A:  DATA 0A,0D
0102C:  DATA 00,00
0102E:  DATA 41,4E
01030:  DATA 54,53
01032:  DATA 45,54
01034:  DATA 5F,31
01036:  DATA 5F,43
01038:  DATA 4F,55
0103A:  DATA 4E,54
0103C:  DATA 20,3D
0103E:  DATA 20,25
01040:  DATA 4C,58
01042:  DATA 0A,0D
01044:  DATA 00,00
01046:  DATA 41,4E
01048:  DATA 54,5F
0104A:  DATA 53,45
0104C:  DATA 54,5F
0104E:  DATA 32,5F
01050:  DATA 44,45
01052:  DATA 50,5F
01054:  DATA 46,4C
01056:  DATA 41,47
01058:  DATA 20,3D
0105A:  DATA 20,25
0105C:  DATA 4C,58
0105E:  DATA 0A,0D
01060:  DATA 00,00
01062:  DATA 41,4E
01064:  DATA 54,53
01066:  DATA 45,54
01068:  DATA 5F,32
0106A:  DATA 5F,43
0106C:  DATA 4F,55
0106E:  DATA 4E,54
01070:  DATA 20,3D
01072:  DATA 20,25
01074:  DATA 4C,58
01076:  DATA 0A,0D
01078:  DATA 00,00
0107A:  DATA 41,6E
0107C:  DATA 74,65
0107E:  DATA 6E,6E
01080:  DATA 61,20
01082:  DATA 64,65
01084:  DATA 70,6C
01086:  DATA 6F,79
01088:  DATA 6D,65
0108A:  DATA 74,20
0108C:  DATA 76,61
0108E:  DATA 6C,75
01090:  DATA 65,73
01092:  DATA 20,6C
01094:  DATA 6F,61
01096:  DATA 64,65
01098:  DATA 64,0A
0109A:  DATA 0D,00
0109C:  DATA 41,4E
0109E:  DATA 54,5F
010A0:  DATA 53,45
010A2:  DATA 54,5F
010A4:  DATA 31,5F
010A6:  DATA 44,45
010A8:  DATA 50,5F
010AA:  DATA 46,4C
010AC:  DATA 41,47
010AE:  DATA 20,3D
010B0:  DATA 20,25
010B2:  DATA 4C,58
010B4:  DATA 0A,0D
010B6:  DATA 00,00
010B8:  DATA 41,4E
010BA:  DATA 54,53
010BC:  DATA 45,54
010BE:  DATA 5F,31
010C0:  DATA 5F,43
010C2:  DATA 4F,55
010C4:  DATA 4E,54
010C6:  DATA 20,3D
010C8:  DATA 20,25
010CA:  DATA 4C,58
010CC:  DATA 0A,0D
010CE:  DATA 00,00
010D0:  DATA 41,4E
010D2:  DATA 54,5F
010D4:  DATA 53,45
010D6:  DATA 54,5F
010D8:  DATA 32,5F
010DA:  DATA 44,45
010DC:  DATA 50,5F
010DE:  DATA 46,4C
010E0:  DATA 41,47
010E2:  DATA 20,3D
010E4:  DATA 20,25
010E6:  DATA 4C,58
010E8:  DATA 0A,0D
010EA:  DATA 00,00
010EC:  DATA 41,4E
010EE:  DATA 54,53
010F0:  DATA 45,54
010F2:  DATA 5F,32
010F4:  DATA 5F,43
010F6:  DATA 4F,55
010F8:  DATA 4E,54
010FA:  DATA 20,3D
010FC:  DATA 20,25
010FE:  DATA 4C,58
01100:  DATA 0A,0D
01102:  DATA 00,00
01104:  DATA 53,61
01106:  DATA 74,20
01108:  DATA 69,73
0110A:  DATA 20,6E
0110C:  DATA 6F,74
0110E:  DATA 20,69
01110:  DATA 6E,20
01112:  DATA 43,57
01114:  DATA 20,74
01116:  DATA 72,61
01118:  DATA 6E,73
0111A:  DATA 6D,69
0111C:  DATA 74,20
0111E:  DATA 6D,6F
01120:  DATA 64,65
01122:  DATA 20,3D
01124:  DATA 20,25
01126:  DATA 58,0A
01128:  DATA 0D,00
0112A:  DATA 53,61
0112C:  DATA 74,20
0112E:  DATA 69,73
01130:  DATA 20,69
01132:  DATA 6E,20
01134:  DATA 43,57
01136:  DATA 20,74
01138:  DATA 72,61
0113A:  DATA 6E,73
0113C:  DATA 6D,69
0113E:  DATA 74,20
01140:  DATA 6D,6F
01142:  DATA 64,65
01144:  DATA 20,3D
01146:  DATA 20,25
01148:  DATA 58,0A
0114A:  DATA 0D,00
0114C:  DATA 52,65
0114E:  DATA 63,65
01150:  DATA 69,76
01152:  DATA 65,64
01154:  DATA 20,63
01156:  DATA 6F,6D
01158:  DATA 61,6E
0115A:  DATA 64,20
0115C:  DATA 66,72
0115E:  DATA 6F,6D
01160:  DATA 20,46
01162:  DATA 41,42
01164:  DATA 20,70
01166:  DATA 69,63
01168:  DATA 20,3E
0116A:  DATA 3E,20
0116C:  DATA 00,00
0116E:  DATA 4E,75
01170:  DATA 6D,20
01172:  DATA 6F,66
01174:  DATA 20,63
01176:  DATA 6F,6D
01178:  DATA 75,6E
0117A:  DATA 69,63
0117C:  DATA 74,69
0117E:  DATA 6F,6E
01180:  DATA 20,74
01182:  DATA 72,69
01184:  DATA 65,73
01186:  DATA 20,74
01188:  DATA 6F,20
0118A:  DATA 46,41
0118C:  DATA 42,20
0118E:  DATA 50,49
01190:  DATA 43,20
01192:  DATA 3D,20
01194:  DATA 25,64
01196:  DATA 0A,0D
01198:  DATA 00,00
0119A:  DATA 46,41
0119C:  DATA 42,20
0119E:  DATA 72,65
011A0:  DATA 73,70
011A2:  DATA 6F,6E
011A4:  DATA 64,65
011A6:  DATA 64,20
011A8:  DATA 63,6F
011AA:  DATA 72,72
011AC:  DATA 65,63
011AE:  DATA 74,6C
011B0:  DATA 79,0A
011B2:  DATA 0D,00
011B4:  DATA 52,65
011B6:  DATA 63,65
011B8:  DATA 69,76
011BA:  DATA 65,64
011BC:  DATA 20,77
011BE:  DATA 72,6F
011C0:  DATA 6E,67
011C2:  DATA 20,72
011C4:  DATA 65,73
011C6:  DATA 70,6F
011C8:  DATA 6E,73
011CA:  DATA 65,20
011CC:  DATA 66,72
011CE:  DATA 6F,6D
011D0:  DATA 20,46
011D2:  DATA 41,42
011D4:  DATA 20,70
011D6:  DATA 69,63
011D8:  DATA 20,3E
011DA:  DATA 3E,20
011DC:  DATA 00,00
011DE:  DATA 46,41
011E0:  DATA 42,20
011E2:  DATA 6B,69
011E4:  DATA 6C,6C
011E6:  DATA 20,73
011E8:  DATA 77,69
011EA:  DATA 74,63
011EC:  DATA 68,20
011EE:  DATA 73,75
011F0:  DATA 63,63
011F2:  DATA 65,65
011F4:  DATA 73,66
011F6:  DATA 75,6C
011F8:  DATA 6C,79
011FA:  DATA 20,63
011FC:  DATA 6C,6F
011FE:  DATA 73,65
01200:  DATA 64,0A
01202:  DATA 0D,00
01204:  DATA 46,41
01206:  DATA 42,20
01208:  DATA 6B,69
0120A:  DATA 6C,6C
0120C:  DATA 20,73
0120E:  DATA 77,69
01210:  DATA 74,63
01212:  DATA 68,20
01214:  DATA 63,6C
01216:  DATA 6F,73
01218:  DATA 69,6E
0121A:  DATA 67,20
0121C:  DATA 6E,6F
0121E:  DATA 74,20
01220:  DATA 73,75
01222:  DATA 63,63
01224:  DATA 65,73
01226:  DATA 66,75
01228:  DATA 6C,0A
0122A:  DATA 0D,00
0122C:  DATA 4F,42
0122E:  DATA 43,20
01230:  DATA 6B,69
01232:  DATA 6C,6C
01234:  DATA 20,73
01236:  DATA 77,69
01238:  DATA 74,63
0123A:  DATA 68,20
0123C:  DATA 73,75
0123E:  DATA 63,63
01240:  DATA 65,65
01242:  DATA 73,66
01244:  DATA 75,6C
01246:  DATA 6C,79
01248:  DATA 20,63
0124A:  DATA 6C,6F
0124C:  DATA 73,65
0124E:  DATA 64,0A
01250:  DATA 0D,00
01252:  DATA 4F,42
01254:  DATA 43,20
01256:  DATA 6B,69
01258:  DATA 6C,6C
0125A:  DATA 20,73
0125C:  DATA 77,69
0125E:  DATA 74,63
01260:  DATA 68,20
01262:  DATA 63,6C
01264:  DATA 6F,73
01266:  DATA 69,6E
01268:  DATA 67,20
0126A:  DATA 6E,6F
0126C:  DATA 74,20
0126E:  DATA 73,75
01270:  DATA 63,63
01272:  DATA 65,73
01274:  DATA 66,75
01276:  DATA 6C,0A
01278:  DATA 0D,00
0127A:  DATA 46,41
0127C:  DATA 42,20
0127E:  DATA 6B,69
01280:  DATA 6C,6C
01282:  DATA 20,6F
01284:  DATA 70,65
01286:  DATA 6E,20
01288:  DATA 63,6F
0128A:  DATA 6D,61
0128C:  DATA 6E,64
0128E:  DATA 20,73
01290:  DATA 75,63
01292:  DATA 63,65
01294:  DATA 73,66
01296:  DATA 75,6C
01298:  DATA 6C,79
0129A:  DATA 20,73
0129C:  DATA 65,6E
0129E:  DATA 74,20
012A0:  DATA 74,6F
012A2:  DATA 20,46
012A4:  DATA 41,42
012A6:  DATA 0A,0D
012A8:  DATA 00,00
012AA:  DATA 43,6F
012AC:  DATA 6D,75
012AE:  DATA 6E,69
012B0:  DATA 63,61
012B2:  DATA 74,69
012B4:  DATA 6F,6E
012B6:  DATA 20,77
012B8:  DATA 69,74
012BA:  DATA 68,20
012BC:  DATA 46,41
012BE:  DATA 42,20
012C0:  DATA 6E,6F
012C2:  DATA 74,20
012C4:  DATA 73,75
012C6:  DATA 63,63
012C8:  DATA 65,73
012CA:  DATA 66,75
012CC:  DATA 6C,0A
012CE:  DATA 0D,00
012D0:  DATA 4F,42
012D2:  DATA 43,20
012D4:  DATA 6B,69
012D6:  DATA 6C,6C
012D8:  DATA 20,6F
012DA:  DATA 70,65
012DC:  DATA 6E,20
012DE:  DATA 63,6F
012E0:  DATA 6D,61
012E2:  DATA 6E,64
012E4:  DATA 20,73
012E6:  DATA 75,63
012E8:  DATA 63,65
012EA:  DATA 73,66
012EC:  DATA 75,6C
012EE:  DATA 6C,79
012F0:  DATA 20,73
012F2:  DATA 65,6E
012F4:  DATA 74,20
012F6:  DATA 74,6F
012F8:  DATA 20,46
012FA:  DATA 41,42
012FC:  DATA 0A,0D
012FE:  DATA 00,00
01300:  DATA 4F,42
01302:  DATA 43,20
01304:  DATA 6B,69
01306:  DATA 6C,6C
01308:  DATA 20,69
0130A:  DATA 73,20
0130C:  DATA 6F,70
0130E:  DATA 65,6E
01310:  DATA 65,64
01312:  DATA 0A,0D
01314:  DATA 00,00
01316:  DATA 43,6F
01318:  DATA 6D,75
0131A:  DATA 6E,69
0131C:  DATA 63,61
0131E:  DATA 74,69
01320:  DATA 6F,6E
01322:  DATA 20,77
01324:  DATA 69,74
01326:  DATA 68,20
01328:  DATA 46,41
0132A:  DATA 42,20
0132C:  DATA 6E,6F
0132E:  DATA 74,20
01330:  DATA 73,75
01332:  DATA 63,63
01334:  DATA 65,73
01336:  DATA 66,75
01338:  DATA 6C,0A
0133A:  DATA 0D,00
0133C:  DATA 43,48
0133E:  DATA 45,43
01340:  DATA 4B,5F
01342:  DATA 55,41
01344:  DATA 52,54
01346:  DATA 5F,49
01348:  DATA 4E,43
0134A:  DATA 4F,4D
0134C:  DATA 49,4E
0134E:  DATA 47,5F
01350:  DATA 46,52
01352:  DATA 4F,4D
01354:  DATA 5F,4D
01356:  DATA 42,4F
01358:  DATA 53,53
0135A:  DATA 5F,50
0135C:  DATA 49,43
0135E:  DATA 0D,0A
01360:  DATA 00,00
01362:  DATA 44,61
01364:  DATA 74,61
01366:  DATA 20,66
01368:  DATA 72,6F
0136A:  DATA 6D,20
0136C:  DATA 4D,42
0136E:  DATA 4F,53
01370:  DATA 53,3A
01372:  DATA 00,00
01374:  DATA 52,65
01376:  DATA 63,65
01378:  DATA 69,76
0137A:  DATA 65,64
0137C:  DATA 20,63
0137E:  DATA 6F,6D
01380:  DATA 61,6E
01382:  DATA 64,20
01384:  DATA 66,72
01386:  DATA 6F,6D
01388:  DATA 20,4D
0138A:  DATA 69,73
0138C:  DATA 73,69
0138E:  DATA 6F,6E
01390:  DATA 20,42
01392:  DATA 6F,73
01394:  DATA 73,20
01396:  DATA 3E,3E
01398:  DATA 20,00
0139A:  DATA 42,6F
0139C:  DATA 61,72
0139E:  DATA 64,20
013A0:  DATA 4E,75
013A2:  DATA 6D,62
013A4:  DATA 65,72
013A6:  DATA 20,2D
013A8:  DATA 2D,3E
013AA:  DATA 20,25
013AC:  DATA 58,00
013AE:  DATA 4E,6F
013B0:  DATA 74,20
013B2:  DATA 63,6F
013B4:  DATA 72,72
013B6:  DATA 65,63
013B8:  DATA 74,20
013BA:  DATA 62,6F
013BC:  DATA 61,72
013BE:  DATA 64,20
013C0:  DATA 6E,75
013C2:  DATA 6D,62
013C4:  DATA 65,72
013C6:  DATA 00,00
013C8:  DATA 47,49
013CA:  DATA 56,45
013CC:  DATA 5F,53
013CE:  DATA 46,4D
013D0:  DATA 5F,41
013D2:  DATA 43,43
013D4:  DATA 45,53
013D6:  DATA 53,5F
013D8:  DATA 54,4F
013DA:  DATA 4D,49
013DC:  DATA 53,53
013DE:  DATA 49,4F
013E0:  DATA 4E,42
013E2:  DATA 4F,53
013E4:  DATA 53,0A
013E6:  DATA 0D,00
013E8:  DATA 53,54
013EA:  DATA 4F,50
013EC:  DATA 5F,53
013EE:  DATA 46,4D
013F0:  DATA 5F,41
013F2:  DATA 43,43
013F4:  DATA 45,53
013F6:  DATA 53,5F
013F8:  DATA 54,4F
013FA:  DATA 4D,49
013FC:  DATA 53,53
013FE:  DATA 49,4F
01400:  DATA 4E,42
01402:  DATA 4F,53
01404:  DATA 53,0A
01406:  DATA 0D,00
01408:  DATA 53,65
0140A:  DATA 6E,64
0140C:  DATA 69,6E
0140E:  DATA 67,20
01410:  DATA 41,50
01412:  DATA 52,53
01414:  DATA 20,63
01416:  DATA 6F,6D
01418:  DATA 6D,61
0141A:  DATA 6E,64
0141C:  DATA 20,74
0141E:  DATA 6F,20
01420:  DATA 4D,69
01422:  DATA 73,73
01424:  DATA 69,6F
01426:  DATA 6E,20
01428:  DATA 42,6F
0142A:  DATA 73,73
0142C:  DATA 0A,0D
0142E:  DATA 00,00
01430:  DATA 41,50
01432:  DATA 52,53
01434:  DATA 20,63
01436:  DATA 6F,6D
01438:  DATA 6D,61
0143A:  DATA 6E,64
0143C:  DATA 3A,00
0143E:  DATA 52,43
01440:  DATA 56,44
01442:  DATA 20,43
01444:  DATA 4D,44
01446:  DATA 20,46
01448:  DATA 4F,52
0144A:  DATA 4D,20
0144C:  DATA 43,4F
0144E:  DATA 4D,20
01450:  DATA 50,49
01452:  DATA 43,20
01454:  DATA 3E,3E
01456:  DATA 20,00
01458:  DATA 4E,75
0145A:  DATA 6D,20
0145C:  DATA 6F,66
0145E:  DATA 20,63
01460:  DATA 6F,6D
01462:  DATA 75,6E
01464:  DATA 69,63
01466:  DATA 74,69
01468:  DATA 6F,6E
0146A:  DATA 20,74
0146C:  DATA 72,69
0146E:  DATA 65,73
01470:  DATA 20,74
01472:  DATA 6F,20
01474:  DATA 43,4F
01476:  DATA 4D,20
01478:  DATA 50,49
0147A:  DATA 43,20
0147C:  DATA 3D,20
0147E:  DATA 25,64
01480:  DATA 0A,0D
01482:  DATA 00,00
01484:  DATA 52,65
01486:  DATA 63,65
01488:  DATA 69,76
0148A:  DATA 65,64
0148C:  DATA 20,72
0148E:  DATA 65,73
01490:  DATA 70,6F
01492:  DATA 6E,73
01494:  DATA 65,20
01496:  DATA 66,72
01498:  DATA 6F,6D
0149A:  DATA 20,63
0149C:  DATA 6F,6D
0149E:  DATA 20,70
014A0:  DATA 69,63
014A2:  DATA 20,3E
014A4:  DATA 3E,20
014A6:  DATA 00,00
014A8:  DATA 52,65
014AA:  DATA 63,65
014AC:  DATA 69,76
014AE:  DATA 65,64
014B0:  DATA 20,77
014B2:  DATA 72,6F
014B4:  DATA 6E,67
014B6:  DATA 20,72
014B8:  DATA 65,73
014BA:  DATA 70,6F
014BC:  DATA 6E,73
014BE:  DATA 65,20
014C0:  DATA 66,72
014C2:  DATA 6F,6D
014C4:  DATA 20,63
014C6:  DATA 6F,6D
014C8:  DATA 20,70
014CA:  DATA 69,63
014CC:  DATA 20,3E
014CE:  DATA 3E,20
014D0:  DATA 00,00
014D2:  DATA 43,6F
014D4:  DATA 6D,20
014D6:  DATA 66,6C
014D8:  DATA 61,73
014DA:  DATA 68,20
014DC:  DATA 6D,65
014DE:  DATA 6D,6F
014E0:  DATA 72,79
014E2:  DATA 20,61
014E4:  DATA 63,63
014E6:  DATA 65,73
014E8:  DATA 73,20
014EA:  DATA 67,61
014EC:  DATA 76,65
014EE:  DATA 20,74
014F0:  DATA 6F,20
014F2:  DATA 63,6F
014F4:  DATA 6D,20
014F6:  DATA 70,69
014F8:  DATA 63,20
014FA:  DATA 66,6F
014FC:  DATA 72,20
014FE:  DATA 3D,20
01500:  DATA 25,30
01502:  DATA 33,75
01504:  DATA 20,53
01506:  DATA 65,63
01508:  DATA 6F,6E
0150A:  DATA 64,73
0150C:  DATA 0A,0D
0150E:  DATA 00,00
01510:  DATA 47,49
01512:  DATA 56,45
01514:  DATA 5F,43
01516:  DATA 57,5F
01518:  DATA 44,41
0151A:  DATA 54,41
0151C:  DATA 5F,54
0151E:  DATA 4F,5F
01520:  DATA 43,4F
01522:  DATA 4D,5F
01524:  DATA 50,49
01526:  DATA 43,0A
01528:  DATA 0D,00
0152A:  DATA 43,57
0152C:  DATA 20,44
0152E:  DATA 61,74
01530:  DATA 61,20
01532:  DATA 74,72
01534:  DATA 61,6E
01536:  DATA 73,66
01538:  DATA 65,72
0153A:  DATA 65,64
0153C:  DATA 20,74
0153E:  DATA 6F,20
01540:  DATA 63,6F
01542:  DATA 6D,70
01544:  DATA 69,63
01546:  DATA 0A,0D
01548:  DATA 00,00
0154A:  DATA 53,61
0154C:  DATA 74,20
0154E:  DATA 69,73
01550:  DATA 20,6E
01552:  DATA 6F,74
01554:  DATA 20,69
01556:  DATA 6E,20
01558:  DATA 43,57
0155A:  DATA 20,74
0155C:  DATA 72,61
0155E:  DATA 6E,73
01560:  DATA 6D,69
01562:  DATA 74,20
01564:  DATA 6D,6F
01566:  DATA 64,65
01568:  DATA 0A,0D
0156A:  DATA 00,00
0156C:  DATA 47,65
0156E:  DATA 6E,61
01570:  DATA 72,61
01572:  DATA 74,65
01574:  DATA 64,20
01576:  DATA 43,57
01578:  DATA 20,3E
0157A:  DATA 20,00
0157C:  DATA 43,6F
0157E:  DATA 6D,20
01580:  DATA 66,6C
01582:  DATA 61,73
01584:  DATA 68,20
01586:  DATA 6D,65
01588:  DATA 6D,6F
0158A:  DATA 72,79
0158C:  DATA 20,61
0158E:  DATA 63,63
01590:  DATA 65,73
01592:  DATA 73,20
01594:  DATA 72,65
01596:  DATA 6C,65
01598:  DATA 61,73
0159A:  DATA 65,64
0159C:  DATA 0A,0D
0159E:  DATA 00,00
015A0:  DATA 44,41
015A2:  DATA 54,41
015A4:  DATA 5F,43
015A6:  DATA 4F,50
015A8:  DATA 59,5F
015AA:  DATA 46,52
015AC:  DATA 4F,4D
015AE:  DATA 5F,4D
015B0:  DATA 53,4E
015B2:  DATA 5F,46
015B4:  DATA 4D,5F
015B6:  DATA 54,4F
015B8:  DATA 5F,43
015BA:  DATA 46,4D
015BC:  DATA 5F,55
015BE:  DATA 53,49
015C0:  DATA 4E,47
015C2:  DATA 5F,47
015C4:  DATA 53,5F
015C6:  DATA 43,4D
015C8:  DATA 44,0A
015CA:  DATA 0D,00
015CC:  DATA 6E,75
015CE:  DATA 6D,5F
015D0:  DATA 6F,66
015D2:  DATA 5F,62
015D4:  DATA 79,74
015D6:  DATA 65,73
015D8:  DATA 20,3D
015DA:  DATA 20,25
015DC:  DATA 4C,75
015DE:  DATA 0A,0D
015E0:  DATA 00,00
015E2:  DATA 44,61
015E4:  DATA 74,61
015E6:  DATA 20,63
015E8:  DATA 6F,70
015EA:  DATA 79,20
015EC:  DATA 73,74
015EE:  DATA 61,72
015F0:  DATA 74,20
015F2:  DATA 66,72
015F4:  DATA 6F,6D
015F6:  DATA 20,6D
015F8:  DATA 73,6E
015FA:  DATA 20,66
015FC:  DATA 6D,20
015FE:  DATA 74,6F
01600:  DATA 20,63
01602:  DATA 6F,6D
01604:  DATA 20,66
01606:  DATA 6D,0A
01608:  DATA 0D,00
0160A:  DATA 44,61
0160C:  DATA 74,61
0160E:  DATA 20,63
01610:  DATA 6F,70
01612:  DATA 69,65
01614:  DATA 64,5F
01616:  DATA 5F,5F
01618:  DATA 5F,5F
0161A:  DATA 5F,5F
0161C:  DATA 5F,5F
0161E:  DATA 5F,5F
01620:  DATA 5F,5F
01622:  DATA 5F,5F
01624:  DATA 5F,5F
01626:  DATA 5F,0A
01628:  DATA 0D,00
0162A:  DATA 44,41
0162C:  DATA 54,41
0162E:  DATA 5F,43
01630:  DATA 4F,50
01632:  DATA 59,5F
01634:  DATA 46,52
01636:  DATA 4F,4D
01638:  DATA 5F,4D
0163A:  DATA 41,49
0163C:  DATA 4E,5F
0163E:  DATA 46,4D
01640:  DATA 5F,54
01642:  DATA 4F,5F
01644:  DATA 43,46
01646:  DATA 4D,5F
01648:  DATA 55,53
0164A:  DATA 49,4E
0164C:  DATA 47,5F
0164E:  DATA 47,53
01650:  DATA 5F,43
01652:  DATA 4D,44
01654:  DATA 0A,0D
01656:  DATA 00,00
01658:  DATA 6E,75
0165A:  DATA 6D,5F
0165C:  DATA 6F,66
0165E:  DATA 5F,62
01660:  DATA 79,74
01662:  DATA 65,73
01664:  DATA 20,3D
01666:  DATA 20,25
01668:  DATA 4C,75
0166A:  DATA 0A,0D
0166C:  DATA 00,00
0166E:  DATA 44,61
01670:  DATA 74,61
01672:  DATA 20,63
01674:  DATA 6F,70
01676:  DATA 79,20
01678:  DATA 73,74
0167A:  DATA 61,72
0167C:  DATA 74,20
0167E:  DATA 66,72
01680:  DATA 6F,6D
01682:  DATA 20,4D
01684:  DATA 61,69
01686:  DATA 6E,20
01688:  DATA 66,6D
0168A:  DATA 20,74
0168C:  DATA 6F,20
0168E:  DATA 63,6F
01690:  DATA 6D,20
01692:  DATA 66,6D
01694:  DATA 0A,0D
01696:  DATA 00,00
01698:  DATA 44,61
0169A:  DATA 74,61
0169C:  DATA 20,63
0169E:  DATA 6F,70
016A0:  DATA 69,65
016A2:  DATA 64,5F
016A4:  DATA 5F,5F
016A6:  DATA 5F,5F
016A8:  DATA 5F,5F
016AA:  DATA 5F,5F
016AC:  DATA 5F,5F
016AE:  DATA 5F,5F
016B0:  DATA 5F,5F
016B2:  DATA 5F,5F
016B4:  DATA 5F,5F
016B6:  DATA 5F,0A
016B8:  DATA 0D,00
016BA:  DATA 53,45
016BC:  DATA 43,54
016BE:  DATA 4F,52
016C0:  DATA 5F,45
016C2:  DATA 52,41
016C4:  DATA 53,45
016C6:  DATA 5F,55
016C8:  DATA 53,49
016CA:  DATA 4E,47
016CC:  DATA 5F,47
016CE:  DATA 53,5F
016D0:  DATA 43,4F
016D2:  DATA 4D,4D
016D4:  DATA 41,4E
016D6:  DATA 44,0A
016D8:  DATA 0D,00
016DA:  DATA 43,4F
016DC:  DATA 4D,20
016DE:  DATA 46,4D
016E0:  DATA 20,73
016E2:  DATA 65,63
016E4:  DATA 74,6F
016E6:  DATA 72,20
016E8:  DATA 65,72
016EA:  DATA 61,73
016EC:  DATA 65,0A
016EE:  DATA 0D,00
016F0:  DATA 4D,41
016F2:  DATA 49,4E
016F4:  DATA 20,46
016F6:  DATA 4D,20
016F8:  DATA 73,65
016FA:  DATA 63,74
016FC:  DATA 6F,72
016FE:  DATA 20,65
01700:  DATA 72,61
01702:  DATA 73,65
01704:  DATA 0A,0D
01706:  DATA 00,00
01708:  DATA 4D,53
0170A:  DATA 4E,20
0170C:  DATA 46,4D
0170E:  DATA 20,73
01710:  DATA 65,63
01712:  DATA 74,6F
01714:  DATA 72,20
01716:  DATA 65,72
01718:  DATA 61,73
0171A:  DATA 65,0A
0171C:  DATA 0D,00
0171E:  DATA 43,4F
01720:  DATA 4E,54
01722:  DATA 52,4F
01724:  DATA 4C,5F
01726:  DATA 46,41
01728:  DATA 42,5F
0172A:  DATA 4B,49
0172C:  DATA 4C,4C
0172E:  DATA 5F,53
01730:  DATA 57,49
01732:  DATA 54,43
01734:  DATA 48,20
01736:  DATA 0A,0D
01738:  DATA 00,00
0173A:  DATA 43,6F
0173C:  DATA 6E,74
0173E:  DATA 72,6F
01740:  DATA 6C,6C
01742:  DATA 69,6E
01744:  DATA 67,20
01746:  DATA 46,41
01748:  DATA 42,20
0174A:  DATA 6B,69
0174C:  DATA 6C,6C
0174E:  DATA 20,73
01750:  DATA 77,69
01752:  DATA 74,63
01754:  DATA 68,20
01756:  DATA 3D,20
01758:  DATA 25,58
0175A:  DATA 0A,0D
0175C:  DATA 00,00
0175E:  DATA 43,6F
01760:  DATA 6E,74
01762:  DATA 72,6F
01764:  DATA 6C,6C
01766:  DATA 69,6E
01768:  DATA 67,20
0176A:  DATA 4F,42
0176C:  DATA 43,20
0176E:  DATA 6B,69
01770:  DATA 6C,6C
01772:  DATA 20,73
01774:  DATA 77,69
01776:  DATA 74,63
01778:  DATA 68,20
0177A:  DATA 3D,20
0177C:  DATA 25,58
0177E:  DATA 0A,0D
01780:  DATA 00,00
01782:  DATA 44,45
01784:  DATA 50,4C
01786:  DATA 4F,59
01788:  DATA 5F,41
0178A:  DATA 4E,54
0178C:  DATA 45,4E
0178E:  DATA 4E,41
01790:  DATA 5F,55
01792:  DATA 53,49
01794:  DATA 4E,47
01796:  DATA 5F,47
01798:  DATA 53,5F
0179A:  DATA 43,4F
0179C:  DATA 4D,4D
0179E:  DATA 41,4E
017A0:  DATA 44,0A
017A2:  DATA 0D,00
017A4:  DATA 41,6E
017A6:  DATA 74,65
017A8:  DATA 6E,6E
017AA:  DATA 61,20
017AC:  DATA 73,65
017AE:  DATA 74,2D
017B0:  DATA 31,20
017B2:  DATA 64,65
017B4:  DATA 70,6C
017B6:  DATA 6F,79
017B8:  DATA 6D,65
017BA:  DATA 6E,74
017BC:  DATA 20,73
017BE:  DATA 74,61
017C0:  DATA 72,74
017C2:  DATA 65,64
017C4:  DATA 0A,0D
017C6:  DATA 00,00
017C8:  DATA 41,6E
017CA:  DATA 74,65
017CC:  DATA 6E,6E
017CE:  DATA 61,20
017D0:  DATA 73,65
017D2:  DATA 74,2D
017D4:  DATA 32,20
017D6:  DATA 64,65
017D8:  DATA 70,6C
017DA:  DATA 6F,79
017DC:  DATA 6D,65
017DE:  DATA 6E,74
017E0:  DATA 20,73
017E2:  DATA 74,61
017E4:  DATA 72,74
017E6:  DATA 65,64
017E8:  DATA 0A,0D
017EA:  DATA 00,00
017EC:  DATA 43,6F
017EE:  DATA 75,6E
017F0:  DATA 74,69
017F2:  DATA 6E,67
017F4:  DATA 20,64
017F6:  DATA 65,70
017F8:  DATA 6C,6F
017FA:  DATA 79,6D
017FC:  DATA 65,6E
017FE:  DATA 74,20
01800:  DATA 74,69
01802:  DATA 6D,65
01804:  DATA 20,25
01806:  DATA 30,32
01808:  DATA 64,20
0180A:  DATA 53,65
0180C:  DATA 63,0A
0180E:  DATA 0D,00
01810:  DATA 41,6E
01812:  DATA 74,65
01814:  DATA 6E,6E
01816:  DATA 61,20
01818:  DATA 64,65
0181A:  DATA 70,6C
0181C:  DATA 6F,79
0181E:  DATA 6D,65
01820:  DATA 6E,74
01822:  DATA 20,66
01824:  DATA 69,6E
01826:  DATA 69,73
01828:  DATA 68,65
0182A:  DATA 64,0A
0182C:  DATA 0D,00
0182E:  DATA 53,45
01830:  DATA 54,5F
01832:  DATA 41,4E
01834:  DATA 54,45
01836:  DATA 4E,4E
01838:  DATA 41,5F
0183A:  DATA 56,41
0183C:  DATA 4C,55
0183E:  DATA 45,53
01840:  DATA 5F,55
01842:  DATA 53,49
01844:  DATA 4E,47
01846:  DATA 5F,47
01848:  DATA 53,5F
0184A:  DATA 43,4F
0184C:  DATA 4D,4D
0184E:  DATA 41,4E
01850:  DATA 44,0A
01852:  DATA 0D,00
01854:  DATA 55,70
01856:  DATA 64,61
01858:  DATA 74,65
0185A:  DATA 64,20
0185C:  DATA 61,6E
0185E:  DATA 74,65
01860:  DATA 6E,6E
01862:  DATA 61,20
01864:  DATA 64,65
01866:  DATA 70,6C
01868:  DATA 6F,79
0186A:  DATA 6D,65
0186C:  DATA 6E,74
0186E:  DATA 20,76
01870:  DATA 61,6C
01872:  DATA 75,65
01874:  DATA 73,0A
01876:  DATA 0D,00
01878:  DATA 41,4E
0187A:  DATA 54,5F
0187C:  DATA 53,45
0187E:  DATA 54,5F
01880:  DATA 31,5F
01882:  DATA 44,45
01884:  DATA 50,5F
01886:  DATA 46,4C
01888:  DATA 41,47
0188A:  DATA 20,3D
0188C:  DATA 20,25
0188E:  DATA 4C,58
01890:  DATA 0A,0D
01892:  DATA 00,00
01894:  DATA 41,4E
01896:  DATA 54,53
01898:  DATA 45,54
0189A:  DATA 5F,31
0189C:  DATA 5F,43
0189E:  DATA 4F,55
018A0:  DATA 4E,54
018A2:  DATA 20,3D
018A4:  DATA 20,25
018A6:  DATA 4C,58
018A8:  DATA 0A,0D
018AA:  DATA 00,00
018AC:  DATA 41,4E
018AE:  DATA 54,5F
018B0:  DATA 53,45
018B2:  DATA 54,5F
018B4:  DATA 32,5F
018B6:  DATA 44,45
018B8:  DATA 50,5F
018BA:  DATA 46,4C
018BC:  DATA 41,47
018BE:  DATA 20,3D
018C0:  DATA 20,25
018C2:  DATA 4C,58
018C4:  DATA 0A,0D
018C6:  DATA 00,00
018C8:  DATA 41,4E
018CA:  DATA 54,53
018CC:  DATA 45,54
018CE:  DATA 5F,32
018D0:  DATA 5F,43
018D2:  DATA 4F,55
018D4:  DATA 4E,54
018D6:  DATA 20,3D
018D8:  DATA 20,25
018DA:  DATA 4C,58
018DC:  DATA 0A,0D
018DE:  DATA 00,00
018E0:  DATA 43,57
018E2:  DATA 20,33
018E4:  DATA 30,44
018E6:  DATA 61,79
018E8:  DATA 20,43
018EA:  DATA 6F,75
018EC:  DATA 6E,74
018EE:  DATA 65,72
018F0:  DATA 20,3D
018F2:  DATA 20,25
018F4:  DATA 75,20
018F6:  DATA 0A,0D
018F8:  DATA 00,00
018FA:  DATA 53,41
018FC:  DATA 54,20
018FE:  DATA 69,73
01900:  DATA 20,69
01902:  DATA 6E,20
01904:  DATA 33,30
01906:  DATA 20,64
01908:  DATA 61,79
0190A:  DATA 20,43
0190C:  DATA 57,20
0190E:  DATA 64,69
01910:  DATA 73,61
01912:  DATA 62,6C
01914:  DATA 65,20
01916:  DATA 6D,6F
01918:  DATA 64,65
0191A:  DATA 20,25
0191C:  DATA 75,0A
0191E:  DATA 0D,00
01920:  DATA 53,41
01922:  DATA 54,20
01924:  DATA 69,73
01926:  DATA 20,4E
01928:  DATA 4F,54
0192A:  DATA 20,69
0192C:  DATA 6E,20
0192E:  DATA 33,30
01930:  DATA 20,64
01932:  DATA 61,79
01934:  DATA 20,43
01936:  DATA 57,20
01938:  DATA 64,69
0193A:  DATA 73,61
0193C:  DATA 62,6C
0193E:  DATA 65,20
01940:  DATA 6D,6F
01942:  DATA 64,65
01944:  DATA 20,25
01946:  DATA 75,0A
01948:  DATA 0D,00
0194A:  DATA 52,65
0194C:  DATA 63,65
0194E:  DATA 69,76
01950:  DATA 65,64
01952:  DATA 20,63
01954:  DATA 6F,6D
01956:  DATA 6D,61
01958:  DATA 6E,64
0195A:  DATA 20,66
0195C:  DATA 72,6F
0195E:  DATA 6D,20
01960:  DATA 64,65
01962:  DATA 62,75
01964:  DATA 67,20
01966:  DATA 70,6F
01968:  DATA 72,74
0196A:  DATA 20,3E
0196C:  DATA 3E,20
0196E:  DATA 00,00
01970:  DATA 41,6E
01972:  DATA 74,65
01974:  DATA 6E,6E
01976:  DATA 61,20
01978:  DATA 73,65
0197A:  DATA 74,2D
0197C:  DATA 31,20
0197E:  DATA 64,65
01980:  DATA 70,6C
01982:  DATA 6F,79
01984:  DATA 6D,65
01986:  DATA 6E,74
01988:  DATA 20,73
0198A:  DATA 74,61
0198C:  DATA 72,74
0198E:  DATA 65,64
01990:  DATA 0A,0D
01992:  DATA 00,00
01994:  DATA 41,6E
01996:  DATA 74,65
01998:  DATA 6E,6E
0199A:  DATA 61,20
0199C:  DATA 73,65
0199E:  DATA 74,2D
019A0:  DATA 32,20
019A2:  DATA 64,65
019A4:  DATA 70,6C
019A6:  DATA 6F,79
019A8:  DATA 6D,65
019AA:  DATA 6E,74
019AC:  DATA 20,73
019AE:  DATA 74,61
019B0:  DATA 72,74
019B2:  DATA 65,64
019B4:  DATA 0A,0D
019B6:  DATA 00,00
019B8:  DATA 43,6F
019BA:  DATA 75,6E
019BC:  DATA 74,69
019BE:  DATA 6E,67
019C0:  DATA 20,64
019C2:  DATA 65,70
019C4:  DATA 6C,6F
019C6:  DATA 79,6D
019C8:  DATA 65,6E
019CA:  DATA 74,20
019CC:  DATA 74,69
019CE:  DATA 6D,65
019D0:  DATA 20,25
019D2:  DATA 30,32
019D4:  DATA 64,20
019D6:  DATA 53,65
019D8:  DATA 63,0A
019DA:  DATA 0D,00
019DC:  DATA 41,6E
019DE:  DATA 74,65
019E0:  DATA 6E,6E
019E2:  DATA 61,20
019E4:  DATA 64,65
019E6:  DATA 70,6C
019E8:  DATA 6F,79
019EA:  DATA 6D,65
019EC:  DATA 6E,74
019EE:  DATA 20,66
019F0:  DATA 69,6E
019F2:  DATA 69,73
019F4:  DATA 68,65
019F6:  DATA 64,0A
019F8:  DATA 0D,00
019FA:  DATA 41,6E
019FC:  DATA 74,65
019FE:  DATA 6E,6E
01A00:  DATA 61,20
01A02:  DATA 64,65
01A04:  DATA 70,6C
01A06:  DATA 6F,79
01A08:  DATA 6D,65
01A0A:  DATA 6E,74
01A0C:  DATA 20,72
01A0E:  DATA 65,6C
01A10:  DATA 61,74
01A12:  DATA 65,64
01A14:  DATA 20,76
01A16:  DATA 61,6C
01A18:  DATA 75,65
01A1A:  DATA 73,20
01A1C:  DATA 75,70
01A1E:  DATA 64,61
01A20:  DATA 74,65
01A22:  DATA 20,63
01A24:  DATA 6F,6D
01A26:  DATA 6D,61
01A28:  DATA 6E,64
01A2A:  DATA 20,72
01A2C:  DATA 65,63
01A2E:  DATA 65,69
01A30:  DATA 76,65
01A32:  DATA 64,0A
01A34:  DATA 0D,00
01A36:  DATA 55,70
01A38:  DATA 64,61
01A3A:  DATA 74,65
01A3C:  DATA 64,20
01A3E:  DATA 61,6E
01A40:  DATA 74,65
01A42:  DATA 6E,6E
01A44:  DATA 61,20
01A46:  DATA 64,65
01A48:  DATA 70,6C
01A4A:  DATA 6F,79
01A4C:  DATA 6D,65
01A4E:  DATA 6E,74
01A50:  DATA 20,76
01A52:  DATA 61,6C
01A54:  DATA 75,65
01A56:  DATA 73,0A
01A58:  DATA 0D,00
01A5A:  DATA 41,4E
01A5C:  DATA 54,5F
01A5E:  DATA 53,45
01A60:  DATA 54,5F
01A62:  DATA 31,5F
01A64:  DATA 44,45
01A66:  DATA 50,5F
01A68:  DATA 46,4C
01A6A:  DATA 41,47
01A6C:  DATA 20,3D
01A6E:  DATA 20,25
01A70:  DATA 4C,58
01A72:  DATA 0A,0D
01A74:  DATA 00,00
01A76:  DATA 41,4E
01A78:  DATA 54,53
01A7A:  DATA 45,54
01A7C:  DATA 5F,31
01A7E:  DATA 5F,43
01A80:  DATA 4F,55
01A82:  DATA 4E,54
01A84:  DATA 20,3D
01A86:  DATA 20,25
01A88:  DATA 4C,58
01A8A:  DATA 0A,0D
01A8C:  DATA 00,00
01A8E:  DATA 41,4E
01A90:  DATA 54,5F
01A92:  DATA 53,45
01A94:  DATA 54,5F
01A96:  DATA 32,5F
01A98:  DATA 44,45
01A9A:  DATA 50,5F
01A9C:  DATA 46,4C
01A9E:  DATA 41,47
01AA0:  DATA 20,3D
01AA2:  DATA 20,25
01AA4:  DATA 4C,58
01AA6:  DATA 0A,0D
01AA8:  DATA 00,00
01AAA:  DATA 41,4E
01AAC:  DATA 54,53
01AAE:  DATA 45,54
01AB0:  DATA 5F,32
01AB2:  DATA 5F,43
01AB4:  DATA 4F,55
01AB6:  DATA 4E,54
01AB8:  DATA 20,3D
01ABA:  DATA 20,25
01ABC:  DATA 4C,58
01ABE:  DATA 0A,0D
01AC0:  DATA 00,00
01AC2:  DATA 57,72
01AC4:  DATA 6F,6E
01AC6:  DATA 20,63
01AC8:  DATA 6F,6D
01ACA:  DATA 6D,61
01ACC:  DATA 6E,64
01ACE:  DATA 20,2C
01AD0:  DATA 63,68
01AD2:  DATA 65,63
01AD4:  DATA 6B,20
01AD6:  DATA 63,6F
01AD8:  DATA 6D,6D
01ADA:  DATA 61,6E
01ADC:  DATA 64,20
01ADE:  DATA 61,67
01AE0:  DATA 61,69
01AE2:  DATA 6E,20
01AE4:  DATA 0A,0D
01AE6:  DATA 00,00
01AE8:  DATA 41,6E
01AEA:  DATA 74,65
01AEC:  DATA 6E,6E
01AEE:  DATA 61,20
01AF0:  DATA 64,65
01AF2:  DATA 70,6C
01AF4:  DATA 6F,79
01AF6:  DATA 6D,65
01AF8:  DATA 74,20
01AFA:  DATA 76,61
01AFC:  DATA 6C,75
01AFE:  DATA 65,73
01B00:  DATA 0A,0D
01B02:  DATA 00,00
01B04:  DATA 41,4E
01B06:  DATA 54,5F
01B08:  DATA 53,45
01B0A:  DATA 54,5F
01B0C:  DATA 31,5F
01B0E:  DATA 44,45
01B10:  DATA 50,5F
01B12:  DATA 46,4C
01B14:  DATA 41,47
01B16:  DATA 20,3D
01B18:  DATA 20,25
01B1A:  DATA 4C,58
01B1C:  DATA 0A,0D
01B1E:  DATA 00,00
01B20:  DATA 41,4E
01B22:  DATA 54,53
01B24:  DATA 45,54
01B26:  DATA 5F,31
01B28:  DATA 5F,43
01B2A:  DATA 4F,55
01B2C:  DATA 4E,54
01B2E:  DATA 20,3D
01B30:  DATA 20,25
01B32:  DATA 4C,58
01B34:  DATA 0A,0D
01B36:  DATA 00,00
01B38:  DATA 41,4E
01B3A:  DATA 54,5F
01B3C:  DATA 53,45
01B3E:  DATA 54,5F
01B40:  DATA 32,5F
01B42:  DATA 44,45
01B44:  DATA 50,5F
01B46:  DATA 46,4C
01B48:  DATA 41,47
01B4A:  DATA 20,3D
01B4C:  DATA 20,25
01B4E:  DATA 4C,58
01B50:  DATA 0A,0D
01B52:  DATA 00,00
01B54:  DATA 41,4E
01B56:  DATA 54,53
01B58:  DATA 45,54
01B5A:  DATA 5F,32
01B5C:  DATA 5F,43
01B5E:  DATA 4F,55
01B60:  DATA 4E,54
01B62:  DATA 20,3D
01B64:  DATA 20,25
01B66:  DATA 4C,58
01B68:  DATA 0A,0D
01B6A:  DATA 00,00
01B6C:  DATA 52,65
01B6E:  DATA 73,65
01B70:  DATA 74,20
01B72:  DATA 70,69
01B74:  DATA 63,20
01B76:  DATA 74,69
01B78:  DATA 6D,65
01B7A:  DATA 20,73
01B7C:  DATA 65,74
01B7E:  DATA 20,63
01B80:  DATA 6F,6D
01B82:  DATA 6D,61
01B84:  DATA 6E,64
01B86:  DATA 73,0A
01B88:  DATA 0D,00
01B8A:  DATA 63,6C
01B8C:  DATA 6F,73
01B8E:  DATA 65,20
01B90:  DATA 46,41
01B92:  DATA 42,20
01B94:  DATA 6B,69
01B96:  DATA 6C,6C
01B98:  DATA 20,73
01B9A:  DATA 77,69
01B9C:  DATA 74,63
01B9E:  DATA 68,20
01BA0:  DATA 63,6F
01BA2:  DATA 6D,6D
01BA4:  DATA 61,6E
01BA6:  DATA 64,20
01BA8:  DATA 66,72
01BAA:  DATA 6F,6D
01BAC:  DATA 20,64
01BAE:  DATA 65,62
01BB0:  DATA 75,67
01BB2:  DATA 0A,0D
01BB4:  DATA 00,00
01BB6:  DATA 63,6C
01BB8:  DATA 6F,73
01BBA:  DATA 65,20
01BBC:  DATA 4F,42
01BBE:  DATA 43,20
01BC0:  DATA 6B,69
01BC2:  DATA 6C,6C
01BC4:  DATA 20,73
01BC6:  DATA 77,69
01BC8:  DATA 74,63
01BCA:  DATA 68,20
01BCC:  DATA 63,6F
01BCE:  DATA 6D,6D
01BD0:  DATA 61,6E
01BD2:  DATA 64,20
01BD4:  DATA 66,72
01BD6:  DATA 6F,6D
01BD8:  DATA 20,64
01BDA:  DATA 65,62
01BDC:  DATA 75,67
01BDE:  DATA 0A,0D
01BE0:  DATA 00,00
01BE2:  DATA 4F,70
01BE4:  DATA 65,6E
01BE6:  DATA 20,46
01BE8:  DATA 41,42
01BEA:  DATA 20,6B
01BEC:  DATA 69,6C
01BEE:  DATA 6C,20
01BF0:  DATA 73,77
01BF2:  DATA 69,74
01BF4:  DATA 63,68
01BF6:  DATA 20,63
01BF8:  DATA 6F,6D
01BFA:  DATA 6D,61
01BFC:  DATA 6E,64
01BFE:  DATA 20,66
01C00:  DATA 72,6F
01C02:  DATA 6D,20
01C04:  DATA 64,65
01C06:  DATA 62,75
01C08:  DATA 67,0A
01C0A:  DATA 0D,00
01C0C:  DATA 4F,70
01C0E:  DATA 65,6E
01C10:  DATA 20,4F
01C12:  DATA 42,43
01C14:  DATA 20,6B
01C16:  DATA 69,6C
01C18:  DATA 6C,20
01C1A:  DATA 73,77
01C1C:  DATA 69,74
01C1E:  DATA 63,68
01C20:  DATA 20,63
01C22:  DATA 6F,6D
01C24:  DATA 6D,61
01C26:  DATA 6E,64
01C28:  DATA 20,66
01C2A:  DATA 72,6F
01C2C:  DATA 6D,20
01C2E:  DATA 64,65
01C30:  DATA 62,75
01C32:  DATA 67,0A
01C34:  DATA 0D,00
01C36:  DATA 50,6F
01C38:  DATA 77,65
01C3A:  DATA 72,20
01C3C:  DATA 6C,69
01C3E:  DATA 6E,65
01C40:  DATA 20,63
01C42:  DATA 6F,6E
01C44:  DATA 74,72
01C46:  DATA 6F,6C
01C48:  DATA 20,75
01C4A:  DATA 73,69
01C4C:  DATA 6E,67
01C4E:  DATA 20,6D
01C50:  DATA 61,69
01C52:  DATA 6E,20
01C54:  DATA 70,69
01C56:  DATA 63,20
01C58:  DATA 63,6F
01C5A:  DATA 6D,6D
01C5C:  DATA 61,6E
01C5E:  DATA 64,20
01C60:  DATA 74,6F
01C62:  DATA 20,72
01C64:  DATA 65,73
01C66:  DATA 65,74
01C68:  DATA 20,70
01C6A:  DATA 69,63
01C6C:  DATA 0A,0D
01C6E:  DATA 00,00
01C70:  DATA 52,65
01C72:  DATA 73,65
01C74:  DATA 74,20
01C76:  DATA 70,69
01C78:  DATA 63,20
01C7A:  DATA 70,6F
01C7C:  DATA 77,65
01C7E:  DATA 72,20
01C80:  DATA 6C,69
01C82:  DATA 6E,65
01C84:  DATA 20,63
01C86:  DATA 6F,6E
01C88:  DATA 74,72
01C8A:  DATA 6F,6C
01C8C:  DATA 6C,65
01C8E:  DATA 64,0A
01C90:  DATA 0D,00
01C92:  DATA 52,65
01C94:  DATA 73,65
01C96:  DATA 74,20
01C98:  DATA 70,69
01C9A:  DATA 63,20
01C9C:  DATA 64,69
01C9E:  DATA 64,20
01CA0:  DATA 6E,6F
01CA2:  DATA 74,20
01CA4:  DATA 72,65
01CA6:  DATA 73,70
01CA8:  DATA 6F,6E
01CAA:  DATA 64,0A
01CAC:  DATA 0D,00
01CAE:  DATA 52,65
01CB0:  DATA 73,65
01CB2:  DATA 74,20
01CB4:  DATA 73,61
01CB6:  DATA 74,65
01CB8:  DATA 6C,6C
01CBA:  DATA 69,74
01CBC:  DATA 65,20
01CBE:  DATA 63,6F
01CC0:  DATA 6D,6D
01CC2:  DATA 61,6E
01CC4:  DATA 64,20
01CC6:  DATA 66,72
01CC8:  DATA 6F,6D
01CCA:  DATA 20,64
01CCC:  DATA 65,62
01CCE:  DATA 75,67
01CD0:  DATA 20,0A
01CD2:  DATA 0D,00
01CD4:  DATA 52,65
01CD6:  DATA 73,65
01CD8:  DATA 74,20
01CDA:  DATA 70,69
01CDC:  DATA 63,20
01CDE:  DATA 72,65
01CE0:  DATA 73,65
01CE2:  DATA 74,20
01CE4:  DATA 73,61
01CE6:  DATA 74,65
01CE8:  DATA 6C,6C
01CEA:  DATA 69,74
01CEC:  DATA 65,20
01CEE:  DATA 0A,0D
01CF0:  DATA 00,00
01CF2:  DATA 43,6F
01CF4:  DATA 6D,50
01CF6:  DATA 69,63
01CF8:  DATA 20,63
01CFA:  DATA 6F,6D
01CFC:  DATA 6D,61
01CFE:  DATA 6E,64
01D00:  DATA 20,72
01D02:  DATA 65,63
01D04:  DATA 65,69
01D06:  DATA 76,65
01D08:  DATA 64,20
01D0A:  DATA 66,72
01D0C:  DATA 6F,6D
01D0E:  DATA 20,50
01D10:  DATA 43,20
01D12:  DATA 0A,0D
01D14:  DATA 00,00
01D16:  DATA 52,65
01D18:  DATA 61,64
01D1A:  DATA 20,46
01D1C:  DATA 4D,20
01D1E:  DATA 64,61
01D20:  DATA 74,61
01D22:  DATA 20,63
01D24:  DATA 6F,6D
01D26:  DATA 6D,61
01D28:  DATA 6E,64
01D2A:  DATA 00,00
01D2C:  DATA 4E,75
01D2E:  DATA 6D,20
01D30:  DATA 6F,66
01D32:  DATA 20,42
01D34:  DATA 79,74
01D36:  DATA 65,73
01D38:  DATA 20,3D
01D3A:  DATA 20,25
01D3C:  DATA 6C,75
01D3E:  DATA 20,00
01D40:  DATA 52,65
01D42:  DATA 61,64
01D44:  DATA 20,43
01D46:  DATA 4F,4D
01D48:  DATA 20,46
01D4A:  DATA 4D,20
01D4C:  DATA 0A,0D
01D4E:  DATA 00,00
01D50:  DATA 52,65
01D52:  DATA 61,64
01D54:  DATA 20,4D
01D56:  DATA 61,69
01D58:  DATA 6E,20
01D5A:  DATA 46,4D
01D5C:  DATA 20,0A
01D5E:  DATA 0D,00
01D60:  DATA 4E,75
01D62:  DATA 6D,20
01D64:  DATA 6F,66
01D66:  DATA 20,42
01D68:  DATA 79,74
01D6A:  DATA 65,73
01D6C:  DATA 20,3D
01D6E:  DATA 20,25
01D70:  DATA 6C,75
01D72:  DATA 20,00
01D74:  DATA 52,65
01D76:  DATA 61,64
01D78:  DATA 20,4D
01D7A:  DATA 53,4E
01D7C:  DATA 20,46
01D7E:  DATA 4D,0A
01D80:  DATA 0D,00
01D82:  DATA 4D,61
01D84:  DATA 69,6E
01D86:  DATA 50,49
01D88:  DATA 43,20
01D8A:  DATA 62,6F
01D8C:  DATA 6F,74
01D8E:  DATA 69,6E
01D90:  DATA 67,2E
01D92:  DATA 2E,2E
01D94:  DATA 2E,2E
01D96:  DATA 2E,2E
01D98:  DATA 2E,2E
01D9A:  DATA 2E,2E
01D9C:  DATA 0A,0D
01D9E:  DATA 00,00
*
01DF4:  MOVLB  4
01DF6:  MOVF   x48,W
01DF8:  CLRF   01
01DFA:  SUBWF  x47,W
01DFC:  BC    1E04
01DFE:  MOVFF  447,00
01E02:  BRA    1E1C
01E04:  CLRF   00
01E06:  MOVLW  08
01E08:  MOVWF  x49
01E0A:  RLCF   x47,F
01E0C:  RLCF   00,F
01E0E:  MOVF   x48,W
01E10:  SUBWF  00,W
01E12:  BTFSC  FD8.0
01E14:  MOVWF  00
01E16:  RLCF   01,F
01E18:  DECFSZ x49,F
01E1A:  BRA    1E0A
01E1C:  MOVLB  0
01E1E:  RETURN 0
*
02068:  TBLRD*+
0206A:  MOVF   FF5,F
0206C:  BZ    2090
0206E:  MOVFF  FF6,43D
02072:  MOVFF  FF7,43E
02076:  MOVFF  FF8,43F
0207A:  MOVF   FF5,W
0207C:  BTFSS  F9E.4
0207E:  BRA    207C
02080:  MOVWF  FAD
02082:  MOVFF  43D,FF6
02086:  MOVFF  43E,FF7
0208A:  MOVFF  43F,FF8
0208E:  BRA    2068
02090:  RETURN 0
*
020A4:  TBLRD*+
020A6:  MOVFF  FF6,43E
020AA:  MOVFF  FF7,43F
020AE:  MOVFF  FF8,440
020B2:  MOVF   FF5,W
020B4:  BTFSS  F9E.4
020B6:  BRA    20B4
020B8:  MOVWF  FAD
020BA:  MOVFF  43E,FF6
020BE:  MOVFF  43F,FF7
020C2:  MOVFF  440,FF8
020C6:  MOVLB  4
020C8:  DECFSZ x3D,F
020CA:  BRA    20CE
020CC:  BRA    20D2
020CE:  MOVLB  0
020D0:  BRA    20A4
020D2:  MOVLB  0
020D4:  RETURN 0
020D6:  MOVLB  4
020D8:  BTFSC  x3F.7
020DA:  BRA    20FC
020DC:  MOVLW  0F
020DE:  MOVWF  00
020E0:  SWAPF  x3E,W
020E2:  ANDWF  00,F
020E4:  MOVLW  0A
020E6:  SUBWF  00,W
020E8:  BC    20F0
020EA:  MOVLW  30
020EC:  ADDWF  00,F
020EE:  BRA    20F4
020F0:  MOVF   x3F,W
020F2:  ADDWF  00,F
020F4:  MOVF   00,W
020F6:  BTFSS  F9E.4
020F8:  BRA    20F6
020FA:  MOVWF  FAD
020FC:  MOVLW  0F
020FE:  ANDWF  x3E,F
02100:  MOVLW  0A
02102:  SUBWF  x3E,W
02104:  BC    210A
02106:  MOVLW  30
02108:  BRA    210E
0210A:  BCF    x3F.7
0210C:  MOVF   x3F,W
0210E:  ADDWF  x3E,F
02110:  MOVF   x3E,W
02112:  BTFSS  F9E.4
02114:  BRA    2112
02116:  MOVWF  FAD
02118:  MOVLB  0
0211A:  RETURN 0
*
029CE:  MOVF   01,W
029D0:  MOVFF  43C,447
029D4:  MOVLW  64
029D6:  MOVLB  4
029D8:  MOVWF  x48
029DA:  MOVLB  0
029DC:  CALL   1DF4
029E0:  MOVFF  00,43C
029E4:  MOVF   01,W
029E6:  MOVLW  30
029E8:  BNZ   29FA
029EA:  MOVLB  4
029EC:  BTFSS  x3D.1
029EE:  BRA    2A0C
029F0:  BTFSC  x3D.3
029F2:  BRA    2A0C
029F4:  BTFSC  x3D.4
029F6:  MOVLW  20
029F8:  BRA    2A02
029FA:  MOVLB  4
029FC:  BCF    x3D.3
029FE:  BCF    x3D.4
02A00:  BSF    x3D.0
02A02:  ADDWF  01,F
02A04:  MOVF   01,W
02A06:  BTFSS  F9E.4
02A08:  BRA    2A06
02A0A:  MOVWF  FAD
02A0C:  MOVFF  43C,447
02A10:  MOVLW  0A
02A12:  MOVWF  x48
02A14:  MOVLB  0
02A16:  CALL   1DF4
02A1A:  MOVFF  00,43C
02A1E:  MOVF   01,W
02A20:  MOVLW  30
02A22:  BNZ   2A34
02A24:  MOVLB  4
02A26:  BTFSC  x3D.3
02A28:  BRA    2A40
02A2A:  BTFSS  x3D.0
02A2C:  BRA    2A40
02A2E:  BTFSC  x3D.4
02A30:  MOVLW  20
02A32:  MOVLB  0
02A34:  ADDWF  01,F
02A36:  MOVF   01,W
02A38:  BTFSS  F9E.4
02A3A:  BRA    2A38
02A3C:  MOVWF  FAD
02A3E:  MOVLB  4
02A40:  MOVLW  30
02A42:  ADDWF  x3C,F
02A44:  MOVF   x3C,W
02A46:  BTFSS  F9E.4
02A48:  BRA    2A46
02A4A:  MOVWF  FAD
02A4C:  MOVLB  0
02A4E:  RETURN 0
*
02CC0:  MOVWF  00
02CC2:  SWAPF  00,W
02CC4:  ANDLW  0F
02CC6:  MULLW  0A
02CC8:  MOVF   00,W
02CCA:  ANDLW  0F
02CCC:  ADDWF  FF3,W
02CCE:  RETURN 0
02CD0:  RETURN 0
02CD2:  MOVFF  FEA,43D
02CD6:  MOVFF  FE9,43C
02CDA:  MOVLB  4
02CDC:  SWAPF  x36,W
02CDE:  IORLW  F0
02CE0:  MOVWF  x38
02CE2:  ADDWF  x38,F
02CE4:  ADDLW  E2
02CE6:  MOVWF  x39
02CE8:  ADDLW  32
02CEA:  MOVWF  x3B
02CEC:  MOVF   x36,W
02CEE:  ANDLW  0F
02CF0:  ADDWF  x39,F
02CF2:  ADDWF  x39,F
02CF4:  ADDWF  x3B,F
02CF6:  ADDLW  E9
02CF8:  MOVWF  x3A
02CFA:  ADDWF  x3A,F
02CFC:  ADDWF  x3A,F
02CFE:  SWAPF  x35,W
02D00:  ANDLW  0F
02D02:  ADDWF  x3A,F
02D04:  ADDWF  x3B,F
02D06:  RLCF   x3A,F
02D08:  RLCF   x3B,F
02D0A:  COMF   x3B,F
02D0C:  RLCF   x3B,F
02D0E:  MOVF   x35,W
02D10:  ANDLW  0F
02D12:  ADDWF  x3B,F
02D14:  RLCF   x38,F
02D16:  MOVLW  07
02D18:  MOVWF  x37
02D1A:  MOVLW  0A
02D1C:  DECF   x3A,F
02D1E:  ADDWF  x3B,F
02D20:  BNC   2D1C
02D22:  DECF   x39,F
02D24:  ADDWF  x3A,F
02D26:  BNC   2D22
02D28:  DECF   x38,F
02D2A:  ADDWF  x39,F
02D2C:  BNC   2D28
02D2E:  DECF   x37,F
02D30:  ADDWF  x38,F
02D32:  BNC   2D2E
02D34:  MOVLW  04
02D36:  MOVWF  FEA
02D38:  MOVLW  37
02D3A:  MOVWF  FE9
02D3C:  MOVLW  07
02D3E:  ANDWF  x3C,W
02D40:  BCF    x3C.6
02D42:  ADDWF  FE9,F
02D44:  MOVLW  00
02D46:  ADDWFC FEA,F
02D48:  MOVF   FE9,W
02D4A:  SUBLW  3B
02D4C:  BNZ   2D56
02D4E:  MOVF   FEA,W
02D50:  SUBLW  04
02D52:  BNZ   2D56
02D54:  BSF    x3C.6
02D56:  MOVF   FEF,W
02D58:  MOVWF  00
02D5A:  BNZ   2D6C
02D5C:  BTFSC  x3C.6
02D5E:  BRA    2D6C
02D60:  BTFSC  x3C.4
02D62:  BRA    2D7C
02D64:  BTFSC  x3C.3
02D66:  BRA    2D6C
02D68:  MOVLW  20
02D6A:  BRA    2D72
02D6C:  BSF    x3C.3
02D6E:  BCF    x3C.4
02D70:  MOVLW  30
02D72:  ADDWF  00,F
02D74:  MOVF   00,W
02D76:  BTFSS  F9E.4
02D78:  BRA    2D76
02D7A:  MOVWF  FAD
02D7C:  MOVF   FEE,W
02D7E:  BTFSS  x3C.6
02D80:  BRA    2D48
02D82:  MOVLB  0
02D84:  RETURN 0
*
02F74:  MOVLW  20
02F76:  MOVLB  4
02F78:  BTFSS  x3E.4
02F7A:  MOVLW  30
02F7C:  MOVWF  x3F
02F7E:  MOVFF  43D,00
02F82:  BTFSS  00.7
02F84:  BRA    2F96
02F86:  COMF   00,F
02F88:  INCF   00,F
02F8A:  MOVFF  00,43D
02F8E:  MOVLW  2D
02F90:  MOVWF  x3F
02F92:  BSF    x3E.7
02F94:  BSF    x3E.0
02F96:  MOVF   01,W
02F98:  MOVFF  43D,447
02F9C:  MOVLW  64
02F9E:  MOVWF  x48
02FA0:  MOVLB  0
02FA2:  CALL   1DF4
02FA6:  MOVFF  00,43D
02FAA:  MOVLW  30
02FAC:  ADDWF  01,W
02FAE:  MOVLB  4
02FB0:  MOVWF  x40
02FB2:  MOVFF  43D,447
02FB6:  MOVLW  0A
02FB8:  MOVWF  x48
02FBA:  MOVLB  0
02FBC:  CALL   1DF4
02FC0:  MOVLW  30
02FC2:  ADDWF  00,W
02FC4:  MOVLB  4
02FC6:  MOVWF  x42
02FC8:  MOVLW  30
02FCA:  ADDWF  01,W
02FCC:  MOVWF  x41
02FCE:  MOVFF  43F,00
02FD2:  MOVLW  30
02FD4:  SUBWF  x40,W
02FD6:  BZ    2FE0
02FD8:  BSF    x3E.1
02FDA:  BTFSC  x3E.7
02FDC:  BSF    x3E.2
02FDE:  BRA    3004
02FE0:  MOVFF  43F,440
02FE4:  MOVLW  20
02FE6:  MOVWF  x3F
02FE8:  MOVLW  30
02FEA:  SUBWF  x41,W
02FEC:  BZ    2FF6
02FEE:  BSF    x3E.0
02FF0:  BTFSC  x3E.7
02FF2:  BSF    x3E.1
02FF4:  BRA    3004
02FF6:  BTFSS  FD8.2
02FF8:  BSF    x3E.0
02FFA:  BNZ   3004
02FFC:  MOVFF  440,441
03000:  MOVLW  20
03002:  MOVWF  x40
03004:  BTFSC  x3E.2
03006:  BRA    3012
03008:  BTFSC  x3E.1
0300A:  BRA    301A
0300C:  BTFSC  x3E.0
0300E:  BRA    3022
03010:  BRA    302A
03012:  MOVF   x3F,W
03014:  BTFSS  F9E.4
03016:  BRA    3014
03018:  MOVWF  FAD
0301A:  MOVF   x40,W
0301C:  BTFSS  F9E.4
0301E:  BRA    301C
03020:  MOVWF  FAD
03022:  MOVF   x41,W
03024:  BTFSS  F9E.4
03026:  BRA    3024
03028:  MOVWF  FAD
0302A:  MOVF   x42,W
0302C:  BTFSS  F9E.4
0302E:  BRA    302C
03030:  MOVWF  FAD
03032:  MOVLB  0
03034:  RETURN 0
*
03242:  MOVLW  20
03244:  MOVLB  4
03246:  BTFSS  x0A.4
03248:  MOVLW  30
0324A:  MOVWF  x0B
0324C:  MOVFF  409,00
03250:  BTFSS  00.7
03252:  BRA    3264
03254:  COMF   00,F
03256:  INCF   00,F
03258:  MOVFF  00,409
0325C:  MOVLW  2D
0325E:  MOVWF  x0B
03260:  BSF    x0A.7
03262:  BSF    x0A.0
03264:  MOVF   01,W
03266:  MOVFF  409,447
0326A:  MOVLW  64
0326C:  MOVWF  x48
0326E:  MOVLB  0
03270:  CALL   1DF4
03274:  MOVFF  00,409
03278:  MOVLW  30
0327A:  ADDWF  01,W
0327C:  MOVLB  4
0327E:  MOVWF  x0C
03280:  MOVFF  409,447
03284:  MOVLW  0A
03286:  MOVWF  x48
03288:  MOVLB  0
0328A:  CALL   1DF4
0328E:  MOVLW  30
03290:  ADDWF  00,W
03292:  MOVLB  4
03294:  MOVWF  x0E
03296:  MOVLW  30
03298:  ADDWF  01,W
0329A:  MOVWF  x0D
0329C:  MOVFF  40B,00
032A0:  MOVLW  30
032A2:  SUBWF  x0C,W
032A4:  BZ    32AE
032A6:  BSF    x0A.1
032A8:  BTFSC  x0A.7
032AA:  BSF    x0A.2
032AC:  BRA    32D2
032AE:  BTFSC  x0A.2
032B0:  BRA    32D2
032B2:  MOVFF  40B,40C
032B6:  BTFSC  x0A.1
032B8:  BRA    32C2
032BA:  MOVLW  30
032BC:  SUBWF  x0D,W
032BE:  BZ    32C8
032C0:  BSF    x0A.0
032C2:  BTFSC  x0A.7
032C4:  BSF    x0A.1
032C6:  BRA    32D2
032C8:  BTFSS  FD8.2
032CA:  BSF    x0A.0
032CC:  BTFSC  FD8.2
032CE:  MOVFF  40C,40D
032D2:  BTFSC  x0A.2
032D4:  BRA    32E0
032D6:  BTFSC  x0A.1
032D8:  BRA    32E8
032DA:  BTFSC  x0A.0
032DC:  BRA    32F0
032DE:  BRA    32F8
032E0:  MOVF   x0B,W
032E2:  BTFSS  F9E.4
032E4:  BRA    32E2
032E6:  MOVWF  FAD
032E8:  MOVF   x0C,W
032EA:  BTFSS  F9E.4
032EC:  BRA    32EA
032EE:  MOVWF  FAD
032F0:  MOVF   x0D,W
032F2:  BTFSS  F9E.4
032F4:  BRA    32F2
032F6:  MOVWF  FAD
032F8:  MOVF   x0E,W
032FA:  BTFSS  F9E.4
032FC:  BRA    32FA
032FE:  MOVWF  FAD
03300:  MOVLB  0
03302:  RETURN 0
03304:  MOVF   FF2,W
03306:  MOVWF  03
03308:  BCF    FF2.7
0330A:  BSF    F7F.2
0330C:  MOVLB  F
0330E:  MOVLW  55
03310:  MOVWF  F7E
03312:  MOVLW  AA
03314:  MOVWF  F7E
03316:  BSF    F7F.1
03318:  NOP   
0331A:  MOVF   03,W
0331C:  IORWF  FF2,F
0331E:  MOVLB  0
03320:  RETURN 0
03322:  MOVLW  C0
03324:  ANDWF  FF6,F
03326:  MOVLW  3F
03328:  MOVWF  00
0332A:  TBLRD*
0332C:  TBLWT*+
0332E:  DECFSZ 00,F
03330:  BRA    332A
03332:  TBLRD*
03334:  TBLWT*
03336:  RETURN 0
*
0431C:  BTFSC  FD8.1
0431E:  BRA    4328
04320:  MOVLW  04
04322:  MOVWF  FEA
04324:  MOVLW  4B
04326:  MOVWF  FE9
04328:  CLRF   00
0432A:  CLRF   01
0432C:  CLRF   02
0432E:  CLRF   03
04330:  MOVLB  4
04332:  CLRF   x4B
04334:  CLRF   x4C
04336:  CLRF   x4D
04338:  CLRF   x4E
0433A:  MOVF   x4A,W
0433C:  IORWF  x49,W
0433E:  IORWF  x48,W
04340:  IORWF  x47,W
04342:  BZ    439C
04344:  MOVLW  20
04346:  MOVWF  x4F
04348:  BCF    FD8.0
0434A:  RLCF   x43,F
0434C:  RLCF   x44,F
0434E:  RLCF   x45,F
04350:  RLCF   x46,F
04352:  RLCF   x4B,F
04354:  RLCF   x4C,F
04356:  RLCF   x4D,F
04358:  RLCF   x4E,F
0435A:  MOVF   x4A,W
0435C:  SUBWF  x4E,W
0435E:  BNZ   4370
04360:  MOVF   x49,W
04362:  SUBWF  x4D,W
04364:  BNZ   4370
04366:  MOVF   x48,W
04368:  SUBWF  x4C,W
0436A:  BNZ   4370
0436C:  MOVF   x47,W
0436E:  SUBWF  x4B,W
04370:  BNC   4390
04372:  MOVF   x47,W
04374:  SUBWF  x4B,F
04376:  MOVF   x48,W
04378:  BTFSS  FD8.0
0437A:  INCFSZ x48,W
0437C:  SUBWF  x4C,F
0437E:  MOVF   x49,W
04380:  BTFSS  FD8.0
04382:  INCFSZ x49,W
04384:  SUBWF  x4D,F
04386:  MOVF   x4A,W
04388:  BTFSS  FD8.0
0438A:  INCFSZ x4A,W
0438C:  SUBWF  x4E,F
0438E:  BSF    FD8.0
04390:  RLCF   00,F
04392:  RLCF   01,F
04394:  RLCF   02,F
04396:  RLCF   03,F
04398:  DECFSZ x4F,F
0439A:  BRA    4348
0439C:  MOVFF  44B,FEF
043A0:  MOVFF  44C,FEC
043A4:  MOVFF  44D,FEC
043A8:  MOVFF  44E,FEC
043AC:  MOVLB  0
043AE:  RETURN 0
043B0:  MOVF   FE9,W
043B2:  MOVLB  4
043B4:  MOVWF  x3B
043B6:  MOVLW  3B
043B8:  MOVWF  x42
043BA:  MOVLW  9A
043BC:  MOVWF  x41
043BE:  MOVLW  CA
043C0:  MOVWF  x40
043C2:  CLRF   x3F
043C4:  MOVLW  0A
043C6:  MOVWF  x3D
043C8:  BSF    FD8.1
043CA:  MOVLW  04
043CC:  MOVWF  FEA
043CE:  MOVLW  37
043D0:  MOVWF  FE9
043D2:  MOVFF  43A,446
043D6:  MOVFF  439,445
043DA:  MOVFF  438,444
043DE:  MOVFF  437,443
043E2:  MOVFF  442,44A
043E6:  MOVFF  441,449
043EA:  MOVFF  440,448
043EE:  MOVFF  43F,447
043F2:  MOVLB  0
043F4:  RCALL  431C
043F6:  MOVF   01,W
043F8:  MOVF   00,F
043FA:  BNZ   4422
043FC:  MOVLB  4
043FE:  MOVF   x3D,W
04400:  XORLW  01
04402:  BTFSS  FD8.2
04404:  BRA    440A
04406:  MOVLB  0
04408:  BRA    4422
0440A:  MOVF   x3B,W
0440C:  BZ    4426
0440E:  ANDLW  0F
04410:  SUBWF  x3D,W
04412:  BZ    4416
04414:  BC    4432
04416:  BTFSC  x3B.7
04418:  BRA    4432
0441A:  BTFSC  x3B.6
0441C:  BRA    4426
0441E:  MOVLW  20
04420:  BRA    4428
04422:  MOVLB  4
04424:  CLRF   x3B
04426:  MOVLW  30
04428:  ADDWF  00,F
0442A:  MOVF   00,W
0442C:  BTFSS  F9E.4
0442E:  BRA    442C
04430:  MOVWF  FAD
04432:  BCF    FD8.1
04434:  MOVFF  442,446
04438:  MOVFF  441,445
0443C:  MOVFF  440,444
04440:  MOVFF  43F,443
04444:  CLRF   x4A
04446:  CLRF   x49
04448:  CLRF   x48
0444A:  MOVLW  0A
0444C:  MOVWF  x47
0444E:  MOVLB  0
04450:  RCALL  431C
04452:  MOVFF  03,442
04456:  MOVFF  02,441
0445A:  MOVFF  01,440
0445E:  MOVFF  00,43F
04462:  MOVLB  4
04464:  DECFSZ x3D,F
04466:  BRA    43C8
04468:  MOVLB  0
0446A:  RETURN 0
*
04580:  MOVF   FE9,W
04582:  MOVLB  4
04584:  MOVWF  x3B
04586:  BTFSS  x3A.7
04588:  BRA    45A4
0458A:  DECF   x3B,F
0458C:  BSF    x3B.5
0458E:  COMF   x37,F
04590:  COMF   x38,F
04592:  COMF   x39,F
04594:  COMF   x3A,F
04596:  INCF   x37,F
04598:  BTFSC  FD8.2
0459A:  INCF   x38,F
0459C:  BTFSC  FD8.2
0459E:  INCF   x39,F
045A0:  BTFSC  FD8.2
045A2:  INCF   x3A,F
045A4:  MOVLW  3B
045A6:  MOVWF  x42
045A8:  MOVLW  9A
045AA:  MOVWF  x41
045AC:  MOVLW  CA
045AE:  MOVWF  x40
045B0:  CLRF   x3F
045B2:  MOVLW  0A
045B4:  MOVWF  x3D
045B6:  BSF    FD8.1
045B8:  MOVLW  04
045BA:  MOVWF  FEA
045BC:  MOVLW  37
045BE:  MOVWF  FE9
045C0:  MOVFF  43A,446
045C4:  MOVFF  439,445
045C8:  MOVFF  438,444
045CC:  MOVFF  437,443
045D0:  MOVFF  442,44A
045D4:  MOVFF  441,449
045D8:  MOVFF  440,448
045DC:  MOVFF  43F,447
045E0:  MOVLB  0
045E2:  RCALL  431C
045E4:  MOVF   01,W
045E6:  MOVF   00,F
045E8:  BNZ   4610
045EA:  MOVLB  4
045EC:  MOVF   x3D,W
045EE:  XORLW  01
045F0:  BTFSS  FD8.2
045F2:  BRA    45F8
045F4:  MOVLB  0
045F6:  BRA    4610
045F8:  MOVF   x3B,W
045FA:  BZ    4616
045FC:  ANDLW  0F
045FE:  SUBWF  x3D,W
04600:  BZ    4604
04602:  BC    4654
04604:  BTFSC  x3B.7
04606:  BRA    4654
04608:  BTFSC  x3B.6
0460A:  BRA    4616
0460C:  MOVLW  20
0460E:  BRA    464A
04610:  MOVLW  20
04612:  MOVLB  4
04614:  ANDWF  x3B,F
04616:  BTFSS  x3B.5
04618:  BRA    462E
0461A:  BCF    x3B.5
0461C:  MOVFF  00,43B
04620:  MOVLW  2D
04622:  BTFSS  F9E.4
04624:  BRA    4622
04626:  MOVWF  FAD
04628:  MOVFF  43B,00
0462C:  CLRF   x3B
0462E:  MOVLW  30
04630:  BTFSS  x3B.5
04632:  BRA    464A
04634:  BCF    x3B.5
04636:  MOVFF  00,43B
0463A:  MOVLW  2D
0463C:  BTFSS  F9E.4
0463E:  BRA    463C
04640:  MOVWF  FAD
04642:  MOVFF  43B,00
04646:  CLRF   x3B
04648:  MOVLW  30
0464A:  ADDWF  00,F
0464C:  MOVF   00,W
0464E:  BTFSS  F9E.4
04650:  BRA    464E
04652:  MOVWF  FAD
04654:  BCF    FD8.1
04656:  MOVFF  442,446
0465A:  MOVFF  441,445
0465E:  MOVFF  440,444
04662:  MOVFF  43F,443
04666:  CLRF   x4A
04668:  CLRF   x49
0466A:  CLRF   x48
0466C:  MOVLW  0A
0466E:  MOVWF  x47
04670:  MOVLB  0
04672:  RCALL  431C
04674:  MOVFF  03,442
04678:  MOVFF  02,441
0467C:  MOVFF  01,440
04680:  MOVFF  00,43F
04684:  MOVLB  4
04686:  DECFSZ x3D,F
04688:  BRA    45B6
0468A:  MOVLB  0
0468C:  RETURN 0
0468E:  MOVLB  4
04690:  CLRF   x3B
04692:  CLRF   x3C
04694:  MOVLW  01
04696:  MOVWF  x3D
04698:  CLRF   FDA
0469A:  CLRF   FD9
0469C:  MOVLW  04
0469E:  MOVWF  x40
046A0:  MOVLW  33
046A2:  MOVWF  x3F
046A4:  MOVLW  04
046A6:  MOVWF  FEA
046A8:  MOVLW  37
046AA:  MOVWF  FE9
046AC:  MOVFF  440,FE2
046B0:  MOVFF  43F,FE1
046B4:  MOVFF  43D,43E
046B8:  BCF    FD8.0
046BA:  MOVF   FE5,W
046BC:  MULWF  FEE
046BE:  MOVF   FF3,W
046C0:  ADDWFC x3B,F
046C2:  MOVF   FF4,W
046C4:  ADDWFC x3C,F
046C6:  DECFSZ x3E,F
046C8:  BRA    46B8
046CA:  MOVFF  43B,FDE
046CE:  MOVFF  43C,43B
046D2:  CLRF   x3C
046D4:  BTFSC  FD8.0
046D6:  INCF   x3C,F
046D8:  INCF   x3F,F
046DA:  BTFSC  FD8.2
046DC:  INCF   x40,F
046DE:  INCF   x3D,F
046E0:  MOVF   x3D,W
046E2:  SUBLW  05
046E4:  BNZ   46A4
046E6:  MOVLB  0
046E8:  RETURN 0
*
04A88:  MOVLW  8E
04A8A:  MOVWF  00
04A8C:  MOVFF  434,01
04A90:  MOVFF  433,02
04A94:  CLRF   03
04A96:  MOVF   01,F
04A98:  BNZ   4AAC
04A9A:  MOVFF  02,01
04A9E:  CLRF   02
04AA0:  MOVLW  08
04AA2:  SUBWF  00,F
04AA4:  MOVF   01,F
04AA6:  BNZ   4AAC
04AA8:  CLRF   00
04AAA:  BRA    4ABC
04AAC:  BCF    FD8.0
04AAE:  BTFSC  01.7
04AB0:  BRA    4ABA
04AB2:  RLCF   02,F
04AB4:  RLCF   01,F
04AB6:  DECF   00,F
04AB8:  BRA    4AAC
04ABA:  BCF    01.7
04ABC:  RETURN 0
04ABE:  MOVLB  4
04AC0:  MOVF   x40,W
04AC2:  BTFSC  FD8.2
04AC4:  BRA    4BA8
04AC6:  MOVWF  00
04AC8:  MOVF   x44,W
04ACA:  BTFSC  FD8.2
04ACC:  BRA    4BA8
04ACE:  ADDWF  00,F
04AD0:  BNC   4ADA
04AD2:  MOVLW  81
04AD4:  ADDWF  00,F
04AD6:  BC    4BA8
04AD8:  BRA    4AE2
04ADA:  MOVLW  7F
04ADC:  SUBWF  00,F
04ADE:  BNC   4BA8
04AE0:  BZ    4BA8
04AE2:  MOVFF  441,448
04AE6:  MOVF   x45,W
04AE8:  XORWF  x48,F
04AEA:  BSF    x41.7
04AEC:  BSF    x45.7
04AEE:  MOVF   x43,W
04AF0:  MULWF  x47
04AF2:  MOVFF  FF4,44A
04AF6:  MOVF   x42,W
04AF8:  MULWF  x46
04AFA:  MOVFF  FF4,03
04AFE:  MOVFF  FF3,449
04B02:  MULWF  x47
04B04:  MOVF   FF3,W
04B06:  ADDWF  x4A,F
04B08:  MOVF   FF4,W
04B0A:  ADDWFC x49,F
04B0C:  MOVLW  00
04B0E:  ADDWFC 03,F
04B10:  MOVF   x43,W
04B12:  MULWF  x46
04B14:  MOVF   FF3,W
04B16:  ADDWF  x4A,F
04B18:  MOVF   FF4,W
04B1A:  ADDWFC x49,F
04B1C:  MOVLW  00
04B1E:  CLRF   02
04B20:  ADDWFC 03,F
04B22:  ADDWFC 02,F
04B24:  MOVF   x41,W
04B26:  MULWF  x47
04B28:  MOVF   FF3,W
04B2A:  ADDWF  x49,F
04B2C:  MOVF   FF4,W
04B2E:  ADDWFC 03,F
04B30:  MOVLW  00
04B32:  ADDWFC 02,F
04B34:  MOVF   x41,W
04B36:  MULWF  x46
04B38:  MOVF   FF3,W
04B3A:  ADDWF  03,F
04B3C:  MOVF   FF4,W
04B3E:  ADDWFC 02,F
04B40:  MOVLW  00
04B42:  CLRF   01
04B44:  ADDWFC 01,F
04B46:  MOVF   x43,W
04B48:  MULWF  x45
04B4A:  MOVF   FF3,W
04B4C:  ADDWF  x49,F
04B4E:  MOVF   FF4,W
04B50:  ADDWFC 03,F
04B52:  MOVLW  00
04B54:  ADDWFC 02,F
04B56:  ADDWFC 01,F
04B58:  MOVF   x42,W
04B5A:  MULWF  x45
04B5C:  MOVF   FF3,W
04B5E:  ADDWF  03,F
04B60:  MOVF   FF4,W
04B62:  ADDWFC 02,F
04B64:  MOVLW  00
04B66:  ADDWFC 01,F
04B68:  MOVF   x41,W
04B6A:  MULWF  x45
04B6C:  MOVF   FF3,W
04B6E:  ADDWF  02,F
04B70:  MOVF   FF4,W
04B72:  ADDWFC 01,F
04B74:  INCF   00,F
04B76:  BTFSC  01.7
04B78:  BRA    4B84
04B7A:  RLCF   x49,F
04B7C:  RLCF   03,F
04B7E:  RLCF   02,F
04B80:  RLCF   01,F
04B82:  DECF   00,F
04B84:  MOVLW  00
04B86:  BTFSS  x49.7
04B88:  BRA    4B9E
04B8A:  INCF   03,F
04B8C:  ADDWFC 02,F
04B8E:  ADDWFC 01,F
04B90:  MOVF   01,W
04B92:  BNZ   4B9E
04B94:  MOVF   02,W
04B96:  BNZ   4B9E
04B98:  MOVF   03,W
04B9A:  BNZ   4B9E
04B9C:  INCF   00,F
04B9E:  BTFSC  x48.7
04BA0:  BSF    01.7
04BA2:  BTFSS  x48.7
04BA4:  BCF    01.7
04BA6:  BRA    4BB0
04BA8:  CLRF   00
04BAA:  CLRF   01
04BAC:  CLRF   02
04BAE:  CLRF   03
04BB0:  MOVLB  0
04BB2:  RETURN 0
04BB4:  MOVLB  4
04BB6:  MOVF   x37,W
04BB8:  BTFSC  FD8.2
04BBA:  BRA    4D06
04BBC:  MOVWF  x43
04BBE:  MOVF   x3B,W
04BC0:  BTFSC  FD8.2
04BC2:  BRA    4D06
04BC4:  SUBWF  x43,F
04BC6:  BNC   4BD2
04BC8:  MOVLW  7F
04BCA:  ADDWF  x43,F
04BCC:  BTFSC  FD8.0
04BCE:  BRA    4D06
04BD0:  BRA    4BDE
04BD2:  MOVLW  81
04BD4:  SUBWF  x43,F
04BD6:  BTFSS  FD8.0
04BD8:  BRA    4D06
04BDA:  BTFSC  FD8.2
04BDC:  BRA    4D06
04BDE:  MOVFF  443,00
04BE2:  CLRF   01
04BE4:  CLRF   02
04BE6:  CLRF   03
04BE8:  CLRF   x42
04BEA:  MOVFF  438,441
04BEE:  BSF    x41.7
04BF0:  MOVFF  439,440
04BF4:  MOVFF  43A,43F
04BF8:  MOVLW  19
04BFA:  MOVWF  x43
04BFC:  MOVF   x3E,W
04BFE:  SUBWF  x3F,F
04C00:  BC    4C1C
04C02:  MOVLW  01
04C04:  SUBWF  x40,F
04C06:  BC    4C1C
04C08:  SUBWF  x41,F
04C0A:  BC    4C1C
04C0C:  SUBWF  x42,F
04C0E:  BC    4C1C
04C10:  INCF   x42,F
04C12:  INCF   x41,F
04C14:  INCF   x40,F
04C16:  MOVF   x3E,W
04C18:  ADDWF  x3F,F
04C1A:  BRA    4C6C
04C1C:  MOVF   x3D,W
04C1E:  SUBWF  x40,F
04C20:  BC    4C46
04C22:  MOVLW  01
04C24:  SUBWF  x41,F
04C26:  BC    4C46
04C28:  SUBWF  x42,F
04C2A:  BC    4C46
04C2C:  INCF   x42,F
04C2E:  INCF   x41,F
04C30:  MOVF   x3D,W
04C32:  ADDWF  x40,F
04C34:  MOVF   x3E,W
04C36:  ADDWF  x3F,F
04C38:  BNC   4C6C
04C3A:  INCF   x40,F
04C3C:  BNZ   4C6C
04C3E:  INCF   x41,F
04C40:  BNZ   4C6C
04C42:  INCF   x42,F
04C44:  BRA    4C6C
04C46:  MOVF   x3C,W
04C48:  IORLW  80
04C4A:  SUBWF  x41,F
04C4C:  BC    4C6A
04C4E:  MOVLW  01
04C50:  SUBWF  x42,F
04C52:  BC    4C6A
04C54:  INCF   x42,F
04C56:  MOVF   x3C,W
04C58:  IORLW  80
04C5A:  ADDWF  x41,F
04C5C:  MOVF   x3D,W
04C5E:  ADDWF  x40,F
04C60:  BNC   4C34
04C62:  INCF   x41,F
04C64:  BNZ   4C34
04C66:  INCF   x42,F
04C68:  BRA    4C34
04C6A:  BSF    03.0
04C6C:  DECFSZ x43,F
04C6E:  BRA    4C72
04C70:  BRA    4C88
04C72:  BCF    FD8.0
04C74:  RLCF   x3F,F
04C76:  RLCF   x40,F
04C78:  RLCF   x41,F
04C7A:  RLCF   x42,F
04C7C:  BCF    FD8.0
04C7E:  RLCF   03,F
04C80:  RLCF   02,F
04C82:  RLCF   01,F
04C84:  RLCF   x44,F
04C86:  BRA    4BFC
04C88:  BTFSS  x44.0
04C8A:  BRA    4C98
04C8C:  BCF    FD8.0
04C8E:  RRCF   01,F
04C90:  RRCF   02,F
04C92:  RRCF   03,F
04C94:  RRCF   x44,F
04C96:  BRA    4C9C
04C98:  DECF   00,F
04C9A:  BZ    4D06
04C9C:  BTFSC  x44.7
04C9E:  BRA    4CDC
04CA0:  BCF    FD8.0
04CA2:  RLCF   x3F,F
04CA4:  RLCF   x40,F
04CA6:  RLCF   x41,F
04CA8:  RLCF   x42,F
04CAA:  MOVF   x3E,W
04CAC:  SUBWF  x3F,F
04CAE:  BC    4CBE
04CB0:  MOVLW  01
04CB2:  SUBWF  x40,F
04CB4:  BC    4CBE
04CB6:  SUBWF  x41,F
04CB8:  BC    4CBE
04CBA:  SUBWF  x42,F
04CBC:  BNC   4CF2
04CBE:  MOVF   x3D,W
04CC0:  SUBWF  x40,F
04CC2:  BC    4CCE
04CC4:  MOVLW  01
04CC6:  SUBWF  x41,F
04CC8:  BC    4CCE
04CCA:  SUBWF  x42,F
04CCC:  BNC   4CF2
04CCE:  MOVF   x3C,W
04CD0:  IORLW  80
04CD2:  SUBWF  x41,F
04CD4:  BC    4CDC
04CD6:  MOVLW  01
04CD8:  SUBWF  x42,F
04CDA:  BNC   4CF2
04CDC:  INCF   03,F
04CDE:  BNZ   4CF2
04CE0:  INCF   02,F
04CE2:  BNZ   4CF2
04CE4:  INCF   01,F
04CE6:  BNZ   4CF2
04CE8:  INCF   00,F
04CEA:  BZ    4D06
04CEC:  RRCF   01,F
04CEE:  RRCF   02,F
04CF0:  RRCF   03,F
04CF2:  MOVFF  438,443
04CF6:  MOVF   x3C,W
04CF8:  XORWF  x43,F
04CFA:  BTFSS  x43.7
04CFC:  BRA    4D02
04CFE:  BSF    01.7
04D00:  BRA    4D0E
04D02:  BCF    01.7
04D04:  BRA    4D0E
04D06:  CLRF   00
04D08:  CLRF   01
04D0A:  CLRF   02
04D0C:  CLRF   03
04D0E:  MOVLB  0
04D10:  RETURN 0
04D12:  MOVLB  4
04D14:  MOVF   x40,W
04D16:  SUBLW  B6
04D18:  MOVWF  x40
04D1A:  CLRF   03
04D1C:  MOVFF  441,444
04D20:  BSF    x41.7
04D22:  BCF    FD8.0
04D24:  RRCF   x41,F
04D26:  RRCF   x42,F
04D28:  RRCF   x43,F
04D2A:  RRCF   03,F
04D2C:  RRCF   02,F
04D2E:  RRCF   01,F
04D30:  RRCF   00,F
04D32:  DECFSZ x40,F
04D34:  BRA    4D22
04D36:  BTFSS  x44.7
04D38:  BRA    4D50
04D3A:  COMF   00,F
04D3C:  COMF   01,F
04D3E:  COMF   02,F
04D40:  COMF   03,F
04D42:  INCF   00,F
04D44:  BTFSC  FD8.2
04D46:  INCF   01,F
04D48:  BTFSC  FD8.2
04D4A:  INCF   02,F
04D4C:  BTFSC  FD8.2
04D4E:  INCF   03,F
04D50:  MOVLB  0
04D52:  GOTO   4DAC (RETURN)
04D56:  MOVF   FE9,W
04D58:  MOVLB  4
04D5A:  MOVWF  x38
04D5C:  MOVF   x37,W
04D5E:  MOVWF  x3A
04D60:  BZ    4D98
04D62:  MOVFF  436,443
04D66:  MOVFF  435,442
04D6A:  MOVFF  434,441
04D6E:  MOVFF  433,440
04D72:  CLRF   x47
04D74:  CLRF   x46
04D76:  MOVLW  20
04D78:  MOVWF  x45
04D7A:  MOVLW  82
04D7C:  MOVWF  x44
04D7E:  MOVLB  0
04D80:  RCALL  4ABE
04D82:  MOVFF  03,436
04D86:  MOVFF  02,435
04D8A:  MOVFF  01,434
04D8E:  MOVFF  00,433
04D92:  MOVLB  4
04D94:  DECFSZ x3A,F
04D96:  BRA    4D62
04D98:  MOVFF  436,443
04D9C:  MOVFF  435,442
04DA0:  MOVFF  434,441
04DA4:  MOVFF  433,440
04DA8:  MOVLB  0
04DAA:  BRA    4D12
04DAC:  MOVFF  03,436
04DB0:  MOVFF  02,435
04DB4:  MOVFF  01,434
04DB8:  MOVFF  00,433
04DBC:  MOVLB  4
04DBE:  BTFSS  x36.7
04DC0:  BRA    4DDC
04DC2:  DECF   x38,F
04DC4:  BSF    x38.5
04DC6:  COMF   x33,F
04DC8:  COMF   x34,F
04DCA:  COMF   x35,F
04DCC:  COMF   x36,F
04DCE:  INCF   x33,F
04DD0:  BTFSC  FD8.2
04DD2:  INCF   x34,F
04DD4:  BTFSC  FD8.2
04DD6:  INCF   x35,F
04DD8:  BTFSC  FD8.2
04DDA:  INCF   x36,F
04DDC:  MOVLW  3B
04DDE:  MOVWF  x3F
04DE0:  MOVLW  9A
04DE2:  MOVWF  x3E
04DE4:  MOVLW  CA
04DE6:  MOVWF  x3D
04DE8:  CLRF   x3C
04DEA:  MOVLW  0A
04DEC:  MOVWF  x3A
04DEE:  MOVF   x37,W
04DF0:  BTFSC  FD8.2
04DF2:  INCF   x38,F
04DF4:  BSF    FD8.1
04DF6:  MOVLW  04
04DF8:  MOVWF  FEA
04DFA:  MOVLW  33
04DFC:  MOVWF  FE9
04DFE:  MOVFF  436,446
04E02:  MOVFF  435,445
04E06:  MOVFF  434,444
04E0A:  MOVFF  433,443
04E0E:  MOVFF  43F,44A
04E12:  MOVFF  43E,449
04E16:  MOVFF  43D,448
04E1A:  MOVFF  43C,447
04E1E:  MOVLB  0
04E20:  CALL   431C
04E24:  MOVF   01,W
04E26:  MOVF   00,F
04E28:  BNZ   4E50
04E2A:  MOVLB  4
04E2C:  INCF   x37,W
04E2E:  SUBWF  x3A,W
04E30:  BTFSS  FD8.2
04E32:  BRA    4E38
04E34:  MOVLB  0
04E36:  BRA    4E50
04E38:  MOVF   x38,W
04E3A:  BZ    4E56
04E3C:  ANDLW  0F
04E3E:  SUBWF  x3A,W
04E40:  BZ    4E44
04E42:  BC    4EBC
04E44:  BTFSC  x38.7
04E46:  BRA    4EBC
04E48:  BTFSC  x38.6
04E4A:  BRA    4E56
04E4C:  MOVLW  20
04E4E:  BRA    4EB2
04E50:  MOVLW  20
04E52:  MOVLB  4
04E54:  ANDWF  x38,F
04E56:  BTFSS  x38.5
04E58:  BRA    4E74
04E5A:  BCF    x38.5
04E5C:  MOVF   x37,W
04E5E:  BTFSS  FD8.2
04E60:  DECF   x38,F
04E62:  MOVF   00,W
04E64:  MOVWF  x38
04E66:  MOVLW  2D
04E68:  BTFSS  F9E.4
04E6A:  BRA    4E68
04E6C:  MOVWF  FAD
04E6E:  MOVF   x38,W
04E70:  MOVWF  00
04E72:  CLRF   x38
04E74:  MOVF   x37,W
04E76:  SUBWF  x3A,W
04E78:  BNZ   4E90
04E7A:  MOVF   00,W
04E7C:  MOVWF  x38
04E7E:  MOVLW  2E
04E80:  BTFSS  F9E.4
04E82:  BRA    4E80
04E84:  MOVWF  FAD
04E86:  MOVF   x38,W
04E88:  MOVWF  00
04E8A:  MOVLW  20
04E8C:  ANDWF  x38,F
04E8E:  MOVLW  00
04E90:  MOVLW  30
04E92:  BTFSS  x38.5
04E94:  BRA    4EB2
04E96:  BCF    x38.5
04E98:  MOVF   x37,W
04E9A:  BTFSS  FD8.2
04E9C:  DECF   x38,F
04E9E:  MOVF   00,W
04EA0:  MOVWF  x38
04EA2:  MOVLW  2D
04EA4:  BTFSS  F9E.4
04EA6:  BRA    4EA4
04EA8:  MOVWF  FAD
04EAA:  MOVF   x38,W
04EAC:  MOVWF  00
04EAE:  CLRF   x38
04EB0:  MOVLW  30
04EB2:  ADDWF  00,F
04EB4:  MOVF   00,W
04EB6:  BTFSS  F9E.4
04EB8:  BRA    4EB6
04EBA:  MOVWF  FAD
04EBC:  BCF    FD8.1
04EBE:  MOVFF  43F,446
04EC2:  MOVFF  43E,445
04EC6:  MOVFF  43D,444
04ECA:  MOVFF  43C,443
04ECE:  CLRF   x4A
04ED0:  CLRF   x49
04ED2:  CLRF   x48
04ED4:  MOVLW  0A
04ED6:  MOVWF  x47
04ED8:  MOVLB  0
04EDA:  CALL   431C
04EDE:  MOVFF  03,43F
04EE2:  MOVFF  02,43E
04EE6:  MOVFF  01,43D
04EEA:  MOVFF  00,43C
04EEE:  MOVLB  4
04EF0:  DECFSZ x3A,F
04EF2:  BRA    4DF4
04EF4:  MOVLB  0
04EF6:  RETURN 0
04EF8:  MOVLW  80
04EFA:  BTFSS  FD8.1
04EFC:  BRA    4F02
04EFE:  MOVLB  4
04F00:  XORWF  x3C,F
04F02:  MOVLB  4
04F04:  CLRF   x41
04F06:  CLRF   x42
04F08:  MOVFF  438,440
04F0C:  MOVF   x3C,W
04F0E:  XORWF  x40,F
04F10:  MOVF   x37,W
04F12:  BTFSC  FD8.2
04F14:  BRA    50D4
04F16:  MOVWF  x3F
04F18:  MOVWF  00
04F1A:  MOVF   x3B,W
04F1C:  BTFSC  FD8.2
04F1E:  BRA    50E6
04F20:  SUBWF  x3F,F
04F22:  BTFSC  FD8.2
04F24:  BRA    502C
04F26:  BNC   4FA4
04F28:  MOVFF  43C,445
04F2C:  BSF    x45.7
04F2E:  MOVFF  43D,444
04F32:  MOVFF  43E,443
04F36:  CLRF   x42
04F38:  BCF    FD8.0
04F3A:  RRCF   x45,F
04F3C:  RRCF   x44,F
04F3E:  RRCF   x43,F
04F40:  RRCF   x42,F
04F42:  DECFSZ x3F,F
04F44:  BRA    4F36
04F46:  BTFSS  x40.7
04F48:  BRA    4F50
04F4A:  BSF    x41.0
04F4C:  BRA    510E
04F4E:  BCF    x41.0
04F50:  BCF    x3F.0
04F52:  BSF    x41.4
04F54:  MOVLW  04
04F56:  MOVWF  FEA
04F58:  MOVLW  3A
04F5A:  MOVWF  FE9
04F5C:  BRA    5134
04F5E:  BCF    x41.4
04F60:  BTFSC  x40.7
04F62:  BRA    4F78
04F64:  BTFSS  x3F.0
04F66:  BRA    4F8E
04F68:  RRCF   x45,F
04F6A:  RRCF   x44,F
04F6C:  RRCF   x43,F
04F6E:  RRCF   x42,F
04F70:  INCF   00,F
04F72:  BTFSC  FD8.2
04F74:  BRA    5104
04F76:  BRA    4F8E
04F78:  BTFSC  x45.7
04F7A:  BRA    4F94
04F7C:  BCF    FD8.0
04F7E:  RLCF   x42,F
04F80:  RLCF   x43,F
04F82:  RLCF   x44,F
04F84:  RLCF   x45,F
04F86:  DECF   00,F
04F88:  BTFSC  FD8.2
04F8A:  BRA    5104
04F8C:  BRA    4F78
04F8E:  BSF    x41.6
04F90:  BRA    506C
04F92:  BCF    x41.6
04F94:  MOVFF  438,440
04F98:  BTFSS  x38.7
04F9A:  BRA    4FA0
04F9C:  BSF    x45.7
04F9E:  BRA    50F6
04FA0:  BCF    x45.7
04FA2:  BRA    50F6
04FA4:  MOVFF  43B,43F
04FA8:  MOVFF  43B,00
04FAC:  MOVF   x37,W
04FAE:  SUBWF  x3F,F
04FB0:  MOVFF  438,445
04FB4:  BSF    x45.7
04FB6:  MOVFF  439,444
04FBA:  MOVFF  43A,443
04FBE:  CLRF   x42
04FC0:  BCF    FD8.0
04FC2:  RRCF   x45,F
04FC4:  RRCF   x44,F
04FC6:  RRCF   x43,F
04FC8:  RRCF   x42,F
04FCA:  DECFSZ x3F,F
04FCC:  BRA    4FBE
04FCE:  BTFSS  x40.7
04FD0:  BRA    4FD8
04FD2:  BSF    x41.1
04FD4:  BRA    510E
04FD6:  BCF    x41.1
04FD8:  BCF    x3F.0
04FDA:  BSF    x41.5
04FDC:  MOVLW  04
04FDE:  MOVWF  FEA
04FE0:  MOVLW  3E
04FE2:  MOVWF  FE9
04FE4:  BRA    5134
04FE6:  BCF    x41.5
04FE8:  BTFSC  x40.7
04FEA:  BRA    5000
04FEC:  BTFSS  x3F.0
04FEE:  BRA    5016
04FF0:  RRCF   x45,F
04FF2:  RRCF   x44,F
04FF4:  RRCF   x43,F
04FF6:  RRCF   x42,F
04FF8:  INCF   00,F
04FFA:  BTFSC  FD8.2
04FFC:  BRA    5104
04FFE:  BRA    5016
05000:  BTFSC  x45.7
05002:  BRA    501C
05004:  BCF    FD8.0
05006:  RLCF   x42,F
05008:  RLCF   x43,F
0500A:  RLCF   x44,F
0500C:  RLCF   x45,F
0500E:  DECF   00,F
05010:  BTFSC  FD8.2
05012:  BRA    5104
05014:  BRA    5000
05016:  BSF    x41.7
05018:  BRA    506C
0501A:  BCF    x41.7
0501C:  MOVFF  43C,440
05020:  BTFSS  x3C.7
05022:  BRA    5028
05024:  BSF    x45.7
05026:  BRA    50F6
05028:  BCF    x45.7
0502A:  BRA    50F6
0502C:  MOVFF  43C,445
05030:  BSF    x45.7
05032:  MOVFF  43D,444
05036:  MOVFF  43E,443
0503A:  BTFSS  x40.7
0503C:  BRA    5046
0503E:  BCF    x45.7
05040:  BSF    x41.2
05042:  BRA    510E
05044:  BCF    x41.2
05046:  CLRF   x42
05048:  BCF    x3F.0
0504A:  MOVLW  04
0504C:  MOVWF  FEA
0504E:  MOVLW  3A
05050:  MOVWF  FE9
05052:  BRA    5134
05054:  BTFSC  x40.7
05056:  BRA    5090
05058:  MOVFF  438,440
0505C:  BTFSS  x3F.0
0505E:  BRA    506C
05060:  RRCF   x45,F
05062:  RRCF   x44,F
05064:  RRCF   x43,F
05066:  RRCF   x42,F
05068:  INCF   00,F
0506A:  BZ    5104
0506C:  BTFSS  x42.7
0506E:  BRA    5086
05070:  INCF   x43,F
05072:  BNZ   5086
05074:  INCF   x44,F
05076:  BNZ   5086
05078:  INCF   x45,F
0507A:  BNZ   5086
0507C:  RRCF   x45,F
0507E:  RRCF   x44,F
05080:  RRCF   x43,F
05082:  INCF   00,F
05084:  BZ    5104
05086:  BTFSC  x41.6
05088:  BRA    4F92
0508A:  BTFSC  x41.7
0508C:  BRA    501A
0508E:  BRA    50C8
05090:  MOVLW  80
05092:  XORWF  x45,F
05094:  BTFSS  x45.7
05096:  BRA    50A0
05098:  BRA    510E
0509A:  MOVFF  43C,440
0509E:  BRA    50B4
050A0:  MOVFF  438,440
050A4:  MOVF   x45,F
050A6:  BNZ   50B4
050A8:  MOVF   x44,F
050AA:  BNZ   50B4
050AC:  MOVF   x43,F
050AE:  BNZ   50B4
050B0:  CLRF   00
050B2:  BRA    50F6
050B4:  BTFSC  x45.7
050B6:  BRA    50C8
050B8:  BCF    FD8.0
050BA:  RLCF   x42,F
050BC:  RLCF   x43,F
050BE:  RLCF   x44,F
050C0:  RLCF   x45,F
050C2:  DECFSZ 00,F
050C4:  BRA    50B4
050C6:  BRA    5104
050C8:  BTFSS  x40.7
050CA:  BRA    50D0
050CC:  BSF    x45.7
050CE:  BRA    50F6
050D0:  BCF    x45.7
050D2:  BRA    50F6
050D4:  MOVFF  43B,00
050D8:  MOVFF  43C,445
050DC:  MOVFF  43D,444
050E0:  MOVFF  43E,443
050E4:  BRA    50F6
050E6:  MOVFF  437,00
050EA:  MOVFF  438,445
050EE:  MOVFF  439,444
050F2:  MOVFF  43A,443
050F6:  MOVFF  445,01
050FA:  MOVFF  444,02
050FE:  MOVFF  443,03
05102:  BRA    516C
05104:  CLRF   00
05106:  CLRF   01
05108:  CLRF   02
0510A:  CLRF   03
0510C:  BRA    516C
0510E:  CLRF   x42
05110:  COMF   x43,F
05112:  COMF   x44,F
05114:  COMF   x45,F
05116:  COMF   x42,F
05118:  INCF   x42,F
0511A:  BNZ   5126
0511C:  INCF   x43,F
0511E:  BNZ   5126
05120:  INCF   x44,F
05122:  BNZ   5126
05124:  INCF   x45,F
05126:  BTFSC  x41.0
05128:  BRA    4F4E
0512A:  BTFSC  x41.1
0512C:  BRA    4FD6
0512E:  BTFSC  x41.2
05130:  BRA    5044
05132:  BRA    509A
05134:  MOVF   FEF,W
05136:  ADDWF  x43,F
05138:  BNC   5144
0513A:  INCF   x44,F
0513C:  BNZ   5144
0513E:  INCF   x45,F
05140:  BTFSC  FD8.2
05142:  BSF    x3F.0
05144:  MOVF   FED,F
05146:  MOVF   FEF,W
05148:  ADDWF  x44,F
0514A:  BNC   5152
0514C:  INCF   x45,F
0514E:  BTFSC  FD8.2
05150:  BSF    x3F.0
05152:  MOVF   FED,F
05154:  MOVF   FEF,W
05156:  BTFSC  FEF.7
05158:  BRA    515C
0515A:  XORLW  80
0515C:  ADDWF  x45,F
0515E:  BTFSC  FD8.0
05160:  BSF    x3F.0
05162:  BTFSC  x41.4
05164:  BRA    4F5E
05166:  BTFSC  x41.5
05168:  BRA    4FE6
0516A:  BRA    5054
0516C:  MOVLB  0
0516E:  RETURN 0
05170:  MOVFF  440,447
05174:  MOVLB  4
05176:  MOVF   x44,W
05178:  XORWF  x47,F
0517A:  BTFSS  x47.7
0517C:  BRA    5188
0517E:  BCF    FD8.2
05180:  BCF    FD8.0
05182:  BTFSC  x40.7
05184:  BSF    FD8.0
05186:  BRA    51E6
05188:  MOVFF  440,447
0518C:  MOVFF  443,448
05190:  MOVF   x3F,W
05192:  SUBWF  x48,F
05194:  BZ    51A2
05196:  BTFSS  x47.7
05198:  BRA    51E6
0519A:  MOVF   FD8,W
0519C:  XORLW  01
0519E:  MOVWF  FD8
051A0:  BRA    51E6
051A2:  MOVFF  444,448
051A6:  MOVF   x40,W
051A8:  SUBWF  x48,F
051AA:  BZ    51B8
051AC:  BTFSS  x47.7
051AE:  BRA    51E6
051B0:  MOVF   FD8,W
051B2:  XORLW  01
051B4:  MOVWF  FD8
051B6:  BRA    51E6
051B8:  MOVFF  445,448
051BC:  MOVF   x41,W
051BE:  SUBWF  x48,F
051C0:  BZ    51CE
051C2:  BTFSS  x47.7
051C4:  BRA    51E6
051C6:  MOVF   FD8,W
051C8:  XORLW  01
051CA:  MOVWF  FD8
051CC:  BRA    51E6
051CE:  MOVFF  446,448
051D2:  MOVF   x42,W
051D4:  SUBWF  x48,F
051D6:  BZ    51E4
051D8:  BTFSS  x47.7
051DA:  BRA    51E6
051DC:  MOVF   FD8,W
051DE:  XORLW  01
051E0:  MOVWF  FD8
051E2:  BRA    51E6
051E4:  BCF    FD8.0
051E6:  MOVLB  0
051E8:  GOTO   5240 (RETURN)
*
0899C:  MOVLB  4
0899E:  MOVF   x09,W
089A0:  MULWF  x0B
089A2:  MOVFF  FF3,01
089A6:  MOVFF  FF4,00
089AA:  MULWF  x0C
089AC:  MOVF   FF3,W
089AE:  ADDWF  00,F
089B0:  MOVF   x0A,W
089B2:  MULWF  x0B
089B4:  MOVF   FF3,W
089B6:  ADDWFC 00,W
089B8:  MOVWF  02
089BA:  MOVLB  0
089BC:  RETURN 0
....................  
.................... #list 
....................  
.................... #FUSES NOWDT,NOBROWNOUT,SOSC_DIG 
.................... #use delay(crystal = 16MHz, clock = 16MHz) 
*
01DA0:  MOVLW  04
01DA2:  MOVWF  FEA
01DA4:  MOVLW  3E
01DA6:  MOVWF  FE9
01DA8:  MOVF   FEF,W
01DAA:  BZ    1DC8
01DAC:  MOVLW  05
01DAE:  MOVWF  01
01DB0:  CLRF   00
01DB2:  DECFSZ 00,F
01DB4:  BRA    1DB2
01DB6:  DECFSZ 01,F
01DB8:  BRA    1DB0
01DBA:  MOVLW  2E
01DBC:  MOVWF  00
01DBE:  DECFSZ 00,F
01DC0:  BRA    1DBE
01DC2:  BRA    1DC4
01DC4:  DECFSZ FEF,F
01DC6:  BRA    1DAC
01DC8:  RETURN 0
.................... #include <PIC18F67J94_REGISTERS.h> 
....................  
.................... #byte TRISG = 0xF98 
.................... #byte TRISF = 0xF97 
.................... #byte TRISE = 0xF96 
.................... #byte TRISD = 0xF95 
.................... #byte TRISC = 0xF94 
.................... #byte TRISB = 0xF93 
.................... #byte TRISA = 0xF92 
....................  
.................... #byte LATG = 0xF8F 
.................... #byte LATF = 0xF8E 
.................... #byte LATE = 0xF8D 
.................... #byte LATD = 0xF8C 
.................... #byte LATC = 0xF8B 
.................... #byte LATB = 0xF8A 
.................... #byte LATA = 0xF89 
....................  
.................... #bit    TRISE0 = TRISE.0 
.................... #bit    TRISE1 = TRISE.1 
.................... #bit    TRISE2 = TRISE.2 
....................  
.................... #bit    TRISC4 = TRISC.4 
....................  
.................... #bit    TRISB3 = TRISB.3 
....................  
.................... #bit    TRISA0 = TRISA.0 
.................... #bit    TRISA1 = TRISA.1 
.................... #bit    TRISA2 = TRISA.2 
.................... #bit    TRISA5 = TRISA.5 
....................  
....................  
....................  
....................  
.................... #bit    LATA0 = LATA.0 
.................... #bit    LATA1 = LATA.1 
.................... #bit    LATA2 = LATA.2 
.................... #bit    LATA3 = LATA.3 
....................  
.................... #byte PORTG = 0xF86 
.................... #bit    RG0 = PORTG.0 
.................... #bit    RG1 = PORTG.1 
.................... #bit    RG2 = PORTG.2 
.................... #bit    RG3 = PORTG.3 
.................... #bit    RG4 = PORTG.4 
.................... #bit    RG6 = PORTG.6 
.................... #bit    RG7 = PORTG.7 
.................... #byte PORTF = 0xF85 
.................... #bit    RF2 = PORTF.2 
.................... #bit    RF3 = PORTF.3 
.................... #bit    RF4 = PORTF.4 
.................... #bit    RF5 = PORTF.5 
.................... #bit    RF6 = PORTF.6 
.................... #bit    RF7 = PORTF.7 
....................  
.................... #byte PORTE = 0xF84 
.................... #bit    RE2 = PORTE.2 
....................  
....................  
.................... #byte PORTD = 0xF83 
.................... #byte PORTC = 0xF82 
.................... #bit    RC0 = PORTC.0 
.................... #bit    RC1 = PORTC.1 
.................... #bit    RC2 = PORTC.2 
.................... #bit    RC3 = PORTC.3 
.................... #bit    RC4 = PORTC.4 
.................... #bit    RC5 = PORTC.5 
.................... #bit    RC6 = PORTC.6 
.................... #bit    RC7 = PORTC.7 
....................  
.................... #byte PORTB = 0xF81 
.................... #bit    RB3 = PORTB.3 
....................  
.................... #byte PORTA = 0xF80 
.................... #bit    RA0 = PORTA.0 
.................... #bit    RA1 = PORTA.1 
.................... #bit    RA2 = PORTA.2 
.................... #bit    RA3 = PORTA.3 
.................... #bit    RA4 = PORTA.4 
.................... #bit    RA5 = PORTA.5 
.................... #bit    RA6 = PORTA.6 
.................... #bit    RA7 = PORTA.7 
....................  
....................  
.................... //__________________________________RTC___________________________________________ 
.................... #byte RTCCON1 = 0xF5F 
.................... #bit    RTCPTR0 = RTCCON1.0 
.................... #bit    RTCPTR1 = RTCCON1.1 
.................... #bit    RTCOE = RTCCON1.2 
.................... #bit    HALFSEC = RTCCON1.3 
.................... #bit    RTCSYNC = RTCCON1.4 
.................... #bit    RTCWREN = RTCCON1.5 
.................... #bit    RTCEN = RTCCON1.7 
.................... #byte RTCCAL = 0xF5E 
.................... #byte RTCVALH = 0xF5D 
.................... #bit    WAITE0 = RTCVALH.0 
.................... #bit    WAITE1 = RTCVALH.1 
.................... #bit    WAITM0 = RTCVALH.2 
.................... #bit    WAITM1 = RTCVALH.3 
.................... #bit    WAITM2 = RTCVALH.4 
.................... #bit    WAITM3 = RTCVALH.5 
.................... #bit    WAITB0 = RTCVALH.6 
.................... #bit    WAITB1 = RTCVALH.7 
.................... //#byte RTCVALH = 0xF5D 
.................... #byte RTCVALL = 0xF5C 
.................... #byte ALRMCFG = 0xF5B 
.................... #bit    ALRMPTR0 = ALRMCFG.0 
.................... #bit    ALRMPTR1 = ALRMCFG.1 
.................... #bit    AMASK0 = ALRMCFG.2 
.................... #bit    AMASK1 = ALRMCFG.3 
.................... #bit    AMASK2 = ALRMCFG.4 
.................... #bit    AMASK3 = ALRMCFG.5 
.................... #bit    CHIME = ALRMCFG.6 
.................... #bit    ALRMEN = ALRMCFG.7 
.................... #byte ALRMRPT = 0xF5A 
.................... #byte ALRMVALH = 0xF59 
.................... #byte ALRMVALL = 0xF58 
.................... #byte RTCCON2 = 0xF57 
.................... #bit    RTCSECSEL0 = RTCCON2.0 
.................... #bit    RTCSECSEL1 = RTCCON2.1 
.................... #bit    RTCCLKSEL0 = RTCCON2.2 
.................... #bit    RTCCLKSEL1 = RTCCON2.3 
.................... #bit    PWCSPRE = RTCCON2.4 
.................... #bit    PWCCPRE = RTCCON2.5 
.................... #bit    PWCPOL = RTCCON2.6 
.................... #bit    PWCEN = RTCCON2.7 
....................  
....................  
.................... #byte EECON2 = 0xF7E 
....................  
.................... #byte OSCCON = 0xFD3 
....................  
.................... #byte T1CON  = 0xFCD 
....................  
.................... #bit  T1CON7 = T1CON.7 
.................... #bit  T1CON6 = T1CON.6 
.................... //!#bit  T1CON5 = T1CON.5 
.................... //!#bit  T1CON4 = T1CON.4 
.................... //#bit  T1CON7 = T1CON.7 
.................... //#bit  T1CON6 = T1CON.6 
....................  
.................... #bit  SOSCEN1 = T1CON.3 
.................... #bit  TMR1ON = T1CON.0 
....................  
.................... #byte T3CON  = 0xFB1 
.................... #bit  SOSCEN3 = T3CON.3 
....................  
....................  
.................... #byte PIE3 = 0xFA3 
.................... #bit  RC2IE = PIE3.5 
....................  
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) || defined(__PCM__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... unsigned char *memmove(void *s1,void *s2,size_t n) 
.................... { 
....................    unsigned char *sc1; 
....................    unsigned char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... unsigned char *strncpy(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................   unsigned char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... unsigned char *strcat(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... unsigned char *strncat(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    unsigned char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,void *s2,size_t n) 
.................... { 
.................... unsigned char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1, returns number of chars written ot s1. 
....................    if s1 is NULL and n is 0, then it returns the length of s2.*/ 
.................... size_t strxfrm(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    unsigned char c; 
....................    unsigned int8 n1; 
....................     
....................    if (!s1 && !n) 
....................       n = -1; //find length 
....................  
....................    n1 = 0; 
....................     
....................    for (; n1 < n; n1++) 
....................    { 
....................       c = *s2++; 
....................       if (!c) 
....................          break; 
....................       if (s1) 
....................          *s1++ = c; 
....................    } 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... unsigned char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    unsigned char uc; 
....................    unsigned char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... unsigned char *strchr(unsigned char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... unsigned char *strpbrk(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... unsigned char *strrchr(unsigned char *s, unsigned int8 c) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... unsigned char *strstr(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... size_t strlen(unsigned char *s) 
.................... { 
....................    unsigned char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... unsigned char *strtok(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................       return(0); 
....................        
....................    end = strpbrk(beg, s2); 
....................    if (end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................       save = end; 
....................    } 
....................    else 
....................       save = beg + strlen(beg); 
....................     
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... unsigned char * strerror(unsigned int8 errnum) 
.................... { 
.................... static unsigned char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(unsigned char *s1, unsigned char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... unsigned char *strlwr(unsigned char *s) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... unsigned char *strupr(unsigned char *s) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
....................  
.................... #include <MainPIC_Settings.c> 
.................... #define MBOSS_EN   PIN_D1 
....................  
....................  
.................... void COMUNICATION_WITH_FAB_PIC_AND_WAIT_FOR_RESPONE(int numof_times, int16 time_delay = 200, int16 wait_time = 70, int inc_array_length = 3); 
.................... void GIVE_COMFM_ACCESS_TO_COMPIC_FOR_DATA_DOWNLOAD(); 
....................  
....................  
.................... // this variable count the number of main loop running 
....................    unsigned int32 MLC = 0;  
....................  
.................... // this array is used to save comands coming from debug port___________________ 
....................    char DEBUG_TO_MPIC_ARRAY[55]; 
....................  
.................... // this arrays is used to save and send comands with reset pic_________________ 
....................    char MPIC_TO_RPIC_ARRAY[10]; 
....................    char RPIC_TO_MPIC_ARRAY[55];            // command is only 32 bytes 
....................  
.................... // this arrays is used to save and send comands with reset pic_________________ 
....................    char MPIC_TO_CPIC_ARRAY[32]; 
....................    char CPIC_TO_MPIC_ARRAY[55];            // command is only 32 bytes 
....................  
.................... // this arrays is used to save and send comands with fab pic_________________ 
....................    char MPIC_TO_FAB_ARRAY[32]; 
....................    char FAB_TO_MPIC_ARRAY[55];            //  
....................     
.................... // this arrays is used to save and send comands with mboss pic_________________ 
....................    char MPIC_TO_MBOSS_ARRAY[40];          // only 20 is used 
....................    char MBOSS_TO_MPIC_ARRAY[40];           
....................     
....................     
.................... // This section has the variables related to antenna deployement_______________ 
....................    // this two variables will define whether antenna sets are in deployment mode 
....................    
....................    // 1 = in deployment mode 
....................    unsigned int16 ANT_SET_1_DEP_FLAG = 0; 
....................    unsigned int16 ANT_SET_2_DEP_FLAG = 0; 
....................     
....................     
....................    // this two variables will count how many times antenna depoloyment tried 
....................    unsigned int16 ANTSET_1_COUNT = 0; 
....................    unsigned int16 ANTSET_2_COUNT = 0; 
....................     
.................... // This section has the reset pic house keeping data writing variables 
....................    unsigned int32 SUCCESFULL_COMUNICATION_WITH_RST_PIC = 0;             // this will count how many sccesful comunication happen with reset pic 
....................    unsigned int32 FAILED_COMUNICATION_WITH_RST_PIC = 0;          // this will count how many not sccesful comunication happen with reset pic 
....................    unsigned int32 DAY_NUMBER = 0; 
....................    unsigned int32 RST_PIC_HSK_DATA_START_ADD = 0;     // this is the reset pic housekeeping data start address for a given date 
....................   
....................    int  CFM_ACCESS_FLAG = 0 ;             // 0 means com flash memory acces to main pic , 1 means com pic 
....................    char CFM_ACCESS_TIME = 0 ;             // value is in seconds, com fm acces time to com pic 
....................     
.................... // This section has the FAB pic house keeping data writing variables 
....................    unsigned int32 SUCCESFULL_COMUNICATION_WITH_FAB = 0;      // this will count how many sccesful comunication happen with FAB pic 
....................    unsigned int32 FAILED_COMUNICATION_WITH_FAB = 0;          // this will count how many not sccesful comunication happen with FAB pic 
....................    unsigned int32 FAB_PIC_HSK_DATA_START_ADD = 0;            // this is the FAB pic housekeeping data start address for a given date 
....................  
.................... // this section has the variables related to main pic RTC______________________ 
....................    char MP_RTC_YEAR  = 0; 
....................    char MP_RTC_MONTH = 0; 
....................    char MP_RTC_DAY   = 0; 
....................    char MP_RTC_HOUR  = 0; 
....................    char MP_RTC_MIN   = 0; 
....................    char MP_RTC_SEC   = 0; 
....................    char SEC90_Count  = 70; 
....................    char sec_prev; 
....................     
.................... // this section has a variable related to making CW 
....................    unsigned int8 CW_DATA_ARRAY[30]; 
....................     
.................... //Missioin flag 
....................    unsigned int8 APRS_REFERENSE_1_FLAG = 0;                                      // 0: turn OFF 1: turn ON 
....................    unsigned int8 APRS_REFERENSE_2_FLAG = 0;                                      // 0: turn OFF 1: turn ON 
....................    unsigned int8 APRS_PAYLOAD_1_FLAG = 0;                                        // 0: turn OFF 1: turn ON 
....................    unsigned int8 APRS_PAYLOAD_2_FLAG = 0;                                        // 0: turn OFF 1: turn ON 
....................    unsigned int8 APRS_PAYLOAD_3_FLAG = 0;                                        // 0: turn OFF 1: turn ON 
....................    unsigned int8 APRS_PAYLOAD_4_FLAG = 0;                                        // 0: turn OFF 1: turn ON 
....................    unsigned int8 APRS_PAYLOAD_5_FLAG = 0;                                        // 0: turn OFF 1: turn ON 
....................    unsigned int8 MISSION_STATUS = 0;                                             // 0: no mission 1: Digipeater 2:S&F ward 3: GT competition 4: Competitor's own mission    
....................   
....................    #define Enabled  0xAA 
....................    #define Disabled 0xBB 
....................    unsigned int8 _CW_STATUS_30MIN;  
....................     
....................    unsigned int8 CW30DAY_COUNTER = 0; 
....................    unsigned int8 CW30DAY_FLAG = 1; 
....................  
....................    #define LED_PIN  PIN_G2       // put correct pin(PIN_G2) 
....................    char LED_FLAG = 0xAA ; 
....................     
.................... #use rs232(baud=9600,parity=N,xmit=pin_G0,rcv=pin_G1,bits=8,stream=MBOSS,ERRORS, force_sw)  //UART MAIN to MB DCM 
*
09A04:  BCF    F98.0
09A06:  BCF    F8F.0
09A08:  MOVLW  08
09A0A:  MOVWF  01
09A0C:  BRA    9A0E
09A0E:  NOP   
09A10:  BSF    01.7
09A12:  BRA    9A34
09A14:  BCF    01.7
09A16:  MOVLB  4
09A18:  RRCF   x01,F
09A1A:  MOVLB  0
09A1C:  BTFSC  FD8.0
09A1E:  BSF    F8F.0
09A20:  BTFSS  FD8.0
09A22:  BCF    F8F.0
09A24:  BSF    01.6
09A26:  BRA    9A34
09A28:  BCF    01.6
09A2A:  DECFSZ 01,F
09A2C:  BRA    9A16
09A2E:  BRA    9A30
09A30:  NOP   
09A32:  BSF    F8F.0
09A34:  MOVLW  84
09A36:  MOVWF  FE9
09A38:  DECFSZ FE9,F
09A3A:  BRA    9A38
09A3C:  BRA    9A3E
09A3E:  NOP   
09A40:  BTFSC  01.7
09A42:  BRA    9A14
09A44:  BTFSC  01.6
09A46:  BRA    9A28
09A48:  RETURN 0
09A4A:  BSF    F98.1
09A4C:  BTFSC  F86.1
09A4E:  BRA    9A4C
09A50:  MOVLW  08
09A52:  MOVWF  00
09A54:  MOVLB  4
09A56:  CLRF   x0E
09A58:  BSF    00.7
09A5A:  BRA    9A78
09A5C:  BCF    00.7
09A5E:  BRA    9A78
09A60:  BCF    FD8.0
09A62:  BTFSC  F86.1
09A64:  BSF    FD8.0
09A66:  RRCF   x0E,F
09A68:  BSF    00.6
09A6A:  BRA    9A78
09A6C:  BCF    00.6
09A6E:  DECFSZ 00,F
09A70:  BRA    9A60
09A72:  MOVFF  40E,01
09A76:  BRA    9A90
09A78:  MOVLW  84
09A7A:  BTFSC  00.7
09A7C:  MOVLW  24
09A7E:  MOVWF  01
09A80:  DECFSZ 01,F
09A82:  BRA    9A80
09A84:  BRA    9A86
09A86:  BTFSC  00.7
09A88:  BRA    9A5C
09A8A:  BTFSC  00.6
09A8C:  BRA    9A6C
09A8E:  BRA    9A60
09A90:  MOVLB  0
09A92:  GOTO   9AEC (RETURN)
.................... //#use rs232(baud=9600, parity=N, rcv=PIN_B7,  bits=8, stream = MBOSS, errors, force_sw )  // dummy port 
....................  
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... #define PC_BFR_SIZE 50 
.................... // UART PC functions___________________________________________________________ 
.................... #pin_select TX1=PIN_C6                                                          
.................... #pin_select RX1=PIN_C7                                                          
.................... #use rs232(baud=115200, parity=N, UART1, bits=8, stream=PC, errors)                       
*
000E2:  BTFSS  F9E.5
000E4:  BRA    00E2
000E6:  MOVFF  FAB,1EF
000EA:  MOVLB  1
000EC:  MOVFF  FAE,01
000F0:  BTFSS  xEF.1
000F2:  BRA    00F8
000F4:  BCF    FAB.4
000F6:  BSF    FAB.4
000F8:  MOVLB  0
000FA:  RETURN 0
....................  
....................  
.................... unsigned int8  PC_Buffer[PC_BFR_SIZE]; 
.................... unsigned int16 PC_Byte_Counter = 0; 
.................... unsigned int8  PC_Overflow = 0; 
.................... unsigned int16 PC_Read_Byte_counter = 0; 
.................... unsigned int8  PC_Temp_byte = 0; 
.................... #INT_RDA 
.................... Void SERIAL_ISR1()                                                             // MAIN PIC uart interupt loop 
.................... { 
....................    if( kbhit(PC) ) 
000FC:  BTFSS  F9E.5
000FE:  BRA    0142
....................    { 
....................       if( PC_Byte_Counter < PC_BFR_SIZE ) 
00100:  MOVLB  2
00102:  MOVF   x23,F
00104:  BNZ   013A
00106:  MOVF   x22,W
00108:  SUBLW  31
0010A:  BNC   013A
....................       { 
....................          PC_Buffer[PC_Byte_Counter] = fgetc(PC); 
0010C:  MOVLW  F0
0010E:  ADDWF  x22,W
00110:  MOVWF  FE9
00112:  MOVLW  01
00114:  ADDWFC x23,W
00116:  MOVWF  FEA
00118:  MOVFF  FEA,453
0011C:  MOVFF  FE9,452
00120:  MOVLB  0
00122:  RCALL  00E2
00124:  MOVFF  453,FEA
00128:  MOVFF  452,FE9
0012C:  MOVFF  01,FEF
....................          PC_Byte_Counter++; 
00130:  MOVLB  2
00132:  INCF   x22,F
00134:  BTFSC  FD8.2
00136:  INCF   x23,F
....................       } 
00138:  BRA    0144
....................       else PC_Overflow = fgetc(PC); 
0013A:  MOVLB  0
0013C:  RCALL  00E2
0013E:  MOVFF  01,224
00142:  MOVLB  2
....................    } 
00144:  BCF    F9E.5
00146:  MOVLB  0
00148:  GOTO   008C
.................... } 
....................  
.................... unsigned int8 PC_Available() 
.................... { 
....................    if (PC_Byte_Counter > 0) return PC_Byte_Counter ; 
*
086C8:  MOVLB  2
086CA:  MOVF   x22,F
086CC:  BNZ   86D2
086CE:  MOVF   x23,F
086D0:  BZ    86DA
086D2:  MOVFF  222,01
086D6:  BRA    86DE
086D8:  BRA    86DE
....................    else return 0; 
086DA:  MOVLW  00
086DC:  MOVWF  01
086DE:  MOVLB  0
086E0:  GOTO   8736 (RETURN)
.................... } 
....................  
.................... unsigned int8 PC_Read() 
.................... { 
....................    if (PC_Byte_Counter>0) 
086E4:  MOVLB  2
086E6:  MOVF   x22,F
086E8:  BNZ   86EE
086EA:  MOVF   x23,F
086EC:  BZ    871E
....................    {     
....................       PC_Temp_byte = PC_Buffer[PC_Read_Byte_counter]; 
086EE:  MOVLW  F0
086F0:  ADDWF  x25,W
086F2:  MOVWF  FE9
086F4:  MOVLW  01
086F6:  ADDWFC x26,W
086F8:  MOVWF  FEA
086FA:  MOVFF  FEF,227
....................        
....................       PC_Byte_Counter--; 
086FE:  MOVF   x22,W
08700:  BTFSC  FD8.2
08702:  DECF   x23,F
08704:  DECF   x22,F
....................       PC_Read_Byte_counter++; 
08706:  INCF   x25,F
08708:  BTFSC  FD8.2
0870A:  INCF   x26,F
....................       if(PC_Byte_Counter == 0) PC_Read_Byte_counter = 0; 
0870C:  MOVF   x22,F
0870E:  BNZ   8718
08710:  MOVF   x23,F
08712:  BNZ   8718
08714:  CLRF   x26
08716:  CLRF   x25
....................       return PC_Temp_byte;  
08718:  MOVFF  227,01
0871C:  BRA    8730
....................    } 
....................     
....................    if (PC_Byte_Counter == 0) 
0871E:  MOVF   x22,F
08720:  BNZ   8730
08722:  MOVF   x23,F
08724:  BNZ   8730
....................    {  
....................       PC_Read_Byte_counter = 0; 
08726:  CLRF   x26
08728:  CLRF   x25
....................       PC_Temp_byte = 0x00; 
0872A:  CLRF   x27
....................       return PC_Temp_byte;  
0872C:  MOVFF  227,01
....................    } 
08730:  MOVLB  0
08732:  RETURN 0
....................   
.................... } 
....................  
.................... void PC_flush() 
.................... { 
....................    while( PC_Available() ) PC_Read() ; 
.................... } 
.................... //_____________________________________________________________________________ 
....................  
....................  
....................  
....................  
....................  
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... // Reset pic comunication______________________________________________________ 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... #define RP_BFR_SIZE 50 
.................... #pin_select TX4=PIN_E3  //D5 is dummy port 
.................... #pin_select RX4=PIN_F2  // 
.................... #use rs232(baud=38400,parity=N,UART4,bits=8,stream=RPic,ERRORS)                   
*
0014C:  BTFSS  FA6.7
0014E:  BRA    014C
00150:  MOVFF  EFF,1EF
00154:  MOVFF  EFA,01
00158:  MOVLB  1
0015A:  BTFSS  xEF.1
0015C:  BRA    0166
0015E:  MOVLB  E
00160:  BCF    xFF.4
00162:  BSF    xFF.4
00164:  MOVLB  1
00166:  MOVLB  0
00168:  RETURN 0
*
03036:  BTFSS  FA6.6
03038:  BRA    3036
0303A:  MOVLB  E
0303C:  MOVWF  xF9
0303E:  MOVLB  0
03040:  GOTO   3188 (RETURN)
....................  
.................... unsigned int8  RP_Buffer[RP_BFR_SIZE]; 
.................... unsigned int16 RP_Byte_Counter = 0; 
.................... unsigned int8  RP_Overflow = 0; 
.................... unsigned int16 RP_Read_Byte_counter = 0; 
.................... unsigned int8  RP_Temp_byte = 0; 
....................  
.................... #INT_RDA4 
.................... Void SERIAL_ISR4()                                                              
.................... { 
....................    if( kbhit(RPic) ) 
*
0016A:  BTFSS  FA6.7
0016C:  BRA    01B0
....................    { 
....................       if( RP_Byte_Counter < RP_BFR_SIZE ) 
0016E:  MOVLB  2
00170:  MOVF   x5B,F
00172:  BNZ   01A8
00174:  MOVF   x5A,W
00176:  SUBLW  31
00178:  BNC   01A8
....................       { 
....................          RP_Buffer[RP_Byte_Counter] = fgetc(RPic); 
0017A:  MOVLW  28
0017C:  ADDWF  x5A,W
0017E:  MOVWF  FE9
00180:  MOVLW  02
00182:  ADDWFC x5B,W
00184:  MOVWF  FEA
00186:  MOVFF  FEA,453
0018A:  MOVFF  FE9,452
0018E:  MOVLB  0
00190:  RCALL  014C
00192:  MOVFF  453,FEA
00196:  MOVFF  452,FE9
0019A:  MOVFF  01,FEF
....................          RP_Byte_Counter++; 
0019E:  MOVLB  2
001A0:  INCF   x5A,F
001A2:  BTFSC  FD8.2
001A4:  INCF   x5B,F
....................       } 
001A6:  BRA    01B2
....................       else RP_Overflow = fgetc(RPic); 
001A8:  MOVLB  0
001AA:  RCALL  014C
001AC:  MOVFF  01,25C
001B0:  MOVLB  2
....................    } 
001B2:  BCF    FA6.7
001B4:  MOVLB  0
001B6:  GOTO   008C
.................... } 
....................  
.................... unsigned int8 RPic_Available() 
.................... { 
....................    //if (RP_Byte_Counter > 0)  
....................    return RP_Byte_Counter ; 
*
03044:  MOVLB  2
03046:  MOVFF  25A,01
0304A:  MOVLB  0
0304C:  GOTO   30A2 (RETURN)
....................    //else return 0; 
.................... } 
....................  
.................... unsigned int8 RPic_Read() 
.................... { 
....................    if (RP_Byte_Counter>0) 
03050:  MOVLB  2
03052:  MOVF   x5A,F
03054:  BNZ   305A
03056:  MOVF   x5B,F
03058:  BZ    308A
....................    {     
....................       RP_Temp_byte = RP_Buffer[RP_Read_Byte_counter]; 
0305A:  MOVLW  28
0305C:  ADDWF  x5D,W
0305E:  MOVWF  FE9
03060:  MOVLW  02
03062:  ADDWFC x5E,W
03064:  MOVWF  FEA
03066:  MOVFF  FEF,25F
....................        
....................       RP_Byte_Counter--; 
0306A:  MOVF   x5A,W
0306C:  BTFSC  FD8.2
0306E:  DECF   x5B,F
03070:  DECF   x5A,F
....................       RP_Read_Byte_counter++; 
03072:  INCF   x5D,F
03074:  BTFSC  FD8.2
03076:  INCF   x5E,F
....................       if(RP_Byte_Counter == 0) RP_Read_Byte_counter = 0; 
03078:  MOVF   x5A,F
0307A:  BNZ   3084
0307C:  MOVF   x5B,F
0307E:  BNZ   3084
03080:  CLRF   x5E
03082:  CLRF   x5D
....................       return RP_Temp_byte;  
03084:  MOVFF  25F,01
03088:  BRA    309C
....................    } 
....................     
....................    if (RP_Byte_Counter == 0) 
0308A:  MOVF   x5A,F
0308C:  BNZ   309C
0308E:  MOVF   x5B,F
03090:  BNZ   309C
....................    {  
....................       RP_Read_Byte_counter = 0; 
03092:  CLRF   x5E
03094:  CLRF   x5D
....................       RP_Temp_byte = 0x00; 
03096:  CLRF   x5F
....................       return RP_Temp_byte;  
03098:  MOVFF  25F,01
....................    } 
0309C:  MOVLB  0
0309E:  RETURN 0
....................   
.................... } 
....................  
.................... void RPic_flush() 
.................... { 
....................    while( Rpic_Available() ) Rpic_Read() ; 
.................... } 
.................... //_____________________________________________________________________________ 
....................  
....................  
....................  
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... // COM pic comunication______________________________________________________ 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... #define CP_BFR_SIZE 50 
.................... #pin_select TX2=PIN_D3 
.................... #pin_select RX2=PIN_D2 
.................... #use rs232(baud=38400,parity=N,UART2,bits=8,stream=cpic,ERRORS)                         // MAIN to Ext +/- 6v 
*
001BA:  BTFSS  FA4.5
001BC:  BRA    01BA
001BE:  MOVFF  F33,1EF
001C2:  MOVFF  F1E,01
001C6:  MOVLB  1
001C8:  BTFSS  xEF.1
001CA:  BRA    01D4
001CC:  MOVLB  F
001CE:  BCF    x33.4
001D0:  BSF    x33.4
001D2:  MOVLB  1
001D4:  MOVLB  0
001D6:  RETURN 0
*
088D4:  BTFSS  FA4.4
088D6:  BRA    88D4
088D8:  MOVLB  F
088DA:  MOVWF  x1D
088DC:  MOVLB  0
088DE:  RETURN 0
....................  
....................  
.................... unsigned int8  CP_Buffer[CP_BFR_SIZE]; 
.................... unsigned int16 CP_Byte_Counter = 0; 
.................... unsigned int8  CP_Overflow = 0; 
.................... unsigned int16 CP_Read_Byte_counter = 0; 
.................... unsigned int8  CP_Temp_byte = 0; 
.................... #INT_RDA2 
.................... Void SERIAL_ISR2()                                                             // MAIN PIC uart interupt loop 
.................... { 
....................    if( kbhit(CPic) ) 
*
001D8:  BTFSS  FA4.5
001DA:  BRA    021E
....................    { 
....................       if( CP_Byte_Counter < CP_BFR_SIZE ) 
001DC:  MOVLB  2
001DE:  MOVF   x93,F
001E0:  BNZ   0216
001E2:  MOVF   x92,W
001E4:  SUBLW  31
001E6:  BNC   0216
....................       { 
....................          CP_Buffer[CP_Byte_Counter] = fgetc(CPic); 
001E8:  MOVLW  60
001EA:  ADDWF  x92,W
001EC:  MOVWF  FE9
001EE:  MOVLW  02
001F0:  ADDWFC x93,W
001F2:  MOVWF  FEA
001F4:  MOVFF  FEA,453
001F8:  MOVFF  FE9,452
001FC:  MOVLB  0
001FE:  RCALL  01BA
00200:  MOVFF  453,FEA
00204:  MOVFF  452,FE9
00208:  MOVFF  01,FEF
....................          CP_Byte_Counter++; 
0020C:  MOVLB  2
0020E:  INCF   x92,F
00210:  BTFSC  FD8.2
00212:  INCF   x93,F
....................       } 
00214:  BRA    0220
....................       else CP_Overflow = fgetc(CPic); 
00216:  MOVLB  0
00218:  RCALL  01BA
0021A:  MOVFF  01,294
0021E:  MOVLB  2
....................    } 
00220:  BCF    FA4.5
00222:  MOVLB  0
00224:  GOTO   008C
.................... } 
....................  
.................... unsigned int8 CPic_Available() 
.................... { 
....................    if (CP_Byte_Counter > 0) return CP_Byte_Counter ; 
*
087A4:  MOVLB  2
087A6:  MOVF   x92,F
087A8:  BNZ   87AE
087AA:  MOVF   x93,F
087AC:  BZ    87B6
087AE:  MOVFF  292,01
087B2:  BRA    87BA
087B4:  BRA    87BA
....................    else return 0; 
087B6:  MOVLW  00
087B8:  MOVWF  01
087BA:  MOVLB  0
087BC:  GOTO   8812 (RETURN)
.................... } 
....................  
.................... unsigned int8 CPic_Read() 
.................... { 
....................    if (CP_Byte_Counter>0) 
087C0:  MOVLB  2
087C2:  MOVF   x92,F
087C4:  BNZ   87CA
087C6:  MOVF   x93,F
087C8:  BZ    87FA
....................    {     
....................       CP_Temp_byte = CP_Buffer[CP_Read_Byte_counter]; 
087CA:  MOVLW  60
087CC:  ADDWF  x95,W
087CE:  MOVWF  FE9
087D0:  MOVLW  02
087D2:  ADDWFC x96,W
087D4:  MOVWF  FEA
087D6:  MOVFF  FEF,297
....................        
....................       CP_Byte_Counter--; 
087DA:  MOVF   x92,W
087DC:  BTFSC  FD8.2
087DE:  DECF   x93,F
087E0:  DECF   x92,F
....................       CP_Read_Byte_counter++; 
087E2:  INCF   x95,F
087E4:  BTFSC  FD8.2
087E6:  INCF   x96,F
....................       if(CP_Byte_Counter == 0) CP_Read_Byte_counter = 0; 
087E8:  MOVF   x92,F
087EA:  BNZ   87F4
087EC:  MOVF   x93,F
087EE:  BNZ   87F4
087F0:  CLRF   x96
087F2:  CLRF   x95
....................       return CP_Temp_byte;  
087F4:  MOVFF  297,01
087F8:  BRA    880C
....................    } 
....................     
....................    if (CP_Byte_Counter == 0) 
087FA:  MOVF   x92,F
087FC:  BNZ   880C
087FE:  MOVF   x93,F
08800:  BNZ   880C
....................    {  
....................       CP_Read_Byte_counter = 0; 
08802:  CLRF   x96
08804:  CLRF   x95
....................       CP_Temp_byte = 0x00; 
08806:  CLRF   x97
....................       return CP_Temp_byte;  
08808:  MOVFF  297,01
....................    } 
0880C:  MOVLB  0
0880E:  RETURN 0
....................   
.................... } 
....................  
.................... void CPic_flush() 
.................... { 
....................    while( Cpic_Available() ) Cpic_Read() ; 
.................... } 
....................  
....................  
....................  
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... // FAB pic comunication______________________________________________________ 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... #define FP_BFR_SIZE 50 
.................... #pin_select TX3=PIN_E5 
.................... #pin_select RX3=PIN_E4 
.................... #use rs232(baud=38400,parity=N,UART3,bits=8,stream=FAB,ERRORS)                  //UART MAIN to FAB PIC 
*
00228:  BTFSS  FA6.5
0022A:  BRA    0228
0022C:  MOVFF  F2F,1EF
00230:  MOVFF  F2A,01
00234:  MOVLB  1
00236:  BTFSS  xEF.1
00238:  BRA    0242
0023A:  MOVLB  F
0023C:  BCF    x2F.4
0023E:  BSF    x2F.4
00240:  MOVLB  1
00242:  MOVLB  0
00244:  RETURN 0
*
04862:  BTFSS  FA6.4
04864:  BRA    4862
04866:  MOVLB  F
04868:  MOVWF  x29
0486A:  MOVLB  0
0486C:  GOTO   49A4 (RETURN)
....................  
.................... unsigned int8  FP_Buffer[FP_BFR_SIZE]; 
.................... unsigned int16 FP_Byte_Counter = 0; 
.................... unsigned int8  FP_Overflow = 0; 
.................... unsigned int16 FP_Read_Byte_counter = 0; 
.................... unsigned int8  FP_Temp_byte = 0; 
.................... #INT_RDA3 
.................... Void SERIAL_ISR3()                                                             // MAIN PIC uart interupt loop 
.................... { 
....................    if( kbhit(FAB) ) 
*
00246:  BTFSS  FA6.5
00248:  BRA    028C
....................    { 
....................       if( FP_Byte_Counter < FP_BFR_SIZE ) 
0024A:  MOVLB  2
0024C:  MOVF   xCB,F
0024E:  BNZ   0284
00250:  MOVF   xCA,W
00252:  SUBLW  31
00254:  BNC   0284
....................       { 
....................          FP_Buffer[FP_Byte_Counter] = fgetc(FAB); 
00256:  MOVLW  98
00258:  ADDWF  xCA,W
0025A:  MOVWF  FE9
0025C:  MOVLW  02
0025E:  ADDWFC xCB,W
00260:  MOVWF  FEA
00262:  MOVFF  FEA,453
00266:  MOVFF  FE9,452
0026A:  MOVLB  0
0026C:  RCALL  0228
0026E:  MOVFF  453,FEA
00272:  MOVFF  452,FE9
00276:  MOVFF  01,FEF
....................          FP_Byte_Counter++; 
0027A:  MOVLB  2
0027C:  INCF   xCA,F
0027E:  BTFSC  FD8.2
00280:  INCF   xCB,F
....................       } 
00282:  BRA    028E
....................       else FP_Overflow = fgetc(FAB); 
00284:  MOVLB  0
00286:  RCALL  0228
00288:  MOVFF  01,2CC
0028C:  MOVLB  2
....................    } 
0028E:  BCF    FA6.5
00290:  MOVLB  0
00292:  GOTO   008C
.................... } 
....................  
.................... unsigned int8 FABPic_Available() 
.................... { 
....................    if (FP_Byte_Counter > 0) return FP_Byte_Counter ; 
*
047EA:  MOVLB  2
047EC:  MOVF   xCA,F
047EE:  BNZ   47F4
047F0:  MOVF   xCB,F
047F2:  BZ    47FC
047F4:  MOVFF  2CA,01
047F8:  BRA    4800
047FA:  BRA    4800
....................    else return 0; 
047FC:  MOVLW  00
047FE:  MOVWF  01
04800:  MOVLB  0
04802:  RETURN 0
.................... } 
....................  
.................... unsigned int8 FABPic_Read() 
.................... { 
....................    if (FP_Byte_Counter>0) 
04804:  MOVLB  2
04806:  MOVF   xCA,F
04808:  BNZ   480E
0480A:  MOVF   xCB,F
0480C:  BZ    483E
....................    {     
....................       FP_Temp_byte = FP_Buffer[FP_Read_Byte_counter]; 
0480E:  MOVLW  98
04810:  ADDWF  xCD,W
04812:  MOVWF  FE9
04814:  MOVLW  02
04816:  ADDWFC xCE,W
04818:  MOVWF  FEA
0481A:  MOVFF  FEF,2CF
....................        
....................       FP_Byte_Counter--; 
0481E:  MOVF   xCA,W
04820:  BTFSC  FD8.2
04822:  DECF   xCB,F
04824:  DECF   xCA,F
....................       FP_Read_Byte_counter++; 
04826:  INCF   xCD,F
04828:  BTFSC  FD8.2
0482A:  INCF   xCE,F
....................       if(FP_Byte_Counter == 0) FP_Read_Byte_counter = 0; 
0482C:  MOVF   xCA,F
0482E:  BNZ   4838
04830:  MOVF   xCB,F
04832:  BNZ   4838
04834:  CLRF   xCE
04836:  CLRF   xCD
....................       return FP_Temp_byte;  
04838:  MOVFF  2CF,01
0483C:  BRA    4850
....................    } 
....................     
....................    if (FP_Byte_Counter == 0) 
0483E:  MOVF   xCA,F
04840:  BNZ   4850
04842:  MOVF   xCB,F
04844:  BNZ   4850
....................    {  
....................       FP_Read_Byte_counter = 0; 
04846:  CLRF   xCE
04848:  CLRF   xCD
....................       FP_Temp_byte = 0x00; 
0484A:  CLRF   xCF
....................       return FP_Temp_byte;  
0484C:  MOVFF  2CF,01
....................    } 
04850:  MOVLB  0
04852:  RETURN 0
....................   
.................... } 
....................  
.................... void FABPic_flush() 
.................... { 
....................    while( FABpic_Available() ) FABpic_Read() ; 
04854:  RCALL  47EA
04856:  MOVF   01,F
04858:  BZ    485E
0485A:  RCALL  4804
0485C:  BRA    4854
0485E:  GOTO   4982 (RETURN)
.................... } 
.................... //_____________________________________________________________________________ 
....................  
....................  
....................  
.................... // this function will just print a line in debug port__________________________ 
.................... void printline() 
.................... { 
....................    fprintf( PC, "\n\r"); 
*
02092:  MOVLW  0A
02094:  BTFSS  F9E.4
02096:  BRA    2094
02098:  MOVWF  FAD
0209A:  MOVLW  0D
0209C:  BTFSS  F9E.4
0209E:  BRA    209C
020A0:  MOVWF  FAD
020A2:  RETURN 0
.................... } 
....................  
.................... void printtable(unsigned int8 table[], int table_size, int column_size) 
.................... { 
....................    for(int i = 0; i < table_size; i++)  
....................    { 
....................       fprintf( PC, "%x ", table[0]); 
....................       if ((i+1) %column_size  == 0 )  
....................       { 
....................          printline(); 
....................       } 
....................    } 
.................... } 
....................  
.................... // using this function we can make any data array clear________________________ 
.................... void CLEAR_DATA_ARRAY(unsigned int8 array[], int array_size) 
.................... {    
....................    for(int i = 0; i < array_size; i++) 
*
02F54:  MOVLB  4
02F56:  CLRF   x3A
02F58:  MOVF   x39,W
02F5A:  SUBWF  x3A,W
02F5C:  BC    2F70
....................    { 
....................       array[i] = 0 ; 
02F5E:  MOVF   x3A,W
02F60:  ADDWF  x37,W
02F62:  MOVWF  FE9
02F64:  MOVLW  00
02F66:  ADDWFC x38,W
02F68:  MOVWF  FEA
02F6A:  CLRF   FEF
02F6C:  INCF   x3A,F
02F6E:  BRA    2F58
....................    } 
02F70:  MOVLB  0
02F72:  RETURN 0
.................... } 
....................  
.................... // 
....................  
.................... #include <RTC_functions.c> 
.................... //This function is used to enable RTC over writing_____________________________ 
.................... Void RTC_WRITE_ENABLE(int1 i) 
.................... { 
....................    if(i == 1) 
*
01DCA:  MOVLB  4
01DCC:  DECFSZ x45,W
01DCE:  BRA    1DDE
....................    { 
....................       #ASM 
....................       movlw 0x55 
01DD0:  MOVLW  55
....................       movwf EECON2 
01DD2:  MOVWF  F7E
....................       movlw 0xAA 
01DD4:  MOVLW  AA
....................       movwf EECON2 
01DD6:  MOVWF  F7E
....................       bsf RTCCON1,5 
01DD8:  MOVLB  F
01DDA:  BSF    x5F.5
01DDC:  MOVLB  4
....................       #ENDASM 
....................    } 
....................     
....................       if(i == 0) 
01DDE:  MOVF   x45,F
01DE0:  BNZ   1DF0
....................    { 
....................       #ASM 
....................       movlw 0x55 
01DE2:  MOVLW  55
....................       movwf EECON2 
01DE4:  MOVWF  F7E
....................       movlw 0xAA 
01DE6:  MOVLW  AA
....................       movwf EECON2 
01DE8:  MOVWF  F7E
....................       bcf RTCCON1,5 
01DEA:  MOVLB  F
01DEC:  BCF    x5F.5
01DEE:  MOVLB  4
....................       #ENDASM 
....................    } 
01DF0:  MOVLB  0
01DF2:  RETURN 0
.................... } 
....................  
.................... // This function will be used to ovewrite hour value in RTC____________________ 
.................... Void WRITE_OBC_RTC(char year, char month, char day, char hour,char min, char sec) 
.................... { 
....................    char i,lower,higher; 
....................    RTC_WRITE_ENABLE(1);  
*
01E20:  MOVLW  01
01E22:  MOVLB  4
01E24:  MOVWF  x45
01E26:  MOVLB  0
01E28:  RCALL  1DCA
....................     
....................    // writing year 
....................    i = year ; 
01E2A:  MOVFF  43C,442
....................    lower  = i % 10; 
01E2E:  MOVFF  442,447
01E32:  MOVLW  0A
01E34:  MOVLB  4
01E36:  MOVWF  x48
01E38:  MOVLB  0
01E3A:  RCALL  1DF4
01E3C:  MOVFF  00,443
....................    higher = ( ( i - (i%10) )/10 )<<4 ; 
01E40:  MOVFF  442,447
01E44:  MOVLW  0A
01E46:  MOVLB  4
01E48:  MOVWF  x48
01E4A:  MOVLB  0
01E4C:  RCALL  1DF4
01E4E:  MOVF   00,W
01E50:  MOVLB  4
01E52:  SUBWF  x42,W
01E54:  MOVWF  x46
01E56:  MOVWF  x47
01E58:  MOVLW  0A
01E5A:  MOVWF  x48
01E5C:  MOVLB  0
01E5E:  RCALL  1DF4
01E60:  SWAPF  01,W
01E62:  MOVLB  4
01E64:  MOVWF  x44
01E66:  MOVLW  F0
01E68:  ANDWF  x44,F
....................    i = lower|higher;  
01E6A:  MOVF   x43,W
01E6C:  IORWF  x44,W
01E6E:  MOVWF  x42
....................    RTCPTR0 = 1; 
01E70:  MOVLB  F
01E72:  BSF    x5F.0
....................    RTCPTR1 = 1; 
01E74:  BSF    x5F.1
....................    RTCVALL = i ; 
01E76:  MOVFF  442,F5C
....................     
....................    // writing month 
....................    i = month ; 
01E7A:  MOVFF  43D,442
....................    lower  = i % 10; 
01E7E:  MOVFF  442,447
01E82:  MOVLW  0A
01E84:  MOVLB  4
01E86:  MOVWF  x48
01E88:  MOVLB  0
01E8A:  RCALL  1DF4
01E8C:  MOVFF  00,443
....................    higher = ( ( i - (i%10) )/10 )<<4 ; 
01E90:  MOVFF  442,447
01E94:  MOVLW  0A
01E96:  MOVLB  4
01E98:  MOVWF  x48
01E9A:  MOVLB  0
01E9C:  RCALL  1DF4
01E9E:  MOVF   00,W
01EA0:  MOVLB  4
01EA2:  SUBWF  x42,W
01EA4:  MOVWF  x46
01EA6:  MOVWF  x47
01EA8:  MOVLW  0A
01EAA:  MOVWF  x48
01EAC:  MOVLB  0
01EAE:  RCALL  1DF4
01EB0:  SWAPF  01,W
01EB2:  MOVLB  4
01EB4:  MOVWF  x44
01EB6:  MOVLW  F0
01EB8:  ANDWF  x44,F
....................    i = lower|higher;  
01EBA:  MOVF   x43,W
01EBC:  IORWF  x44,W
01EBE:  MOVWF  x42
....................    RTCPTR0 = 0; 
01EC0:  MOVLB  F
01EC2:  BCF    x5F.0
....................    RTCPTR1 = 1; 
01EC4:  BSF    x5F.1
....................    RTCVALH = i ; 
01EC6:  MOVFF  442,F5D
....................     
....................    // writing day 
....................    i = day ; 
01ECA:  MOVFF  43E,442
....................    lower  = i % 10; 
01ECE:  MOVFF  442,447
01ED2:  MOVLW  0A
01ED4:  MOVLB  4
01ED6:  MOVWF  x48
01ED8:  MOVLB  0
01EDA:  RCALL  1DF4
01EDC:  MOVFF  00,443
....................    higher = ( ( i - (i%10) )/10 )<<4 ; 
01EE0:  MOVFF  442,447
01EE4:  MOVLW  0A
01EE6:  MOVLB  4
01EE8:  MOVWF  x48
01EEA:  MOVLB  0
01EEC:  RCALL  1DF4
01EEE:  MOVF   00,W
01EF0:  MOVLB  4
01EF2:  SUBWF  x42,W
01EF4:  MOVWF  x46
01EF6:  MOVWF  x47
01EF8:  MOVLW  0A
01EFA:  MOVWF  x48
01EFC:  MOVLB  0
01EFE:  RCALL  1DF4
01F00:  SWAPF  01,W
01F02:  MOVLB  4
01F04:  MOVWF  x44
01F06:  MOVLW  F0
01F08:  ANDWF  x44,F
....................    i = lower|higher;  
01F0A:  MOVF   x43,W
01F0C:  IORWF  x44,W
01F0E:  MOVWF  x42
....................    RTCPTR0 = 0; 
01F10:  MOVLB  F
01F12:  BCF    x5F.0
....................    RTCPTR1 = 1; 
01F14:  BSF    x5F.1
....................    RTCVALL = i ; 
01F16:  MOVFF  442,F5C
....................     
....................    // writing hour 
....................    i = hour ; 
01F1A:  MOVFF  43F,442
....................    lower  = i % 10; 
01F1E:  MOVFF  442,447
01F22:  MOVLW  0A
01F24:  MOVLB  4
01F26:  MOVWF  x48
01F28:  MOVLB  0
01F2A:  RCALL  1DF4
01F2C:  MOVFF  00,443
....................    higher = ( ( i - (i%10) )/10 )<<4 ; 
01F30:  MOVFF  442,447
01F34:  MOVLW  0A
01F36:  MOVLB  4
01F38:  MOVWF  x48
01F3A:  MOVLB  0
01F3C:  RCALL  1DF4
01F3E:  MOVF   00,W
01F40:  MOVLB  4
01F42:  SUBWF  x42,W
01F44:  MOVWF  x46
01F46:  MOVWF  x47
01F48:  MOVLW  0A
01F4A:  MOVWF  x48
01F4C:  MOVLB  0
01F4E:  RCALL  1DF4
01F50:  SWAPF  01,W
01F52:  MOVLB  4
01F54:  MOVWF  x44
01F56:  MOVLW  F0
01F58:  ANDWF  x44,F
....................    i = lower|higher;  
01F5A:  MOVF   x43,W
01F5C:  IORWF  x44,W
01F5E:  MOVWF  x42
....................    RTCPTR0 = 1; 
01F60:  MOVLB  F
01F62:  BSF    x5F.0
....................    RTCPTR1 = 0; 
01F64:  BCF    x5F.1
....................    RTCVALL = i ; 
01F66:  MOVFF  442,F5C
....................     
....................    // writing min 
....................    i = min ; 
01F6A:  MOVFF  440,442
....................    lower  = i % 10; 
01F6E:  MOVFF  442,447
01F72:  MOVLW  0A
01F74:  MOVLB  4
01F76:  MOVWF  x48
01F78:  MOVLB  0
01F7A:  RCALL  1DF4
01F7C:  MOVFF  00,443
....................    higher = ( ( i - (i%10) )/10 )<<4 ; 
01F80:  MOVFF  442,447
01F84:  MOVLW  0A
01F86:  MOVLB  4
01F88:  MOVWF  x48
01F8A:  MOVLB  0
01F8C:  RCALL  1DF4
01F8E:  MOVF   00,W
01F90:  MOVLB  4
01F92:  SUBWF  x42,W
01F94:  MOVWF  x46
01F96:  MOVWF  x47
01F98:  MOVLW  0A
01F9A:  MOVWF  x48
01F9C:  MOVLB  0
01F9E:  RCALL  1DF4
01FA0:  SWAPF  01,W
01FA2:  MOVLB  4
01FA4:  MOVWF  x44
01FA6:  MOVLW  F0
01FA8:  ANDWF  x44,F
....................    i = lower|higher;  
01FAA:  MOVF   x43,W
01FAC:  IORWF  x44,W
01FAE:  MOVWF  x42
....................    RTCPTR0 = 0; 
01FB0:  MOVLB  F
01FB2:  BCF    x5F.0
....................    RTCPTR1 = 0; 
01FB4:  BCF    x5F.1
....................    RTCVALH = i ; 
01FB6:  MOVFF  442,F5D
....................     
....................    // writing sec 
....................    i = sec ; 
01FBA:  MOVFF  441,442
....................    lower  = i % 10; 
01FBE:  MOVFF  442,447
01FC2:  MOVLW  0A
01FC4:  MOVLB  4
01FC6:  MOVWF  x48
01FC8:  MOVLB  0
01FCA:  RCALL  1DF4
01FCC:  MOVFF  00,443
....................    higher = ( ( i - (i%10) )/10 )<<4 ; 
01FD0:  MOVFF  442,447
01FD4:  MOVLW  0A
01FD6:  MOVLB  4
01FD8:  MOVWF  x48
01FDA:  MOVLB  0
01FDC:  RCALL  1DF4
01FDE:  MOVF   00,W
01FE0:  MOVLB  4
01FE2:  SUBWF  x42,W
01FE4:  MOVWF  x46
01FE6:  MOVWF  x47
01FE8:  MOVLW  0A
01FEA:  MOVWF  x48
01FEC:  MOVLB  0
01FEE:  RCALL  1DF4
01FF0:  SWAPF  01,W
01FF2:  MOVLB  4
01FF4:  MOVWF  x44
01FF6:  MOVLW  F0
01FF8:  ANDWF  x44,F
....................    i = lower|higher;  
01FFA:  MOVF   x43,W
01FFC:  IORWF  x44,W
01FFE:  MOVWF  x42
....................    RTCPTR0 = 0; 
02000:  MOVLB  F
02002:  BCF    x5F.0
....................    RTCPTR1 = 0; 
02004:  BCF    x5F.1
....................    RTCVALL = i ; 
02006:  MOVFF  442,F5C
....................     
....................    RTC_WRITE_ENABLE(0);  
0200A:  MOVLB  4
0200C:  CLRF   x45
0200E:  MOVLB  0
02010:  RCALL  1DCA
....................    return; 
02012:  RETURN 0
.................... } 
....................  
.................... // function for normal rtc reading_____________________________________________ 
.................... void Print_RTC_1() 
.................... { 
....................    rtc_time_t  read_clock;  
....................    rtc_read(&read_clock);  
....................  
....................       Fprintf(PC,"MainPIC Time >>> "); 
....................       Fprintf(PC,"%02d", read_clock.tm_year ); 
....................       Fprintf(PC,"-%02d", read_clock.tm_mon ); 
....................       Fprintf(PC,"-%02d__", read_clock.tm_mday ); 
....................       Fprintf(PC,"%02d:", read_clock.tm_hour ); 
....................       Fprintf(PC,"%02d:", read_clock.tm_min );  
....................       Fprintf(PC,"%02d", read_clock.tm_sec );  
....................        
....................       Fprintf(PC,"\n\r"); 
....................  
.................... } 
....................  
.................... // function for rtc reading frequently_________________________________________ 
.................... unsigned int16 SECONDS_COUNTER = 0; 
....................  
....................  
.................... void READ_MP_RTC_AND_PRINT() 
.................... { 
....................   if(MLC > 1000) 
*
02D86:  MOVF   20,F
02D88:  BNZ   2DA2
02D8A:  MOVF   1F,F
02D8C:  BNZ   2DA2
02D8E:  MOVF   1E,W
02D90:  SUBLW  02
02D92:  BTFSC  FD8.0
02D94:  BRA    2F4E
02D96:  XORLW  FF
02D98:  BNZ   2DA2
02D9A:  MOVF   1D,W
02D9C:  SUBLW  E8
02D9E:  BTFSC  FD8.0
02DA0:  BRA    2F4E
....................   { 
....................       MLC = 0; 
02DA2:  CLRF   20
02DA4:  CLRF   1F
02DA6:  CLRF   1E
02DA8:  CLRF   1D
....................       rtc_time_t  read_clock;  
....................       rtc_read(&read_clock); 
02DAA:  MOVLB  F
02DAC:  BSF    x5F.0
02DAE:  BSF    x5F.1
02DB0:  MOVLW  03
02DB2:  MOVWF  FEA
02DB4:  MOVLW  FD
02DB6:  MOVWF  FE9
02DB8:  MOVLW  04
02DBA:  MOVWF  01
02DBC:  MOVF   x5C,W
02DBE:  MOVLB  0
02DC0:  RCALL  2CC0
02DC2:  MOVWF  FEE
02DC4:  MOVLB  F
02DC6:  MOVF   x5D,W
02DC8:  MOVLB  0
02DCA:  RCALL  2CC0
02DCC:  MOVWF  FEE
02DCE:  DECFSZ 01,F
02DD0:  BRA    2DD4
02DD2:  BRA    2DD8
02DD4:  MOVLB  F
02DD6:  BRA    2DBC
....................       MP_RTC_SEC   = read_clock.tm_sec  ; 
02DD8:  MOVFF  403,1C2
....................       
....................       if(MP_RTC_SEC != sec_prev) 
02DDC:  MOVLB  1
02DDE:  MOVF   xC4,W
02DE0:  SUBWF  xC2,W
02DE2:  BTFSC  FD8.2
02DE4:  BRA    2F20
....................       { 
....................          MP_RTC_YEAR  = read_clock.tm_year ; 
02DE6:  MOVFF  3FD,1BD
....................          MP_RTC_MONTH = read_clock.tm_mon  ; 
02DEA:  MOVFF  400,1BE
....................          MP_RTC_DAY   = read_clock.tm_mday ; 
02DEE:  MOVFF  3FF,1BF
....................          MP_RTC_HOUR  = read_clock.tm_hour ; 
02DF2:  MOVFF  401,1C0
....................          MP_RTC_MIN   = read_clock.tm_min  ; 
02DF6:  MOVFF  404,1C1
....................        
....................          Fprintf(PC,"MP %02u",  MP_RTC_YEAR )  ; 
02DFA:  MOVLW  A8
02DFC:  MOVWF  FF6
02DFE:  MOVLW  02
02E00:  MOVWF  FF7
02E02:  MOVLW  00
02E04:  MOVWF  FF8
02E06:  MOVLW  03
02E08:  MOVLB  4
02E0A:  MOVWF  x3D
02E0C:  MOVLB  0
02E0E:  CALL   20A4
02E12:  MOVFF  1BD,43C
02E16:  MOVLW  01
02E18:  MOVLB  4
02E1A:  MOVWF  x3D
02E1C:  MOVLB  0
02E1E:  RCALL  29CE
....................          Fprintf(PC,"/%02u", MP_RTC_MONTH ) ; 
02E20:  MOVLW  2F
02E22:  BTFSS  F9E.4
02E24:  BRA    2E22
02E26:  MOVWF  FAD
02E28:  MOVFF  1BE,43C
02E2C:  MOVLW  01
02E2E:  MOVLB  4
02E30:  MOVWF  x3D
02E32:  MOVLB  0
02E34:  RCALL  29CE
....................          Fprintf(PC,"/%02u  ", MP_RTC_DAY ) ; 
02E36:  MOVLW  2F
02E38:  BTFSS  F9E.4
02E3A:  BRA    2E38
02E3C:  MOVWF  FAD
02E3E:  MOVFF  1BF,43C
02E42:  MOVLW  01
02E44:  MOVLB  4
02E46:  MOVWF  x3D
02E48:  MOVLB  0
02E4A:  RCALL  29CE
02E4C:  MOVLW  20
02E4E:  BTFSS  F9E.4
02E50:  BRA    2E4E
02E52:  MOVWF  FAD
02E54:  MOVLW  20
02E56:  BTFSS  F9E.4
02E58:  BRA    2E56
02E5A:  MOVWF  FAD
....................          Fprintf(PC,"%02u:", MP_RTC_HOUR )  ; 
02E5C:  MOVFF  1C0,43C
02E60:  MOVLW  01
02E62:  MOVLB  4
02E64:  MOVWF  x3D
02E66:  MOVLB  0
02E68:  RCALL  29CE
02E6A:  MOVLW  3A
02E6C:  BTFSS  F9E.4
02E6E:  BRA    2E6C
02E70:  MOVWF  FAD
....................          Fprintf(PC,"%02u:", MP_RTC_MIN )   ;  
02E72:  MOVFF  1C1,43C
02E76:  MOVLW  01
02E78:  MOVLB  4
02E7A:  MOVWF  x3D
02E7C:  MOVLB  0
02E7E:  RCALL  29CE
02E80:  MOVLW  3A
02E82:  BTFSS  F9E.4
02E84:  BRA    2E82
02E86:  MOVWF  FAD
....................          Fprintf(PC,"%02u ", MP_RTC_SEC )   ;  
02E88:  MOVFF  1C2,43C
02E8C:  MOVLW  01
02E8E:  MOVLB  4
02E90:  MOVWF  x3D
02E92:  MOVLB  0
02E94:  RCALL  29CE
02E96:  MOVLW  20
02E98:  BTFSS  F9E.4
02E9A:  BRA    2E98
02E9C:  MOVWF  FAD
....................           
....................          Fprintf(PC,"%03u ", SEC90_Count )   ; 
02E9E:  MOVFF  1C3,43C
02EA2:  MOVLW  03
02EA4:  MOVLB  4
02EA6:  MOVWF  x3D
02EA8:  MOVLB  0
02EAA:  RCALL  29CE
02EAC:  MOVLW  20
02EAE:  BTFSS  F9E.4
02EB0:  BRA    2EAE
02EB2:  MOVWF  FAD
....................          Fprintf(PC,"%03Lu ", SECONDS_COUNTER )   ; 
02EB4:  MOVLW  0A
02EB6:  MOVWF  FE9
02EB8:  MOVFF  2D3,436
02EBC:  MOVFF  2D2,435
02EC0:  RCALL  2CD2
02EC2:  MOVLW  20
02EC4:  BTFSS  F9E.4
02EC6:  BRA    2EC4
02EC8:  MOVWF  FAD
....................           
....................          Fprintf(PC,"%u-%03u",CFM_ACCESS_FLAG, CFM_ACCESS_TIME  );   
02ECA:  MOVFF  1AF,43C
02ECE:  MOVLW  1B
02ED0:  MOVLB  4
02ED2:  MOVWF  x3D
02ED4:  MOVLB  0
02ED6:  RCALL  29CE
02ED8:  MOVLW  2D
02EDA:  BTFSS  F9E.4
02EDC:  BRA    2EDA
02EDE:  MOVWF  FAD
02EE0:  MOVFF  1B0,43C
02EE4:  MOVLW  03
02EE6:  MOVLB  4
02EE8:  MOVWF  x3D
02EEA:  MOVLB  0
02EEC:  RCALL  29CE
....................          Fprintf(PC,"\n\r")                 ; 
02EEE:  MOVLW  0A
02EF0:  BTFSS  F9E.4
02EF2:  BRA    2EF0
02EF4:  MOVWF  FAD
02EF6:  MOVLW  0D
02EF8:  BTFSS  F9E.4
02EFA:  BRA    2EF8
02EFC:  MOVWF  FAD
....................  
....................          SEC90_Count ++;   
02EFE:  MOVLB  1
02F00:  INCF   xC3,F
....................          if(CFM_ACCESS_TIME!=0) CFM_ACCESS_TIME--; 
02F02:  MOVF   xB0,F
02F04:  BZ    2F08
02F06:  DECF   xB0,F
....................           
....................          if( SECONDS_COUNTER <= 300 ) SECONDS_COUNTER++; 
02F08:  MOVLB  2
02F0A:  MOVF   xD3,W
02F0C:  SUBLW  01
02F0E:  BNC   2F1E
02F10:  BNZ   2F18
02F12:  MOVF   xD2,W
02F14:  SUBLW  2C
02F16:  BNC   2F1E
02F18:  INCF   xD2,F
02F1A:  BTFSC  FD8.2
02F1C:  INCF   xD3,F
02F1E:  MOVLB  1
....................           
....................           
....................       } 
....................        
....................       if( _CW_STATUS_30MIN == Disabled ) 
02F20:  MOVF   xEB,W
02F22:  SUBLW  BB
02F24:  BNZ   2F48
....................       { 
....................          if( SECONDS_COUNTER < 120 ) 
02F26:  MOVLB  2
02F28:  MOVF   xD3,F
02F2A:  BNZ   2F38
02F2C:  MOVF   xD2,W
02F2E:  SUBLW  77
02F30:  BNC   2F38
....................          { 
....................             Output_Toggle(LED_PIN); 
02F32:  BCF    F98.2
02F34:  BTG    F8F.2
....................          } 
02F36:  BRA    2F4A
....................        
....................          else 
....................          { 
....................             if( LED_FLAG == 0xAA) 
02F38:  MOVLB  1
02F3A:  MOVF   xEE,W
02F3C:  SUBLW  AA
02F3E:  BNZ   2F48
....................             { 
....................                Output_low(LED_PIN); 
02F40:  BCF    F98.2
02F42:  BCF    F8F.2
....................                LED_FLAG = 0xBB ; 
02F44:  MOVLW  BB
02F46:  MOVWF  xEE
02F48:  MOVLB  2
....................             } 
....................          } 
....................       } 
....................       sec_prev = MP_RTC_SEC ;     
02F4A:  MOVFF  1C2,1C4
02F4E:  MOVLB  0
....................   }   
02F50:  GOTO   B1E6 (RETURN)
.................... } 
....................  
.................... unsigned int32 GET_DAY_NUMBER_OF_THE_YEAR(char year, char month, char day) 
.................... { 
....................    unsigned int32 DAY_NUM; 
....................     
....................    if( year%4 != 0 ) 
*
0412E:  MOVLB  4
04130:  MOVF   x33,W
04132:  ANDLW  03
04134:  BTFSC  FD8.2
04136:  BRA    4220
....................    { 
....................       if( month == 1  ) DAY_NUM = day       ; 
04138:  DECFSZ x34,W
0413A:  BRA    4146
0413C:  CLRF   x39
0413E:  CLRF   x38
04140:  CLRF   x37
04142:  MOVFF  435,436
....................       if( month == 2  ) DAY_NUM = day + 31  ; 
04146:  MOVF   x34,W
04148:  SUBLW  02
0414A:  BNZ   4158
0414C:  MOVLW  1F
0414E:  ADDWF  x35,W
04150:  MOVWF  x36
04152:  CLRF   x37
04154:  CLRF   x38
04156:  CLRF   x39
....................       if( month == 3  ) DAY_NUM = day + 59  ; 
04158:  MOVF   x34,W
0415A:  SUBLW  03
0415C:  BNZ   416A
0415E:  MOVLW  3B
04160:  ADDWF  x35,W
04162:  MOVWF  x36
04164:  CLRF   x37
04166:  CLRF   x38
04168:  CLRF   x39
....................       if( month == 4  ) DAY_NUM = day + 90  ; 
0416A:  MOVF   x34,W
0416C:  SUBLW  04
0416E:  BNZ   417C
04170:  MOVLW  5A
04172:  ADDWF  x35,W
04174:  MOVWF  x36
04176:  CLRF   x37
04178:  CLRF   x38
0417A:  CLRF   x39
....................       if( month == 5  ) DAY_NUM = day + 120 ; 
0417C:  MOVF   x34,W
0417E:  SUBLW  05
04180:  BNZ   418E
04182:  MOVLW  78
04184:  ADDWF  x35,W
04186:  MOVWF  x36
04188:  CLRF   x37
0418A:  CLRF   x38
0418C:  CLRF   x39
....................       if( month == 6  ) DAY_NUM = day + 151 ; 
0418E:  MOVF   x34,W
04190:  SUBLW  06
04192:  BNZ   41A0
04194:  MOVLW  97
04196:  ADDWF  x35,W
04198:  MOVWF  x36
0419A:  CLRF   x37
0419C:  CLRF   x38
0419E:  CLRF   x39
....................       if( month == 7  ) DAY_NUM = day + 181 ; 
041A0:  MOVF   x34,W
041A2:  SUBLW  07
041A4:  BNZ   41B2
041A6:  MOVLW  B5
041A8:  ADDWF  x35,W
041AA:  MOVWF  x36
041AC:  CLRF   x37
041AE:  CLRF   x38
041B0:  CLRF   x39
....................       if( month == 8  ) DAY_NUM = day + 212 ; 
041B2:  MOVF   x34,W
041B4:  SUBLW  08
041B6:  BNZ   41C4
041B8:  MOVLW  D4
041BA:  ADDWF  x35,W
041BC:  MOVWF  x36
041BE:  CLRF   x37
041C0:  CLRF   x38
041C2:  CLRF   x39
....................       if( month == 9  ) DAY_NUM = day + 243 ; 
041C4:  MOVF   x34,W
041C6:  SUBLW  09
041C8:  BNZ   41D6
041CA:  MOVLW  F3
041CC:  ADDWF  x35,W
041CE:  MOVWF  x36
041D0:  CLRF   x37
041D2:  CLRF   x38
041D4:  CLRF   x39
....................       if( month == 10 ) DAY_NUM = day + 273 ; 
041D6:  MOVF   x34,W
041D8:  SUBLW  0A
041DA:  BNZ   41EE
041DC:  MOVLW  11
041DE:  ADDWF  x35,W
041E0:  MOVWF  x36
041E2:  MOVLW  01
041E4:  MOVWF  x37
041E6:  BTFSC  FD8.0
041E8:  INCF   x37,F
041EA:  CLRF   x38
041EC:  CLRF   x39
....................       if( month == 11 ) DAY_NUM = day + 304 ; 
041EE:  MOVF   x34,W
041F0:  SUBLW  0B
041F2:  BNZ   4206
041F4:  MOVLW  30
041F6:  ADDWF  x35,W
041F8:  MOVWF  x36
041FA:  MOVLW  01
041FC:  MOVWF  x37
041FE:  BTFSC  FD8.0
04200:  INCF   x37,F
04202:  CLRF   x38
04204:  CLRF   x39
....................       if( month == 12 ) DAY_NUM = day + 334 ; 
04206:  MOVF   x34,W
04208:  SUBLW  0C
0420A:  BNZ   421E
0420C:  MOVLW  4E
0420E:  ADDWF  x35,W
04210:  MOVWF  x36
04212:  MOVLW  01
04214:  MOVWF  x37
04216:  BTFSC  FD8.0
04218:  INCF   x37,F
0421A:  CLRF   x38
0421C:  CLRF   x39
....................    } 
0421E:  BRA    4306
....................     
....................    else 
....................    { 
....................       if( month == 1  ) DAY_NUM = day       ; 
04220:  DECFSZ x34,W
04222:  BRA    422E
04224:  CLRF   x39
04226:  CLRF   x38
04228:  CLRF   x37
0422A:  MOVFF  435,436
....................       if( month == 2  ) DAY_NUM = day + 31  ; 
0422E:  MOVF   x34,W
04230:  SUBLW  02
04232:  BNZ   4240
04234:  MOVLW  1F
04236:  ADDWF  x35,W
04238:  MOVWF  x36
0423A:  CLRF   x37
0423C:  CLRF   x38
0423E:  CLRF   x39
....................       if( month == 3  ) DAY_NUM = day + 60  ; 
04240:  MOVF   x34,W
04242:  SUBLW  03
04244:  BNZ   4252
04246:  MOVLW  3C
04248:  ADDWF  x35,W
0424A:  MOVWF  x36
0424C:  CLRF   x37
0424E:  CLRF   x38
04250:  CLRF   x39
....................       if( month == 4  ) DAY_NUM = day + 91  ; 
04252:  MOVF   x34,W
04254:  SUBLW  04
04256:  BNZ   4264
04258:  MOVLW  5B
0425A:  ADDWF  x35,W
0425C:  MOVWF  x36
0425E:  CLRF   x37
04260:  CLRF   x38
04262:  CLRF   x39
....................       if( month == 5  ) DAY_NUM = day + 121 ; 
04264:  MOVF   x34,W
04266:  SUBLW  05
04268:  BNZ   4276
0426A:  MOVLW  79
0426C:  ADDWF  x35,W
0426E:  MOVWF  x36
04270:  CLRF   x37
04272:  CLRF   x38
04274:  CLRF   x39
....................       if( month == 6  ) DAY_NUM = day + 152 ; 
04276:  MOVF   x34,W
04278:  SUBLW  06
0427A:  BNZ   4288
0427C:  MOVLW  98
0427E:  ADDWF  x35,W
04280:  MOVWF  x36
04282:  CLRF   x37
04284:  CLRF   x38
04286:  CLRF   x39
....................       if( month == 7  ) DAY_NUM = day + 182 ; 
04288:  MOVF   x34,W
0428A:  SUBLW  07
0428C:  BNZ   429A
0428E:  MOVLW  B6
04290:  ADDWF  x35,W
04292:  MOVWF  x36
04294:  CLRF   x37
04296:  CLRF   x38
04298:  CLRF   x39
....................       if( month == 8  ) DAY_NUM = day + 213 ; 
0429A:  MOVF   x34,W
0429C:  SUBLW  08
0429E:  BNZ   42AC
042A0:  MOVLW  D5
042A2:  ADDWF  x35,W
042A4:  MOVWF  x36
042A6:  CLRF   x37
042A8:  CLRF   x38
042AA:  CLRF   x39
....................       if( month == 9  ) DAY_NUM = day + 244 ; 
042AC:  MOVF   x34,W
042AE:  SUBLW  09
042B0:  BNZ   42BE
042B2:  MOVLW  F4
042B4:  ADDWF  x35,W
042B6:  MOVWF  x36
042B8:  CLRF   x37
042BA:  CLRF   x38
042BC:  CLRF   x39
....................       if( month == 10 ) DAY_NUM = day + 274 ; 
042BE:  MOVF   x34,W
042C0:  SUBLW  0A
042C2:  BNZ   42D6
042C4:  MOVLW  12
042C6:  ADDWF  x35,W
042C8:  MOVWF  x36
042CA:  MOVLW  01
042CC:  MOVWF  x37
042CE:  BTFSC  FD8.0
042D0:  INCF   x37,F
042D2:  CLRF   x38
042D4:  CLRF   x39
....................       if( month == 11 ) DAY_NUM = day + 305 ; 
042D6:  MOVF   x34,W
042D8:  SUBLW  0B
042DA:  BNZ   42EE
042DC:  MOVLW  31
042DE:  ADDWF  x35,W
042E0:  MOVWF  x36
042E2:  MOVLW  01
042E4:  MOVWF  x37
042E6:  BTFSC  FD8.0
042E8:  INCF   x37,F
042EA:  CLRF   x38
042EC:  CLRF   x39
....................       if( month == 12 ) DAY_NUM = day + 335 ; 
042EE:  MOVF   x34,W
042F0:  SUBLW  0C
042F2:  BNZ   4306
042F4:  MOVLW  4F
042F6:  ADDWF  x35,W
042F8:  MOVWF  x36
042FA:  MOVLW  01
042FC:  MOVWF  x37
042FE:  BTFSC  FD8.0
04300:  INCF   x37,F
04302:  CLRF   x38
04304:  CLRF   x39
....................    } 
....................     
....................    return DAY_NUM ; 
04306:  MOVFF  436,00
0430A:  MOVFF  437,01
0430E:  MOVFF  438,02
04312:  MOVFF  439,03
04316:  MOVLB  0
04318:  GOTO   5508 (RETURN)
.................... } 
....................  
.................... void READ_MP_RTC_() 
.................... { 
....................    rtc_time_t  read_clock;  
....................    rtc_read(&read_clock); 
*
03338:  MOVLB  F
0333A:  BSF    x5F.0
0333C:  BSF    x5F.1
0333E:  MOVLW  04
03340:  MOVWF  FEA
03342:  MOVLW  08
03344:  MOVWF  FE9
03346:  MOVLW  04
03348:  MOVWF  01
0334A:  MOVF   x5C,W
0334C:  MOVLB  0
0334E:  RCALL  2CC0
03350:  MOVWF  FEE
03352:  MOVLB  F
03354:  MOVF   x5D,W
03356:  MOVLB  0
03358:  RCALL  2CC0
0335A:  MOVWF  FEE
0335C:  DECFSZ 01,F
0335E:  BRA    3362
03360:  BRA    3366
03362:  MOVLB  F
03364:  BRA    334A
....................    MP_RTC_SEC   = read_clock.tm_sec  ; 
03366:  MOVFF  40E,1C2
....................    
....................  
....................    MP_RTC_YEAR  = read_clock.tm_year ; 
0336A:  MOVFF  408,1BD
....................    MP_RTC_MONTH = read_clock.tm_mon  ; 
0336E:  MOVFF  40B,1BE
....................    MP_RTC_DAY   = read_clock.tm_mday ; 
03372:  MOVFF  40A,1BF
....................    MP_RTC_HOUR  = read_clock.tm_hour ; 
03376:  MOVFF  40C,1C0
....................    MP_RTC_MIN   = read_clock.tm_min  ; 
0337A:  MOVFF  40F,1C1
0337E:  RETURN 0
.................... } 
....................  
.................... #include <Flash_Memory.c> 
.................... //commands 
.................... #define READ_ID           0x9F 
.................... #define READ_STATUS_REG   0x05  
....................  
.................... #use spi(MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6,  BAUD=1000000, BITS=8, STREAM=MAIN_FM, MODE=0)        //MAIN flash memory port 
*
02382:  MOVLB  4
02384:  MOVF   x20,W
02386:  SUBLW  08
02388:  BZ    2392
0238A:  MOVWF  x21
0238C:  RLCF   x1F,F
0238E:  DECFSZ x21,F
02390:  BRA    238C
02392:  BSF    F96.0
02394:  BCF    F96.6
02396:  BCF    F96.1
02398:  BCF    F8D.1
0239A:  MOVFF  420,421
0239E:  BTFSS  x1F.7
023A0:  BCF    F8D.6
023A2:  BTFSC  x1F.7
023A4:  BSF    F8D.6
023A6:  RLCF   x1F,F
023A8:  BSF    F8D.1
023AA:  RLCF   01,F
023AC:  BTFSS  F84.0
023AE:  BCF    01.0
023B0:  BTFSC  F84.0
023B2:  BSF    01.0
023B4:  BCF    F8D.1
023B6:  DECFSZ x21,F
023B8:  BRA    239E
023BA:  MOVLB  0
023BC:  RETURN 0
.................... #use spi(MASTER, CLK=PIN_B2, DI=PIN_B5, DO=PIN_B4,  BAUD=1000000, BITS=8, STREAM=COM_FM, MODE=0)         //COM flash memory port 
*
0446C:  MOVLB  4
0446E:  MOVF   x42,W
04470:  SUBLW  08
04472:  BZ    447C
04474:  MOVWF  x43
04476:  RLCF   x41,F
04478:  DECFSZ x43,F
0447A:  BRA    4476
0447C:  BSF    F93.5
0447E:  BCF    F93.4
04480:  BCF    F93.2
04482:  BCF    F8A.2
04484:  MOVFF  442,443
04488:  BTFSS  x41.7
0448A:  BCF    F8A.4
0448C:  BTFSC  x41.7
0448E:  BSF    F8A.4
04490:  RLCF   x41,F
04492:  BSF    F8A.2
04494:  RLCF   01,F
04496:  BTFSS  F81.5
04498:  BCF    01.0
0449A:  BTFSC  F81.5
0449C:  BSF    01.0
0449E:  BCF    F8A.2
044A0:  DECFSZ x43,F
044A2:  BRA    4488
044A4:  MOVLB  0
044A6:  RETURN 0
.................... #use spi(MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1,  BAUD=1000000, BITS=8, STREAM=MSN_FM, MODE=0)  
*
089BE:  MOVLB  4
089C0:  MOVF   x20,W
089C2:  SUBLW  08
089C4:  BZ    89CE
089C6:  MOVWF  x21
089C8:  RLCF   x1F,F
089CA:  DECFSZ x21,F
089CC:  BRA    89C8
089CE:  BSF    F92.0
089D0:  BCF    F92.1
089D2:  BCF    F92.3
089D4:  BCF    F89.3
089D6:  MOVFF  420,421
089DA:  BTFSS  x1F.7
089DC:  BCF    F89.1
089DE:  BTFSC  x1F.7
089E0:  BSF    F89.1
089E2:  RLCF   x1F,F
089E4:  BSF    F89.3
089E6:  RLCF   01,F
089E8:  BTFSS  F80.0
089EA:  BCF    01.0
089EC:  BTFSC  F80.0
089EE:  BSF    01.0
089F0:  BCF    F89.3
089F2:  DECFSZ x21,F
089F4:  BRA    89DA
089F6:  MOVLB  0
089F8:  RETURN 0
....................  
.................... //______________________Write Enable Codes____________________________________________________\\ 
.................... void MAIN_FM_WRITE_ENABLE() 
.................... { 
....................   Output_low(Pin_E2); 
*
02AA6:  BCF    F96.2
02AA8:  BCF    F8D.2
....................   spi_xfer(MAIN_FM,0x06);                 
02AAA:  MOVLW  06
02AAC:  MOVLB  4
02AAE:  MOVWF  x1F
02AB0:  MOVLW  08
02AB2:  MOVWF  x20
02AB4:  MOVLB  0
02AB6:  RCALL  2382
....................   Output_high(Pin_E2); 
02AB8:  BCF    F96.2
02ABA:  BSF    F8D.2
....................   return; 
02ABC:  RETURN 0
.................... } 
....................  
.................... void COM_FM_WRITE_ENABLE() 
.................... { 
....................   Output_low(Pin_B3); 
*
044A8:  BCF    F93.3
044AA:  BCF    F8A.3
....................   spi_xfer(COM_FM,0x06);                 
044AC:  MOVLW  06
044AE:  MOVLB  4
044B0:  MOVWF  x41
044B2:  MOVLW  08
044B4:  MOVWF  x42
044B6:  MOVLB  0
044B8:  RCALL  446C
....................   Output_high(Pin_B3); 
044BA:  BCF    F93.3
044BC:  BSF    F8A.3
....................   return; 
044BE:  RETURN 0
.................... } 
....................  
.................... void MSN_FM_WRITE_ENABLE() 
.................... { 
....................  
....................   Output_low(Pin_A2); 
*
08F1E:  BCF    F92.2
08F20:  BCF    F89.2
....................   spi_xfer(MSN_FM,0x06);                 
08F22:  MOVLW  06
08F24:  MOVLB  4
08F26:  MOVWF  x1F
08F28:  MOVLW  08
08F2A:  MOVWF  x20
08F2C:  MOVLB  0
08F2E:  RCALL  89BE
....................   Output_high(Pin_A2); 
08F30:  BCF    F92.2
08F32:  BSF    F89.2
....................   return; 
08F34:  GOTO   8F56 (RETURN)
.................... } 
....................  
.................... //-----------------------------------------------------------------------------------------------------------------------------------------------------------\\ 
.................... unsigned int8 adsress[4]; 
.................... unsigned int8 _data; 
....................  
.................... //______________________4KB,32KB,64KB Sector Erase____________________________________________________\\ 
.................... void MAIN_FM_SECTOR_ERASE(unsigned int32 sector_address,char sector_size,  int16 delay = 1000) 
.................... { 
....................     
....................    adsress[0]  = (unsigned int8)((sector_address>>24) & 0xFF);   // 0x __ 00 00 00 
*
02ABE:  MOVLB  4
02AC0:  MOVFF  413,2D4
02AC4:  CLRF   03
....................    adsress[1]  = (unsigned int8)((sector_address>>16) & 0xFF);   // 0x 00 __ 00 00 
02AC6:  MOVFF  412,2D5
02ACA:  CLRF   03
....................    adsress[2]  = (unsigned int8)((sector_address>>8)  & 0xFF);   // 0x 00 00 __ 00 
02ACC:  MOVFF  411,2D6
02AD0:  CLRF   03
....................    adsress[3]  = (unsigned int8)((sector_address)     & 0xFF);   // 0x 00 00 00 __ 
02AD2:  MOVFF  410,2D7
02AD6:  CLRF   03
....................     
....................    MAIN_FM_WRITE_ENABLE(); 
02AD8:  MOVLB  0
02ADA:  RCALL  2AA6
....................    Output_low(Pin_E2);             //lower the CS PIN 
02ADC:  BCF    F96.2
02ADE:  BCF    F8D.2
....................  
....................    /////////////////////////////////////////////////////////////////// 
....................  
....................    if( Sector_size == 4  ) spi_xfer(MAIN_FM,0x21);                    // 4KB Sector erase 
02AE0:  MOVLB  4
02AE2:  MOVF   x14,W
02AE4:  SUBLW  04
02AE6:  BNZ   2AF6
02AE8:  MOVLW  21
02AEA:  MOVWF  x1F
02AEC:  MOVLW  08
02AEE:  MOVWF  x20
02AF0:  MOVLB  0
02AF2:  RCALL  2382
02AF4:  MOVLB  4
....................    if( Sector_size == 32 ) spi_xfer(MAIN_FM,0x5C);                    // 32KB Sector erase 
02AF6:  MOVF   x14,W
02AF8:  SUBLW  20
02AFA:  BNZ   2B0A
02AFC:  MOVLW  5C
02AFE:  MOVWF  x1F
02B00:  MOVLW  08
02B02:  MOVWF  x20
02B04:  MOVLB  0
02B06:  RCALL  2382
02B08:  MOVLB  4
....................    if( Sector_size == 64 ) spi_xfer(MAIN_FM,0xDC);                    // 64KB Sector erase 
02B0A:  MOVF   x14,W
02B0C:  SUBLW  40
02B0E:  BNZ   2B1E
02B10:  MOVLW  DC
02B12:  MOVWF  x1F
02B14:  MOVLW  08
02B16:  MOVWF  x20
02B18:  MOVLB  0
02B1A:  RCALL  2382
02B1C:  MOVLB  4
....................     
....................    spi_xfer(MAIN_FM,adsress[0]);    
02B1E:  MOVFF  2D4,41F
02B22:  MOVLW  08
02B24:  MOVWF  x20
02B26:  MOVLB  0
02B28:  RCALL  2382
....................    spi_xfer(MAIN_FM,adsress[1]);     
02B2A:  MOVFF  2D5,41F
02B2E:  MOVLW  08
02B30:  MOVLB  4
02B32:  MOVWF  x20
02B34:  MOVLB  0
02B36:  RCALL  2382
....................    spi_xfer(MAIN_FM,adsress[2]);     
02B38:  MOVFF  2D6,41F
02B3C:  MOVLW  08
02B3E:  MOVLB  4
02B40:  MOVWF  x20
02B42:  MOVLB  0
02B44:  RCALL  2382
....................    spi_xfer(MAIN_FM,adsress[3]); 
02B46:  MOVFF  2D7,41F
02B4A:  MOVLW  08
02B4C:  MOVLB  4
02B4E:  MOVWF  x20
02B50:  MOVLB  0
02B52:  RCALL  2382
....................    ////////////////////////////////////////////////////////////////// 
....................    Output_high(Pin_E2);           //take CS PIN higher back 
02B54:  BCF    F96.2
02B56:  BSF    F8D.2
....................  
....................    delay_ms(delay);  
02B58:  MOVFF  416,417
02B5C:  MOVLB  4
02B5E:  INCF   x17,F
02B60:  DECF   x17,F
02B62:  BTFSC  FD8.2
02B64:  BRA    2B72
02B66:  SETF   x3E
02B68:  MOVLB  0
02B6A:  CALL   1DA0
02B6E:  MOVLB  4
02B70:  BRA    2B60
02B72:  MOVFF  415,43E
02B76:  MOVLB  0
02B78:  CALL   1DA0
....................    return; 
02B7C:  RETURN 0
.................... } 
....................  
.................... void COM_FM_SECTOR_ERASE(unsigned int32 sector_address, char sector_size, unsigned int16 delay = 1000) 
.................... { 
....................     
....................    adsress[0]  = (unsigned int8)((sector_address>>24) & 0xFF);   // 0x __ 00 00 00 
*
044C0:  MOVLB  4
044C2:  MOVFF  436,2D4
044C6:  CLRF   03
....................    adsress[1]  = (unsigned int8)((sector_address>>16) & 0xFF);   // 0x 00 __ 00 00 
044C8:  MOVFF  435,2D5
044CC:  CLRF   03
....................    adsress[2]  = (unsigned int8)((sector_address>>8)  & 0xFF);   // 0x 00 00 __ 00 
044CE:  MOVFF  434,2D6
044D2:  CLRF   03
....................    adsress[3]  = (unsigned int8)((sector_address)     & 0xFF);   // 0x 00 00 00 __ 
044D4:  MOVFF  433,2D7
044D8:  CLRF   03
....................     
....................    COM_FM_WRITE_ENABLE(); 
044DA:  MOVLB  0
044DC:  RCALL  44A8
....................    Output_low(Pin_B3);             //lower the CS PIN 
044DE:  BCF    F93.3
044E0:  BCF    F8A.3
....................    /////////////////////////////////////////////////////////////////// 
....................    if( Sector_size == 4  ) spi_xfer(COM_FM,0x21);                    // 4KB Sector erase 
044E2:  MOVLB  4
044E4:  MOVF   x37,W
044E6:  SUBLW  04
044E8:  BNZ   44F8
044EA:  MOVLW  21
044EC:  MOVWF  x41
044EE:  MOVLW  08
044F0:  MOVWF  x42
044F2:  MOVLB  0
044F4:  RCALL  446C
044F6:  MOVLB  4
....................    if( Sector_size == 32 ) spi_xfer(COM_FM,0x5C);                    // 32KB Sector erase 
044F8:  MOVF   x37,W
044FA:  SUBLW  20
044FC:  BNZ   450C
044FE:  MOVLW  5C
04500:  MOVWF  x41
04502:  MOVLW  08
04504:  MOVWF  x42
04506:  MOVLB  0
04508:  RCALL  446C
0450A:  MOVLB  4
....................    if( Sector_size == 64 ) spi_xfer(COM_FM,0xDC);                    // 64KB Sector erase 
0450C:  MOVF   x37,W
0450E:  SUBLW  40
04510:  BNZ   4520
04512:  MOVLW  DC
04514:  MOVWF  x41
04516:  MOVLW  08
04518:  MOVWF  x42
0451A:  MOVLB  0
0451C:  RCALL  446C
0451E:  MOVLB  4
....................        
....................    spi_xfer(COM_FM,adsress[0]);    
04520:  MOVFF  2D4,441
04524:  MOVLW  08
04526:  MOVWF  x42
04528:  MOVLB  0
0452A:  RCALL  446C
....................    spi_xfer(COM_FM,adsress[1]);     
0452C:  MOVFF  2D5,441
04530:  MOVLW  08
04532:  MOVLB  4
04534:  MOVWF  x42
04536:  MOVLB  0
04538:  RCALL  446C
....................    spi_xfer(COM_FM,adsress[2]);     
0453A:  MOVFF  2D6,441
0453E:  MOVLW  08
04540:  MOVLB  4
04542:  MOVWF  x42
04544:  MOVLB  0
04546:  RCALL  446C
....................    spi_xfer(COM_FM,adsress[3]); 
04548:  MOVFF  2D7,441
0454C:  MOVLW  08
0454E:  MOVLB  4
04550:  MOVWF  x42
04552:  MOVLB  0
04554:  RCALL  446C
....................    ////////////////////////////////////////////////////////////////// 
....................    Output_high(Pin_B3);           //take CS PIN higher back 
04556:  BCF    F93.3
04558:  BSF    F8A.3
....................    delay_ms(delay);  
0455A:  MOVFF  439,43A
0455E:  MOVLB  4
04560:  INCF   x3A,F
04562:  DECF   x3A,F
04564:  BTFSC  FD8.2
04566:  BRA    4574
04568:  SETF   x3E
0456A:  MOVLB  0
0456C:  CALL   1DA0
04570:  MOVLB  4
04572:  BRA    4562
04574:  MOVFF  438,43E
04578:  MOVLB  0
0457A:  CALL   1DA0
....................    return; 
0457E:  RETURN 0
.................... } 
....................  
.................... void MSN_FM_SECTOR_ERASE(unsigned int32 sector_address,char sector_size, unsigned int16 delay = 1000) 
.................... { 
....................     
....................    adsress[0]  = (unsigned int8)((sector_address>>24) & 0xFF);   // 0x __ 00 00 00 
*
08F38:  MOVLB  4
08F3A:  MOVFF  406,2D4
08F3E:  CLRF   03
....................    adsress[1]  = (unsigned int8)((sector_address>>16) & 0xFF);   // 0x 00 __ 00 00 
08F40:  MOVFF  405,2D5
08F44:  CLRF   03
....................    adsress[2]  = (unsigned int8)((sector_address>>8)  & 0xFF);   // 0x 00 00 __ 00 
08F46:  MOVFF  404,2D6
08F4A:  CLRF   03
....................    adsress[3]  = (unsigned int8)((sector_address)     & 0xFF);   // 0x 00 00 00 __ 
08F4C:  MOVFF  403,2D7
08F50:  CLRF   03
....................     
....................    MSN_FM_WRITE_ENABLE(); 
08F52:  MOVLB  0
08F54:  BRA    8F1E
....................    Output_low(Pin_A2);             //lower the CS PIN 
08F56:  BCF    F92.2
08F58:  BCF    F89.2
....................    /////////////////////////////////////////////////////////////////// 
....................    if( Sector_size == 4  ) spi_xfer(MSN_FM,0x21);                    // 4KB Sector erase 
08F5A:  MOVLB  4
08F5C:  MOVF   x07,W
08F5E:  SUBLW  04
08F60:  BNZ   8F70
08F62:  MOVLW  21
08F64:  MOVWF  x1F
08F66:  MOVLW  08
08F68:  MOVWF  x20
08F6A:  MOVLB  0
08F6C:  RCALL  89BE
08F6E:  MOVLB  4
....................    if( Sector_size == 32 ) spi_xfer(MSN_FM,0x5C);                    // 32KB Sector erase 
08F70:  MOVF   x07,W
08F72:  SUBLW  20
08F74:  BNZ   8F84
08F76:  MOVLW  5C
08F78:  MOVWF  x1F
08F7A:  MOVLW  08
08F7C:  MOVWF  x20
08F7E:  MOVLB  0
08F80:  RCALL  89BE
08F82:  MOVLB  4
....................    if( Sector_size == 64 ) spi_xfer(MSN_FM,0xDC);                    // 64KB Sector erase 
08F84:  MOVF   x07,W
08F86:  SUBLW  40
08F88:  BNZ   8F98
08F8A:  MOVLW  DC
08F8C:  MOVWF  x1F
08F8E:  MOVLW  08
08F90:  MOVWF  x20
08F92:  MOVLB  0
08F94:  RCALL  89BE
08F96:  MOVLB  4
....................     
....................    spi_xfer(MSN_FM,adsress[0]);    
08F98:  MOVFF  2D4,41F
08F9C:  MOVLW  08
08F9E:  MOVWF  x20
08FA0:  MOVLB  0
08FA2:  RCALL  89BE
....................    spi_xfer(MSN_FM,adsress[1]);     
08FA4:  MOVFF  2D5,41F
08FA8:  MOVLW  08
08FAA:  MOVLB  4
08FAC:  MOVWF  x20
08FAE:  MOVLB  0
08FB0:  RCALL  89BE
....................    spi_xfer(MSN_FM,adsress[2]);     
08FB2:  MOVFF  2D6,41F
08FB6:  MOVLW  08
08FB8:  MOVLB  4
08FBA:  MOVWF  x20
08FBC:  MOVLB  0
08FBE:  RCALL  89BE
....................    spi_xfer(MSN_FM,adsress[3]); 
08FC0:  MOVFF  2D7,41F
08FC4:  MOVLW  08
08FC6:  MOVLB  4
08FC8:  MOVWF  x20
08FCA:  MOVLB  0
08FCC:  RCALL  89BE
....................    ////////////////////////////////////////////////////////////////// 
....................    Output_high(Pin_A2);           //take CS PIN higher back 
08FCE:  BCF    F92.2
08FD0:  BSF    F89.2
....................    delay_ms(delay);  
08FD2:  MOVFF  409,40A
08FD6:  MOVLB  4
08FD8:  INCF   x0A,F
08FDA:  DECF   x0A,F
08FDC:  BTFSC  FD8.2
08FDE:  BRA    8FEC
08FE0:  SETF   x3E
08FE2:  MOVLB  0
08FE4:  CALL   1DA0
08FE8:  MOVLB  4
08FEA:  BRA    8FDA
08FEC:  MOVFF  408,43E
08FF0:  MOVLB  0
08FF2:  CALL   1DA0
....................    return; 
08FF6:  GOTO   913C (RETURN)
.................... } 
.................... //-----------------------------------------------------------------------------------------------\\ 
....................  
....................  
.................... //________________________BYTE WRITE Function____________________________________________________\\ 
.................... void MAIN_FM_BYTE_WRITE(unsigned int32 byte_address, unsigned int8 data) 
.................... { 
....................     
....................    //Byte extraction 
....................    adsress[0]  = (unsigned int8)((byte_address>>24) & 0xFF);   // 0x __ 00 00 00 
*
02B7E:  MOVLB  4
02B80:  MOVFF  418,2D4
02B84:  CLRF   03
....................    adsress[1]  = (unsigned int8)((byte_address>>16) & 0xFF);   // 0x 00 __ 00 00 
02B86:  MOVFF  417,2D5
02B8A:  CLRF   03
....................    adsress[2]  = (unsigned int8)((byte_address>>8)  & 0xFF);   // 0x 00 00 __ 00 
02B8C:  MOVFF  416,2D6
02B90:  CLRF   03
....................    adsress[3]  = (unsigned int8)((byte_address)     & 0xFF);   // 0x 00 00 00 __ 
02B92:  MOVFF  415,2D7
02B96:  CLRF   03
....................   
....................    MAIN_FM_WRITE_ENABLE(); 
02B98:  MOVLB  0
02B9A:  RCALL  2AA6
....................    Output_low(Pin_E2);             //lower the CS PIN 
02B9C:  BCF    F96.2
02B9E:  BCF    F8D.2
....................    /////////////////////////////////////////////////////////////////// 
....................    spi_xfer(MAIN_FM,0x12);         //Byte WRITE COMAND  (0x12) 
02BA0:  MOVLW  12
02BA2:  MOVLB  4
02BA4:  MOVWF  x1F
02BA6:  MOVLW  08
02BA8:  MOVWF  x20
02BAA:  MOVLB  0
02BAC:  CALL   2382
....................    spi_xfer(MAIN_FM,adsress[0]);     
02BB0:  MOVFF  2D4,41F
02BB4:  MOVLW  08
02BB6:  MOVLB  4
02BB8:  MOVWF  x20
02BBA:  MOVLB  0
02BBC:  CALL   2382
....................    spi_xfer(MAIN_FM,adsress[1]);     
02BC0:  MOVFF  2D5,41F
02BC4:  MOVLW  08
02BC6:  MOVLB  4
02BC8:  MOVWF  x20
02BCA:  MOVLB  0
02BCC:  CALL   2382
....................    spi_xfer(MAIN_FM,adsress[2]);     
02BD0:  MOVFF  2D6,41F
02BD4:  MOVLW  08
02BD6:  MOVLB  4
02BD8:  MOVWF  x20
02BDA:  MOVLB  0
02BDC:  CALL   2382
....................    spi_xfer(MAIN_FM,adsress[3]); 
02BE0:  MOVFF  2D7,41F
02BE4:  MOVLW  08
02BE6:  MOVLB  4
02BE8:  MOVWF  x20
02BEA:  MOVLB  0
02BEC:  CALL   2382
....................  
....................    spi_xfer(MAIN_FM,data);  
02BF0:  MOVFF  419,41F
02BF4:  MOVLW  08
02BF6:  MOVLB  4
02BF8:  MOVWF  x20
02BFA:  MOVLB  0
02BFC:  CALL   2382
....................    ////////////////////////////////////////////////////////////////// 
....................    Output_high(Pin_E2);           //take CS PIN higher back  
02C00:  BCF    F96.2
02C02:  BSF    F8D.2
....................     
....................    return; 
02C04:  RETURN 0
.................... } 
....................  
.................... void COM_FM_BYTE_WRITE(unsigned int32 byte_address, unsigned int8 data) 
.................... { 
....................     
....................    //Byte extraction 
....................    adsress[0]  = (unsigned int8)((byte_address>>24) & 0xFF);   // 0x __ 00 00 00 
*
046EA:  MOVLB  4
046EC:  MOVFF  43F,2D4
046F0:  CLRF   03
....................    adsress[1]  = (unsigned int8)((byte_address>>16) & 0xFF);   // 0x 00 __ 00 00 
046F2:  MOVFF  43E,2D5
046F6:  CLRF   03
....................    adsress[2]  = (unsigned int8)((byte_address>>8)  & 0xFF);   // 0x 00 00 __ 00 
046F8:  MOVFF  43D,2D6
046FC:  CLRF   03
....................    adsress[3]  = (unsigned int8)((byte_address)     & 0xFF);   // 0x 00 00 00 __ 
046FE:  MOVFF  43C,2D7
04702:  CLRF   03
....................   
....................    COM_FM_WRITE_ENABLE(); 
04704:  MOVLB  0
04706:  RCALL  44A8
....................    Output_low(Pin_B3);             //lower the CS PIN 
04708:  BCF    F93.3
0470A:  BCF    F8A.3
....................    /////////////////////////////////////////////////////////////////// 
....................    spi_xfer(COM_FM,0x12);         //Byte WRITE COMAND  (0x12) 
0470C:  MOVLW  12
0470E:  MOVLB  4
04710:  MOVWF  x41
04712:  MOVLW  08
04714:  MOVWF  x42
04716:  MOVLB  0
04718:  RCALL  446C
....................    spi_xfer(COM_FM,adsress[0]);     
0471A:  MOVFF  2D4,441
0471E:  MOVLW  08
04720:  MOVLB  4
04722:  MOVWF  x42
04724:  MOVLB  0
04726:  RCALL  446C
....................    spi_xfer(COM_FM,adsress[1]);     
04728:  MOVFF  2D5,441
0472C:  MOVLW  08
0472E:  MOVLB  4
04730:  MOVWF  x42
04732:  MOVLB  0
04734:  RCALL  446C
....................    spi_xfer(COM_FM,adsress[2]);     
04736:  MOVFF  2D6,441
0473A:  MOVLW  08
0473C:  MOVLB  4
0473E:  MOVWF  x42
04740:  MOVLB  0
04742:  RCALL  446C
....................    spi_xfer(COM_FM,adsress[3]); 
04744:  MOVFF  2D7,441
04748:  MOVLW  08
0474A:  MOVLB  4
0474C:  MOVWF  x42
0474E:  MOVLB  0
04750:  RCALL  446C
....................  
....................    spi_xfer(COM_FM,data);  
04752:  MOVFF  440,441
04756:  MOVLW  08
04758:  MOVLB  4
0475A:  MOVWF  x42
0475C:  MOVLB  0
0475E:  RCALL  446C
....................    ////////////////////////////////////////////////////////////////// 
....................    Output_high(Pin_B3);           //take CS PIN higher back  
04760:  BCF    F93.3
04762:  BSF    F8A.3
....................     
....................    return; 
04764:  RETURN 0
.................... } 
....................  
.................... void MSN_FM_BYTE_WRITE(unsigned int32 byte_address, unsigned int8 data) 
.................... { 
....................    //Byte extraction 
....................    adsress[0]  = (unsigned int8)((byte_address>>24) & 0xFF);   // 0x __ 00 00 00 
....................    adsress[1]  = (unsigned int8)((byte_address>>16) & 0xFF);   // 0x 00 __ 00 00 
....................    adsress[2]  = (unsigned int8)((byte_address>>8)  & 0xFF);   // 0x 00 00 __ 00 
....................    adsress[3]  = (unsigned int8)((byte_address)     & 0xFF);   // 0x 00 00 00 __ 
....................   
....................    MSN_FM_WRITE_ENABLE(); 
....................    Output_low(Pin_A2);             //lower the CS PIN 
....................    /////////////////////////////////////////////////////////////////// 
....................    spi_xfer(MSN_FM,0x12);         //Byte WRITE COMAND  (0x12) 
....................    spi_xfer(MSN_FM,adsress[0]);     
....................    spi_xfer(MSN_FM,adsress[1]);     
....................    spi_xfer(MSN_FM,adsress[2]);     
....................    spi_xfer(MSN_FM,adsress[3]); 
....................  
....................    spi_xfer(MSN_FM,data);  
....................    ////////////////////////////////////////////////////////////////// 
....................    Output_high(Pin_A2);           //take CS PIN higher back  
....................     
....................    return; 
.................... } 
....................  
.................... //________________________BYTE read Function____________________________________________________\\ 
.................... unsigned int8 MAIN_FM_BYTE_READ(unsigned INT32 ADDRESS) 
.................... { 
....................    //Byte extraction 
....................    adsress[0]  = (unsigned int8)((ADDRESS>>24) & 0xFF);   // 0x __ 00 00 00 
*
023BE:  MOVLB  4
023C0:  MOVFF  41E,2D4
023C4:  CLRF   03
....................    adsress[1]  = (unsigned int8)((ADDRESS>>16) & 0xFF);   // 0x 00 __ 00 00 
023C6:  MOVFF  41D,2D5
023CA:  CLRF   03
....................    adsress[2]  = (unsigned int8)((ADDRESS>>8)  & 0xFF);   // 0x 00 00 __ 00 
023CC:  MOVFF  41C,2D6
023D0:  CLRF   03
....................    adsress[3]  = (unsigned int8)((ADDRESS)     & 0xFF);   // 0x 00 00 00 __ 
023D2:  MOVFF  41B,2D7
023D6:  CLRF   03
....................     
....................  
....................    output_low(PIN_E2);             //lower the CS PIN 
023D8:  BCF    F96.2
023DA:  BCF    F8D.2
....................    /////////////////////////////////////////////////////////////////// 
....................    spi_xfer(MAIN_FM,0X13);  //READ DATA COMAND   (0x13) 
023DC:  MOVLW  13
023DE:  MOVWF  x1F
023E0:  MOVLW  08
023E2:  MOVWF  x20
023E4:  MOVLB  0
023E6:  RCALL  2382
....................    spi_xfer(MAIN_FM,adsress[0]); 
023E8:  MOVFF  2D4,41F
023EC:  MOVLW  08
023EE:  MOVLB  4
023F0:  MOVWF  x20
023F2:  MOVLB  0
023F4:  RCALL  2382
....................    spi_xfer(MAIN_FM,adsress[1]); 
023F6:  MOVFF  2D5,41F
023FA:  MOVLW  08
023FC:  MOVLB  4
023FE:  MOVWF  x20
02400:  MOVLB  0
02402:  RCALL  2382
....................    spi_xfer(MAIN_FM,adsress[2]); 
02404:  MOVFF  2D6,41F
02408:  MOVLW  08
0240A:  MOVLB  4
0240C:  MOVWF  x20
0240E:  MOVLB  0
02410:  RCALL  2382
....................    spi_xfer(MAIN_FM,adsress[3]); 
02412:  MOVFF  2D7,41F
02416:  MOVLW  08
02418:  MOVLB  4
0241A:  MOVWF  x20
0241C:  MOVLB  0
0241E:  RCALL  2382
....................  
....................    _data = spi_xfer(MAIN_FM);  
02420:  MOVLW  01
02422:  MOVLB  4
02424:  MOVWF  x1F
02426:  MOVLW  08
02428:  MOVWF  x20
0242A:  MOVLB  0
0242C:  RCALL  2382
0242E:  MOVF   01,W
02430:  MOVFF  01,2D8
....................    ////////////////////////////////////////////////////////////////// 
....................    output_high(PIN_E2);            //take CS PIN higher back  
02434:  BCF    F96.2
02436:  BSF    F8D.2
....................  
....................    return _data; 
02438:  MOVLB  2
0243A:  MOVFF  2D8,01
0243E:  MOVLB  0
02440:  RETURN 0
.................... } 
....................  
.................... unsigned int8 COM_FM_BYTE_READ(unsigned INT32 ADDRESS) 
.................... { 
....................    //Byte extraction 
....................    adsress[0]  = (unsigned int8)((ADDRESS>>24) & 0xFF);   // 0x __ 00 00 00 
*
04766:  MOVLB  4
04768:  MOVFF  43C,2D4
0476C:  CLRF   03
....................    adsress[1]  = (unsigned int8)((ADDRESS>>16) & 0xFF);   // 0x 00 __ 00 00 
0476E:  MOVFF  43B,2D5
04772:  CLRF   03
....................    adsress[2]  = (unsigned int8)((ADDRESS>>8)  & 0xFF);   // 0x 00 00 __ 00 
04774:  MOVFF  43A,2D6
04778:  CLRF   03
....................    adsress[3]  = (unsigned int8)((ADDRESS)     & 0xFF);   // 0x 00 00 00 __ 
0477A:  MOVFF  439,2D7
0477E:  CLRF   03
....................        
....................    Output_low(PIN_B3);            //lower the CS PIN 
04780:  BCF    F93.3
04782:  BCF    F8A.3
....................    /////////////////////////////////////////////////////////////////// 
....................    spi_xfer(COM_FM,0X13);  //READ DATA COMAND   (0x13) 
04784:  MOVLW  13
04786:  MOVWF  x41
04788:  MOVLW  08
0478A:  MOVWF  x42
0478C:  MOVLB  0
0478E:  RCALL  446C
....................    spi_xfer(COM_FM,adsress[0]); 
04790:  MOVFF  2D4,441
04794:  MOVLW  08
04796:  MOVLB  4
04798:  MOVWF  x42
0479A:  MOVLB  0
0479C:  RCALL  446C
....................    spi_xfer(COM_FM,adsress[1]); 
0479E:  MOVFF  2D5,441
047A2:  MOVLW  08
047A4:  MOVLB  4
047A6:  MOVWF  x42
047A8:  MOVLB  0
047AA:  RCALL  446C
....................    spi_xfer(COM_FM,adsress[2]); 
047AC:  MOVFF  2D6,441
047B0:  MOVLW  08
047B2:  MOVLB  4
047B4:  MOVWF  x42
047B6:  MOVLB  0
047B8:  RCALL  446C
....................    spi_xfer(COM_FM,adsress[3]); 
047BA:  MOVFF  2D7,441
047BE:  MOVLW  08
047C0:  MOVLB  4
047C2:  MOVWF  x42
047C4:  MOVLB  0
047C6:  RCALL  446C
....................  
....................    _data = spi_xfer(COM_FM);  
047C8:  MOVLW  02
047CA:  MOVLB  4
047CC:  MOVWF  x41
047CE:  MOVLW  08
047D0:  MOVWF  x42
047D2:  MOVLB  0
047D4:  RCALL  446C
047D6:  MOVF   01,W
047D8:  MOVFF  01,2D8
....................    ////////////////////////////////////////////////////////////////// 
....................    Output_high(PIN_B3);          //take CS PIN higher back  
047DC:  BCF    F93.3
047DE:  BSF    F8A.3
....................     
....................    return _data; 
047E0:  MOVLB  2
047E2:  MOVFF  2D8,01
047E6:  MOVLB  0
047E8:  RETURN 0
.................... } 
....................  
.................... unsigned int8 MSN_FM_BYTE_READ(unsigned INT32 ADDRESS) 
.................... { 
....................    //Byte extraction 
....................    adsress[0]  = (unsigned int8)((ADDRESS>>24) & 0xFF);   // 0x __ 00 00 00 
*
089FA:  MOVLB  4
089FC:  MOVFF  41E,2D4
08A00:  CLRF   03
....................    adsress[1]  = (unsigned int8)((ADDRESS>>16) & 0xFF);   // 0x 00 __ 00 00 
08A02:  MOVFF  41D,2D5
08A06:  CLRF   03
....................    adsress[2]  = (unsigned int8)((ADDRESS>>8)  & 0xFF);   // 0x 00 00 __ 00 
08A08:  MOVFF  41C,2D6
08A0C:  CLRF   03
....................    adsress[3]  = (unsigned int8)((ADDRESS)     & 0xFF);   // 0x 00 00 00 __ 
08A0E:  MOVFF  41B,2D7
08A12:  CLRF   03
....................        
....................    Output_low(PIN_A2);            //lower the CS PIN 
08A14:  BCF    F92.2
08A16:  BCF    F89.2
....................    /////////////////////////////////////////////////////////////////// 
....................    spi_xfer(MSN_FM,0X13);  //READ DATA COMAND   (0x13) 
08A18:  MOVLW  13
08A1A:  MOVWF  x1F
08A1C:  MOVLW  08
08A1E:  MOVWF  x20
08A20:  MOVLB  0
08A22:  RCALL  89BE
....................    spi_xfer(MSN_FM,adsress[0]); 
08A24:  MOVFF  2D4,41F
08A28:  MOVLW  08
08A2A:  MOVLB  4
08A2C:  MOVWF  x20
08A2E:  MOVLB  0
08A30:  RCALL  89BE
....................    spi_xfer(MSN_FM,adsress[1]); 
08A32:  MOVFF  2D5,41F
08A36:  MOVLW  08
08A38:  MOVLB  4
08A3A:  MOVWF  x20
08A3C:  MOVLB  0
08A3E:  RCALL  89BE
....................    spi_xfer(MSN_FM,adsress[2]); 
08A40:  MOVFF  2D6,41F
08A44:  MOVLW  08
08A46:  MOVLB  4
08A48:  MOVWF  x20
08A4A:  MOVLB  0
08A4C:  RCALL  89BE
....................    spi_xfer(MSN_FM,adsress[3]); 
08A4E:  MOVFF  2D7,41F
08A52:  MOVLW  08
08A54:  MOVLB  4
08A56:  MOVWF  x20
08A58:  MOVLB  0
08A5A:  RCALL  89BE
....................  
....................    _data = spi_xfer(MSN_FM);  
08A5C:  MOVLW  03
08A5E:  MOVLB  4
08A60:  MOVWF  x1F
08A62:  MOVLW  08
08A64:  MOVWF  x20
08A66:  MOVLB  0
08A68:  RCALL  89BE
08A6A:  MOVF   01,W
08A6C:  MOVFF  01,2D8
....................    ////////////////////////////////////////////////////////////////// 
....................    Output_high(PIN_A2);          //take CS PIN higher back  
08A70:  BCF    F92.2
08A72:  BSF    F89.2
....................     
....................    return _data; 
08A74:  MOVLB  2
08A76:  MOVFF  2D8,01
08A7A:  MOVLB  0
08A7C:  RETURN 0
.................... } 
....................  
....................  
....................  
.................... // these are new flash memory functions, these functions are used for fast read write 
....................  
.................... #define READ  1 
.................... #define WRITE 0 
....................  
.................... // _______________________________________________________________________________________________ 
.................... void START_COM_FM_TRANSACTION(unsigned int32 ADDRESS, int mode ) 
.................... { 
....................    adsress[0]  = (unsigned int8)( (ADDRESS & 0xFF000000) >> 24 );    
....................    adsress[1]  = (unsigned int8)( (ADDRESS & 0x00FF0000) >> 16 );    
....................    adsress[2]  = (unsigned int8)( (ADDRESS & 0x0000FF00) >>  8 );    
....................    adsress[3]  = (unsigned int8)( (ADDRESS & 0x000000FF)       );  
....................     
....................    if( mode == WRITE ) 
....................    { 
....................       COM_FM_WRITE_ENABLE(); 
....................       Output_low(Pin_B3);             //lower the CS PIN   
....................       spi_xfer(COM_FM,0x12);         //Byte WRITE COMAND  (0x12) 
....................       spi_xfer(COM_FM,adsress[0]);     
....................       spi_xfer(COM_FM,adsress[1]);     
....................       spi_xfer(COM_FM,adsress[2]);     
....................       spi_xfer(COM_FM,adsress[3]); 
....................    } 
....................     
....................    if( mode == READ ) 
....................    { 
....................       Output_low(Pin_B3);             //lower the CS PIN   
....................       spi_xfer(COM_FM,0x13);          //Byte read COMAND  (0x13) 
....................       spi_xfer(COM_FM,adsress[0]);     
....................       spi_xfer(COM_FM,adsress[1]);     
....................       spi_xfer(COM_FM,adsress[2]);     
....................       spi_xfer(COM_FM,adsress[3]); 
....................    } 
.................... } 
....................  
.................... unsigned int8 COM_FM_BYTE_TRANSFER(unsigned int8 data, int mode) 
.................... { 
....................    if( mode == WRITE ) 
....................    { 
....................       spi_xfer(COM_FM,data); 
....................    } 
....................     
....................    if( mode == READ ) 
....................    { 
....................       return spi_xfer(COM_FM); 
....................    } 
.................... } 
....................  
.................... void FINISH_COM_FM_TRANSACTION() 
.................... { 
....................    Output_high(Pin_B3);           //take CS PIN higher back  
....................    delay_ms(1); 
.................... } 
....................  
....................  
....................  
.................... // _______________________________________________________________________________________________ 
.................... void START_MAIN_FM_TRANSACTION(unsigned int32 ADDRESS, int mode ) 
.................... { 
....................    adsress[0]  = (unsigned int8)( (ADDRESS & 0xFF000000) >> 24 );    
....................    adsress[1]  = (unsigned int8)( (ADDRESS & 0x00FF0000) >> 16 );    
....................    adsress[2]  = (unsigned int8)( (ADDRESS & 0x0000FF00) >>  8 );    
....................    adsress[3]  = (unsigned int8)( (ADDRESS & 0x000000FF)       );  
....................     
....................    if( mode == WRITE ) 
....................    { 
....................       MAIN_FM_WRITE_ENABLE(); 
....................       Output_low(Pin_E2);             //lower the CS PIN   
....................       spi_xfer(MAIN_FM,0x12);         //Byte WRITE COMAND  (0x12) 
....................       spi_xfer(MAIN_FM,adsress[0]);     
....................       spi_xfer(MAIN_FM,adsress[1]);     
....................       spi_xfer(MAIN_FM,adsress[2]);     
....................       spi_xfer(MAIN_FM,adsress[3]); 
....................    } 
....................     
....................    if( mode == READ ) 
....................    { 
....................       Output_low(Pin_E2);             //lower the CS PIN   
....................       spi_xfer(MAIN_FM,0x13);          //Byte read COMAND  (0x13) 
....................       spi_xfer(MAIN_FM,adsress[0]);     
....................       spi_xfer(MAIN_FM,adsress[1]);     
....................       spi_xfer(MAIN_FM,adsress[2]);     
....................       spi_xfer(MAIN_FM,adsress[3]); 
....................    } 
.................... } 
....................  
.................... unsigned int8 MAIN_FM_BYTE_TRANSFER(unsigned int8 data, int mode) 
.................... { 
....................    if( mode == WRITE ) 
....................    { 
....................       spi_xfer(MAIN_FM,data); 
....................    } 
....................     
....................    if( mode == READ ) 
....................    { 
....................       return spi_xfer(MAIN_FM); 
....................    } 
.................... } 
....................  
.................... void FINISH_MAIN_FM_TRANSACTION() 
.................... { 
....................    Output_high(Pin_E2);           //take CS PIN higher back  
....................    delay_ms(1); 
.................... } 
....................  
....................  
....................  
.................... // _______________________________________________________________________________________________ 
.................... void START_MSN_FM_TRANSACTION(unsigned int32 ADDRESS, int mode ) 
.................... { 
....................    adsress[0]  = (unsigned int8)( (ADDRESS & 0xFF000000) >> 24 );    
....................    adsress[1]  = (unsigned int8)( (ADDRESS & 0x00FF0000) >> 16 );    
....................    adsress[2]  = (unsigned int8)( (ADDRESS & 0x0000FF00) >>  8 );    
....................    adsress[3]  = (unsigned int8)( (ADDRESS & 0x000000FF)       );  
....................     
....................    if( mode == WRITE ) 
....................    { 
....................       MSN_FM_WRITE_ENABLE(); 
....................       Output_low(Pin_A2);             //lower the CS PIN   
....................       spi_xfer(MSN_FM,0x12);          //Byte WRITE COMAND  (0x12) 
....................       spi_xfer(MSN_FM,adsress[0]);     
....................       spi_xfer(MSN_FM,adsress[1]);     
....................       spi_xfer(MSN_FM,adsress[2]);     
....................       spi_xfer(MSN_FM,adsress[3]); 
....................    } 
....................     
....................    if( mode == READ ) 
....................    { 
....................       Output_low(Pin_A2);             //lower the CS PIN   
....................       spi_xfer(MSN_FM,0x13);          //Byte read COMAND  (0x13) 
....................       spi_xfer(MSN_FM,adsress[0]);     
....................       spi_xfer(MSN_FM,adsress[1]);     
....................       spi_xfer(MSN_FM,adsress[2]);     
....................       spi_xfer(MSN_FM,adsress[3]); 
....................    } 
.................... } 
....................  
.................... unsigned int8 MSN_FM_BYTE_TRANSFER(unsigned int8 data, int mode) 
.................... { 
....................    if( mode == WRITE ) 
....................    { 
....................       spi_xfer(MSN_FM,data); 
....................    } 
....................     
....................    if( mode == READ ) 
....................    { 
....................       return spi_xfer(MSN_FM); 
....................    } 
.................... } 
....................  
.................... void FINISH_MSN_FM_TRANSACTION() 
.................... { 
....................    Output_high(Pin_A2);           //take CS PIN higher back  
....................    delay_ms(1); 
.................... } 
....................  
....................  
.................... void DATA_COPY_FROM_MSN_FM_TO_CFM(unsigned int32 address, unsigned int32 num_of_bytes ) 
.................... { 
....................    OUTPUT_LOW(PIN_C5); // get cfm access 
08A7E:  BCF    F94.5
08A80:  BCF    F8B.5
....................    OUTPUT_LOW(PIN_A5); // get msn access 
08A82:  BCF    F92.5
08A84:  BCF    F89.5
....................     
....................    COM_FM_SECTOR_ERASE( address, 64); 
08A86:  MOVFF  40A,436
08A8A:  MOVFF  409,435
08A8E:  MOVFF  408,434
08A92:  MOVFF  407,433
08A96:  MOVLW  40
08A98:  MOVLB  4
08A9A:  MOVWF  x37
08A9C:  MOVLW  03
08A9E:  MOVWF  x39
08AA0:  MOVLW  E8
08AA2:  MOVWF  x38
08AA4:  MOVLB  0
08AA6:  CALL   44C0
....................    for( unsigned int32 i=0; i<num_of_bytes ; i++)  
08AAA:  MOVLB  4
08AAC:  CLRF   x12
08AAE:  CLRF   x11
08AB0:  CLRF   x10
08AB2:  CLRF   x0F
08AB4:  MOVF   x12,W
08AB6:  SUBWF  x0E,W
08AB8:  BNC   8B44
08ABA:  BNZ   8AD2
08ABC:  MOVF   x11,W
08ABE:  SUBWF  x0D,W
08AC0:  BNC   8B44
08AC2:  BNZ   8AD2
08AC4:  MOVF   x10,W
08AC6:  SUBWF  x0C,W
08AC8:  BNC   8B44
08ACA:  BNZ   8AD2
08ACC:  MOVF   x0B,W
08ACE:  SUBWF  x0F,W
08AD0:  BC    8B44
....................    { 
....................       COM_FM_BYTE_WRITE( address+i, MSN_FM_BYTE_READ(address+i) ); 
08AD2:  MOVF   x0F,W
08AD4:  ADDWF  x07,W
08AD6:  MOVWF  x13
08AD8:  MOVF   x10,W
08ADA:  ADDWFC x08,W
08ADC:  MOVWF  x14
08ADE:  MOVF   x11,W
08AE0:  ADDWFC x09,W
08AE2:  MOVWF  x15
08AE4:  MOVF   x12,W
08AE6:  ADDWFC x0A,W
08AE8:  MOVWF  x16
08AEA:  MOVF   x0F,W
08AEC:  ADDWF  x07,W
08AEE:  MOVWF  x17
08AF0:  MOVF   x10,W
08AF2:  ADDWFC x08,W
08AF4:  MOVWF  x18
08AF6:  MOVF   x11,W
08AF8:  ADDWFC x09,W
08AFA:  MOVWF  x19
08AFC:  MOVF   x12,W
08AFE:  ADDWFC x0A,W
08B00:  MOVWF  x1A
08B02:  MOVWF  x1E
08B04:  MOVFF  419,41D
08B08:  MOVFF  418,41C
08B0C:  MOVFF  417,41B
08B10:  MOVLB  0
08B12:  RCALL  89FA
08B14:  MOVFF  01,417
08B18:  MOVFF  416,43F
08B1C:  MOVFF  415,43E
08B20:  MOVFF  414,43D
08B24:  MOVFF  413,43C
08B28:  MOVFF  01,440
08B2C:  CALL   46EA
08B30:  MOVLW  01
08B32:  MOVLB  4
08B34:  ADDWF  x0F,F
08B36:  BTFSC  FD8.0
08B38:  INCF   x10,F
08B3A:  BTFSC  FD8.2
08B3C:  INCF   x11,F
08B3E:  BTFSC  FD8.2
08B40:  INCF   x12,F
08B42:  BRA    8AB4
....................    } 
....................  
....................    OUTPUT_HIGH(PIN_C5); // give back cfm access 
08B44:  BCF    F94.5
08B46:  BSF    F8B.5
....................    OUTPUT_HIGH(PIN_A5); // give back msn access 
08B48:  BCF    F92.5
08B4A:  BSF    F89.5
....................     
....................    CFM_ACCESS_FLAG = 1; 
08B4C:  MOVLW  01
08B4E:  MOVLB  1
08B50:  MOVWF  xAF
....................    CFM_ACCESS_TIME = 50; 
08B52:  MOVLW  32
08B54:  MOVWF  xB0
08B56:  MOVLB  0
08B58:  GOTO   8C7C (RETURN)
.................... } 
....................  
.................... void DATA_COPY_FROM_MAIN_FM_TO_CFM(unsigned int32 address, unsigned int32 num_of_bytes ) 
.................... { 
....................    OUTPUT_LOW(PIN_C5); // get cfm access 
*
08CDE:  BCF    F94.5
08CE0:  BCF    F8B.5
....................     
....................    COM_FM_SECTOR_ERASE( address, 64); 
08CE2:  MOVFF  40A,436
08CE6:  MOVFF  409,435
08CEA:  MOVFF  408,434
08CEE:  MOVFF  407,433
08CF2:  MOVLW  40
08CF4:  MOVLB  4
08CF6:  MOVWF  x37
08CF8:  MOVLW  03
08CFA:  MOVWF  x39
08CFC:  MOVLW  E8
08CFE:  MOVWF  x38
08D00:  MOVLB  0
08D02:  CALL   44C0
....................     
....................    for(unsigned int32 i = 0; i< num_of_bytes; i++) 
08D06:  MOVLB  4
08D08:  CLRF   x12
08D0A:  CLRF   x11
08D0C:  CLRF   x10
08D0E:  CLRF   x0F
08D10:  MOVF   x12,W
08D12:  SUBWF  x0E,W
08D14:  BNC   8DA2
08D16:  BNZ   8D2E
08D18:  MOVF   x11,W
08D1A:  SUBWF  x0D,W
08D1C:  BNC   8DA2
08D1E:  BNZ   8D2E
08D20:  MOVF   x10,W
08D22:  SUBWF  x0C,W
08D24:  BNC   8DA2
08D26:  BNZ   8D2E
08D28:  MOVF   x0B,W
08D2A:  SUBWF  x0F,W
08D2C:  BC    8DA2
....................    { 
....................       COM_FM_BYTE_WRITE( address+i, MAIN_FM_BYTE_READ(address+i) ); 
08D2E:  MOVF   x0F,W
08D30:  ADDWF  x07,W
08D32:  MOVWF  x13
08D34:  MOVF   x10,W
08D36:  ADDWFC x08,W
08D38:  MOVWF  x14
08D3A:  MOVF   x11,W
08D3C:  ADDWFC x09,W
08D3E:  MOVWF  x15
08D40:  MOVF   x12,W
08D42:  ADDWFC x0A,W
08D44:  MOVWF  x16
08D46:  MOVF   x0F,W
08D48:  ADDWF  x07,W
08D4A:  MOVWF  x17
08D4C:  MOVF   x10,W
08D4E:  ADDWFC x08,W
08D50:  MOVWF  x18
08D52:  MOVF   x11,W
08D54:  ADDWFC x09,W
08D56:  MOVWF  x19
08D58:  MOVF   x12,W
08D5A:  ADDWFC x0A,W
08D5C:  MOVWF  x1A
08D5E:  MOVWF  x1E
08D60:  MOVFF  419,41D
08D64:  MOVFF  418,41C
08D68:  MOVFF  417,41B
08D6C:  MOVLB  0
08D6E:  CALL   23BE
08D72:  MOVFF  01,417
08D76:  MOVFF  416,43F
08D7A:  MOVFF  415,43E
08D7E:  MOVFF  414,43D
08D82:  MOVFF  413,43C
08D86:  MOVFF  01,440
08D8A:  CALL   46EA
08D8E:  MOVLW  01
08D90:  MOVLB  4
08D92:  ADDWF  x0F,F
08D94:  BTFSC  FD8.0
08D96:  INCF   x10,F
08D98:  BTFSC  FD8.2
08D9A:  INCF   x11,F
08D9C:  BTFSC  FD8.2
08D9E:  INCF   x12,F
08DA0:  BRA    8D10
....................    } 
....................       
....................    OUTPUT_HIGH(PIN_C5); // give back cfm access 
08DA2:  BCF    F94.5
08DA4:  BSF    F8B.5
....................    CFM_ACCESS_FLAG = 1; 
08DA6:  MOVLW  01
08DA8:  MOVLB  1
08DAA:  MOVWF  xAF
....................    CFM_ACCESS_TIME = 50; 
08DAC:  MOVLW  32
08DAE:  MOVWF  xB0
08DB0:  MOVLB  0
08DB2:  GOTO   8EBE (RETURN)
.................... } 
....................  
....................  
....................  
.................... //!void DATA_COPY_FROM_MSN_FM_TO_CFM(unsigned int32 address, unsigned int32 num_of_bytes ) 
.................... //!{ 
.................... //!   OUTPUT_LOW(PIN_C5); // get cfm access 
.................... //!   OUTPUT_LOW(PIN_A5); // get msn access 
.................... //!    
.................... //!   COM_FM_SECTOR_ERASE( address, 64); 
.................... //!    
.................... //!   START_COM_FM_TRANSACTION(address, WRITE); 
.................... //!   START_MSN_FM_TRANSACTION(address, READ ); 
.................... //!    
.................... //!   for( unsigned int32 i=0; i<num_of_bytes ; i++)  
.................... //!   { 
.................... //!      COM_FM_BYTE_TRANSFER( MSN_FM_BYTE_TRANSFER(address+i, READ), WRITE ); 
.................... //!   } 
.................... //! 
.................... //!   FINISH_COM_FM_TRANSACTION(); 
.................... //!   FINISH_MSN_FM_TRANSACTION(); 
.................... //!    
.................... //! 
.................... //!   OUTPUT_HIGH(PIN_C5); // give back cfm access 
.................... //!   OUTPUT_HIGH(PIN_A5); // give back msn access 
.................... //!    
.................... //!   CFM_ACCESS_FLAG = 1; 
.................... //!   CFM_ACCESS_TIME = 50; 
.................... //!} 
....................  
.................... //!void DATA_COPY_FROM_MAIN_FM_TO_CFM(unsigned int32 address, unsigned int32 num_of_bytes ) 
.................... //!{ 
.................... //!   OUTPUT_LOW(PIN_C5); // get cfm access 
.................... //!    
.................... //!   COM_FM_SECTOR_ERASE( address, 64); 
.................... //!    
.................... //!   START_COM_FM_TRANSACTION(address, WRITE); 
.................... //!   START_MAIN_FM_TRANSACTION(address, READ ); 
.................... //!    
.................... //!   for( unsigned int32 i=0; i<num_of_bytes ; i++)  
.................... //!   { 
.................... //!      COM_FM_BYTE_TRANSFER( MAIN_FM_BYTE_TRANSFER(address+i, READ), WRITE ); 
.................... //!   }  
.................... //!    
.................... //!   FINISH_COM_FM_TRANSACTION(); 
.................... //!   FINISH_MAIN_FM_TRANSACTION(); 
.................... //!    
.................... //!   for( unsigned int32 i = 0; i<num_of_bytes; i++) 
.................... //!   { 
.................... //!      fprintf( PC, "%X ", COM_FM_BYTE_READ(address+i) ); 
.................... //!   } 
.................... //!   printline(); 
.................... //!    
.................... //!    
.................... //!   OUTPUT_HIGH(PIN_C5); // give back cfm access 
.................... //!   delay_ms(100); 
.................... //!   CFM_ACCESS_FLAG = 1; 
.................... //!   CFM_ACCESS_TIME = 50; 
.................... //!} 
....................  
....................  
....................  
.................... //________________________BYTE WRITE Function____________________________________________________\\ 
.................... //!void MAIN_FM_BYTE_WRITE(unsigned int32 byte_address, unsigned int8 data) 
.................... //!{ 
.................... //!    
.................... //!   //Byte extraction 
.................... //!   adsress[0]  = (unsigned int8)((byte_address>>24) & 0xFF);   // 0x __ 00 00 00 
.................... //!   adsress[1]  = (unsigned int8)((byte_address>>16) & 0xFF);   // 0x 00 __ 00 00 
.................... //!   adsress[2]  = (unsigned int8)((byte_address>>8)  & 0xFF);   // 0x 00 00 __ 00 
.................... //!   adsress[3]  = (unsigned int8)((byte_address)     & 0xFF);   // 0x 00 00 00 __ 
.................... //!  
.................... //!   MAIN_FM_WRITE_ENABLE(); 
.................... //!   Output_low(Pin_E2);             //lower the CS PIN 
.................... //!   /////////////////////////////////////////////////////////////////// 
.................... //!   spi_xfer(MAIN_FM,0x12);         //Byte WRITE COMAND  (0x12) 
.................... //!   spi_xfer(MAIN_FM,adsress[0]);     
.................... //!   spi_xfer(MAIN_FM,adsress[1]);     
.................... //!   spi_xfer(MAIN_FM,adsress[2]);     
.................... //!   spi_xfer(MAIN_FM,adsress[3]); 
.................... //! 
.................... //!   spi_xfer(MAIN_FM,data);  
.................... //!   ////////////////////////////////////////////////////////////////// 
.................... //!   Output_high(Pin_E2);           //take CS PIN higher back  
.................... //!    
.................... //!   return; 
.................... //!} 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... //! 
.................... //!Void SECTOR_COPY_MSN_FM_TO_COM_FM(unsigned int32 sector_number, unsigned int32 num_of_sec, unsigned int32 sector_size) 
.................... //!{ 
.................... //!   unsigned int32 top_sector = sector_number + num_of_sec ; 
.................... //!   OUTPUT_LOw(PIN_C4);  
.................... //!   OUTPUT_LOw(PIN_A5); 
.................... //!   if( sector_size == 0x64 ) 
.................... //!   {   
.................... //!      for(unsigned int32 i = sector_number; i < top_sector; i++) 
.................... //!      { 
.................... //!         Fprintf(PC,"(MSN FM TO COM FM, 4KB sec) Copying Sector-%Ld\n\r",i); 
.................... //!          
.................... //!         Unsigned int32 start_address = (i<<16) & 0x0FFF0000;   // 0x 00 _ _ 00 00 
.................... //!         fprintf(PC,"Sector start adress = 0x%Lx\n\r",start_address); 
.................... //!         COM_FM_SECTOR_ERASE( start_address , 64 ); 
.................... //!          
.................... //!         for(unsigned int32 k = 0; k < 65536 ; k++) 
.................... //!         { 
.................... //!            COM_FM_BYTE_WRITE( start_address + k, MSN_FM_BYTE_READ(start_address + k) ); 
.................... //!         } 
.................... //!          
.................... //!         Fprintf(PC,"Sector-%Ld copying finish\n\r",i); 
.................... //!      } 
.................... //!   } 
.................... //!    
.................... //!   if( sector_size == 0x04 ) 
.................... //!   {   
.................... //!      for(Unsigned int32 i = sector_number; i < top_sector; i++) 
.................... //!      { 
.................... //!         fprintf(PC,"(MSN FM TO COM FM, 4KB sec) Copying Sector-%Ld\n\r",i); 
.................... //!          
.................... //!         Unsigned int32 start_address = (i<<12) & 0x0FFFF000 ;   // 0x 00 _ _ _0 00 
.................... //!         fprintf(PC,"Sector start adress = 0x%Lx\n\r",start_address); 
.................... //!         COM_FM_SECTOR_ERASE( start_address , 4 ); 
.................... //!          
.................... //!         for(unsigned int32 k = 0; k < 4096 ; k++) 
.................... //!         { 
.................... //!            COM_FM_BYTE_WRITE( start_address + k, MSN_FM_BYTE_READ(start_address + k) ); 
.................... //!         } 
.................... //!          
.................... //!         Fprintf(PC,"Sector-%Ld copying finish\n\r",i); 
.................... //!      } 
.................... //!   } 
.................... //!   OUTPUT_HIGH(PIN_C4); 
.................... //!   OUTPUT_HIGH(PIN_A5); 
.................... //!} 
.................... //! 
.................... //!Void SECTOR_COPY_MAIN_FM_TO_COM_FM(unsigned int32 sector_number, unsigned int32 num_of_sec, unsigned int32 sector_size) 
.................... //!{ 
.................... //!   OUTPUT_LOW(PIN_C4); 
.................... //!   unsigned int32 top_sector = sector_number + num_of_sec ; 
.................... //!     
.................... //!   if( sector_size == 0x64 ) 
.................... //!   {   
.................... //!      for(unsigned int32 i = sector_number; i < top_sector; i++) 
.................... //!      { 
.................... //!         Fprintf(PC,"(MAIN FM TO CFM, 64KB sec) Copying Sector-%Ld\n\r",i); 
.................... //!          
.................... //!         Unsigned int32 start_address = (i<<16) & 0x0FFF0000 ;   // 0x 00 _ _ 00 00 
.................... //!         fprintf(PC,"Sector start adress = 0x%Lx\n\r",start_address); 
.................... //!         COM_FM_SECTOR_ERASE( start_address , 64 ); 
.................... //!          
.................... //!         for(unsigned int32 k = 0; k < 65536 ; k++) 
.................... //!         { 
.................... //!            COM_FM_BYTE_WRITE( start_address + k, MAIN_FM_BYTE_READ(start_address + k) ); 
.................... //!         } 
.................... //!          
.................... //!         Fprintf(PC,"Sector-%Ld copying finish\n\r",i); 
.................... //!      } 
.................... //!   } 
.................... //!    
.................... //!   if( sector_size == 0x04 ) 
.................... //!   {   
.................... //!      for(Unsigned int32 i = sector_number; i < top_sector; i++) 
.................... //!      { 
.................... //!         fprintf(PC,"(MAIN FM TO CFM, 4KB sec) Copying Sector-%Ld\n\r",i); 
.................... //!          
.................... //!         Unsigned int32 start_address = (i<<12) & 0x0FFFF000 ;   // 0x 00 _ _ _0 00 
.................... //!         fprintf(PC,"Sector start adress = 0x%Lx\n\r",start_address); 
.................... //!         COM_FM_SECTOR_ERASE( start_address , 4 ); 
.................... //!          
.................... //!         for(unsigned int32 k = 0; k < 4096 ; k++) 
.................... //!         { 
.................... //!            COM_FM_BYTE_WRITE( start_address + k, MAIN_FM_BYTE_READ(start_address + k) ); 
.................... //!         } 
.................... //!          
.................... //!         Fprintf(PC,"Sector-%Ld copying finish\n\r",i); 
.................... //!      } 
.................... //!   } 
.................... //!   OUTPUT_HIGH(PIN_C4); 
.................... //!} 
.................... //! 
.................... //! 
.................... //!Void PACKETS_COPY_FROM_MSN_FM_TO_COM_FM(unsigned int32 start_add, unsigned int32 num_of_pckt) 
.................... //!{ 
.................... //!   //get FM acces 
.................... //!   OUTPUT_LOw(PIN_C4);  
.................... //!   OUTPUT_LOw(PIN_A5); 
.................... //!    
.................... //!   //erase the sector 
.................... //!   COM_FM_SECTOR_ERASE( start_add , 64 ); 
.................... //!   unsigned int32 num_of_bytes = 81 * num_of_pckt ; 
.................... //! 
.................... //!   Fprintf(PC,"LoRa data copying to SFM, Start address = 0x%LX\n\r",start_add); 
.................... //!   Fprintf(Debug,"No. of bytes = %Ld (%Ld)\n\r",num_of_bytes,num_of_pckt); 
.................... //!    
.................... //!   for(unsigned int32 k = 0; k < num_of_bytes ; k++) 
.................... //!   { 
.................... //!      COM_FM_BYTE_WRITE( (start_add + k), MSN_FM_BYTE_READ(start_add + k) ); 
.................... //!   } 
.................... //!    
.................... //!   OUTPUT_HIGH(PIN_C4); 
.................... //!   OUTPUT_HIGH(PIN_A5); 
.................... //!} 
.................... //! 
.................... //! 
.................... //!Void PACKETS_COPY_FROM_MAIN_FM_TO_COM_FM(unsigned int32 start_add, unsigned int32 num_of_pckt) 
.................... //!{ 
.................... //!   //get FM acces 
.................... //!   OUTPUT_LOw(PIN_C4);  
.................... //!    
.................... //!   //erase the sector 
.................... //!   COM_FM_SECTOR_ERASE( start_add , 64 ); 
.................... //!    
.................... //!   unsigned int32 num_of_bytes = 81* num_of_pckt; 
.................... //!    
.................... //!   Fprintf(Debug,"Data copying from Main FM to SFM, Start address = 0x%LX\n\r",start_add); 
.................... //!   Fprintf(Debug,"No. of bytes = %Ld (%Ld)\n\r",num_of_bytes,num_of_pckt); 
.................... //!    
.................... //!   for(unsigned int32 k = 0; k < num_of_bytes ; k++) 
.................... //!   { 
.................... //!      COM_FM_BYTE_WRITE( (start_add + k), MAIN_FM_BYTE_READ(start_add + k) ); 
.................... //!   } 
.................... //!    
.................... //!   OUTPUT_HIGH(PIN_C4); 
.................... //!} 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #include <RESERVE_fun.c> 
.................... // we will use sector 1 of the main flash memry to save rservation commands 
....................  
.................... unsigned int8 Location_1_Array[12] = {0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,    0x00, 0x01, 0x10, 0x00}; 
.................... unsigned int8 Location_2_Array[12] = {0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,    0x00, 0x01, 0x20, 0x00}; 
.................... unsigned int8 Location_3_Array[12] = {0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,    0x00, 0x01, 0x30, 0x00}; 
.................... unsigned int8 Location_4_Array[12] = {0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,    0x00, 0x01, 0x40, 0x00}; 
.................... unsigned int8 Location_5_Array[12] = {0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,    0x00, 0x01, 0x50, 0x00}; 
.................... unsigned int8 Location_6_Array[12] = {0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,    0x00, 0x01, 0x60, 0x00}; 
.................... unsigned int8 Location_7_Array[12] = {0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,    0x00, 0x01, 0x70, 0x00}; 
.................... unsigned int8 Location_8_Array[12] = {0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,    0x00, 0x01, 0x80, 0x00}; 
.................... unsigned int8 Location_9_Array[12] = {0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,    0x00, 0x01, 0x90, 0x00}; 
.................... unsigned int8 Location_A_Array[12] = {0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,    0x00, 0x01, 0xA0, 0x00}; 
....................                                    //  0     1     2     3     4     5     6     7     8     9     10    11 
.................... //  flash memroy location details 
.................... // |  0    |  1   |  2    |  3   |    4   |   5   |   6    |   7   | 8  | 9  | 10 | 11 |    12     | 
.................... // |ON flag|ON Day|ON Hour|ON Min|OFF flag|OFF Day|OFF Hour|OFF Min|0XFF|0xFF|0xFF|0xFF|Payload Num| 
....................  
.................... // |   13   |   14   |   15   ||   16   |   17   |   18   |   19   ||   20   |   21   |   22    |  
.................... // |  0x00  |CPtoMP_2|CPtoMP_3||CPtoMP_4|CPtoMP_5|CPtoMP_6|CPtoMP_7||CPtoMP_8|CPtoMP_9|CPtoMP_10| 
....................  
....................  
.................... // Array[0] = On flag    = 0th byte 
.................... // Array[1] = ON Day     = 1st byte 
.................... // Array[2] = ON Hour    = 2nd byte 
.................... // Array[3] = ON Minute  = 3rd byte 
....................  
.................... // Array[4] = OFF flag   = 4th byte 
.................... // Array[5] = OFF Day    = 5th byte 
.................... // Array[6] = OFF Hour   = 6th byte 
.................... // Array[7] = OFF Minute = 7th byte 
....................  
.................... // Array[8], Array[9], Array[10], Array[11] = location ADD 
....................  
.................... // 12th byte = Mision board number 
....................  
.................... // 13th byte to 30th byte command 
....................  
.................... unsigned int8 Reservation_CMD_Buffer[30]; 
....................  
....................  
.................... void _LOAD_RESERVATION_COMMANDS_ON_OFF_TIME_AT_BOOT(unsigned int8 array[]) 
*
02442:  MOVLW  08
02444:  MOVLB  3
02446:  ADDWF  xFD,W
02448:  MOVWF  FE9
0244A:  MOVLW  00
0244C:  ADDWFC xFE,W
0244E:  MOVWF  FEA
02450:  MOVFF  FEF,402
02454:  MOVLW  09
02456:  ADDWF  xFD,W
02458:  MOVWF  FE9
0245A:  MOVLW  00
0245C:  ADDWFC xFE,W
0245E:  MOVWF  FEA
02460:  MOVFF  FEF,401
02464:  MOVLW  0A
02466:  ADDWF  xFD,W
02468:  MOVWF  FE9
0246A:  MOVLW  00
0246C:  ADDWFC xFE,W
0246E:  MOVWF  FEA
02470:  MOVFF  FEF,400
02474:  MOVLW  0B
02476:  ADDWF  xFD,W
02478:  MOVWF  FE9
0247A:  MOVLW  00
0247C:  ADDWFC xFE,W
0247E:  MOVWF  FEA
02480:  MOVFF  FEF,3FF
.................... { 
....................    unsigned int32 Location_ADD = make32( Array[8], Array[9], Array[10], Array[11] ); 
....................     
....................    fprintf( PC, "RSVSN Location - %X >> ", Array[10]>>4); 
02484:  MOVLW  0A
02486:  ADDWF  xFD,W
02488:  MOVWF  FE9
0248A:  MOVLW  00
0248C:  ADDWFC xFE,W
0248E:  MOVWF  FEA
02490:  MOVFF  FEF,404
02494:  MOVLB  4
02496:  SWAPF  x04,F
02498:  MOVLW  0F
0249A:  ANDWF  x04,F
0249C:  MOVLW  B0
0249E:  MOVWF  FF6
024A0:  MOVLW  02
024A2:  MOVWF  FF7
024A4:  MOVLW  00
024A6:  MOVWF  FF8
024A8:  MOVLW  11
024AA:  MOVWF  x3D
024AC:  MOVLB  0
024AE:  RCALL  20A4
024B0:  MOVFF  404,43E
024B4:  MOVLW  37
024B6:  MOVLB  4
024B8:  MOVWF  x3F
024BA:  MOVLB  0
024BC:  RCALL  20D6
024BE:  MOVLW  C3
024C0:  MOVWF  FF6
024C2:  MOVLW  02
024C4:  MOVWF  FF7
024C6:  MOVLW  00
024C8:  MOVWF  FF8
024CA:  MOVLW  04
024CC:  MOVLB  4
024CE:  MOVWF  x3D
024D0:  MOVLB  0
024D2:  RCALL  20A4
....................    for(int i = 0; i<30; i++) fprintf( PC, "%X ", MAIN_FM_BYTE_READ(location_ADD+i) ); 
024D4:  MOVLB  4
024D6:  CLRF   x03
024D8:  MOVF   x03,W
024DA:  SUBLW  1D
024DC:  BNC   252C
024DE:  MOVF   x03,W
024E0:  MOVLB  3
024E2:  ADDWF  xFF,W
024E4:  MOVLB  4
024E6:  MOVWF  x04
024E8:  MOVLW  00
024EA:  ADDWFC x00,W
024EC:  MOVWF  x05
024EE:  MOVLW  00
024F0:  ADDWFC x01,W
024F2:  MOVWF  x06
024F4:  MOVLW  00
024F6:  ADDWFC x02,W
024F8:  MOVWF  x07
024FA:  MOVWF  x1E
024FC:  MOVFF  406,41D
02500:  MOVFF  405,41C
02504:  MOVFF  404,41B
02508:  MOVLB  0
0250A:  RCALL  23BE
0250C:  MOVFF  01,404
02510:  MOVFF  01,43E
02514:  MOVLW  37
02516:  MOVLB  4
02518:  MOVWF  x3F
0251A:  MOVLB  0
0251C:  RCALL  20D6
0251E:  MOVLW  20
02520:  BTFSS  F9E.4
02522:  BRA    2520
02524:  MOVWF  FAD
02526:  MOVLB  4
02528:  INCF   x03,F
0252A:  BRA    24D8
....................    printline(); 
0252C:  MOVLB  0
0252E:  RCALL  2092
....................     
....................    if( MAIN_FM_BYTE_READ(location_ADD) == 0x01 )    // on flag 
02530:  MOVFF  402,41E
02534:  MOVFF  401,41D
02538:  MOVFF  400,41C
0253C:  MOVFF  3FF,41B
02540:  RCALL  23BE
02542:  DECFSZ 01,W
02544:  BRA    2710
....................    { 
....................       Array[0]  = 0x01 ;          // turn on time check flag 
02546:  MOVLB  3
02548:  MOVFF  3FD,FE9
0254C:  MOVFF  3FE,FEA
02550:  MOVLW  01
02552:  MOVWF  FEF
....................       // loading time details 
....................       Array[1]  = MAIN_FM_BYTE_READ(Location_ADD + 1); 
02554:  ADDWF  xFD,W
02556:  MOVWF  01
02558:  MOVLW  00
0255A:  ADDWFC xFE,W
0255C:  MOVWF  03
0255E:  MOVFF  01,404
02562:  MOVLB  4
02564:  MOVWF  x05
02566:  MOVLW  01
02568:  MOVLB  3
0256A:  ADDWF  xFF,W
0256C:  MOVLB  4
0256E:  MOVWF  x06
02570:  MOVLW  00
02572:  ADDWFC x00,W
02574:  MOVWF  x07
02576:  MOVLW  00
02578:  ADDWFC x01,W
0257A:  MOVWF  x08
0257C:  MOVLW  00
0257E:  ADDWFC x02,W
02580:  MOVWF  x09
02582:  MOVWF  x1E
02584:  MOVFF  408,41D
02588:  MOVFF  407,41C
0258C:  MOVFF  406,41B
02590:  MOVLB  0
02592:  RCALL  23BE
02594:  MOVFF  405,FEA
02598:  MOVFF  404,FE9
0259C:  MOVFF  01,FEF
....................       Array[2]  = MAIN_FM_BYTE_READ(Location_ADD + 2); 
025A0:  MOVLW  02
025A2:  MOVLB  3
025A4:  ADDWF  xFD,W
025A6:  MOVWF  01
025A8:  MOVLW  00
025AA:  ADDWFC xFE,W
025AC:  MOVWF  03
025AE:  MOVFF  01,404
025B2:  MOVLB  4
025B4:  MOVWF  x05
025B6:  MOVLW  02
025B8:  MOVLB  3
025BA:  ADDWF  xFF,W
025BC:  MOVLB  4
025BE:  MOVWF  x06
025C0:  MOVLW  00
025C2:  ADDWFC x00,W
025C4:  MOVWF  x07
025C6:  MOVLW  00
025C8:  ADDWFC x01,W
025CA:  MOVWF  x08
025CC:  MOVLW  00
025CE:  ADDWFC x02,W
025D0:  MOVWF  x09
025D2:  MOVWF  x1E
025D4:  MOVFF  408,41D
025D8:  MOVFF  407,41C
025DC:  MOVFF  406,41B
025E0:  MOVLB  0
025E2:  RCALL  23BE
025E4:  MOVFF  405,FEA
025E8:  MOVFF  404,FE9
025EC:  MOVFF  01,FEF
....................       Array[3]  = MAIN_FM_BYTE_READ(Location_ADD + 3); 
025F0:  MOVLW  03
025F2:  MOVLB  3
025F4:  ADDWF  xFD,W
025F6:  MOVWF  01
025F8:  MOVLW  00
025FA:  ADDWFC xFE,W
025FC:  MOVWF  03
025FE:  MOVFF  01,404
02602:  MOVLB  4
02604:  MOVWF  x05
02606:  MOVLW  03
02608:  MOVLB  3
0260A:  ADDWF  xFF,W
0260C:  MOVLB  4
0260E:  MOVWF  x06
02610:  MOVLW  00
02612:  ADDWFC x00,W
02614:  MOVWF  x07
02616:  MOVLW  00
02618:  ADDWFC x01,W
0261A:  MOVWF  x08
0261C:  MOVLW  00
0261E:  ADDWFC x02,W
02620:  MOVWF  x09
02622:  MOVWF  x1E
02624:  MOVFF  408,41D
02628:  MOVFF  407,41C
0262C:  MOVFF  406,41B
02630:  MOVLB  0
02632:  RCALL  23BE
02634:  MOVFF  405,FEA
02638:  MOVFF  404,FE9
0263C:  MOVFF  01,FEF
....................       fprintf(PC, "RSVSN CMD on time loaded, Location = %X | %X-%X:%X\n\r",Array[10]>>4, Array[1], Array[2], Array[3]); 
02640:  MOVLW  0A
02642:  MOVLB  3
02644:  ADDWF  xFD,W
02646:  MOVWF  FE9
02648:  MOVLW  00
0264A:  ADDWFC xFE,W
0264C:  MOVWF  FEA
0264E:  SWAPF  FEF,W
02650:  MOVLB  4
02652:  MOVWF  x04
02654:  MOVLW  0F
02656:  ANDWF  x04,F
02658:  MOVLW  01
0265A:  MOVLB  3
0265C:  ADDWF  xFD,W
0265E:  MOVWF  FE9
02660:  MOVLW  00
02662:  ADDWFC xFE,W
02664:  MOVWF  FEA
02666:  MOVFF  FEF,405
0266A:  MOVLW  02
0266C:  ADDWF  xFD,W
0266E:  MOVWF  FE9
02670:  MOVLW  00
02672:  ADDWFC xFE,W
02674:  MOVWF  FEA
02676:  MOVFF  FEF,406
0267A:  MOVLW  03
0267C:  ADDWF  xFD,W
0267E:  MOVWF  FE9
02680:  MOVLW  00
02682:  ADDWFC xFE,W
02684:  MOVWF  FEA
02686:  MOVFF  FEF,407
0268A:  MOVLW  C8
0268C:  MOVWF  FF6
0268E:  MOVLW  02
02690:  MOVWF  FF7
02692:  MOVLW  00
02694:  MOVWF  FF8
02696:  MOVLW  25
02698:  MOVLB  4
0269A:  MOVWF  x3D
0269C:  MOVLB  0
0269E:  RCALL  20A4
026A0:  MOVFF  404,43E
026A4:  MOVLW  37
026A6:  MOVLB  4
026A8:  MOVWF  x3F
026AA:  MOVLB  0
026AC:  RCALL  20D6
026AE:  MOVLW  EF
026B0:  MOVWF  FF6
026B2:  MOVLW  02
026B4:  MOVWF  FF7
026B6:  MOVLW  00
026B8:  MOVWF  FF8
026BA:  MOVLW  03
026BC:  MOVLB  4
026BE:  MOVWF  x3D
026C0:  MOVLB  0
026C2:  RCALL  20A4
026C4:  MOVFF  405,43E
026C8:  MOVLW  37
026CA:  MOVLB  4
026CC:  MOVWF  x3F
026CE:  MOVLB  0
026D0:  RCALL  20D6
026D2:  MOVLW  2D
026D4:  BTFSS  F9E.4
026D6:  BRA    26D4
026D8:  MOVWF  FAD
026DA:  MOVFF  406,43E
026DE:  MOVLW  37
026E0:  MOVLB  4
026E2:  MOVWF  x3F
026E4:  MOVLB  0
026E6:  RCALL  20D6
026E8:  MOVLW  3A
026EA:  BTFSS  F9E.4
026EC:  BRA    26EA
026EE:  MOVWF  FAD
026F0:  MOVFF  407,43E
026F4:  MOVLW  37
026F6:  MOVLB  4
026F8:  MOVWF  x3F
026FA:  MOVLB  0
026FC:  RCALL  20D6
026FE:  MOVLW  0A
02700:  BTFSS  F9E.4
02702:  BRA    2700
02704:  MOVWF  FAD
02706:  MOVLW  0D
02708:  BTFSS  F9E.4
0270A:  BRA    2708
0270C:  MOVWF  FAD
....................    } 
0270E:  BRA    271E
....................    else Array[0] = 0xFF; 
02710:  MOVLB  3
02712:  MOVFF  3FD,FE9
02716:  MOVFF  3FE,FEA
0271A:  SETF   FEF
0271C:  MOVLB  0
....................     
....................    if( MAIN_FM_BYTE_READ(location_ADD+4) == 0x01 ) 
0271E:  MOVLW  04
02720:  MOVLB  3
02722:  ADDWF  xFF,W
02724:  MOVLB  4
02726:  MOVWF  x04
02728:  MOVLW  00
0272A:  ADDWFC x00,W
0272C:  MOVWF  x05
0272E:  MOVLW  00
02730:  ADDWFC x01,W
02732:  MOVWF  x06
02734:  MOVLW  00
02736:  ADDWFC x02,W
02738:  MOVWF  x07
0273A:  MOVWF  x1E
0273C:  MOVFF  406,41D
02740:  MOVFF  405,41C
02744:  MOVFF  404,41B
02748:  MOVLB  0
0274A:  RCALL  23BE
0274C:  DECFSZ 01,W
0274E:  BRA    292A
....................    { 
....................       Array[4]  = 0x01 ;          // turn on time check flag 
02750:  MOVLW  04
02752:  MOVLB  3
02754:  ADDWF  xFD,W
02756:  MOVWF  FE9
02758:  MOVLW  00
0275A:  ADDWFC xFE,W
0275C:  MOVWF  FEA
0275E:  MOVLW  01
02760:  MOVWF  FEF
....................       // loading time details 
....................       Array[5]  = MAIN_FM_BYTE_READ(Location_ADD + 5); 
02762:  MOVLW  05
02764:  ADDWF  xFD,W
02766:  MOVWF  01
02768:  MOVLW  00
0276A:  ADDWFC xFE,W
0276C:  MOVWF  03
0276E:  MOVFF  01,404
02772:  MOVLB  4
02774:  MOVWF  x05
02776:  MOVLW  05
02778:  MOVLB  3
0277A:  ADDWF  xFF,W
0277C:  MOVLB  4
0277E:  MOVWF  x06
02780:  MOVLW  00
02782:  ADDWFC x00,W
02784:  MOVWF  x07
02786:  MOVLW  00
02788:  ADDWFC x01,W
0278A:  MOVWF  x08
0278C:  MOVLW  00
0278E:  ADDWFC x02,W
02790:  MOVWF  x09
02792:  MOVWF  x1E
02794:  MOVFF  408,41D
02798:  MOVFF  407,41C
0279C:  MOVFF  406,41B
027A0:  MOVLB  0
027A2:  RCALL  23BE
027A4:  MOVFF  405,FEA
027A8:  MOVFF  404,FE9
027AC:  MOVFF  01,FEF
....................       Array[6]  = MAIN_FM_BYTE_READ(Location_ADD + 6); 
027B0:  MOVLW  06
027B2:  MOVLB  3
027B4:  ADDWF  xFD,W
027B6:  MOVWF  01
027B8:  MOVLW  00
027BA:  ADDWFC xFE,W
027BC:  MOVWF  03
027BE:  MOVFF  01,404
027C2:  MOVLB  4
027C4:  MOVWF  x05
027C6:  MOVLW  06
027C8:  MOVLB  3
027CA:  ADDWF  xFF,W
027CC:  MOVLB  4
027CE:  MOVWF  x06
027D0:  MOVLW  00
027D2:  ADDWFC x00,W
027D4:  MOVWF  x07
027D6:  MOVLW  00
027D8:  ADDWFC x01,W
027DA:  MOVWF  x08
027DC:  MOVLW  00
027DE:  ADDWFC x02,W
027E0:  MOVWF  x09
027E2:  MOVWF  x1E
027E4:  MOVFF  408,41D
027E8:  MOVFF  407,41C
027EC:  MOVFF  406,41B
027F0:  MOVLB  0
027F2:  RCALL  23BE
027F4:  MOVFF  405,FEA
027F8:  MOVFF  404,FE9
027FC:  MOVFF  01,FEF
....................       Array[7]  = MAIN_FM_BYTE_READ(Location_ADD + 7); 
02800:  MOVLW  07
02802:  MOVLB  3
02804:  ADDWF  xFD,W
02806:  MOVWF  01
02808:  MOVLW  00
0280A:  ADDWFC xFE,W
0280C:  MOVWF  03
0280E:  MOVFF  01,404
02812:  MOVLB  4
02814:  MOVWF  x05
02816:  MOVLW  07
02818:  MOVLB  3
0281A:  ADDWF  xFF,W
0281C:  MOVLB  4
0281E:  MOVWF  x06
02820:  MOVLW  00
02822:  ADDWFC x00,W
02824:  MOVWF  x07
02826:  MOVLW  00
02828:  ADDWFC x01,W
0282A:  MOVWF  x08
0282C:  MOVLW  00
0282E:  ADDWFC x02,W
02830:  MOVWF  x09
02832:  MOVWF  x1E
02834:  MOVFF  408,41D
02838:  MOVFF  407,41C
0283C:  MOVFF  406,41B
02840:  MOVLB  0
02842:  RCALL  23BE
02844:  MOVFF  405,FEA
02848:  MOVFF  404,FE9
0284C:  MOVFF  01,FEF
....................       fprintf(PC, "RSVSN CMD off time loaded, Location = %X | %X-%X:%X\n\r",Array[10]>>4, Array[5], Array[6], Array[7]); 
02850:  MOVLW  0A
02852:  MOVLB  3
02854:  ADDWF  xFD,W
02856:  MOVWF  FE9
02858:  MOVLW  00
0285A:  ADDWFC xFE,W
0285C:  MOVWF  FEA
0285E:  SWAPF  FEF,W
02860:  MOVLB  4
02862:  MOVWF  x04
02864:  MOVLW  0F
02866:  ANDWF  x04,F
02868:  MOVLW  05
0286A:  MOVLB  3
0286C:  ADDWF  xFD,W
0286E:  MOVWF  FE9
02870:  MOVLW  00
02872:  ADDWFC xFE,W
02874:  MOVWF  FEA
02876:  MOVFF  FEF,405
0287A:  MOVLW  06
0287C:  ADDWF  xFD,W
0287E:  MOVWF  FE9
02880:  MOVLW  00
02882:  ADDWFC xFE,W
02884:  MOVWF  FEA
02886:  MOVFF  FEF,406
0288A:  MOVLW  07
0288C:  ADDWF  xFD,W
0288E:  MOVWF  FE9
02890:  MOVLW  00
02892:  ADDWFC xFE,W
02894:  MOVWF  FEA
02896:  MOVFF  FEF,407
0289A:  MOVLW  FE
0289C:  MOVWF  FF6
0289E:  MOVLW  02
028A0:  MOVWF  FF7
028A2:  MOVLW  00
028A4:  MOVWF  FF8
028A6:  MOVLW  26
028A8:  MOVLB  4
028AA:  MOVWF  x3D
028AC:  MOVLB  0
028AE:  CALL   20A4
028B2:  MOVFF  404,43E
028B6:  MOVLW  37
028B8:  MOVLB  4
028BA:  MOVWF  x3F
028BC:  MOVLB  0
028BE:  RCALL  20D6
028C0:  MOVLW  26
028C2:  MOVWF  FF6
028C4:  MOVLW  03
028C6:  MOVWF  FF7
028C8:  MOVLW  00
028CA:  MOVWF  FF8
028CC:  MOVLW  03
028CE:  MOVLB  4
028D0:  MOVWF  x3D
028D2:  MOVLB  0
028D4:  CALL   20A4
028D8:  MOVFF  405,43E
028DC:  MOVLW  37
028DE:  MOVLB  4
028E0:  MOVWF  x3F
028E2:  MOVLB  0
028E4:  CALL   20D6
028E8:  MOVLW  2D
028EA:  BTFSS  F9E.4
028EC:  BRA    28EA
028EE:  MOVWF  FAD
028F0:  MOVFF  406,43E
028F4:  MOVLW  37
028F6:  MOVLB  4
028F8:  MOVWF  x3F
028FA:  MOVLB  0
028FC:  CALL   20D6
02900:  MOVLW  3A
02902:  BTFSS  F9E.4
02904:  BRA    2902
02906:  MOVWF  FAD
02908:  MOVFF  407,43E
0290C:  MOVLW  37
0290E:  MOVLB  4
02910:  MOVWF  x3F
02912:  MOVLB  0
02914:  CALL   20D6
02918:  MOVLW  0A
0291A:  BTFSS  F9E.4
0291C:  BRA    291A
0291E:  MOVWF  FAD
02920:  MOVLW  0D
02922:  BTFSS  F9E.4
02924:  BRA    2922
02926:  MOVWF  FAD
....................    } 
02928:  BRA    293C
....................    else Array[4] = 0xFF; 
0292A:  MOVLW  04
0292C:  MOVLB  3
0292E:  ADDWF  xFD,W
02930:  MOVWF  FE9
02932:  MOVLW  00
02934:  ADDWFC xFE,W
02936:  MOVWF  FEA
02938:  SETF   FEF
0293A:  MOVLB  0
0293C:  RETURN 0
.................... } 
....................  
....................  
.................... void LOAD_RESERVATION_COMMANDS_ON_OFF_TIME_AT_BOOT() 
.................... { 
....................    _LOAD_RESERVATION_COMMANDS_ON_OFF_TIME_AT_BOOT(Location_1_Array); 
0293E:  MOVLW  02
02940:  MOVLB  3
02942:  MOVWF  xFE
02944:  MOVLW  D9
02946:  MOVWF  xFD
02948:  MOVLB  0
0294A:  RCALL  2442
....................    _LOAD_RESERVATION_COMMANDS_ON_OFF_TIME_AT_BOOT(Location_2_Array); 
0294C:  MOVLW  02
0294E:  MOVLB  3
02950:  MOVWF  xFE
02952:  MOVLW  E5
02954:  MOVWF  xFD
02956:  MOVLB  0
02958:  RCALL  2442
....................    _LOAD_RESERVATION_COMMANDS_ON_OFF_TIME_AT_BOOT(Location_3_Array); 
0295A:  MOVLW  02
0295C:  MOVLB  3
0295E:  MOVWF  xFE
02960:  MOVLW  F1
02962:  MOVWF  xFD
02964:  MOVLB  0
02966:  RCALL  2442
....................    _LOAD_RESERVATION_COMMANDS_ON_OFF_TIME_AT_BOOT(Location_4_Array); 
02968:  MOVLW  02
0296A:  MOVLB  3
0296C:  MOVWF  xFE
0296E:  MOVLW  FD
02970:  MOVWF  xFD
02972:  MOVLB  0
02974:  RCALL  2442
....................    _LOAD_RESERVATION_COMMANDS_ON_OFF_TIME_AT_BOOT(Location_5_Array); 
02976:  MOVLW  03
02978:  MOVLB  3
0297A:  MOVWF  xFE
0297C:  MOVLW  09
0297E:  MOVWF  xFD
02980:  MOVLB  0
02982:  RCALL  2442
....................    _LOAD_RESERVATION_COMMANDS_ON_OFF_TIME_AT_BOOT(Location_6_Array); 
02984:  MOVLW  03
02986:  MOVLB  3
02988:  MOVWF  xFE
0298A:  MOVLW  15
0298C:  MOVWF  xFD
0298E:  MOVLB  0
02990:  RCALL  2442
....................    _LOAD_RESERVATION_COMMANDS_ON_OFF_TIME_AT_BOOT(Location_7_Array); 
02992:  MOVLW  03
02994:  MOVLB  3
02996:  MOVWF  xFE
02998:  MOVLW  21
0299A:  MOVWF  xFD
0299C:  MOVLB  0
0299E:  RCALL  2442
....................    _LOAD_RESERVATION_COMMANDS_ON_OFF_TIME_AT_BOOT(Location_8_Array); 
029A0:  MOVLW  03
029A2:  MOVLB  3
029A4:  MOVWF  xFE
029A6:  MOVLW  2D
029A8:  MOVWF  xFD
029AA:  MOVLB  0
029AC:  RCALL  2442
....................    _LOAD_RESERVATION_COMMANDS_ON_OFF_TIME_AT_BOOT(Location_9_Array); 
029AE:  MOVLW  03
029B0:  MOVLB  3
029B2:  MOVWF  xFE
029B4:  MOVLW  39
029B6:  MOVWF  xFD
029B8:  MOVLB  0
029BA:  RCALL  2442
....................    _LOAD_RESERVATION_COMMANDS_ON_OFF_TIME_AT_BOOT(Location_A_Array); 
029BC:  MOVLW  03
029BE:  MOVLB  3
029C0:  MOVWF  xFE
029C2:  MOVLW  45
029C4:  MOVWF  xFD
029C6:  MOVLB  0
029C8:  RCALL  2442
029CA:  GOTO   B1DA (RETURN)
.................... } 
....................  
....................  
.................... void _CHECK_RESERVATION_COMMAND_ON_TIME_AND_OFF_TIME(unsigned int8 Array[]) 
.................... { 
....................    if( Array[0] == 0x01 ) 
*
07F56:  MOVLB  3
07F58:  MOVFF  3FD,FE9
07F5C:  MOVFF  3FE,FEA
07F60:  DECFSZ FEF,W
07F62:  BRA    81EA
....................    { 
....................       if( (MP_RTC_DAY == Array[1]) && (MP_RTC_HOUR == Array[2]) && (MP_RTC_MIN == Array[3]) ) 
07F64:  MOVLW  01
07F66:  ADDWF  xFD,W
07F68:  MOVWF  FE9
07F6A:  MOVLW  00
07F6C:  ADDWFC xFE,W
07F6E:  MOVWF  FEA
07F70:  MOVF   FEF,W
07F72:  MOVLB  1
07F74:  SUBWF  xBF,W
07F76:  BTFSS  FD8.2
07F78:  BRA    81E8
07F7A:  MOVLW  02
07F7C:  MOVLB  3
07F7E:  ADDWF  xFD,W
07F80:  MOVWF  FE9
07F82:  MOVLW  00
07F84:  ADDWFC xFE,W
07F86:  MOVWF  FEA
07F88:  MOVF   FEF,W
07F8A:  MOVLB  1
07F8C:  SUBWF  xC0,W
07F8E:  BTFSS  FD8.2
07F90:  BRA    81E8
07F92:  MOVLW  03
07F94:  MOVLB  3
07F96:  ADDWF  xFD,W
07F98:  MOVWF  FE9
07F9A:  MOVLW  00
07F9C:  ADDWFC xFE,W
07F9E:  MOVWF  FEA
07FA0:  MOVF   FEF,W
07FA2:  MOVLB  1
07FA4:  SUBWF  xC1,W
07FA6:  BTFSS  FD8.2
07FA8:  BRA    81E8
....................       { 
....................          unsigned int32 Location_ADD = make32( Array[8], Array[9], Array[10], Array[11] ); 
07FAA:  MOVLW  08
07FAC:  MOVLB  3
07FAE:  ADDWF  xFD,W
07FB0:  MOVWF  FE9
07FB2:  MOVLW  00
07FB4:  ADDWFC xFE,W
07FB6:  MOVWF  FEA
07FB8:  MOVFF  FEF,402
07FBC:  MOVLW  09
07FBE:  ADDWF  xFD,W
07FC0:  MOVWF  FE9
07FC2:  MOVLW  00
07FC4:  ADDWFC xFE,W
07FC6:  MOVWF  FEA
07FC8:  MOVFF  FEF,401
07FCC:  MOVLW  0A
07FCE:  ADDWF  xFD,W
07FD0:  MOVWF  FE9
07FD2:  MOVLW  00
07FD4:  ADDWFC xFE,W
07FD6:  MOVWF  FEA
07FD8:  MOVFF  FEF,400
07FDC:  MOVLW  0B
07FDE:  ADDWF  xFD,W
07FE0:  MOVWF  FE9
07FE2:  MOVLW  00
07FE4:  ADDWFC xFE,W
07FE6:  MOVWF  FEA
07FE8:  MOVFF  FEF,3FF
....................          fprintf( PC, "Executing location - %X reservation command \n\r", Array[10]>>4); 
07FEC:  MOVLW  0A
07FEE:  ADDWF  xFD,W
07FF0:  MOVWF  FE9
07FF2:  MOVLW  00
07FF4:  ADDWFC xFE,W
07FF6:  MOVWF  FEA
07FF8:  MOVFF  FEF,40D
07FFC:  MOVLB  4
07FFE:  SWAPF  x0D,F
08000:  MOVLW  0F
08002:  ANDWF  x0D,F
08004:  MOVLW  34
08006:  MOVWF  FF6
08008:  MOVLW  03
0800A:  MOVWF  FF7
0800C:  MOVLW  00
0800E:  MOVWF  FF8
08010:  MOVLW  15
08012:  MOVWF  x3D
08014:  MOVLB  0
08016:  CALL   20A4
0801A:  MOVFF  40D,43E
0801E:  MOVLW  37
08020:  MOVLB  4
08022:  MOVWF  x3F
08024:  MOVLB  0
08026:  CALL   20D6
0802A:  MOVLW  4B
0802C:  MOVWF  FF6
0802E:  MOVLW  03
08030:  MOVWF  FF7
08032:  MOVLW  00
08034:  MOVWF  FF8
08036:  MOVLW  17
08038:  MOVLB  4
0803A:  MOVWF  x3D
0803C:  MOVLB  0
0803E:  CALL   20A4
....................           
....................          // loding command to compic array 
....................          CPIC_TO_MPIC_ARRAY[0]  = 0xB0 ; 
08042:  MOVLW  B0
08044:  MOVWF  xB9
....................          for(unsigned int32 i = 1 ; i<30; i++) 
08046:  MOVLB  4
08048:  CLRF   x06
0804A:  CLRF   x05
0804C:  CLRF   x04
0804E:  MOVLW  01
08050:  MOVWF  x03
08052:  MOVF   x06,F
08054:  BNZ   80D4
08056:  MOVF   x05,F
08058:  BNZ   80D4
0805A:  MOVF   x04,F
0805C:  BNZ   80D4
0805E:  MOVF   x03,W
08060:  SUBLW  1D
08062:  BNC   80D4
....................          { 
....................             CPIC_TO_MPIC_ARRAY[i] = MAIN_FM_BYTE_READ(Location_ADD+i+12) ; 
08064:  MOVLW  B9
08066:  ADDWF  x03,W
08068:  MOVWF  01
0806A:  MOVLW  00
0806C:  ADDWFC x04,W
0806E:  MOVWF  03
08070:  MOVFF  01,40D
08074:  MOVWF  x0E
08076:  MOVF   x03,W
08078:  MOVLB  3
0807A:  ADDWF  xFF,W
0807C:  MOVLB  4
0807E:  MOVWF  x0F
08080:  MOVF   x04,W
08082:  ADDWFC x00,W
08084:  MOVWF  x10
08086:  MOVF   x05,W
08088:  ADDWFC x01,W
0808A:  MOVWF  x11
0808C:  MOVF   x06,W
0808E:  ADDWFC x02,W
08090:  MOVWF  x12
08092:  MOVLW  0C
08094:  ADDWF  x0F,F
08096:  MOVLW  00
08098:  ADDWFC x10,F
0809A:  ADDWFC x11,F
0809C:  ADDWFC x12,F
0809E:  MOVFF  412,41E
080A2:  MOVFF  411,41D
080A6:  MOVFF  410,41C
080AA:  MOVFF  40F,41B
080AE:  MOVLB  0
080B0:  CALL   23BE
080B4:  MOVFF  40E,FEA
080B8:  MOVFF  40D,FE9
080BC:  MOVFF  01,FEF
080C0:  MOVLW  01
080C2:  MOVLB  4
080C4:  ADDWF  x03,F
080C6:  BTFSC  FD8.0
080C8:  INCF   x04,F
080CA:  BTFSC  FD8.2
080CC:  INCF   x05,F
080CE:  BTFSC  FD8.2
080D0:  INCF   x06,F
080D2:  BRA    8052
....................          }       
....................          CPIC_TO_MPIC_ARRAY[39] = 0xB1 ; 
080D4:  MOVLW  B1
080D6:  MOVLB  0
080D8:  MOVWF  xE0
....................          
....................          Array[0]  = 0xFF ;    // on  flag 
080DA:  MOVLB  3
080DC:  MOVFF  3FD,FE9
080E0:  MOVFF  3FE,FEA
080E4:  SETF   FEF
....................          Array[4]  = 0x01 ;    // off flag 
080E6:  MOVLW  04
080E8:  ADDWF  xFD,W
080EA:  MOVWF  FE9
080EC:  MOVLW  00
080EE:  ADDWFC xFE,W
080F0:  MOVWF  FEA
080F2:  MOVLW  01
080F4:  MOVWF  FEF
....................           
....................          for( int i = 0; i<30; i++) Reservation_CMD_Buffer[i] = MAIN_FM_BYTE_READ(location_ADD+i) ; 
080F6:  MOVLB  4
080F8:  CLRF   x07
080FA:  MOVF   x07,W
080FC:  SUBLW  1D
080FE:  BNC   8156
08100:  CLRF   03
08102:  MOVF   x07,W
08104:  ADDLW  51
08106:  MOVWF  01
08108:  MOVLW  03
0810A:  ADDWFC 03,F
0810C:  MOVFF  01,40D
08110:  MOVFF  03,40E
08114:  MOVF   x07,W
08116:  MOVLB  3
08118:  ADDWF  xFF,W
0811A:  MOVLB  4
0811C:  MOVWF  x0F
0811E:  MOVLW  00
08120:  ADDWFC x00,W
08122:  MOVWF  x10
08124:  MOVLW  00
08126:  ADDWFC x01,W
08128:  MOVWF  x11
0812A:  MOVLW  00
0812C:  ADDWFC x02,W
0812E:  MOVWF  x12
08130:  MOVWF  x1E
08132:  MOVFF  411,41D
08136:  MOVFF  410,41C
0813A:  MOVFF  40F,41B
0813E:  MOVLB  0
08140:  CALL   23BE
08144:  MOVFF  40E,FEA
08148:  MOVFF  40D,FE9
0814C:  MOVFF  01,FEF
08150:  MOVLB  4
08152:  INCF   x07,F
08154:  BRA    80FA
....................          Reservation_CMD_Buffer[0] = 0xFF     ; 
08156:  MOVLB  3
08158:  SETF   x51
....................          Reservation_CMD_Buffer[1] = 0xFF     ; 
0815A:  SETF   x52
....................          Reservation_CMD_Buffer[2] = 0xFF     ; 
0815C:  SETF   x53
....................          Reservation_CMD_Buffer[3] = 0xFF     ; 
0815E:  SETF   x54
....................          Reservation_CMD_Buffer[4] = Array[4] ; 
08160:  MOVLW  04
08162:  ADDWF  xFD,W
08164:  MOVWF  FE9
08166:  MOVLW  00
08168:  ADDWFC xFE,W
0816A:  MOVWF  FEA
0816C:  MOVFF  FEF,355
....................          MAIN_FM_SECTOR_ERASE(location_ADD, 4, 100); 
08170:  MOVFF  402,413
08174:  MOVFF  401,412
08178:  MOVFF  400,411
0817C:  MOVFF  3FF,410
08180:  MOVLW  04
08182:  MOVLB  4
08184:  MOVWF  x14
08186:  CLRF   x16
08188:  MOVLW  64
0818A:  MOVWF  x15
0818C:  MOVLB  0
0818E:  CALL   2ABE
....................          for( int i = 0; i<30; i++)  MAIN_FM_BYTE_WRITE(location_ADD+i, Reservation_CMD_Buffer[i]) ; 
08192:  MOVLB  4
08194:  CLRF   x08
08196:  MOVF   x08,W
08198:  SUBLW  1D
0819A:  BNC   81E6
0819C:  MOVF   x08,W
0819E:  MOVLB  3
081A0:  ADDWF  xFF,W
081A2:  MOVLB  4
081A4:  MOVWF  x0D
081A6:  MOVLW  00
081A8:  ADDWFC x00,W
081AA:  MOVWF  x0E
081AC:  MOVLW  00
081AE:  ADDWFC x01,W
081B0:  MOVWF  x0F
081B2:  MOVLW  00
081B4:  ADDWFC x02,W
081B6:  MOVWF  x10
081B8:  CLRF   03
081BA:  MOVF   x08,W
081BC:  ADDLW  51
081BE:  MOVWF  FE9
081C0:  MOVLW  03
081C2:  ADDWFC 03,W
081C4:  MOVWF  FEA
081C6:  MOVFF  FEF,419
081CA:  MOVFF  410,418
081CE:  MOVFF  40F,417
081D2:  MOVFF  40E,416
081D6:  MOVFF  40D,415
081DA:  MOVLB  0
081DC:  CALL   2B7E
081E0:  MOVLB  4
081E2:  INCF   x08,F
081E4:  BRA    8196
081E6:  MOVLB  1
081E8:  MOVLB  3
....................       } 
....................    } 
....................     
....................    if( Array[4] == 0x01 ) 
081EA:  MOVLW  04
081EC:  ADDWF  xFD,W
081EE:  MOVWF  FE9
081F0:  MOVLW  00
081F2:  ADDWFC xFE,W
081F4:  MOVWF  FEA
081F6:  DECFSZ FEF,W
081F8:  BRA    8334
....................    { 
....................       if( (MP_RTC_DAY == Array[5]) && (MP_RTC_HOUR == Array[6]) && (MP_RTC_MIN == Array[7]) ) 
081FA:  MOVLW  05
081FC:  ADDWF  xFD,W
081FE:  MOVWF  FE9
08200:  MOVLW  00
08202:  ADDWFC xFE,W
08204:  MOVWF  FEA
08206:  MOVF   FEF,W
08208:  MOVLB  1
0820A:  SUBWF  xBF,W
0820C:  BTFSS  FD8.2
0820E:  BRA    8332
08210:  MOVLW  06
08212:  MOVLB  3
08214:  ADDWF  xFD,W
08216:  MOVWF  FE9
08218:  MOVLW  00
0821A:  ADDWFC xFE,W
0821C:  MOVWF  FEA
0821E:  MOVF   FEF,W
08220:  MOVLB  1
08222:  SUBWF  xC0,W
08224:  BTFSS  FD8.2
08226:  BRA    8332
08228:  MOVLW  07
0822A:  MOVLB  3
0822C:  ADDWF  xFD,W
0822E:  MOVWF  FE9
08230:  MOVLW  00
08232:  ADDWFC xFE,W
08234:  MOVWF  FEA
08236:  MOVF   FEF,W
08238:  MOVLB  1
0823A:  SUBWF  xC1,W
0823C:  BNZ   8332
....................       { 
....................          unsigned int32 Location_ADD = make32( Array[8], Array[9], Array[10], Array[11] ); 
0823E:  MOVLW  08
08240:  MOVLB  3
08242:  ADDWF  xFD,W
08244:  MOVWF  FE9
08246:  MOVLW  00
08248:  ADDWFC xFE,W
0824A:  MOVWF  FEA
0824C:  MOVFF  FEF,40C
08250:  MOVLW  09
08252:  ADDWF  xFD,W
08254:  MOVWF  FE9
08256:  MOVLW  00
08258:  ADDWFC xFE,W
0825A:  MOVWF  FEA
0825C:  MOVFF  FEF,40B
08260:  MOVLW  0A
08262:  ADDWF  xFD,W
08264:  MOVWF  FE9
08266:  MOVLW  00
08268:  ADDWFC xFE,W
0826A:  MOVWF  FEA
0826C:  MOVFF  FEF,40A
08270:  MOVLW  0B
08272:  ADDWF  xFD,W
08274:  MOVWF  FE9
08276:  MOVLW  00
08278:  ADDWFC xFE,W
0827A:  MOVWF  FEA
0827C:  MOVFF  FEF,409
....................          fprintf( PC, "Location - %X reservation cleared \n\r", Array[10]>>4); 
08280:  MOVLW  0A
08282:  ADDWF  xFD,W
08284:  MOVWF  FE9
08286:  MOVLW  00
08288:  ADDWFC xFE,W
0828A:  MOVWF  FEA
0828C:  MOVFF  FEF,40D
08290:  MOVLB  4
08292:  SWAPF  x0D,F
08294:  MOVLW  0F
08296:  ANDWF  x0D,F
08298:  MOVLW  64
0829A:  MOVWF  FF6
0829C:  MOVLW  03
0829E:  MOVWF  FF7
082A0:  MOVLW  00
082A2:  MOVWF  FF8
082A4:  MOVLW  0B
082A6:  MOVWF  x3D
082A8:  MOVLB  0
082AA:  CALL   20A4
082AE:  MOVFF  40D,43E
082B2:  MOVLW  37
082B4:  MOVLB  4
082B6:  MOVWF  x3F
082B8:  MOVLB  0
082BA:  CALL   20D6
082BE:  MOVLW  71
082C0:  MOVWF  FF6
082C2:  MOVLW  03
082C4:  MOVWF  FF7
082C6:  MOVLW  00
082C8:  MOVWF  FF8
082CA:  MOVLW  17
082CC:  MOVLB  4
082CE:  MOVWF  x3D
082D0:  MOVLB  0
082D2:  CALL   20A4
....................           
....................          // we can set the off things here__________________ 
....................           
....................          output_LOW(MBOSS_EN);  
082D6:  BCF    F95.1
082D8:  BCF    F8C.1
....................          delay_ms(10000); 
082DA:  MOVLW  28
082DC:  MOVLB  4
082DE:  MOVWF  x0D
082E0:  MOVLW  FA
082E2:  MOVWF  x3E
082E4:  MOVLB  0
082E6:  CALL   1DA0
082EA:  MOVLB  4
082EC:  DECFSZ x0D,F
082EE:  BRA    82E0
....................          output_high(MBOSS_EN);  
082F0:  BCF    F95.1
082F2:  BSF    F8C.1
....................           
....................          //_________________________________________________ 
....................          Array[0]  = 0xFF ;    // on  flag 
082F4:  MOVLB  3
082F6:  MOVFF  3FD,FE9
082FA:  MOVFF  3FE,FEA
082FE:  SETF   FEF
....................          Array[4]  = 0xFF ;    // off flag 
08300:  MOVLW  04
08302:  ADDWF  xFD,W
08304:  MOVWF  FE9
08306:  MOVLW  00
08308:  ADDWFC xFE,W
0830A:  MOVWF  FEA
0830C:  SETF   FEF
....................          MAIN_FM_SECTOR_ERASE(location_ADD, 4, 100);      // clear the reservation location 
0830E:  MOVFF  40C,413
08312:  MOVFF  40B,412
08316:  MOVFF  40A,411
0831A:  MOVFF  409,410
0831E:  MOVLW  04
08320:  MOVLB  4
08322:  MOVWF  x14
08324:  CLRF   x16
08326:  MOVLW  64
08328:  MOVWF  x15
0832A:  MOVLB  0
0832C:  CALL   2ABE
08330:  MOVLB  1
08332:  MOVLB  3
....................       } 
....................    }   
08334:  MOVLB  0
08336:  RETURN 0
.................... } 
....................  
.................... void CHECK_RESERVATION_COMMAND_ON_TIME_AND_OFF_TIME() 
.................... { 
....................    _CHECK_RESERVATION_COMMAND_ON_TIME_AND_OFF_TIME(Location_1_Array); 
08338:  MOVLW  02
0833A:  MOVLB  3
0833C:  MOVWF  xFE
0833E:  MOVLW  D9
08340:  MOVWF  xFD
08342:  MOVLB  0
08344:  RCALL  7F56
....................    _CHECK_RESERVATION_COMMAND_ON_TIME_AND_OFF_TIME(Location_2_Array); 
08346:  MOVLW  02
08348:  MOVLB  3
0834A:  MOVWF  xFE
0834C:  MOVLW  E5
0834E:  MOVWF  xFD
08350:  MOVLB  0
08352:  RCALL  7F56
....................    _CHECK_RESERVATION_COMMAND_ON_TIME_AND_OFF_TIME(Location_3_Array); 
08354:  MOVLW  02
08356:  MOVLB  3
08358:  MOVWF  xFE
0835A:  MOVLW  F1
0835C:  MOVWF  xFD
0835E:  MOVLB  0
08360:  RCALL  7F56
....................    _CHECK_RESERVATION_COMMAND_ON_TIME_AND_OFF_TIME(Location_4_Array); 
08362:  MOVLW  02
08364:  MOVLB  3
08366:  MOVWF  xFE
08368:  MOVLW  FD
0836A:  MOVWF  xFD
0836C:  MOVLB  0
0836E:  RCALL  7F56
....................    _CHECK_RESERVATION_COMMAND_ON_TIME_AND_OFF_TIME(Location_5_Array); 
08370:  MOVLW  03
08372:  MOVLB  3
08374:  MOVWF  xFE
08376:  MOVLW  09
08378:  MOVWF  xFD
0837A:  MOVLB  0
0837C:  RCALL  7F56
....................    _CHECK_RESERVATION_COMMAND_ON_TIME_AND_OFF_TIME(Location_6_Array); 
0837E:  MOVLW  03
08380:  MOVLB  3
08382:  MOVWF  xFE
08384:  MOVLW  15
08386:  MOVWF  xFD
08388:  MOVLB  0
0838A:  RCALL  7F56
....................    _CHECK_RESERVATION_COMMAND_ON_TIME_AND_OFF_TIME(Location_7_Array); 
0838C:  MOVLW  03
0838E:  MOVLB  3
08390:  MOVWF  xFE
08392:  MOVLW  21
08394:  MOVWF  xFD
08396:  MOVLB  0
08398:  RCALL  7F56
....................    _CHECK_RESERVATION_COMMAND_ON_TIME_AND_OFF_TIME(Location_8_Array); 
0839A:  MOVLW  03
0839C:  MOVLB  3
0839E:  MOVWF  xFE
083A0:  MOVLW  2D
083A2:  MOVWF  xFD
083A4:  MOVLB  0
083A6:  RCALL  7F56
....................    _CHECK_RESERVATION_COMMAND_ON_TIME_AND_OFF_TIME(Location_9_Array); 
083A8:  MOVLW  03
083AA:  MOVLB  3
083AC:  MOVWF  xFE
083AE:  MOVLW  39
083B0:  MOVWF  xFD
083B2:  MOVLB  0
083B4:  RCALL  7F56
....................    _CHECK_RESERVATION_COMMAND_ON_TIME_AND_OFF_TIME(Location_A_Array); 
083B6:  MOVLW  03
083B8:  MOVLB  3
083BA:  MOVWF  xFE
083BC:  MOVLW  45
083BE:  MOVWF  xFD
083C0:  MOVLB  0
083C2:  RCALL  7F56
083C4:  GOTO   B216 (RETURN)
.................... } 
....................  
....................  
.................... void WRITING_CMD(unsigned int8 Array[]) 
*
09660:  MOVLW  08
09662:  MOVLB  3
09664:  ADDWF  xFE,W
09666:  MOVWF  FE9
09668:  MOVLW  00
0966A:  ADDWFC xFF,W
0966C:  MOVWF  FEA
0966E:  MOVFF  FEF,403
09672:  MOVLW  09
09674:  ADDWF  xFE,W
09676:  MOVWF  FE9
09678:  MOVLW  00
0967A:  ADDWFC xFF,W
0967C:  MOVWF  FEA
0967E:  MOVFF  FEF,402
09682:  MOVLW  0A
09684:  ADDWF  xFE,W
09686:  MOVWF  FE9
09688:  MOVLW  00
0968A:  ADDWFC xFF,W
0968C:  MOVWF  FEA
0968E:  MOVFF  FEF,401
09692:  MOVLW  0B
09694:  ADDWF  xFE,W
09696:  MOVWF  FE9
09698:  MOVLW  00
0969A:  ADDWFC xFF,W
0969C:  MOVWF  FEA
0969E:  MOVFF  FEF,400
.................... { 
....................    unsigned int32 ADD_ = make32( Array[8], Array[9], Array[10], Array[11] ) ; 
....................    MAIN_FM_SECTOR_ERASE(ADD_, 4, 100); 
096A2:  MOVFF  403,413
096A6:  MOVFF  402,412
096AA:  MOVFF  401,411
096AE:  MOVFF  400,410
096B2:  MOVLW  04
096B4:  MOVLB  4
096B6:  MOVWF  x14
096B8:  CLRF   x16
096BA:  MOVLW  64
096BC:  MOVWF  x15
096BE:  MOVLB  0
096C0:  CALL   2ABE
....................    Array[0]  = 0x01 ;  
096C4:  MOVLB  3
096C6:  MOVFF  3FE,FE9
096CA:  MOVFF  3FF,FEA
096CE:  MOVLW  01
096D0:  MOVWF  FEF
....................    Array[1]  = CPIC_TO_MPIC_ARRAY[5]  ;  
096D2:  ADDWF  xFE,W
096D4:  MOVWF  FE9
096D6:  MOVLW  00
096D8:  ADDWFC xFF,W
096DA:  MOVWF  FEA
096DC:  MOVFF  BE,FEF
....................    Array[2]  = CPIC_TO_MPIC_ARRAY[6]  ; 
096E0:  MOVLW  02
096E2:  ADDWF  xFE,W
096E4:  MOVWF  FE9
096E6:  MOVLW  00
096E8:  ADDWFC xFF,W
096EA:  MOVWF  FEA
096EC:  MOVFF  BF,FEF
....................    Array[3]  = CPIC_TO_MPIC_ARRAY[7]  ; 
096F0:  MOVLW  03
096F2:  ADDWF  xFE,W
096F4:  MOVWF  FE9
096F6:  MOVLW  00
096F8:  ADDWFC xFF,W
096FA:  MOVWF  FEA
096FC:  MOVFF  C0,FEF
....................    Array[4]  = 0xFF ; 
09700:  MOVLW  04
09702:  ADDWF  xFE,W
09704:  MOVWF  FE9
09706:  MOVLW  00
09708:  ADDWFC xFF,W
0970A:  MOVWF  FEA
0970C:  SETF   FEF
....................    Array[5]  = CPIC_TO_MPIC_ARRAY[8]  ;  
0970E:  MOVLW  05
09710:  ADDWF  xFE,W
09712:  MOVWF  FE9
09714:  MOVLW  00
09716:  ADDWFC xFF,W
09718:  MOVWF  FEA
0971A:  MOVFF  C1,FEF
....................    Array[6]  = CPIC_TO_MPIC_ARRAY[9]  ; 
0971E:  MOVLW  06
09720:  ADDWF  xFE,W
09722:  MOVWF  FE9
09724:  MOVLW  00
09726:  ADDWFC xFF,W
09728:  MOVWF  FEA
0972A:  MOVFF  C2,FEF
....................    Array[7]  = CPIC_TO_MPIC_ARRAY[10] ; 
0972E:  MOVLW  07
09730:  ADDWF  xFE,W
09732:  MOVWF  FE9
09734:  MOVLW  00
09736:  ADDWFC xFF,W
09738:  MOVWF  FEA
0973A:  MOVFF  C3,FEF
....................     
....................    for( int i=0; i<=7; i++) 
0973E:  MOVLB  4
09740:  CLRF   x04
09742:  MOVF   x04,W
09744:  SUBLW  07
09746:  BNC   978E
....................    { 
....................       MAIN_FM_BYTE_WRITE( ADD_+i  , Array[i] ); 
09748:  MOVF   x04,W
0974A:  ADDWF  x00,W
0974C:  MOVWF  x07
0974E:  MOVLW  00
09750:  ADDWFC x01,W
09752:  MOVWF  x08
09754:  MOVLW  00
09756:  ADDWFC x02,W
09758:  MOVWF  x09
0975A:  MOVLW  00
0975C:  ADDWFC x03,W
0975E:  MOVWF  x0A
09760:  MOVF   x04,W
09762:  MOVLB  3
09764:  ADDWF  xFE,W
09766:  MOVWF  FE9
09768:  MOVLW  00
0976A:  ADDWFC xFF,W
0976C:  MOVWF  FEA
0976E:  MOVFF  FEF,419
09772:  MOVFF  40A,418
09776:  MOVFF  409,417
0977A:  MOVFF  408,416
0977E:  MOVFF  407,415
09782:  MOVLB  0
09784:  CALL   2B7E
09788:  MOVLB  4
0978A:  INCF   x04,F
0978C:  BRA    9742
....................    } 
....................     
....................    MAIN_FM_BYTE_WRITE( ADD_+13, 0x00); 
0978E:  MOVLW  0D
09790:  ADDWF  x00,W
09792:  MOVWF  x07
09794:  MOVLW  00
09796:  ADDWFC x01,W
09798:  MOVWF  x08
0979A:  MOVLW  00
0979C:  ADDWFC x02,W
0979E:  MOVWF  x09
097A0:  MOVLW  00
097A2:  ADDWFC x03,W
097A4:  MOVWF  x0A
097A6:  MOVWF  x18
097A8:  MOVFF  409,417
097AC:  MOVFF  408,416
097B0:  MOVFF  407,415
097B4:  CLRF   x19
097B6:  MOVLB  0
097B8:  CALL   2B7E
....................     
....................    for( int i = 14; i<=22; i++) 
097BC:  MOVLW  0E
097BE:  MOVLB  4
097C0:  MOVWF  x05
097C2:  MOVF   x05,W
097C4:  SUBLW  16
097C6:  BNC   9810
....................    { 
....................       MAIN_FM_BYTE_WRITE( ADD_+i  , CPIC_TO_MPIC_ARRAY[i-12] ); 
097C8:  MOVF   x05,W
097CA:  ADDWF  x00,W
097CC:  MOVWF  x07
097CE:  MOVLW  00
097D0:  ADDWFC x01,W
097D2:  MOVWF  x08
097D4:  MOVLW  00
097D6:  ADDWFC x02,W
097D8:  MOVWF  x09
097DA:  MOVLW  00
097DC:  ADDWFC x03,W
097DE:  MOVWF  x0A
097E0:  MOVLW  0C
097E2:  SUBWF  x05,W
097E4:  CLRF   03
097E6:  ADDLW  B9
097E8:  MOVWF  FE9
097EA:  MOVLW  00
097EC:  ADDWFC 03,W
097EE:  MOVWF  FEA
097F0:  MOVFF  FEF,419
097F4:  MOVFF  40A,418
097F8:  MOVFF  409,417
097FC:  MOVFF  408,416
09800:  MOVFF  407,415
09804:  MOVLB  0
09806:  CALL   2B7E
0980A:  MOVLB  4
0980C:  INCF   x05,F
0980E:  BRA    97C2
....................    } 
....................     
....................    fprintf( PC, "RSVSN Location - %X >> ", Array[10]>>4); 
09810:  MOVLW  0A
09812:  MOVLB  3
09814:  ADDWF  xFE,W
09816:  MOVWF  FE9
09818:  MOVLW  00
0981A:  ADDWFC xFF,W
0981C:  MOVWF  FEA
0981E:  SWAPF  FEF,W
09820:  MOVLB  4
09822:  MOVWF  x07
09824:  MOVLW  0F
09826:  ANDWF  x07,F
09828:  MOVLW  8A
0982A:  MOVWF  FF6
0982C:  MOVLW  03
0982E:  MOVWF  FF7
09830:  MOVLW  00
09832:  MOVWF  FF8
09834:  MOVLW  11
09836:  MOVWF  x3D
09838:  MOVLB  0
0983A:  CALL   20A4
0983E:  MOVFF  407,43E
09842:  MOVLW  37
09844:  MOVLB  4
09846:  MOVWF  x3F
09848:  MOVLB  0
0984A:  CALL   20D6
0984E:  MOVLW  9D
09850:  MOVWF  FF6
09852:  MOVLW  03
09854:  MOVWF  FF7
09856:  MOVLW  00
09858:  MOVWF  FF8
0985A:  MOVLW  04
0985C:  MOVLB  4
0985E:  MOVWF  x3D
09860:  MOVLB  0
09862:  CALL   20A4
....................    for(int i = 0; i<30; i++) fprintf( PC, "%X ", MAIN_FM_BYTE_READ(ADD_+i) ); 
09866:  MOVLB  4
09868:  CLRF   x06
0986A:  MOVF   x06,W
0986C:  SUBLW  1D
0986E:  BNC   98BE
09870:  MOVF   x06,W
09872:  ADDWF  x00,W
09874:  MOVWF  x07
09876:  MOVLW  00
09878:  ADDWFC x01,W
0987A:  MOVWF  x08
0987C:  MOVLW  00
0987E:  ADDWFC x02,W
09880:  MOVWF  x09
09882:  MOVLW  00
09884:  ADDWFC x03,W
09886:  MOVWF  x0A
09888:  MOVWF  x1E
0988A:  MOVFF  409,41D
0988E:  MOVFF  408,41C
09892:  MOVFF  407,41B
09896:  MOVLB  0
09898:  CALL   23BE
0989C:  MOVFF  01,407
098A0:  MOVFF  01,43E
098A4:  MOVLW  37
098A6:  MOVLB  4
098A8:  MOVWF  x3F
098AA:  MOVLB  0
098AC:  CALL   20D6
098B0:  MOVLW  20
098B2:  BTFSS  F9E.4
098B4:  BRA    98B2
098B6:  MOVWF  FAD
098B8:  MOVLB  4
098BA:  INCF   x06,F
098BC:  BRA    986A
....................    printline(); 
098BE:  MOVLB  0
098C0:  CALL   2092
098C4:  RETURN 0
.................... } 
....................  
.................... void WRITE_GS_CMD_IN_RESERVATION_LOCATION() 
.................... { 
....................    if( (CPIC_TO_MPIC_ARRAY[1] & 0xF0) == 0x20 ) 
098C6:  MOVF   xBA,W
098C8:  ANDLW  F0
098CA:  SUBLW  20
098CC:  BTFSS  FD8.2
098CE:  BRA    99E8
....................    { 
....................       unsigned int Location = CPIC_TO_MPIC_ARRAY[1] & 0x0F ; 
098D0:  MOVF   xBA,W
098D2:  ANDLW  0F
098D4:  MOVLB  3
098D6:  MOVWF  xFD
....................        
....................       fprintf( PC, "Reservation command Received\n\r"); 
098D8:  MOVLW  A2
098DA:  MOVWF  FF6
098DC:  MOVLW  03
098DE:  MOVWF  FF7
098E0:  MOVLW  00
098E2:  MOVWF  FF8
098E4:  MOVLB  0
098E6:  CALL   2068
....................       fprintf( PC, "Reservation Location = %X\n\r", Location ); 
098EA:  MOVLW  C2
098EC:  MOVWF  FF6
098EE:  MOVLW  03
098F0:  MOVWF  FF7
098F2:  MOVLW  00
098F4:  MOVWF  FF8
098F6:  MOVLW  17
098F8:  MOVLB  4
098FA:  MOVWF  x3D
098FC:  MOVLB  0
098FE:  CALL   20A4
09902:  MOVFF  3FD,43E
09906:  MOVLW  37
09908:  MOVLB  4
0990A:  MOVWF  x3F
0990C:  MOVLB  0
0990E:  CALL   20D6
09912:  MOVLW  0A
09914:  BTFSS  F9E.4
09916:  BRA    9914
09918:  MOVWF  FAD
0991A:  MOVLW  0D
0991C:  BTFSS  F9E.4
0991E:  BRA    991C
09920:  MOVWF  FAD
....................  
....................       if( Location == 0x01 ) WRITING_CMD( Location_1_Array ); 
09922:  MOVLB  3
09924:  DECFSZ xFD,W
09926:  BRA    9936
09928:  MOVLW  02
0992A:  MOVWF  xFF
0992C:  MOVLW  D9
0992E:  MOVWF  xFE
09930:  MOVLB  0
09932:  RCALL  9660
09934:  MOVLB  3
....................       if( Location == 0x02 ) WRITING_CMD( Location_2_Array ); 
09936:  MOVF   xFD,W
09938:  SUBLW  02
0993A:  BNZ   994A
0993C:  MOVLW  02
0993E:  MOVWF  xFF
09940:  MOVLW  E5
09942:  MOVWF  xFE
09944:  MOVLB  0
09946:  RCALL  9660
09948:  MOVLB  3
....................       if( Location == 0x03 ) WRITING_CMD( Location_3_Array ); 
0994A:  MOVF   xFD,W
0994C:  SUBLW  03
0994E:  BNZ   995E
09950:  MOVLW  02
09952:  MOVWF  xFF
09954:  MOVLW  F1
09956:  MOVWF  xFE
09958:  MOVLB  0
0995A:  RCALL  9660
0995C:  MOVLB  3
....................       if( Location == 0x04 ) WRITING_CMD( Location_4_Array ); 
0995E:  MOVF   xFD,W
09960:  SUBLW  04
09962:  BNZ   9972
09964:  MOVLW  02
09966:  MOVWF  xFF
09968:  MOVLW  FD
0996A:  MOVWF  xFE
0996C:  MOVLB  0
0996E:  RCALL  9660
09970:  MOVLB  3
....................       if( Location == 0x05 ) WRITING_CMD( Location_5_Array ); 
09972:  MOVF   xFD,W
09974:  SUBLW  05
09976:  BNZ   9986
09978:  MOVLW  03
0997A:  MOVWF  xFF
0997C:  MOVLW  09
0997E:  MOVWF  xFE
09980:  MOVLB  0
09982:  RCALL  9660
09984:  MOVLB  3
....................       if( Location == 0x06 ) WRITING_CMD( Location_6_Array ); 
09986:  MOVF   xFD,W
09988:  SUBLW  06
0998A:  BNZ   999A
0998C:  MOVLW  03
0998E:  MOVWF  xFF
09990:  MOVLW  15
09992:  MOVWF  xFE
09994:  MOVLB  0
09996:  RCALL  9660
09998:  MOVLB  3
....................       if( Location == 0x07 ) WRITING_CMD( Location_7_Array ); 
0999A:  MOVF   xFD,W
0999C:  SUBLW  07
0999E:  BNZ   99AE
099A0:  MOVLW  03
099A2:  MOVWF  xFF
099A4:  MOVLW  21
099A6:  MOVWF  xFE
099A8:  MOVLB  0
099AA:  RCALL  9660
099AC:  MOVLB  3
....................       if( Location == 0x08 ) WRITING_CMD( Location_8_Array ); 
099AE:  MOVF   xFD,W
099B0:  SUBLW  08
099B2:  BNZ   99C2
099B4:  MOVLW  03
099B6:  MOVWF  xFF
099B8:  MOVLW  2D
099BA:  MOVWF  xFE
099BC:  MOVLB  0
099BE:  RCALL  9660
099C0:  MOVLB  3
....................       if( Location == 0x09 ) WRITING_CMD( Location_9_Array ); 
099C2:  MOVF   xFD,W
099C4:  SUBLW  09
099C6:  BNZ   99D6
099C8:  MOVLW  03
099CA:  MOVWF  xFF
099CC:  MOVLW  39
099CE:  MOVWF  xFE
099D0:  MOVLB  0
099D2:  RCALL  9660
099D4:  MOVLB  3
....................       if( Location == 0x0A ) WRITING_CMD( Location_A_Array ); 
099D6:  MOVF   xFD,W
099D8:  SUBLW  0A
099DA:  BNZ   99EA
099DC:  MOVLW  03
099DE:  MOVWF  xFF
099E0:  MOVLW  45
099E2:  MOVWF  xFE
099E4:  MOVLB  0
099E6:  RCALL  9660
099E8:  MOVLB  3
....................  
....................    } 
....................    printline(); 
099EA:  MOVLB  0
099EC:  CALL   2092
099F0:  GOTO   B25A (RETURN)
.................... } 
....................  
.................... VOId _RESTARTING_MISSIONS_AFTER_SYSTEM_RESET(unsigned int32 Location , int16 check_time) 
.................... { 
....................    if( SECONDS_COUNTER == check_time ) 
*
083C8:  MOVLB  4
083CA:  MOVF   x01,W
083CC:  MOVLB  2
083CE:  SUBWF  xD2,W
083D0:  BTFSS  FD8.2
083D2:  BRA    85A0
083D4:  MOVLB  4
083D6:  MOVF   x02,W
083D8:  MOVLB  2
083DA:  SUBWF  xD3,W
083DC:  BTFSS  FD8.2
083DE:  BRA    85A0
....................    { 
....................       unsigned int32 ADD = 0x00010004 + (Location<<12); 
083E0:  CLRF   00
083E2:  MOVLB  3
083E4:  RLCF   xFD,W
083E6:  MOVWF  01
083E8:  RLCF   xFE,W
083EA:  MOVWF  02
083EC:  RLCF   xFF,W
083EE:  MOVWF  03
083F0:  RLCF   01,F
083F2:  RLCF   02,F
083F4:  RLCF   03,F
083F6:  RLCF   01,F
083F8:  RLCF   02,F
083FA:  RLCF   03,F
083FC:  RLCF   01,F
083FE:  RLCF   02,F
08400:  RLCF   03,F
08402:  MOVLW  F0
08404:  ANDWF  01,F
08406:  MOVLW  04
08408:  ADDWF  00,W
0840A:  MOVLB  4
0840C:  MOVWF  x03
0840E:  MOVLW  00
08410:  ADDWFC 01,W
08412:  MOVWF  x04
08414:  MOVLW  01
08416:  ADDWFC 02,W
08418:  MOVWF  x05
0841A:  MOVLW  00
0841C:  ADDWFC 03,W
0841E:  MOVWF  x06
....................       if( MAIN_FM_BYTE_READ(ADD) == 0x01 ) 
08420:  MOVFF  406,41E
08424:  MOVFF  405,41D
08428:  MOVFF  404,41C
0842C:  MOVFF  403,41B
08430:  MOVLB  0
08432:  CALL   23BE
08436:  DECFSZ 01,W
08438:  BRA    8560
....................       { 
....................          fprintf(PC, "Rebooing a reservation command mission after a system reset, Location = %X | 0x%LX\n\r", Location, ADD); 
0843A:  MOVLW  DE
0843C:  MOVWF  FF6
0843E:  MOVLW  03
08440:  MOVWF  FF7
08442:  MOVLW  00
08444:  MOVWF  FF8
08446:  MOVLW  48
08448:  MOVLB  4
0844A:  MOVWF  x3D
0844C:  MOVLB  0
0844E:  CALL   20A4
08452:  MOVFF  3FD,43E
08456:  MOVLW  37
08458:  MOVLB  4
0845A:  MOVWF  x3F
0845C:  MOVLB  0
0845E:  CALL   20D6
08462:  MOVLW  28
08464:  MOVWF  FF6
08466:  MOVLW  04
08468:  MOVWF  FF7
0846A:  MOVLW  00
0846C:  MOVWF  FF8
0846E:  MOVLW  05
08470:  MOVLB  4
08472:  MOVWF  x3D
08474:  MOVLB  0
08476:  CALL   20A4
0847A:  MOVFF  406,43E
0847E:  MOVLW  37
08480:  MOVLB  4
08482:  MOVWF  x3F
08484:  MOVLB  0
08486:  CALL   20D6
0848A:  MOVFF  405,43E
0848E:  MOVLW  37
08490:  MOVLB  4
08492:  MOVWF  x3F
08494:  MOVLB  0
08496:  CALL   20D6
0849A:  MOVFF  404,43E
0849E:  MOVLW  37
084A0:  MOVLB  4
084A2:  MOVWF  x3F
084A4:  MOVLB  0
084A6:  CALL   20D6
084AA:  MOVFF  403,43E
084AE:  MOVLW  37
084B0:  MOVLB  4
084B2:  MOVWF  x3F
084B4:  MOVLB  0
084B6:  CALL   20D6
084BA:  MOVLW  0A
084BC:  BTFSS  F9E.4
084BE:  BRA    84BC
084C0:  MOVWF  FAD
084C2:  MOVLW  0D
084C4:  BTFSS  F9E.4
084C6:  BRA    84C4
084C8:  MOVWF  FAD
....................          // loding command to compic array 
....................          CPIC_TO_MPIC_ARRAY[0]  = 0xB0 ; 
084CA:  MOVLW  B0
084CC:  MOVWF  xB9
....................          for(unsigned int32 i = 1 ; i<30; i++) 
084CE:  MOVLB  4
084D0:  CLRF   x0A
084D2:  CLRF   x09
084D4:  CLRF   x08
084D6:  MOVLW  01
084D8:  MOVWF  x07
084DA:  MOVF   x0A,F
084DC:  BNZ   8558
084DE:  MOVF   x09,F
084E0:  BNZ   8558
084E2:  MOVF   x08,F
084E4:  BNZ   8558
084E6:  MOVF   x07,W
084E8:  SUBLW  1D
084EA:  BNC   8558
....................          { 
....................             CPIC_TO_MPIC_ARRAY[i] = MAIN_FM_BYTE_READ(ADD+i+12) ; 
084EC:  MOVLW  B9
084EE:  ADDWF  x07,W
084F0:  MOVWF  01
084F2:  MOVLW  00
084F4:  ADDWFC x08,W
084F6:  MOVWF  03
084F8:  MOVFF  01,40B
084FC:  MOVWF  x0C
084FE:  MOVF   x07,W
08500:  ADDWF  x03,W
08502:  MOVWF  x0D
08504:  MOVF   x08,W
08506:  ADDWFC x04,W
08508:  MOVWF  x0E
0850A:  MOVF   x09,W
0850C:  ADDWFC x05,W
0850E:  MOVWF  x0F
08510:  MOVF   x0A,W
08512:  ADDWFC x06,W
08514:  MOVWF  x10
08516:  MOVLW  0C
08518:  ADDWF  x0D,F
0851A:  MOVLW  00
0851C:  ADDWFC x0E,F
0851E:  ADDWFC x0F,F
08520:  ADDWFC x10,F
08522:  MOVFF  410,41E
08526:  MOVFF  40F,41D
0852A:  MOVFF  40E,41C
0852E:  MOVFF  40D,41B
08532:  MOVLB  0
08534:  CALL   23BE
08538:  MOVFF  40C,FEA
0853C:  MOVFF  40B,FE9
08540:  MOVFF  01,FEF
08544:  MOVLW  01
08546:  MOVLB  4
08548:  ADDWF  x07,F
0854A:  BTFSC  FD8.0
0854C:  INCF   x08,F
0854E:  BTFSC  FD8.2
08550:  INCF   x09,F
08552:  BTFSC  FD8.2
08554:  INCF   x0A,F
08556:  BRA    84DA
....................          }       
....................          CPIC_TO_MPIC_ARRAY[39] = 0xB1 ; 
08558:  MOVLW  B1
0855A:  MOVLB  0
0855C:  MOVWF  xE0
....................       }  
0855E:  BRA    8598
....................       else( fprintf(PC, "Nothing to, reboot at reservation Location = %X\n\r", Location) );  
08560:  MOVLW  34
08562:  MOVWF  FF6
08564:  MOVLW  04
08566:  MOVWF  FF7
08568:  MOVLW  00
0856A:  MOVWF  FF8
0856C:  MOVLW  2D
0856E:  MOVLB  4
08570:  MOVWF  x3D
08572:  MOVLB  0
08574:  CALL   20A4
08578:  MOVFF  3FD,43E
0857C:  MOVLW  37
0857E:  MOVLB  4
08580:  MOVWF  x3F
08582:  MOVLB  0
08584:  CALL   20D6
08588:  MOVLW  0A
0858A:  BTFSS  F9E.4
0858C:  BRA    858A
0858E:  MOVWF  FAD
08590:  MOVLW  0D
08592:  BTFSS  F9E.4
08594:  BRA    8592
08596:  MOVWF  FAD
....................       SECONDS_COUNTER++; 
08598:  MOVLB  2
0859A:  INCF   xD2,F
0859C:  BTFSC  FD8.2
0859E:  INCF   xD3,F
....................    } 
085A0:  MOVLB  0
085A2:  RETURN 0
.................... } 
....................  
....................  
.................... VOID RESTARTING_MISSIONS_AFTER_SYSTEM_RESET() 
.................... {  
....................    if( SECONDS_COUNTER < 600 ) 
085A4:  MOVLB  2
085A6:  MOVF   xD3,W
085A8:  SUBLW  02
085AA:  BTFSS  FD8.0
085AC:  BRA    86C2
085AE:  BNZ   85B8
085B0:  MOVF   xD2,W
085B2:  SUBLW  57
085B4:  BTFSS  FD8.0
085B6:  BRA    86C2
....................    { 
....................       _RESTARTING_MISSIONS_AFTER_SYSTEM_RESET(1, 105); 
085B8:  MOVLB  4
085BA:  CLRF   x00
085BC:  MOVLB  3
085BE:  CLRF   xFF
085C0:  CLRF   xFE
085C2:  MOVLW  01
085C4:  MOVWF  xFD
085C6:  MOVLB  4
085C8:  CLRF   x02
085CA:  MOVLW  69
085CC:  MOVWF  x01
085CE:  MOVLB  0
085D0:  RCALL  83C8
....................       _RESTARTING_MISSIONS_AFTER_SYSTEM_RESET(2, 125); 
085D2:  MOVLB  4
085D4:  CLRF   x00
085D6:  MOVLB  3
085D8:  CLRF   xFF
085DA:  CLRF   xFE
085DC:  MOVLW  02
085DE:  MOVWF  xFD
085E0:  MOVLB  4
085E2:  CLRF   x02
085E4:  MOVLW  7D
085E6:  MOVWF  x01
085E8:  MOVLB  0
085EA:  RCALL  83C8
....................       _RESTARTING_MISSIONS_AFTER_SYSTEM_RESET(3, 145); 
085EC:  MOVLB  4
085EE:  CLRF   x00
085F0:  MOVLB  3
085F2:  CLRF   xFF
085F4:  CLRF   xFE
085F6:  MOVLW  03
085F8:  MOVWF  xFD
085FA:  MOVLB  4
085FC:  CLRF   x02
085FE:  MOVLW  91
08600:  MOVWF  x01
08602:  MOVLB  0
08604:  RCALL  83C8
....................       _RESTARTING_MISSIONS_AFTER_SYSTEM_RESET(4, 165); 
08606:  MOVLB  4
08608:  CLRF   x00
0860A:  MOVLB  3
0860C:  CLRF   xFF
0860E:  CLRF   xFE
08610:  MOVLW  04
08612:  MOVWF  xFD
08614:  MOVLB  4
08616:  CLRF   x02
08618:  MOVLW  A5
0861A:  MOVWF  x01
0861C:  MOVLB  0
0861E:  RCALL  83C8
....................       _RESTARTING_MISSIONS_AFTER_SYSTEM_RESET(5, 185); 
08620:  MOVLB  4
08622:  CLRF   x00
08624:  MOVLB  3
08626:  CLRF   xFF
08628:  CLRF   xFE
0862A:  MOVLW  05
0862C:  MOVWF  xFD
0862E:  MOVLB  4
08630:  CLRF   x02
08632:  MOVLW  B9
08634:  MOVWF  x01
08636:  MOVLB  0
08638:  RCALL  83C8
....................       _RESTARTING_MISSIONS_AFTER_SYSTEM_RESET(6, 205); 
0863A:  MOVLB  4
0863C:  CLRF   x00
0863E:  MOVLB  3
08640:  CLRF   xFF
08642:  CLRF   xFE
08644:  MOVLW  06
08646:  MOVWF  xFD
08648:  MOVLB  4
0864A:  CLRF   x02
0864C:  MOVLW  CD
0864E:  MOVWF  x01
08650:  MOVLB  0
08652:  RCALL  83C8
....................       _RESTARTING_MISSIONS_AFTER_SYSTEM_RESET(7, 225); 
08654:  MOVLB  4
08656:  CLRF   x00
08658:  MOVLB  3
0865A:  CLRF   xFF
0865C:  CLRF   xFE
0865E:  MOVLW  07
08660:  MOVWF  xFD
08662:  MOVLB  4
08664:  CLRF   x02
08666:  MOVLW  E1
08668:  MOVWF  x01
0866A:  MOVLB  0
0866C:  RCALL  83C8
....................       _RESTARTING_MISSIONS_AFTER_SYSTEM_RESET(8, 245); 
0866E:  MOVLB  4
08670:  CLRF   x00
08672:  MOVLB  3
08674:  CLRF   xFF
08676:  CLRF   xFE
08678:  MOVLW  08
0867A:  MOVWF  xFD
0867C:  MOVLB  4
0867E:  CLRF   x02
08680:  MOVLW  F5
08682:  MOVWF  x01
08684:  MOVLB  0
08686:  RCALL  83C8
....................       _RESTARTING_MISSIONS_AFTER_SYSTEM_RESET(9, 265); 
08688:  MOVLB  4
0868A:  CLRF   x00
0868C:  MOVLB  3
0868E:  CLRF   xFF
08690:  CLRF   xFE
08692:  MOVLW  09
08694:  MOVWF  xFD
08696:  MOVLW  01
08698:  MOVLB  4
0869A:  MOVWF  x02
0869C:  MOVLW  09
0869E:  MOVWF  x01
086A0:  MOVLB  0
086A2:  RCALL  83C8
....................       _RESTARTING_MISSIONS_AFTER_SYSTEM_RESET(0x0A, 285); 
086A4:  MOVLB  4
086A6:  CLRF   x00
086A8:  MOVLB  3
086AA:  CLRF   xFF
086AC:  CLRF   xFE
086AE:  MOVLW  0A
086B0:  MOVWF  xFD
086B2:  MOVLW  01
086B4:  MOVLB  4
086B6:  MOVWF  x02
086B8:  MOVLW  1D
086BA:  MOVWF  x01
086BC:  MOVLB  0
086BE:  RCALL  83C8
086C0:  MOVLB  2
....................    } 
086C2:  MOVLB  0
086C4:  GOTO   B21A (RETURN)
.................... } 
....................  
....................  
.................... #include <MPIC_RPIC.c> 
....................   // this functions will check reset pic UART port incoming 
.................... void CHECK_UART_INCOMING_FROM_RESET_PIC() 
.................... { 
....................    if( RPic_available() ) 
*
030A0:  BRA    3044
030A2:  MOVF   01,F
030A4:  BZ    310A
....................    { 
....................       Delay_ms(100); 
030A6:  MOVLW  64
030A8:  MOVLB  4
030AA:  MOVWF  x3E
030AC:  MOVLB  0
030AE:  CALL   1DA0
....................       for( int i = 0; i<5; i++) 
030B2:  MOVLB  4
030B4:  CLRF   x3C
030B6:  MOVF   x3C,W
030B8:  SUBLW  04
030BA:  BNC   30D6
....................       { 
....................          if( RPIC_Read() == 0xA0 ) 
030BC:  MOVLB  0
030BE:  RCALL  3050
030C0:  MOVF   01,W
030C2:  SUBLW  A0
030C4:  BNZ   30D0
....................          { 
....................             RPIC_TO_MPIC_ARRAY[0] = 0xA0; 
030C6:  MOVLW  A0
030C8:  MOVWF  x62
....................             break; 
030CA:  MOVLB  4
030CC:  BRA    30D6
030CE:  MOVLB  0
....................          } 
030D0:  MOVLB  4
030D2:  INCF   x3C,F
030D4:  BRA    30B6
....................       } 
....................     
....................       for(int i=1; i<=50; i++) 
030D6:  MOVLW  01
030D8:  MOVWF  x3D
030DA:  MOVF   x3D,W
030DC:  SUBLW  32
030DE:  BNC   310A
....................       { 
....................          RPIC_TO_MPIC_ARRAY[i] = RPIC_Read(); 
030E0:  CLRF   03
030E2:  MOVF   x3D,W
030E4:  ADDLW  62
030E6:  MOVWF  01
030E8:  MOVLW  00
030EA:  ADDWFC 03,F
030EC:  MOVFF  01,43E
030F0:  MOVFF  03,43F
030F4:  MOVLB  0
030F6:  RCALL  3050
030F8:  MOVFF  43F,FEA
030FC:  MOVFF  43E,FE9
03100:  MOVFF  01,FEF
03104:  MOVLB  4
03106:  INCF   x3D,F
03108:  BRA    30DA
0310A:  MOVLB  0
....................       } 
....................    } 
0310C:  GOTO   31A6 (RETURN)
.................... } 
....................  
.................... // this functions will print received comand prom reset pic 
.................... void PRINT_RECIVED_COMMAND_FROM_RESET_PIC() 
.................... { 
....................    Fprintf(PC,"Reset PIC Response >> "); 
*
03F88:  MOVLW  66
03F8A:  MOVWF  FF6
03F8C:  MOVLW  04
03F8E:  MOVWF  FF7
03F90:  MOVLW  00
03F92:  MOVWF  FF8
03F94:  CALL   2068
....................    for(int i = 0; i<32; i++) 
03F98:  MOVLB  4
03F9A:  CLRF   x33
03F9C:  MOVF   x33,W
03F9E:  SUBLW  1F
03FA0:  BNC   3FCC
....................    { 
....................       Fprintf(PC,"%X ",RPIC_TO_MPIC_ARRAY[i]); 
03FA2:  CLRF   03
03FA4:  MOVF   x33,W
03FA6:  ADDLW  62
03FA8:  MOVWF  FE9
03FAA:  MOVLW  00
03FAC:  ADDWFC 03,W
03FAE:  MOVWF  FEA
03FB0:  MOVFF  FEF,43E
03FB4:  MOVLW  37
03FB6:  MOVWF  x3F
03FB8:  MOVLB  0
03FBA:  CALL   20D6
03FBE:  MOVLW  20
03FC0:  BTFSS  F9E.4
03FC2:  BRA    3FC0
03FC4:  MOVWF  FAD
03FC6:  MOVLB  4
03FC8:  INCF   x33,F
03FCA:  BRA    3F9C
....................    } 
....................    printline(); 
03FCC:  MOVLB  0
03FCE:  CALL   2092
03FD2:  GOTO   54F4 (RETURN)
....................    //printline(); 
.................... } 
....................  
.................... void COMUNICATION_WITH_RST_PIC_AND_WAIT_FOR_RESPONE(int16 numof_times, int16 time_delay, int16 wait_time = 200) 
.................... { 
....................    printline(); 
*
03110:  CALL   2092
....................    for(int j=0; j<numof_times; j++) 
03114:  MOVLB  4
03116:  CLRF   x39
03118:  MOVF   x34,F
0311A:  BNZ   3124
0311C:  MOVF   x33,W
0311E:  SUBWF  x39,W
03120:  BTFSC  FD8.0
03122:  BRA    323E
....................    { 
....................       RPIC_TO_MPIC_ARRAY[0] = 0;  RPIC_TO_MPIC_ARRAY[31] = 0; 
03124:  MOVLB  0
03126:  CLRF   x62
03128:  CLRF   x81
....................       Fprintf(PC,"Num of comuniction tries to RESET PIC = %d\n\r", j+1)                ; 
0312A:  MOVLW  01
0312C:  MOVLB  4
0312E:  ADDWF  x39,W
03130:  MOVWF  x3C
03132:  MOVLW  7E
03134:  MOVWF  FF6
03136:  MOVLW  04
03138:  MOVWF  FF7
0313A:  MOVLW  00
0313C:  MOVWF  FF8
0313E:  MOVLW  28
03140:  MOVWF  x3D
03142:  MOVLB  0
03144:  CALL   20A4
03148:  MOVFF  43C,43D
0314C:  MOVLW  18
0314E:  MOVLB  4
03150:  MOVWF  x3E
03152:  MOVLB  0
03154:  RCALL  2F74
03156:  MOVLW  0A
03158:  BTFSS  F9E.4
0315A:  BRA    3158
0315C:  MOVWF  FAD
0315E:  MOVLW  0D
03160:  BTFSS  F9E.4
03162:  BRA    3160
03164:  MOVWF  FAD
....................        
....................       for( int i = 0; i<10; i++) 
03166:  MOVLB  4
03168:  CLRF   x3A
0316A:  MOVF   x3A,W
0316C:  SUBLW  09
0316E:  BNC   318E
....................       { 
....................         fputc(MPIC_TO_RPIC_ARRAY[i], RPic); 
03170:  CLRF   03
03172:  MOVF   x3A,W
03174:  ADDLW  58
03176:  MOVWF  FE9
03178:  MOVLW  00
0317A:  ADDWFC 03,W
0317C:  MOVWF  FEA
0317E:  MOVFF  FEF,43C
03182:  MOVF   x3C,W
03184:  MOVLB  0
03186:  BRA    3036
03188:  MOVLB  4
0318A:  INCF   x3A,F
0318C:  BRA    316A
....................       } 
....................       Delay_ms(500); 
0318E:  MOVLW  02
03190:  MOVWF  x3C
03192:  MOVLW  FA
03194:  MOVWF  x3E
03196:  MOVLB  0
03198:  CALL   1DA0
0319C:  MOVLB  4
0319E:  DECFSZ x3C,F
031A0:  BRA    3192
....................       CHECK_UART_INCOMING_FROM_RESET_PIC() ; 
031A2:  MOVLB  0
031A4:  BRA    30A0
....................        
....................       if( RPIC_TO_MPIC_ARRAY[0] == 0xA0 && RPIC_TO_MPIC_ARRAY[31] == 0xA1 ) 
031A6:  MOVF   x62,W
031A8:  SUBLW  A0
031AA:  BNZ   31CA
031AC:  MOVF   x81,W
031AE:  SUBLW  A1
031B0:  BNZ   31CA
....................       { 
....................          // it this is the case we have recived response from reset pic we can 
....................          // stop tying 
....................          Fprintf(PC,"Reset PIC responded correctly\n\r"); 
031B2:  MOVLW  AC
031B4:  MOVWF  FF6
031B6:  MOVLW  04
031B8:  MOVWF  FF7
031BA:  MOVLW  00
031BC:  MOVWF  FF8
031BE:  CALL   2068
....................          break; 
031C2:  MOVLB  4
031C4:  BRA    323E
....................       }  
031C6:  BRA    323A
031C8:  MOVLB  0
....................        
....................       else 
....................       {   
....................          Delay_ms(time_delay); 
031CA:  MOVFF  436,43C
031CE:  MOVLB  4
031D0:  INCF   x3C,F
031D2:  DECF   x3C,F
031D4:  BTFSC  FD8.2
031D6:  BRA    31E4
031D8:  SETF   x3E
031DA:  MOVLB  0
031DC:  CALL   1DA0
031E0:  MOVLB  4
031E2:  BRA    31D2
031E4:  MOVFF  435,43E
031E8:  MOVLB  0
031EA:  CALL   1DA0
....................          Fprintf(PC,"Received wrong response from reset pic >> "); 
031EE:  MOVLW  CC
031F0:  MOVWF  FF6
031F2:  MOVLW  04
031F4:  MOVWF  FF7
031F6:  MOVLW  00
031F8:  MOVWF  FF8
031FA:  CALL   2068
....................          for(int i = 0; i<32; i++) 
031FE:  MOVLB  4
03200:  CLRF   x3B
03202:  MOVF   x3B,W
03204:  SUBLW  1F
03206:  BNC   3232
....................          { 
....................             Fprintf(PC,"%X ",RPIC_TO_MPIC_ARRAY[i]); 
03208:  CLRF   03
0320A:  MOVF   x3B,W
0320C:  ADDLW  62
0320E:  MOVWF  FE9
03210:  MOVLW  00
03212:  ADDWFC 03,W
03214:  MOVWF  FEA
03216:  MOVFF  FEF,43E
0321A:  MOVLW  37
0321C:  MOVWF  x3F
0321E:  MOVLB  0
03220:  CALL   20D6
03224:  MOVLW  20
03226:  BTFSS  F9E.4
03228:  BRA    3226
0322A:  MOVWF  FAD
0322C:  MOVLB  4
0322E:  INCF   x3B,F
03230:  BRA    3202
....................          } 
....................          printline();   
03232:  MOVLB  0
03234:  CALL   2092
03238:  MOVLB  4
....................       } 
0323A:  INCF   x39,F
0323C:  BRA    3118
....................    } 
0323E:  MOVLB  0
03240:  RETURN 0
.................... } 
....................  
....................  
.................... // sync reset pic and main pic time 
.................... void SYNC_MAIN_PIC_AND_RESET_PIC_TIME() 
.................... { 
....................    rtc_time_t  read_clock;  
....................    rtc_read(&read_clock); 
*
03FD6:  MOVLB  F
03FD8:  BSF    x5F.0
03FDA:  BSF    x5F.1
03FDC:  MOVLW  04
03FDE:  MOVWF  FEA
03FE0:  MOVLW  33
03FE2:  MOVWF  FE9
03FE4:  MOVLW  04
03FE6:  MOVWF  01
03FE8:  MOVF   x5C,W
03FEA:  MOVLB  0
03FEC:  CALL   2CC0
03FF0:  MOVWF  FEE
03FF2:  MOVLB  F
03FF4:  MOVF   x5D,W
03FF6:  MOVLB  0
03FF8:  CALL   2CC0
03FFC:  MOVWF  FEE
03FFE:  DECFSZ 01,F
04000:  BRA    4004
04002:  BRA    4008
04004:  MOVLB  F
04006:  BRA    3FE8
....................     
....................    Fprintf(PC,"Reset PIC time = %02u:%02u:%02u %02u:%02u:%02u:\n\r",RPIC_TO_MPIC_ARRAY[2],RPIC_TO_MPIC_ARRAY[3],RPIC_TO_MPIC_ARRAY[4],RPIC_TO_MPIC_ARRAY[5],RPIC_TO_MPIC_ARRAY[6],RPIC_TO_MPIC_ARRAY[7]); 
04008:  MOVLW  F8
0400A:  MOVWF  FF6
0400C:  MOVLW  04
0400E:  MOVWF  FF7
04010:  MOVLW  00
04012:  MOVWF  FF8
04014:  MOVLW  11
04016:  MOVLB  4
04018:  MOVWF  x3D
0401A:  MOVLB  0
0401C:  CALL   20A4
04020:  MOVFF  64,43C
04024:  MOVLW  01
04026:  MOVLB  4
04028:  MOVWF  x3D
0402A:  MOVLB  0
0402C:  CALL   29CE
04030:  MOVLW  3A
04032:  BTFSS  F9E.4
04034:  BRA    4032
04036:  MOVWF  FAD
04038:  MOVFF  65,43C
0403C:  MOVLW  01
0403E:  MOVLB  4
04040:  MOVWF  x3D
04042:  MOVLB  0
04044:  CALL   29CE
04048:  MOVLW  3A
0404A:  BTFSS  F9E.4
0404C:  BRA    404A
0404E:  MOVWF  FAD
04050:  MOVFF  66,43C
04054:  MOVLW  01
04056:  MOVLB  4
04058:  MOVWF  x3D
0405A:  MOVLB  0
0405C:  CALL   29CE
04060:  MOVLW  20
04062:  BTFSS  F9E.4
04064:  BRA    4062
04066:  MOVWF  FAD
04068:  MOVFF  67,43C
0406C:  MOVLW  01
0406E:  MOVLB  4
04070:  MOVWF  x3D
04072:  MOVLB  0
04074:  CALL   29CE
04078:  MOVLW  3A
0407A:  BTFSS  F9E.4
0407C:  BRA    407A
0407E:  MOVWF  FAD
04080:  MOVFF  68,43C
04084:  MOVLW  01
04086:  MOVLB  4
04088:  MOVWF  x3D
0408A:  MOVLB  0
0408C:  CALL   29CE
04090:  MOVLW  3A
04092:  BTFSS  F9E.4
04094:  BRA    4092
04096:  MOVWF  FAD
04098:  MOVFF  69,43C
0409C:  MOVLW  01
0409E:  MOVLB  4
040A0:  MOVWF  x3D
040A2:  MOVLB  0
040A4:  CALL   29CE
040A8:  MOVLW  26
040AA:  MOVWF  FF6
040AC:  MOVLW  05
040AE:  MOVWF  FF7
040B0:  MOVLW  00
040B2:  MOVWF  FF8
040B4:  MOVLW  03
040B6:  MOVLB  4
040B8:  MOVWF  x3D
040BA:  MOVLB  0
040BC:  CALL   20A4
....................     
....................    if(   (RPIC_TO_MPIC_ARRAY[2]!= read_clock.tm_year)  
....................       || (RPIC_TO_MPIC_ARRAY[3]!= read_clock.tm_mon )  
....................       || (RPIC_TO_MPIC_ARRAY[4]!= read_clock.tm_mday)  
....................       || (RPIC_TO_MPIC_ARRAY[5]!= read_clock.tm_hour)  
....................       || (RPIC_TO_MPIC_ARRAY[6]!= read_clock.tm_min ) ) 
040C0:  MOVLB  4
040C2:  MOVF   x33,W
040C4:  MOVLB  0
040C6:  SUBWF  x64,W
040C8:  BNZ   40F2
040CA:  MOVLB  4
040CC:  MOVF   x36,W
040CE:  MOVLB  0
040D0:  SUBWF  x65,W
040D2:  BNZ   40F2
040D4:  MOVLB  4
040D6:  MOVF   x35,W
040D8:  MOVLB  0
040DA:  SUBWF  x66,W
040DC:  BNZ   40F2
040DE:  MOVLB  4
040E0:  MOVF   x37,W
040E2:  MOVLB  0
040E4:  SUBWF  x67,W
040E6:  BNZ   40F2
040E8:  MOVLB  4
040EA:  MOVF   x3A,W
040EC:  MOVLB  0
040EE:  SUBWF  x68,W
040F0:  BZ    4128
....................        
....................    { 
....................       Fprintf(PC,"Time updated\n\r"); 
040F2:  MOVLW  2A
040F4:  MOVWF  FF6
040F6:  MOVLW  05
040F8:  MOVWF  FF7
040FA:  MOVLW  00
040FC:  MOVWF  FF8
040FE:  CALL   2068
....................       WRITE_OBC_RTC(RPIC_TO_MPIC_ARRAY[2],RPIC_TO_MPIC_ARRAY[3],RPIC_TO_MPIC_ARRAY[4],RPIC_TO_MPIC_ARRAY[5],RPIC_TO_MPIC_ARRAY[6],RPIC_TO_MPIC_ARRAY[7]); 
04102:  MOVFF  64,43C
04106:  MOVFF  65,43D
0410A:  MOVFF  66,43E
0410E:  MOVFF  67,43F
04112:  MOVFF  68,440
04116:  MOVFF  69,441
0411A:  CALL   1E20
....................       FAILED_COMUNICATION_WITH_RST_PIC = 0; //making this zero because new time is running in main pic 
0411E:  MOVLB  1
04120:  CLRF   xA6
04122:  CLRF   xA5
04124:  CLRF   xA4
04126:  CLRF   xA3
04128:  MOVLB  0
....................    } 
0412A:  GOTO   54F8 (RETURN)
.................... } 
....................  
.................... unsigned int8 CHECK_SUNSHINE(float Voltage, float current ) // set corect threshold 0x34 is a random value  
*
051EC:  MOVFF  436,443
051F0:  MOVFF  435,442
051F4:  MOVFF  434,441
051F8:  MOVFF  433,440
051FC:  MOVFF  43A,447
05200:  MOVFF  439,446
05204:  MOVFF  438,445
05208:  MOVFF  437,444
0520C:  RCALL  4ABE
0520E:  MOVFF  03,43E
05212:  MOVFF  02,43D
05216:  MOVFF  01,43C
0521A:  MOVFF  00,43B
.................... { 
....................    // voltage > 4.5; 
....................    // current > 50 mA; 
....................     
....................    float power = voltage * current ; 
....................     
....................    if( power > 225 ) return 0x01; 
0521E:  MOVLB  4
05220:  CLRF   x42
05222:  CLRF   x41
05224:  MOVLW  61
05226:  MOVWF  x40
05228:  MOVLW  86
0522A:  MOVWF  x3F
0522C:  MOVFF  43E,446
05230:  MOVFF  43D,445
05234:  MOVFF  43C,444
05238:  MOVFF  43B,443
0523C:  MOVLB  0
0523E:  BRA    5170
05240:  BNC   524A
05242:  MOVLW  01
05244:  MOVWF  01
05246:  BRA    524E
05248:  BRA    524E
....................    else return 0x00; 
0524A:  MOVLW  00
0524C:  MOVWF  01
0524E:  RETURN 0
.................... } 
....................  
.................... char SOLP_STATUS_PX, SOLP_STATUS_MX ; 
.................... char SOLP_STATUS_PY, SOLP_STATUS_MY ; 
.................... char SOLP_STATUS_PZ, SOLP_STATUS_MZ ; 
....................  
.................... char RP_SAVED_DATA[42];   // only 24 bytes used 
.................... char FP_SAVED_DATA[42];   // only 34 bytes used 
....................  
.................... float V_PX, C_PX ; 
.................... float V_MX, C_MX; 
.................... float V_PY, C_PY; 
.................... float V_MY, C_MY; 
.................... float V_PZ, C_PZ; 
.................... float V_MZ, C_MZ; 
....................  
.................... void GENARATE_CW_DATA()                                                             
.................... { 
....................    CLEAR_DATA_ARRAY(CW_DATA_ARRAY, 16);   
05250:  MOVLW  01
05252:  MOVLB  4
05254:  MOVWF  x38
05256:  MOVLW  C5
05258:  MOVWF  x37
0525A:  MOVLW  10
0525C:  MOVWF  x39
0525E:  MOVLB  0
05260:  CALL   2F54
....................    // [A,B,C.D,E,F,G,H,I,J,K,L,M,N,O,P] 
....................     
....................    // battery voltage [A,B] 
....................    CW_DATA_ARRAY[0] = (FAB_TO_MPIC_ARRAY[4] >> 4) & 0x0F; 
05264:  MOVLB  1
05266:  SWAPF  x14,W
05268:  MOVWF  00
0526A:  MOVLW  0F
0526C:  ANDWF  00,F
0526E:  MOVF   00,W
05270:  ANDLW  0F
05272:  MOVWF  xC5
....................    CW_DATA_ARRAY[1] = (FAB_TO_MPIC_ARRAY[4]     ) & 0x0F; 
05274:  MOVF   x14,W
05276:  ANDLW  0F
05278:  MOVWF  xC6
....................     
....................    // battery current [C,D] 
....................    unsigned int16 BATC_  = make16(FAB_TO_MPIC_ARRAY[5], FAB_TO_MPIC_ARRAY[32] ) ; 
0527A:  MOVFF  115,434
0527E:  MOVFF  130,433
....................                   BATC_  = (BATC_&0xFF0) >> 4 ; 
05282:  MOVLB  4
05284:  MOVF   x33,W
05286:  ANDLW  F0
05288:  MOVWF  x37
0528A:  MOVF   x34,W
0528C:  ANDLW  0F
0528E:  MOVWF  x38
05290:  RRCF   x38,W
05292:  MOVWF  x34
05294:  RRCF   x37,W
05296:  MOVWF  x33
05298:  RRCF   x34,F
0529A:  RRCF   x33,F
0529C:  RRCF   x34,F
0529E:  RRCF   x33,F
052A0:  RRCF   x34,F
052A2:  RRCF   x33,F
052A4:  MOVLW  0F
052A6:  ANDWF  x34,F
....................              char BATC__ = (char)BATC_; 
052A8:  MOVFF  433,435
....................               
....................    CW_DATA_ARRAY[2] = (BATC__ >> 4) & 0x0F; 
052AC:  SWAPF  x35,W
052AE:  MOVWF  00
052B0:  MOVLW  0F
052B2:  ANDWF  00,F
052B4:  MOVF   00,W
052B6:  ANDLW  0F
052B8:  MOVLB  1
052BA:  MOVWF  xC7
....................    CW_DATA_ARRAY[3] = (BATC__     ) & 0x0F; 
052BC:  MOVLB  4
052BE:  MOVF   x35,W
052C0:  ANDLW  0F
052C2:  MOVLB  1
052C4:  MOVWF  xC8
....................     
....................    // battery temperature [E,F] 
....................    CW_DATA_ARRAY[4] = (FAB_TO_MPIC_ARRAY[6] >> 4) & 0x0F; 
052C6:  SWAPF  x16,W
052C8:  MOVWF  00
052CA:  MOVLW  0F
052CC:  ANDWF  00,F
052CE:  MOVF   00,W
052D0:  ANDLW  0F
052D2:  MOVWF  xC9
....................    CW_DATA_ARRAY[5] = (FAB_TO_MPIC_ARRAY[6]     ) & 0x0F; 
052D4:  MOVF   x16,W
052D6:  ANDLW  0F
052D8:  MOVWF  xCA
....................     
....................    // battery temperature [G,H] 
....................    // obc kill, fab kill, +X sunshine, -X sunshine 
....................    CW_DATA_ARRAY[6] = (FAB_TO_MPIC_ARRAY[29]<<3) | (FAB_TO_MPIC_ARRAY[30]<<2) | (SOLP_STATUS_PX << 1) | SOLP_STATUS_MX  ; 
052DA:  RLCF   x2D,W
052DC:  MOVLB  4
052DE:  MOVWF  x37
052E0:  RLCF   x37,F
052E2:  RLCF   x37,F
052E4:  MOVLW  F8
052E6:  ANDWF  x37,F
052E8:  MOVLB  1
052EA:  RLCF   x2E,W
052EC:  MOVWF  00
052EE:  RLCF   00,F
052F0:  MOVLW  FC
052F2:  ANDWF  00,F
052F4:  MOVF   00,W
052F6:  MOVLB  4
052F8:  IORWF  x37,F
052FA:  BCF    FD8.0
052FC:  MOVLB  3
052FE:  RLCF   x6F,W
05300:  MOVLB  4
05302:  IORWF  x37,W
05304:  MOVLB  3
05306:  IORWF  x70,W
05308:  MOVLB  1
0530A:  MOVWF  xCB
....................                        
....................    // +Y sunshine, -Y sunshine, +Z sunshine, -Z sunshine 
....................    CW_DATA_ARRAY[7] = (SOLP_STATUS_PY << 3) | (SOLP_STATUS_MY << 2) | (SOLP_STATUS_PZ << 1) | SOLP_STATUS_MZ ; 
0530C:  MOVLB  3
0530E:  RLCF   x71,W
05310:  MOVLB  4
05312:  MOVWF  x37
05314:  RLCF   x37,F
05316:  RLCF   x37,F
05318:  MOVLW  F8
0531A:  ANDWF  x37,F
0531C:  MOVLB  3
0531E:  RLCF   x72,W
05320:  MOVWF  00
05322:  RLCF   00,F
05324:  MOVLW  FC
05326:  ANDWF  00,F
05328:  MOVF   00,W
0532A:  MOVLB  4
0532C:  IORWF  x37,F
0532E:  BCF    FD8.0
05330:  MOVLB  3
05332:  RLCF   x73,W
05334:  MOVLB  4
05336:  IORWF  x37,W
05338:  MOVLB  3
0533A:  IORWF  x74,W
0533C:  MOVLB  1
0533E:  MOVWF  xCC
....................                        
....................    // antenna deployment flags [I,J]                     
....................    CW_DATA_ARRAY[8] = (unsigned int8)(ANT_SET_1_DEP_FLAG << 3) | (unsigned int8)( ANTSET_1_COUNT & 0x0007) ; 
05340:  RLCF   x97,W
05342:  MOVWF  02
05344:  RLCF   x98,W
05346:  MOVWF  03
05348:  RLCF   02,F
0534A:  RLCF   03,F
0534C:  RLCF   02,F
0534E:  RLCF   03,F
05350:  MOVLW  F8
05352:  ANDWF  02,F
05354:  MOVLB  1
05356:  MOVF   x9B,W
05358:  ANDLW  07
0535A:  MOVWF  00
0535C:  MOVF   00,W
0535E:  MOVLB  4
05360:  IORWF  02,W
05362:  MOVLB  1
05364:  MOVWF  xCD
....................    CW_DATA_ARRAY[9] = (unsigned int8)(ANT_SET_2_DEP_FLAG << 3) | (unsigned int8)( ANTSET_2_COUNT & 0x0007) ; 
05366:  RLCF   x99,W
05368:  MOVWF  02
0536A:  RLCF   x9A,W
0536C:  MOVWF  03
0536E:  RLCF   02,F
05370:  RLCF   03,F
05372:  RLCF   02,F
05374:  RLCF   03,F
05376:  MOVLW  F8
05378:  ANDWF  02,F
0537A:  MOVLB  1
0537C:  MOVF   x9D,W
0537E:  ANDLW  07
05380:  MOVWF  00
05382:  MOVF   00,W
05384:  MOVLB  4
05386:  IORWF  02,W
05388:  MOVLB  1
0538A:  MOVWF  xCE
....................  
....................    // APRS payload status [K,L] 
....................    CW_DATA_ARRAY[10] += APRS_REFERENSE_1_FLAG *8; 
0538C:  MOVF   xE3,W
0538E:  MULLW  08
05390:  MOVF   FF3,W
05392:  ADDWF  xCF,F
....................    CW_DATA_ARRAY[10] += APRS_REFERENSE_2_FLAG *4; 
05394:  MOVF   xE4,W
05396:  MULLW  04
05398:  MOVF   FF3,W
0539A:  ADDWF  xCF,F
....................    CW_DATA_ARRAY[10] += APRS_PAYLOAD_1_FLAG *2; 
0539C:  BCF    FD8.0
0539E:  RLCF   xE5,W
053A0:  ADDWF  xCF,F
....................    CW_DATA_ARRAY[10] += APRS_PAYLOAD_2_FLAG ; 
053A2:  MOVF   xE6,W
053A4:  ADDWF  xCF,F
....................     
....................                         
....................    CW_DATA_ARRAY[11] += APRS_PAYLOAD_3_FLAG *8; 
053A6:  MOVF   xE7,W
053A8:  MULLW  08
053AA:  MOVF   FF3,W
053AC:  ADDWF  xD0,F
....................    CW_DATA_ARRAY[11] += APRS_PAYLOAD_4_FLAG *4; 
053AE:  MOVF   xE8,W
053B0:  MULLW  04
053B2:  MOVF   FF3,W
053B4:  ADDWF  xD0,F
....................    CW_DATA_ARRAY[11] += APRS_PAYLOAD_5_FLAG *2; 
053B6:  BCF    FD8.0
053B8:  RLCF   xE9,W
053BA:  ADDWF  xD0,F
....................    CW_DATA_ARRAY[11] += 0 ; 
....................     
....................    // Powerline status [M,N] 
....................    CW_DATA_ARRAY[12] = (RPIC_TO_MPIC_ARRAY[22] >> 4) & 0x0F ; 
053BC:  MOVLB  0
053BE:  SWAPF  x78,W
053C0:  MOVWF  00
053C2:  MOVLW  0F
053C4:  ANDWF  00,F
053C6:  MOVF   00,W
053C8:  ANDLW  0F
053CA:  MOVLB  1
053CC:  MOVWF  xD1
....................    CW_DATA_ARRAY[13] = (RPIC_TO_MPIC_ARRAY[22]     ) & 0x0F ; 
053CE:  MOVLB  0
053D0:  MOVF   x78,W
053D2:  ANDLW  0F
053D4:  MOVLB  1
053D6:  MOVWF  xD2
....................     
....................     
....................    // Last reset hour [O,P] 
....................    CW_DATA_ARRAY[14] = (RPIC_TO_MPIC_ARRAY[24] >> 4) & 0x0F ; 
053D8:  MOVLB  0
053DA:  SWAPF  x7A,W
053DC:  MOVWF  00
053DE:  MOVLW  0F
053E0:  ANDWF  00,F
053E2:  MOVF   00,W
053E4:  ANDLW  0F
053E6:  MOVLB  1
053E8:  MOVWF  xD3
....................    CW_DATA_ARRAY[15] = (RPIC_TO_MPIC_ARRAY[24]    ) & 0x0F ; 
053EA:  MOVLB  0
053EC:  MOVF   x7A,W
053EE:  ANDLW  0F
053F0:  MOVLB  1
053F2:  MOVWF  xD4
....................  
....................    fprintf(PC, "Genaretd CW data = "); 
053F4:  MOVLW  3A
053F6:  MOVWF  FF6
053F8:  MOVLW  05
053FA:  MOVWF  FF7
053FC:  MOVLW  00
053FE:  MOVWF  FF8
05400:  MOVLB  0
05402:  CALL   2068
....................    for (int i = 0; i < 16; i ++)  
05406:  MOVLB  4
05408:  CLRF   x36
0540A:  MOVF   x36,W
0540C:  SUBLW  0F
0540E:  BNC   543A
....................    { 
....................      Fprintf(PC,"%01X ", CW_DATA_ARRAY[i]); 
05410:  CLRF   03
05412:  MOVF   x36,W
05414:  ADDLW  C5
05416:  MOVWF  FE9
05418:  MOVLW  01
0541A:  ADDWFC 03,W
0541C:  MOVWF  FEA
0541E:  MOVFF  FEF,43E
05422:  MOVLW  B7
05424:  MOVWF  x3F
05426:  MOVLB  0
05428:  CALL   20D6
0542C:  MOVLW  20
0542E:  BTFSS  F9E.4
05430:  BRA    542E
05432:  MOVWF  FAD
05434:  MOVLB  4
05436:  INCF   x36,F
05438:  BRA    540A
....................    }  
....................    printline();  
0543A:  MOVLB  0
0543C:  CALL   2092
05440:  GOTO   7F28 (RETURN)
.................... } 
....................  
.................... char RP_FLAG = 0; 
.................... char FP_FLAG = 0; 
....................  
....................  
....................  
.................... // 90 second comuniction with reset pic function_______________________________0x7A 
.................... void COMUNICATION_WITH_RST_PIC_90SEC(int sec) 
.................... { 
....................    if(SEC90_Count>= sec) 
05444:  MOVLB  3
05446:  MOVF   xFD,W
05448:  MOVLB  1
0544A:  SUBWF  xC3,W
0544C:  BTFSS  FD8.0
0544E:  GOTO   7F50
....................    { 
....................       SEC90_Count = 0;      
05452:  CLRF   xC3
....................       printline(); 
05454:  MOVLB  0
05456:  CALL   2092
....................  
....................       CLEAR_DATA_ARRAY( MPIC_TO_RPIC_ARRAY, 10 ); 
0545A:  MOVLB  4
0545C:  CLRF   x38
0545E:  MOVLW  58
05460:  MOVWF  x37
05462:  MOVLW  0A
05464:  MOVWF  x39
05466:  MOVLB  0
05468:  CALL   2F54
....................       MPIC_TO_RPIC_ARRAY[0] = 0xA0;   // header 
0546C:  MOVLW  A0
0546E:  MOVWF  58
....................       MPIC_TO_RPIC_ARRAY[1] = 0x7A;   // comand 
05470:  MOVLW  7A
05472:  MOVWF  59
....................       MPIC_TO_RPIC_ARRAY[9] = 0xA1;   // footer 
05474:  MOVLW  A1
05476:  MOVWF  x61
....................        
....................       // just printing sending comand to reset pic_____________________________      
....................       Fprintf(PC,"Sent comand to Reset PIC >> "); 
05478:  MOVLW  4E
0547A:  MOVWF  FF6
0547C:  MOVLW  05
0547E:  MOVWF  FF7
05480:  MOVLW  00
05482:  MOVWF  FF8
05484:  CALL   2068
....................       for(int i = 0; i<10; i++) 
05488:  MOVLB  3
0548A:  CLRF   xFE
0548C:  MOVF   xFE,W
0548E:  SUBLW  09
05490:  BNC   54BE
....................       { 
....................          Fprintf(PC,"%X ",MPIC_TO_RPIC_ARRAY[i]); 
05492:  CLRF   03
05494:  MOVF   xFE,W
05496:  ADDLW  58
05498:  MOVWF  FE9
0549A:  MOVLW  00
0549C:  ADDWFC 03,W
0549E:  MOVWF  FEA
054A0:  MOVFF  FEF,43E
054A4:  MOVLW  37
054A6:  MOVLB  4
054A8:  MOVWF  x3F
054AA:  MOVLB  0
054AC:  CALL   20D6
054B0:  MOVLW  20
054B2:  BTFSS  F9E.4
054B4:  BRA    54B2
054B6:  MOVWF  FAD
054B8:  MOVLB  3
054BA:  INCF   xFE,F
054BC:  BRA    548C
....................       } 
....................        
....................       //_______________________________________________________________________ 
....................        
....................       // first comunicate with Reset pic 
....................       // sending command to reset pic__________________________________________ 
....................       COMUNICATION_WITH_RST_PIC_AND_WAIT_FOR_RESPONE(3, 1000,200); 
054BE:  MOVLB  4
054C0:  CLRF   x34
054C2:  MOVLW  03
054C4:  MOVWF  x33
054C6:  MOVWF  x36
054C8:  MOVLW  E8
054CA:  MOVWF  x35
054CC:  CLRF   x38
054CE:  MOVLW  C8
054D0:  MOVWF  x37
054D2:  MOVLB  0
054D4:  CALL   3110
....................       //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
....................       // executing received comand from rest pic_______________________________ 
....................       if( RPIC_TO_MPIC_ARRAY[0] == 0xA0 && RPIC_TO_MPIC_ARRAY[1] == 0x7A  && RPIC_TO_MPIC_ARRAY[31] == 0xA1) 
054D8:  MOVF   x62,W
054DA:  SUBLW  A0
054DC:  BTFSS  FD8.2
054DE:  BRA    5A26
054E0:  MOVF   x63,W
054E2:  SUBLW  7A
054E4:  BTFSS  FD8.2
054E6:  BRA    5A26
054E8:  MOVF   x81,W
054EA:  SUBLW  A1
054EC:  BTFSS  FD8.2
054EE:  BRA    5A26
....................       {  
....................          PRINT_RECIVED_COMMAND_FROM_RESET_PIC(); 
054F0:  GOTO   3F88
....................          SYNC_MAIN_PIC_AND_RESET_PIC_TIME();    // if there is a time difference time will be updated 
054F4:  GOTO   3FD6
....................           
....................          // calculating day number 
....................          DAY_NUMBER = GET_DAY_NUMBER_OF_THE_YEAR(RPIC_TO_MPIC_ARRAY[2], RPIC_TO_MPIC_ARRAY[3], RPIC_TO_MPIC_ARRAY[4]); 
054F8:  MOVFF  64,433
054FC:  MOVFF  65,434
05500:  MOVFF  66,435
05504:  GOTO   412E
05508:  MOVFF  03,1AA
0550C:  MOVFF  02,1A9
05510:  MOVFF  01,1A8
05514:  MOVFF  00,1A7
....................          Fprintf(PC,"Day number = %03Lu\n\r", DAY_NUMBER); 
05518:  MOVLW  6C
0551A:  MOVWF  FF6
0551C:  MOVLW  05
0551E:  MOVWF  FF7
05520:  MOVLW  00
05522:  MOVWF  FF8
05524:  MOVLW  0D
05526:  MOVLB  4
05528:  MOVWF  x3D
0552A:  MOVLB  0
0552C:  CALL   20A4
05530:  MOVLW  43
05532:  MOVWF  FE9
05534:  MOVFF  1AA,43A
05538:  MOVFF  1A9,439
0553C:  MOVFF  1A8,438
05540:  MOVFF  1A7,437
05544:  CALL   43B0
05548:  MOVLW  0A
0554A:  BTFSS  F9E.4
0554C:  BRA    554A
0554E:  MOVWF  FAD
05550:  MOVLW  0D
05552:  BTFSS  F9E.4
05554:  BRA    5552
05556:  MOVWF  FAD
....................           
....................          // calculating reset pic and FAB data writing location 
....................          RST_PIC_HSK_DATA_START_ADD = (DAY_NUMBER + 24) << 16;                                   
05558:  MOVLW  18
0555A:  MOVLB  1
0555C:  ADDWF  xA7,W
0555E:  MOVLB  4
05560:  MOVWF  x30
05562:  MOVLW  00
05564:  MOVLB  1
05566:  ADDWFC xA8,W
05568:  MOVLB  4
0556A:  MOVWF  x31
0556C:  MOVLW  00
0556E:  MOVLB  1
05570:  ADDWFC xA9,W
05572:  MOVLW  00
05574:  MOVLB  1
05576:  ADDWFC xAA,W
05578:  MOVFF  431,1AE
0557C:  MOVFF  430,1AD
05580:  MOVLB  1
05582:  CLRF   xAB
05584:  CLRF   xAC
....................          FAB_PIC_HSK_DATA_START_ADD = RST_PIC_HSK_DATA_START_ADD + 0x00008000 ; 
05586:  MOVFF  1AB,1B9
0558A:  MOVLW  80
0558C:  ADDWF  xAC,W
0558E:  MOVWF  xBA
05590:  MOVLW  00
05592:  ADDWFC xAD,W
05594:  MOVWF  xBB
05596:  MOVLW  00
05598:  ADDWFC xAE,W
0559A:  MOVWF  xBC
....................           
....................          //Erasing 64KB sector to write data 
....................          if(SUCCESFULL_COMUNICATION_WITH_RST_PIC == 0 ) 
0559C:  MOVF   x9F,F
0559E:  BTFSS  FD8.2
055A0:  BRA    56B2
055A2:  MOVF   xA0,F
055A4:  BTFSS  FD8.2
055A6:  BRA    56B2
055A8:  MOVF   xA1,F
055AA:  BTFSS  FD8.2
055AC:  BRA    56B2
055AE:  MOVF   xA2,F
055B0:  BTFSS  FD8.2
055B2:  BRA    56B2
....................          { 
....................             OUTPUT_LOW(PIN_C5);  // put correct pic 
055B4:  BCF    F94.5
055B6:  BCF    F8B.5
....................             COM_FM_SECTOR_ERASE( RST_PIC_HSK_DATA_START_ADD, 64); 
055B8:  MOVFF  1AE,436
055BC:  MOVFF  1AD,435
055C0:  MOVFF  1AC,434
055C4:  MOVFF  1AB,433
055C8:  MOVLW  40
055CA:  MOVLB  4
055CC:  MOVWF  x37
055CE:  MOVLW  03
055D0:  MOVWF  x39
055D2:  MOVLW  E8
055D4:  MOVWF  x38
055D6:  MOVLB  0
055D8:  CALL   44C0
....................             fprintf(PC, "Reset PIC HSK data Starting address for today - 0x%LX\n\r",RST_PIC_HSK_DATA_START_ADD ); 
055DC:  MOVLW  82
055DE:  MOVWF  FF6
055E0:  MOVLW  05
055E2:  MOVWF  FF7
055E4:  MOVLW  00
055E6:  MOVWF  FF8
055E8:  MOVLW  32
055EA:  MOVLB  4
055EC:  MOVWF  x3D
055EE:  MOVLB  0
055F0:  CALL   20A4
055F4:  MOVFF  1AE,43E
055F8:  MOVLW  37
055FA:  MOVLB  4
055FC:  MOVWF  x3F
055FE:  MOVLB  0
05600:  CALL   20D6
05604:  MOVFF  1AD,43E
05608:  MOVLW  37
0560A:  MOVLB  4
0560C:  MOVWF  x3F
0560E:  MOVLB  0
05610:  CALL   20D6
05614:  MOVFF  1AC,43E
05618:  MOVLW  37
0561A:  MOVLB  4
0561C:  MOVWF  x3F
0561E:  MOVLB  0
05620:  CALL   20D6
05624:  MOVFF  1AB,43E
05628:  MOVLW  37
0562A:  MOVLB  4
0562C:  MOVWF  x3F
0562E:  MOVLB  0
05630:  CALL   20D6
05634:  MOVLW  0A
05636:  BTFSS  F9E.4
05638:  BRA    5636
0563A:  MOVWF  FAD
0563C:  MOVLW  0D
0563E:  BTFSS  F9E.4
05640:  BRA    563E
05642:  MOVWF  FAD
....................             fprintf(PC, "FAB - PIC HSK data Starting address for today - 0x%LX\n\r",FAB_PIC_HSK_DATA_START_ADD ); 
05644:  MOVLW  BA
05646:  MOVWF  FF6
05648:  MOVLW  05
0564A:  MOVWF  FF7
0564C:  MOVLW  00
0564E:  MOVWF  FF8
05650:  MOVLW  32
05652:  MOVLB  4
05654:  MOVWF  x3D
05656:  MOVLB  0
05658:  CALL   20A4
0565C:  MOVFF  1BC,43E
05660:  MOVLW  37
05662:  MOVLB  4
05664:  MOVWF  x3F
05666:  MOVLB  0
05668:  CALL   20D6
0566C:  MOVFF  1BB,43E
05670:  MOVLW  37
05672:  MOVLB  4
05674:  MOVWF  x3F
05676:  MOVLB  0
05678:  CALL   20D6
0567C:  MOVFF  1BA,43E
05680:  MOVLW  37
05682:  MOVLB  4
05684:  MOVWF  x3F
05686:  MOVLB  0
05688:  CALL   20D6
0568C:  MOVFF  1B9,43E
05690:  MOVLW  37
05692:  MOVLB  4
05694:  MOVWF  x3F
05696:  MOVLB  0
05698:  CALL   20D6
0569C:  MOVLW  0A
0569E:  BTFSS  F9E.4
056A0:  BRA    569E
056A2:  MOVWF  FAD
056A4:  MOVLW  0D
056A6:  BTFSS  F9E.4
056A8:  BRA    56A6
056AA:  MOVWF  FAD
....................             OUTPUT_HIGH(PIN_C5); 
056AC:  BCF    F94.5
056AE:  BSF    F8B.5
056B0:  MOVLB  1
....................          } 
....................           
....................          if( CFM_ACCESS_FLAG == 0 ) 
056B2:  MOVF   xAF,F
056B4:  BTFSS  FD8.2
056B6:  BRA    5A04
....................          {   
....................             OUTPUT_LOW(PIN_C5);  // take fM access 
056B8:  BCF    F94.5
056BA:  BCF    F8B.5
....................              
....................             fprintf(PC, "RSTPIC comunication-> sucess:notsuccess = %Ld:%Ld\n\r",SUCCESFULL_COMUNICATION_WITH_RST_PIC+1 ,FAILED_COMUNICATION_WITH_RST_PIC ); 
056BC:  MOVLW  01
056BE:  ADDWF  x9F,W
056C0:  MOVLB  4
056C2:  MOVWF  x30
056C4:  MOVLW  00
056C6:  MOVLB  1
056C8:  ADDWFC xA0,W
056CA:  MOVLB  4
056CC:  MOVWF  x31
056CE:  MOVLW  00
056D0:  MOVLB  1
056D2:  ADDWFC xA1,W
056D4:  MOVLB  4
056D6:  MOVWF  x32
056D8:  MOVLW  00
056DA:  MOVLB  1
056DC:  ADDWFC xA2,W
056DE:  MOVLB  4
056E0:  MOVWF  x33
056E2:  MOVLW  F2
056E4:  MOVWF  FF6
056E6:  MOVLW  05
056E8:  MOVWF  FF7
056EA:  MOVLW  00
056EC:  MOVWF  FF8
056EE:  MOVLW  2A
056F0:  MOVWF  x3D
056F2:  MOVLB  0
056F4:  CALL   20A4
056F8:  MOVLW  41
056FA:  MOVWF  FE9
056FC:  MOVFF  433,43A
05700:  MOVFF  432,439
05704:  MOVFF  431,438
05708:  MOVFF  430,437
0570C:  CALL   4580
05710:  MOVLW  3A
05712:  BTFSS  F9E.4
05714:  BRA    5712
05716:  MOVWF  FAD
05718:  MOVLW  41
0571A:  MOVWF  FE9
0571C:  MOVFF  1A6,43A
05720:  MOVFF  1A5,439
05724:  MOVFF  1A4,438
05728:  MOVFF  1A3,437
0572C:  CALL   4580
05730:  MOVLW  0A
05732:  BTFSS  F9E.4
05734:  BRA    5732
05736:  MOVWF  FAD
05738:  MOVLW  0D
0573A:  BTFSS  F9E.4
0573C:  BRA    573A
0573E:  MOVWF  FAD
....................              
....................             unsigned int32 SET_ADDRESS = RST_PIC_HSK_DATA_START_ADD + (26* SUCCESFULL_COMUNICATION_WITH_RST_PIC); 
05740:  MOVLB  4
05742:  CLRF   x36
05744:  CLRF   x35
05746:  CLRF   x34
05748:  MOVLW  1A
0574A:  MOVWF  x33
0574C:  MOVFF  1A2,43A
05750:  MOVFF  1A1,439
05754:  MOVFF  1A0,438
05758:  MOVFF  19F,437
0575C:  MOVLB  0
0575E:  CALL   468E
05762:  MOVF   00,W
05764:  MOVLB  1
05766:  ADDWF  xAB,W
05768:  MOVLB  3
0576A:  MOVWF  xFF
0576C:  MOVF   01,W
0576E:  MOVLB  1
05770:  ADDWFC xAC,W
05772:  MOVLB  4
05774:  MOVWF  x00
05776:  MOVF   02,W
05778:  MOVLB  1
0577A:  ADDWFC xAD,W
0577C:  MOVLB  4
0577E:  MOVWF  x01
05780:  MOVF   03,W
05782:  MOVLB  1
05784:  ADDWFC xAE,W
05786:  MOVLB  4
05788:  MOVWF  x02
....................             for(unsigned int32 i = 0; i<24; i++) 
0578A:  CLRF   x06
0578C:  CLRF   x05
0578E:  CLRF   x04
05790:  CLRF   x03
05792:  MOVF   x06,F
05794:  BTFSS  FD8.2
05796:  BRA    58EA
05798:  MOVF   x05,F
0579A:  BTFSS  FD8.2
0579C:  BRA    58EA
0579E:  MOVF   x04,F
057A0:  BTFSS  FD8.2
057A2:  BRA    58EA
057A4:  MOVF   x03,W
057A6:  SUBLW  17
057A8:  BTFSS  FD8.0
057AA:  BRA    58EA
....................             {  
....................                COM_FM_BYTE_WRITE( SET_ADDRESS + i,RPIC_TO_MPIC_ARRAY[i+1] ); 
057AC:  MOVF   x03,W
057AE:  MOVLB  3
057B0:  ADDWF  xFF,W
057B2:  MOVLB  4
057B4:  MOVWF  x30
057B6:  MOVF   x04,W
057B8:  ADDWFC x00,W
057BA:  MOVWF  x31
057BC:  MOVF   x05,W
057BE:  ADDWFC x01,W
057C0:  MOVWF  x32
057C2:  MOVF   x06,W
057C4:  ADDWFC x02,W
057C6:  MOVWF  x33
057C8:  MOVLW  01
057CA:  ADDWF  x03,W
057CC:  MOVWF  x34
057CE:  MOVLW  00
057D0:  ADDWFC x04,W
057D2:  MOVWF  x35
057D4:  MOVLW  00
057D6:  ADDWFC x05,W
057D8:  MOVWF  x36
057DA:  MOVLW  00
057DC:  ADDWFC x06,W
057DE:  MOVWF  x37
057E0:  MOVLW  62
057E2:  ADDWF  x34,W
057E4:  MOVWF  FE9
057E6:  MOVLW  00
057E8:  ADDWFC x35,W
057EA:  MOVWF  FEA
057EC:  MOVFF  FEF,440
057F0:  MOVFF  433,43F
057F4:  MOVFF  432,43E
057F8:  MOVFF  431,43D
057FC:  MOVFF  430,43C
05800:  MOVLB  0
05802:  CALL   46EA
....................                if( i == 0 ) fprintf(PC, "Recent HSK data writing location     - 0x%LX   Sec_num = %Lu\n\r",SET_ADDRESS, DAY_NUMBER + 24 );     
05806:  MOVLB  4
05808:  MOVF   x03,F
0580A:  BNZ   58D8
0580C:  MOVF   x04,F
0580E:  BNZ   58D8
05810:  MOVF   x05,F
05812:  BNZ   58D8
05814:  MOVF   x06,F
05816:  BNZ   58D8
05818:  MOVLW  18
0581A:  MOVLB  1
0581C:  ADDWF  xA7,W
0581E:  MOVLB  4
05820:  MOVWF  x30
05822:  MOVLW  00
05824:  MOVLB  1
05826:  ADDWFC xA8,W
05828:  MOVLB  4
0582A:  MOVWF  x31
0582C:  MOVLW  00
0582E:  MOVLB  1
05830:  ADDWFC xA9,W
05832:  MOVLB  4
05834:  MOVWF  x32
05836:  MOVLW  00
05838:  MOVLB  1
0583A:  ADDWFC xAA,W
0583C:  MOVLB  4
0583E:  MOVWF  x33
05840:  MOVLW  26
05842:  MOVWF  FF6
05844:  MOVLW  06
05846:  MOVWF  FF7
05848:  MOVLW  00
0584A:  MOVWF  FF8
0584C:  MOVLW  29
0584E:  MOVWF  x3D
05850:  MOVLB  0
05852:  CALL   20A4
05856:  MOVFF  402,43E
0585A:  MOVLW  37
0585C:  MOVLB  4
0585E:  MOVWF  x3F
05860:  MOVLB  0
05862:  CALL   20D6
05866:  MOVFF  401,43E
0586A:  MOVLW  37
0586C:  MOVLB  4
0586E:  MOVWF  x3F
05870:  MOVLB  0
05872:  CALL   20D6
05876:  MOVFF  400,43E
0587A:  MOVLW  37
0587C:  MOVLB  4
0587E:  MOVWF  x3F
05880:  MOVLB  0
05882:  CALL   20D6
05886:  MOVFF  3FF,43E
0588A:  MOVLW  37
0588C:  MOVLB  4
0588E:  MOVWF  x3F
05890:  MOVLB  0
05892:  CALL   20D6
05896:  MOVLW  52
05898:  MOVWF  FF6
0589A:  MOVLW  06
0589C:  MOVWF  FF7
0589E:  MOVLW  00
058A0:  MOVWF  FF8
058A2:  MOVLW  0D
058A4:  MOVLB  4
058A6:  MOVWF  x3D
058A8:  MOVLB  0
058AA:  CALL   20A4
058AE:  MOVLW  41
058B0:  MOVWF  FE9
058B2:  MOVFF  433,43A
058B6:  MOVFF  432,439
058BA:  MOVFF  431,438
058BE:  MOVFF  430,437
058C2:  CALL   43B0
058C6:  MOVLW  0A
058C8:  BTFSS  F9E.4
058CA:  BRA    58C8
058CC:  MOVWF  FAD
058CE:  MOVLW  0D
058D0:  BTFSS  F9E.4
058D2:  BRA    58D0
058D4:  MOVWF  FAD
058D6:  MOVLB  4
058D8:  MOVLW  01
058DA:  ADDWF  x03,F
058DC:  BTFSC  FD8.0
058DE:  INCF   x04,F
058E0:  BTFSC  FD8.2
058E2:  INCF   x05,F
058E4:  BTFSC  FD8.2
058E6:  INCF   x06,F
058E8:  BRA    5792
....................             } 
....................             COM_FM_BYTE_WRITE( SET_ADDRESS + 24  , 0xAA); 
058EA:  MOVLW  18
058EC:  MOVLB  3
058EE:  ADDWF  xFF,W
058F0:  MOVLB  4
058F2:  MOVWF  x30
058F4:  MOVLW  00
058F6:  ADDWFC x00,W
058F8:  MOVWF  x31
058FA:  MOVLW  00
058FC:  ADDWFC x01,W
058FE:  MOVWF  x32
05900:  MOVLW  00
05902:  ADDWFC x02,W
05904:  MOVWF  x33
05906:  MOVWF  x3F
05908:  MOVFF  432,43E
0590C:  MOVFF  431,43D
05910:  MOVFF  430,43C
05914:  MOVLW  AA
05916:  MOVWF  x40
05918:  MOVLB  0
0591A:  CALL   46EA
....................             COM_FM_BYTE_WRITE( SET_ADDRESS + 25  , 0xAA); 
0591E:  MOVLW  19
05920:  MOVLB  3
05922:  ADDWF  xFF,W
05924:  MOVLB  4
05926:  MOVWF  x30
05928:  MOVLW  00
0592A:  ADDWFC x00,W
0592C:  MOVWF  x31
0592E:  MOVLW  00
05930:  ADDWFC x01,W
05932:  MOVWF  x32
05934:  MOVLW  00
05936:  ADDWFC x02,W
05938:  MOVWF  x33
0593A:  MOVWF  x3F
0593C:  MOVFF  432,43E
05940:  MOVFF  431,43D
05944:  MOVFF  430,43C
05948:  MOVLW  AA
0594A:  MOVWF  x40
0594C:  MOVLB  0
0594E:  CALL   46EA
....................              
....................             fprintf(PC, "Saved data Resetpic HSK - "); 
05952:  MOVLW  66
05954:  MOVWF  FF6
05956:  MOVLW  06
05958:  MOVWF  FF7
0595A:  MOVLW  00
0595C:  MOVWF  FF8
0595E:  CALL   2068
....................             for(int i = 0; i<26; i++) 
05962:  MOVLB  4
05964:  CLRF   x07
05966:  MOVF   x07,W
05968:  SUBLW  19
0596A:  BNC   59E8
....................             { 
....................                RP_SAVED_DATA[i] = COM_FM_BYTE_READ( SET_ADDRESS + i) ; 
0596C:  CLRF   03
0596E:  MOVF   x07,W
05970:  ADDLW  75
05972:  MOVWF  01
05974:  MOVLW  03
05976:  ADDWFC 03,F
05978:  MOVFF  01,430
0597C:  MOVFF  03,431
05980:  MOVF   x07,W
05982:  MOVLB  3
05984:  ADDWF  xFF,W
05986:  MOVLB  4
05988:  MOVWF  x32
0598A:  MOVLW  00
0598C:  ADDWFC x00,W
0598E:  MOVWF  x33
05990:  MOVLW  00
05992:  ADDWFC x01,W
05994:  MOVWF  x34
05996:  MOVLW  00
05998:  ADDWFC x02,W
0599A:  MOVWF  x35
0599C:  MOVWF  x3C
0599E:  MOVFF  434,43B
059A2:  MOVFF  433,43A
059A6:  MOVFF  432,439
059AA:  MOVLB  0
059AC:  CALL   4766
059B0:  MOVFF  431,FEA
059B4:  MOVFF  430,FE9
059B8:  MOVFF  01,FEF
....................                fprintf(PC, "%X ", RP_SAVED_DATA[i]); 
059BC:  CLRF   03
059BE:  MOVLB  4
059C0:  MOVF   x07,W
059C2:  ADDLW  75
059C4:  MOVWF  FE9
059C6:  MOVLW  03
059C8:  ADDWFC 03,W
059CA:  MOVWF  FEA
059CC:  MOVFF  FEF,43E
059D0:  MOVLW  37
059D2:  MOVWF  x3F
059D4:  MOVLB  0
059D6:  CALL   20D6
059DA:  MOVLW  20
059DC:  BTFSS  F9E.4
059DE:  BRA    59DC
059E0:  MOVWF  FAD
059E2:  MOVLB  4
059E4:  INCF   x07,F
059E6:  BRA    5966
....................                 
....................             } 
....................             printline(); 
059E8:  MOVLB  0
059EA:  CALL   2092
....................              
....................             SUCCESFULL_COMUNICATION_WITH_RST_PIC++; 
059EE:  MOVLW  01
059F0:  MOVLB  1
059F2:  ADDWF  x9F,F
059F4:  BTFSC  FD8.0
059F6:  INCF   xA0,F
059F8:  BTFSC  FD8.2
059FA:  INCF   xA1,F
059FC:  BTFSC  FD8.2
059FE:  INCF   xA2,F
....................             OUTPUT_High(PIN_C5);   //  release FM access 
05A00:  BCF    F94.5
05A02:  BSF    F8B.5
....................          } 
....................           
....................          if( CFM_ACCESS_FLAG == 1 ) 
05A04:  DECFSZ xAF,W
05A06:  BRA    5A1C
....................          { 
....................             fprintf(PC, "Cannot write Reset PIC house keeping data in Com FM due to access is given to ComPIC - "); 
05A08:  MOVLW  82
05A0A:  MOVWF  FF6
05A0C:  MOVLW  06
05A0E:  MOVWF  FF7
05A10:  MOVLW  00
05A12:  MOVWF  FF8
05A14:  MOVLB  0
05A16:  CALL   2068
05A1A:  MOVLB  1
....................          } 
....................          RP_FLAG = 1 ; 
05A1C:  MOVLW  01
05A1E:  MOVLB  3
05A20:  MOVWF  xF9
....................       } 
05A22:  BRA    5A4A
05A24:  MOVLB  0
....................        
....................       else  
....................       { 
....................          Fprintf(PC,"90 seconds comunication with reset pic was not succesfull\n\r"); 
05A26:  MOVLW  DA
05A28:  MOVWF  FF6
05A2A:  MOVLW  06
05A2C:  MOVWF  FF7
05A2E:  MOVLW  00
05A30:  MOVWF  FF8
05A32:  CALL   2068
....................          FAILED_COMUNICATION_WITH_RST_PIC++; 
05A36:  MOVLW  01
05A38:  MOVLB  1
05A3A:  ADDWF  xA3,F
05A3C:  BTFSC  FD8.0
05A3E:  INCF   xA4,F
05A40:  BTFSC  FD8.2
05A42:  INCF   xA5,F
05A44:  BTFSC  FD8.2
05A46:  INCF   xA6,F
05A48:  MOVLB  3
....................       } 
....................       //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
....................  
....................        
....................        
....................       //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
....................       // now we have already comunicate with reset and we have the reset pic reponse 
....................       // and we have clearence to write data in COM FM, so we can comunicate with FAB  
....................       // and get FAB HSK 
....................       CLEAR_DATA_ARRAY( MPIC_TO_FAB_ARRAY, 3 ); 
05A4A:  MOVLB  4
05A4C:  CLRF   x38
05A4E:  MOVLW  F0
05A50:  MOVWF  x37
05A52:  MOVLW  03
05A54:  MOVWF  x39
05A56:  MOVLB  0
05A58:  CALL   2F54
....................       MPIC_TO_FAB_ARRAY[0] = 0xFA;   // header 
05A5C:  MOVLW  FA
05A5E:  MOVWF  xF0
....................       MPIC_TO_FAB_ARRAY[1] = 0xA0;   // comand 
05A60:  MOVLW  A0
05A62:  MOVWF  xF1
....................       MPIC_TO_FAB_ARRAY[2] = 0xFB;   // footer 
05A64:  MOVLW  FB
05A66:  MOVWF  xF2
....................        
....................       // sending command to FAB pic__________________________________________ 
....................       COMUNICATION_WITH_FAB_PIC_AND_WAIT_FOR_RESPONE(3, 1000,200,35); 
05A68:  MOVLW  03
05A6A:  MOVLB  4
05A6C:  MOVWF  x33
05A6E:  MOVWF  x35
05A70:  MOVLW  E8
05A72:  MOVWF  x34
05A74:  CLRF   x37
05A76:  MOVLW  C8
05A78:  MOVWF  x36
05A7A:  MOVLW  23
05A7C:  MOVWF  x38
05A7E:  MOVLB  0
05A80:  CALL   4934
....................        
....................       if( FAB_TO_MPIC_ARRAY[0] == 0xFA && FAB_TO_MPIC_ARRAY[1] == 0xA0  && FAB_TO_MPIC_ARRAY[34] == 0xFB) 
05A84:  MOVLB  1
05A86:  MOVF   x10,W
05A88:  SUBLW  FA
05A8A:  BTFSS  FD8.2
05A8C:  BRA    5E40
05A8E:  MOVF   x11,W
05A90:  SUBLW  A0
05A92:  BTFSS  FD8.2
05A94:  BRA    5E40
05A96:  MOVF   x32,W
05A98:  SUBLW  FB
05A9A:  BTFSS  FD8.2
05A9C:  BRA    5E40
....................       { 
....................          if( CFM_ACCESS_FLAG == 0 ) 
05A9E:  MOVF   xAF,F
05AA0:  BTFSS  FD8.2
05AA2:  BRA    5E1E
....................          {   
....................             OUTPUT_LOW(PIN_C5);  // take fM access 
05AA4:  BCF    F94.5
05AA6:  BCF    F8B.5
....................             fprintf(PC, "FABPIC comunication-> sucess:notsuccess = %Ld:%Ld\n\r",SUCCESFULL_COMUNICATION_WITH_FAB+1 ,FAILED_COMUNICATION_WITH_FAB ); 
05AA8:  MOVLW  01
05AAA:  ADDWF  xB1,W
05AAC:  MOVLB  4
05AAE:  MOVWF  x30
05AB0:  MOVLW  00
05AB2:  MOVLB  1
05AB4:  ADDWFC xB2,W
05AB6:  MOVLB  4
05AB8:  MOVWF  x31
05ABA:  MOVLW  00
05ABC:  MOVLB  1
05ABE:  ADDWFC xB3,W
05AC0:  MOVLB  4
05AC2:  MOVWF  x32
05AC4:  MOVLW  00
05AC6:  MOVLB  1
05AC8:  ADDWFC xB4,W
05ACA:  MOVLB  4
05ACC:  MOVWF  x33
05ACE:  MOVLW  16
05AD0:  MOVWF  FF6
05AD2:  MOVLW  07
05AD4:  MOVWF  FF7
05AD6:  MOVLW  00
05AD8:  MOVWF  FF8
05ADA:  MOVLW  2A
05ADC:  MOVWF  x3D
05ADE:  MOVLB  0
05AE0:  CALL   20A4
05AE4:  MOVLW  41
05AE6:  MOVWF  FE9
05AE8:  MOVFF  433,43A
05AEC:  MOVFF  432,439
05AF0:  MOVFF  431,438
05AF4:  MOVFF  430,437
05AF8:  CALL   4580
05AFC:  MOVLW  3A
05AFE:  BTFSS  F9E.4
05B00:  BRA    5AFE
05B02:  MOVWF  FAD
05B04:  MOVLW  41
05B06:  MOVWF  FE9
05B08:  MOVFF  1B8,43A
05B0C:  MOVFF  1B7,439
05B10:  MOVFF  1B6,438
05B14:  MOVFF  1B5,437
05B18:  CALL   4580
05B1C:  MOVLW  0A
05B1E:  BTFSS  F9E.4
05B20:  BRA    5B1E
05B22:  MOVWF  FAD
05B24:  MOVLW  0D
05B26:  BTFSS  F9E.4
05B28:  BRA    5B26
05B2A:  MOVWF  FAD
....................             unsigned int32 DATA_SET_START_ADD = FAB_PIC_HSK_DATA_START_ADD + 37* SUCCESFULL_COMUNICATION_WITH_FAB ; 
05B2C:  MOVLB  4
05B2E:  CLRF   x36
05B30:  CLRF   x35
05B32:  CLRF   x34
05B34:  MOVLW  25
05B36:  MOVWF  x33
05B38:  MOVFF  1B4,43A
05B3C:  MOVFF  1B3,439
05B40:  MOVFF  1B2,438
05B44:  MOVFF  1B1,437
05B48:  MOVLB  0
05B4A:  CALL   468E
05B4E:  MOVF   00,W
05B50:  MOVLB  1
05B52:  ADDWF  xB9,W
05B54:  MOVLB  4
05B56:  MOVWF  x08
05B58:  MOVF   01,W
05B5A:  MOVLB  1
05B5C:  ADDWFC xBA,W
05B5E:  MOVLB  4
05B60:  MOVWF  x09
05B62:  MOVF   02,W
05B64:  MOVLB  1
05B66:  ADDWFC xBB,W
05B68:  MOVLB  4
05B6A:  MOVWF  x0A
05B6C:  MOVF   03,W
05B6E:  MOVLB  1
05B70:  ADDWFC xBC,W
05B72:  MOVLB  4
05B74:  MOVWF  x0B
....................             fprintf(PC, "Recent FAB HSK data writing location     - 0x%LX   Sec_num = %Lu\n\r", DATA_SET_START_ADD, DAY_NUMBER+24 );   
05B76:  MOVLW  18
05B78:  MOVLB  1
05B7A:  ADDWF  xA7,W
05B7C:  MOVLB  4
05B7E:  MOVWF  x30
05B80:  MOVLW  00
05B82:  MOVLB  1
05B84:  ADDWFC xA8,W
05B86:  MOVLB  4
05B88:  MOVWF  x31
05B8A:  MOVLW  00
05B8C:  MOVLB  1
05B8E:  ADDWFC xA9,W
05B90:  MOVLB  4
05B92:  MOVWF  x32
05B94:  MOVLW  00
05B96:  MOVLB  1
05B98:  ADDWFC xAA,W
05B9A:  MOVLB  4
05B9C:  MOVWF  x33
05B9E:  MOVLW  4A
05BA0:  MOVWF  FF6
05BA2:  MOVLW  07
05BA4:  MOVWF  FF7
05BA6:  MOVLW  00
05BA8:  MOVWF  FF8
05BAA:  MOVLW  2D
05BAC:  MOVWF  x3D
05BAE:  MOVLB  0
05BB0:  CALL   20A4
05BB4:  MOVFF  40B,43E
05BB8:  MOVLW  37
05BBA:  MOVLB  4
05BBC:  MOVWF  x3F
05BBE:  MOVLB  0
05BC0:  CALL   20D6
05BC4:  MOVFF  40A,43E
05BC8:  MOVLW  37
05BCA:  MOVLB  4
05BCC:  MOVWF  x3F
05BCE:  MOVLB  0
05BD0:  CALL   20D6
05BD4:  MOVFF  409,43E
05BD8:  MOVLW  37
05BDA:  MOVLB  4
05BDC:  MOVWF  x3F
05BDE:  MOVLB  0
05BE0:  CALL   20D6
05BE4:  MOVFF  408,43E
05BE8:  MOVLW  37
05BEA:  MOVLB  4
05BEC:  MOVWF  x3F
05BEE:  MOVLB  0
05BF0:  CALL   20D6
05BF4:  MOVLW  7A
05BF6:  MOVWF  FF6
05BF8:  MOVLW  07
05BFA:  MOVWF  FF7
05BFC:  MOVLW  00
05BFE:  MOVWF  FF8
05C00:  MOVLW  0D
05C02:  MOVLB  4
05C04:  MOVWF  x3D
05C06:  MOVLB  0
05C08:  CALL   20A4
05C0C:  MOVLW  41
05C0E:  MOVWF  FE9
05C10:  MOVFF  433,43A
05C14:  MOVFF  432,439
05C18:  MOVFF  431,438
05C1C:  MOVFF  430,437
05C20:  CALL   43B0
05C24:  MOVLW  0A
05C26:  BTFSS  F9E.4
05C28:  BRA    5C26
05C2A:  MOVWF  FAD
05C2C:  MOVLW  0D
05C2E:  BTFSS  F9E.4
05C30:  BRA    5C2E
05C32:  MOVWF  FAD
....................              
....................             COM_FM_BYTE_WRITE( DATA_SET_START_ADD     , RPIC_TO_MPIC_ARRAY[5] ) ; 
05C34:  MOVFF  40B,43F
05C38:  MOVFF  40A,43E
05C3C:  MOVFF  409,43D
05C40:  MOVFF  408,43C
05C44:  MOVFF  67,440
05C48:  CALL   46EA
....................             COM_FM_BYTE_WRITE( DATA_SET_START_ADD + 1 , RPIC_TO_MPIC_ARRAY[6] ) ; 
05C4C:  MOVLW  01
05C4E:  MOVLB  4
05C50:  ADDWF  x08,W
05C52:  MOVWF  x30
05C54:  MOVLW  00
05C56:  ADDWFC x09,W
05C58:  MOVWF  x31
05C5A:  MOVLW  00
05C5C:  ADDWFC x0A,W
05C5E:  MOVWF  x32
05C60:  MOVLW  00
05C62:  ADDWFC x0B,W
05C64:  MOVWF  x33
05C66:  MOVWF  x3F
05C68:  MOVFF  432,43E
05C6C:  MOVFF  431,43D
05C70:  MOVFF  430,43C
05C74:  MOVFF  68,440
05C78:  MOVLB  0
05C7A:  CALL   46EA
....................             COM_FM_BYTE_WRITE( DATA_SET_START_ADD + 2 , RPIC_TO_MPIC_ARRAY[7] ) ; 
05C7E:  MOVLW  02
05C80:  MOVLB  4
05C82:  ADDWF  x08,W
05C84:  MOVWF  x30
05C86:  MOVLW  00
05C88:  ADDWFC x09,W
05C8A:  MOVWF  x31
05C8C:  MOVLW  00
05C8E:  ADDWFC x0A,W
05C90:  MOVWF  x32
05C92:  MOVLW  00
05C94:  ADDWFC x0B,W
05C96:  MOVWF  x33
05C98:  MOVWF  x3F
05C9A:  MOVFF  432,43E
05C9E:  MOVFF  431,43D
05CA2:  MOVFF  430,43C
05CA6:  MOVFF  69,440
05CAA:  MOVLB  0
05CAC:  CALL   46EA
....................              
....................             unsigned int32 BYTE_ADDRESS_ = 0; 
05CB0:  MOVLB  4
05CB2:  CLRF   x0F
05CB4:  CLRF   x0E
05CB6:  CLRF   x0D
05CB8:  CLRF   x0C
....................             for(int i = 3; i<35; i++) 
05CBA:  MOVLW  03
05CBC:  MOVWF  x10
05CBE:  MOVF   x10,W
05CC0:  SUBLW  22
05CC2:  BNC   5D0C
....................             { 
....................                BYTE_ADDRESS_ = DATA_SET_START_ADD + i  ; 
05CC4:  MOVF   x10,W
05CC6:  ADDWF  x08,W
05CC8:  MOVWF  x0C
05CCA:  MOVLW  00
05CCC:  ADDWFC x09,W
05CCE:  MOVWF  x0D
05CD0:  MOVLW  00
05CD2:  ADDWFC x0A,W
05CD4:  MOVWF  x0E
05CD6:  MOVLW  00
05CD8:  ADDWFC x0B,W
05CDA:  MOVWF  x0F
....................                COM_FM_BYTE_WRITE( BYTE_ADDRESS_ ,FAB_TO_MPIC_ARRAY[i-1] ); 
05CDC:  MOVLW  01
05CDE:  SUBWF  x10,W
05CE0:  CLRF   03
05CE2:  ADDLW  10
05CE4:  MOVWF  FE9
05CE6:  MOVLW  01
05CE8:  ADDWFC 03,W
05CEA:  MOVWF  FEA
05CEC:  MOVFF  FEF,440
05CF0:  MOVFF  40F,43F
05CF4:  MOVFF  40E,43E
05CF8:  MOVFF  40D,43D
05CFC:  MOVFF  40C,43C
05D00:  MOVLB  0
05D02:  CALL   46EA
05D06:  MOVLB  4
05D08:  INCF   x10,F
05D0A:  BRA    5CBE
....................             } 
....................             COM_FM_BYTE_WRITE( DATA_SET_START_ADD + 35 , 0xAA ) ; 
05D0C:  MOVLW  23
05D0E:  ADDWF  x08,W
05D10:  MOVWF  x30
05D12:  MOVLW  00
05D14:  ADDWFC x09,W
05D16:  MOVWF  x31
05D18:  MOVLW  00
05D1A:  ADDWFC x0A,W
05D1C:  MOVWF  x32
05D1E:  MOVLW  00
05D20:  ADDWFC x0B,W
05D22:  MOVWF  x33
05D24:  MOVWF  x3F
05D26:  MOVFF  432,43E
05D2A:  MOVFF  431,43D
05D2E:  MOVFF  430,43C
05D32:  MOVLW  AA
05D34:  MOVWF  x40
05D36:  MOVLB  0
05D38:  CALL   46EA
....................             COM_FM_BYTE_WRITE( DATA_SET_START_ADD + 36 , 0xAA ) ; 
05D3C:  MOVLW  24
05D3E:  MOVLB  4
05D40:  ADDWF  x08,W
05D42:  MOVWF  x30
05D44:  MOVLW  00
05D46:  ADDWFC x09,W
05D48:  MOVWF  x31
05D4A:  MOVLW  00
05D4C:  ADDWFC x0A,W
05D4E:  MOVWF  x32
05D50:  MOVLW  00
05D52:  ADDWFC x0B,W
05D54:  MOVWF  x33
05D56:  MOVWF  x3F
05D58:  MOVFF  432,43E
05D5C:  MOVFF  431,43D
05D60:  MOVFF  430,43C
05D64:  MOVLW  AA
05D66:  MOVWF  x40
05D68:  MOVLB  0
05D6A:  CALL   46EA
....................              
....................             fprintf(PC, "Saved data FAB pic HSK - "); 
05D6E:  MOVLW  8E
05D70:  MOVWF  FF6
05D72:  MOVLW  07
05D74:  MOVWF  FF7
05D76:  MOVLW  00
05D78:  MOVWF  FF8
05D7A:  CALL   2068
....................             for(int i = 0; i<37; i++) 
05D7E:  MOVLB  4
05D80:  CLRF   x11
05D82:  MOVF   x11,W
05D84:  SUBLW  24
05D86:  BNC   5E02
....................             { 
....................                BYTE_ADDRESS_ = DATA_SET_START_ADD + i; 
05D88:  MOVF   x11,W
05D8A:  ADDWF  x08,W
05D8C:  MOVWF  x0C
05D8E:  MOVLW  00
05D90:  ADDWFC x09,W
05D92:  MOVWF  x0D
05D94:  MOVLW  00
05D96:  ADDWFC x0A,W
05D98:  MOVWF  x0E
05D9A:  MOVLW  00
05D9C:  ADDWFC x0B,W
05D9E:  MOVWF  x0F
....................                FP_SAVED_DATA[i] = COM_FM_BYTE_READ( BYTE_ADDRESS_ ) ; 
05DA0:  CLRF   03
05DA2:  MOVF   x11,W
05DA4:  ADDLW  9F
05DA6:  MOVWF  01
05DA8:  MOVLW  03
05DAA:  ADDWFC 03,F
05DAC:  MOVFF  01,430
05DB0:  MOVFF  03,431
05DB4:  MOVFF  40F,43C
05DB8:  MOVFF  40E,43B
05DBC:  MOVFF  40D,43A
05DC0:  MOVFF  40C,439
05DC4:  MOVLB  0
05DC6:  CALL   4766
05DCA:  MOVFF  431,FEA
05DCE:  MOVFF  430,FE9
05DD2:  MOVFF  01,FEF
....................                fprintf(PC, "%X ", FP_SAVED_DATA[i] ); 
05DD6:  CLRF   03
05DD8:  MOVLB  4
05DDA:  MOVF   x11,W
05DDC:  ADDLW  9F
05DDE:  MOVWF  FE9
05DE0:  MOVLW  03
05DE2:  ADDWFC 03,W
05DE4:  MOVWF  FEA
05DE6:  MOVFF  FEF,43E
05DEA:  MOVLW  37
05DEC:  MOVWF  x3F
05DEE:  MOVLB  0
05DF0:  CALL   20D6
05DF4:  MOVLW  20
05DF6:  BTFSS  F9E.4
05DF8:  BRA    5DF6
05DFA:  MOVWF  FAD
05DFC:  MOVLB  4
05DFE:  INCF   x11,F
05E00:  BRA    5D82
....................             } 
....................             printLine(); 
05E02:  MOVLB  0
05E04:  CALL   2092
....................              
....................             SUCCESFULL_COMUNICATION_WITH_FAB++; 
05E08:  MOVLW  01
05E0A:  MOVLB  1
05E0C:  ADDWF  xB1,F
05E0E:  BTFSC  FD8.0
05E10:  INCF   xB2,F
05E12:  BTFSC  FD8.2
05E14:  INCF   xB3,F
05E16:  BTFSC  FD8.2
05E18:  INCF   xB4,F
....................             OUTPUT_HIGH(PIN_C5);  // release fM access 
05E1A:  BCF    F94.5
05E1C:  BSF    F8B.5
....................          } 
....................           
....................          if( CFM_ACCESS_FLAG == 1 ) 
05E1E:  DECFSZ xAF,W
05E20:  BRA    5E36
....................          { 
....................             fprintf(PC, "Cannot write FAB PIC house keeping data in Com FM due to access is given to ComPIC - "); 
05E22:  MOVLW  A8
05E24:  MOVWF  FF6
05E26:  MOVLW  07
05E28:  MOVWF  FF7
05E2A:  MOVLW  00
05E2C:  MOVWF  FF8
05E2E:  MOVLB  0
05E30:  CALL   2068
05E34:  MOVLB  1
....................          } 
....................          FP_FLAG = 1 ;  
05E36:  MOVLW  01
05E38:  MOVLB  3
05E3A:  MOVWF  xFA
....................       } 
05E3C:  BRA    5E66
05E3E:  MOVLB  1
....................        
....................       else 
....................       { 
....................          Fprintf(PC,"90 seconds comunication with FAB pic was not succesfull\n\r"); 
05E40:  MOVLW  FE
05E42:  MOVWF  FF6
05E44:  MOVLW  07
05E46:  MOVWF  FF7
05E48:  MOVLW  00
05E4A:  MOVWF  FF8
05E4C:  MOVLB  0
05E4E:  CALL   2068
....................          FAILED_COMUNICATION_WITH_FAB++; 
05E52:  MOVLW  01
05E54:  MOVLB  1
05E56:  ADDWF  xB5,F
05E58:  BTFSC  FD8.0
05E5A:  INCF   xB6,F
05E5C:  BTFSC  FD8.2
05E5E:  INCF   xB7,F
05E60:  BTFSC  FD8.2
05E62:  INCF   xB8,F
05E64:  MOVLB  3
....................       } 
....................       printline(); 
05E66:  MOVLB  0
05E68:  CALL   2092
....................       //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
....................        
....................       // now we can genarate CW because we already comunicate with reset pic and FAB 
....................  
....................       printline(); 
05E6C:  CALL   2092
....................        
....................       // Printing RP Data  
....................       if( RP_FLAG == 1 ) 
05E70:  MOVLB  3
05E72:  DECFSZ xF9,W
05E74:  BRA    6532
....................       { 
....................          RP_FLAG = 0 ; 
05E76:  CLRF   xF9
....................          fprintf(PC, "Reset PIC Data ############\n\r"); 
05E78:  MOVLW  38
05E7A:  MOVWF  FF6
05E7C:  MOVLW  08
05E7E:  MOVWF  FF7
05E80:  MOVLW  00
05E82:  MOVWF  FF8
05E84:  MOVLB  0
05E86:  CALL   2068
....................          fprintf(PC, "Reset PIC Time = %02u/%02u/%02u  %02u:%02u:%02u\n\r", RP_SAVED_DATA[1], RP_SAVED_DATA[3], RP_SAVED_DATA[3], RP_SAVED_DATA[4], RP_SAVED_DATA[5], RP_SAVED_DATA[6]) ; 
05E8A:  MOVLW  56
05E8C:  MOVWF  FF6
05E8E:  MOVLW  08
05E90:  MOVWF  FF7
05E92:  MOVLW  00
05E94:  MOVWF  FF8
05E96:  MOVLW  11
05E98:  MOVLB  4
05E9A:  MOVWF  x3D
05E9C:  MOVLB  0
05E9E:  CALL   20A4
05EA2:  MOVFF  376,43C
05EA6:  MOVLW  01
05EA8:  MOVLB  4
05EAA:  MOVWF  x3D
05EAC:  MOVLB  0
05EAE:  CALL   29CE
05EB2:  MOVLW  2F
05EB4:  BTFSS  F9E.4
05EB6:  BRA    5EB4
05EB8:  MOVWF  FAD
05EBA:  MOVFF  378,43C
05EBE:  MOVLW  01
05EC0:  MOVLB  4
05EC2:  MOVWF  x3D
05EC4:  MOVLB  0
05EC6:  CALL   29CE
05ECA:  MOVLW  2F
05ECC:  BTFSS  F9E.4
05ECE:  BRA    5ECC
05ED0:  MOVWF  FAD
05ED2:  MOVFF  378,43C
05ED6:  MOVLW  01
05ED8:  MOVLB  4
05EDA:  MOVWF  x3D
05EDC:  MOVLB  0
05EDE:  CALL   29CE
05EE2:  MOVLW  20
05EE4:  BTFSS  F9E.4
05EE6:  BRA    5EE4
05EE8:  MOVWF  FAD
05EEA:  MOVLW  20
05EEC:  BTFSS  F9E.4
05EEE:  BRA    5EEC
05EF0:  MOVWF  FAD
05EF2:  MOVFF  379,43C
05EF6:  MOVLW  01
05EF8:  MOVLB  4
05EFA:  MOVWF  x3D
05EFC:  MOVLB  0
05EFE:  CALL   29CE
05F02:  MOVLW  3A
05F04:  BTFSS  F9E.4
05F06:  BRA    5F04
05F08:  MOVWF  FAD
05F0A:  MOVFF  37A,43C
05F0E:  MOVLW  01
05F10:  MOVLB  4
05F12:  MOVWF  x3D
05F14:  MOVLB  0
05F16:  CALL   29CE
05F1A:  MOVLW  3A
05F1C:  BTFSS  F9E.4
05F1E:  BRA    5F1C
05F20:  MOVWF  FAD
05F22:  MOVFF  37B,43C
05F26:  MOVLW  01
05F28:  MOVLB  4
05F2A:  MOVWF  x3D
05F2C:  MOVLB  0
05F2E:  CALL   29CE
05F32:  MOVLW  0A
05F34:  BTFSS  F9E.4
05F36:  BRA    5F34
05F38:  MOVWF  FAD
05F3A:  MOVLW  0D
05F3C:  BTFSS  F9E.4
05F3E:  BRA    5F3C
05F40:  MOVWF  FAD
....................          float RAW_Vol = 6.6*( (float) make16(RP_SAVED_DATA[7],RP_SAVED_DATA[8]) )/4096 ; 
05F42:  MOVFF  37C,03
05F46:  MOVFF  37D,433
05F4A:  MOVFF  03,434
05F4E:  MOVLB  0
05F50:  CALL   4A88
05F54:  MOVLW  33
05F56:  MOVLB  4
05F58:  MOVWF  x43
05F5A:  MOVWF  x42
05F5C:  MOVLW  53
05F5E:  MOVWF  x41
05F60:  MOVLW  81
05F62:  MOVWF  x40
05F64:  MOVFF  03,447
05F68:  MOVFF  02,446
05F6C:  MOVFF  01,445
05F70:  MOVFF  00,444
05F74:  MOVLB  0
05F76:  CALL   4ABE
05F7A:  MOVFF  03,433
05F7E:  MOVFF  02,432
05F82:  MOVFF  01,431
05F86:  MOVFF  00,430
05F8A:  MOVFF  03,43A
05F8E:  MOVFF  02,439
05F92:  MOVFF  01,438
05F96:  MOVFF  00,437
05F9A:  MOVLB  4
05F9C:  CLRF   x3E
05F9E:  CLRF   x3D
05FA0:  CLRF   x3C
05FA2:  MOVLW  8B
05FA4:  MOVWF  x3B
05FA6:  MOVLB  0
05FA8:  CALL   4BB4
05FAC:  MOVFF  03,415
05FB0:  MOVFF  02,414
05FB4:  MOVFF  01,413
05FB8:  MOVFF  00,412
....................          fprintf(PC, "RAW Voltage = %.3f V\n\r", RAW_Vol);  
05FBC:  MOVLW  88
05FBE:  MOVWF  FF6
05FC0:  MOVLW  08
05FC2:  MOVWF  FF7
05FC4:  MOVLW  00
05FC6:  MOVWF  FF8
05FC8:  MOVLW  0E
05FCA:  MOVLB  4
05FCC:  MOVWF  x3D
05FCE:  MOVLB  0
05FD0:  CALL   20A4
05FD4:  MOVLW  89
05FD6:  MOVWF  FE9
05FD8:  MOVFF  415,436
05FDC:  MOVFF  414,435
05FE0:  MOVFF  413,434
05FE4:  MOVFF  412,433
05FE8:  MOVLW  03
05FEA:  MOVLB  4
05FEC:  MOVWF  x37
05FEE:  MOVLB  0
05FF0:  CALL   4D56
05FF4:  MOVLW  9A
05FF6:  MOVWF  FF6
05FF8:  MOVLW  08
05FFA:  MOVWF  FF7
05FFC:  MOVLW  00
05FFE:  MOVWF  FF8
06000:  MOVLW  04
06002:  MOVLB  4
06004:  MOVWF  x3D
06006:  MOVLB  0
06008:  CALL   20A4
....................          float _3V3_1_Cur = 0.4628*( (float) make16(RP_SAVED_DATA[9],RP_SAVED_DATA[10]) ) - 6.2077 ; 
0600C:  MOVFF  37E,03
06010:  MOVFF  37F,433
06014:  MOVFF  03,434
06018:  MOVLB  0
0601A:  CALL   4A88
0601E:  MOVLW  1F
06020:  MOVLB  4
06022:  MOVWF  x43
06024:  MOVLW  F4
06026:  MOVWF  x42
06028:  MOVLW  6C
0602A:  MOVWF  x41
0602C:  MOVLW  7D
0602E:  MOVWF  x40
06030:  MOVFF  03,447
06034:  MOVFF  02,446
06038:  MOVFF  01,445
0603C:  MOVFF  00,444
06040:  MOVLB  0
06042:  CALL   4ABE
06046:  MOVFF  03,433
0604A:  MOVFF  02,432
0604E:  MOVFF  01,431
06052:  MOVFF  00,430
06056:  BSF    FD8.1
06058:  MOVFF  03,43A
0605C:  MOVFF  02,439
06060:  MOVFF  01,438
06064:  MOVFF  00,437
06068:  MOVLW  7A
0606A:  MOVLB  4
0606C:  MOVWF  x3E
0606E:  MOVLW  A5
06070:  MOVWF  x3D
06072:  MOVLW  46
06074:  MOVWF  x3C
06076:  MOVLW  81
06078:  MOVWF  x3B
0607A:  MOVLB  0
0607C:  CALL   4EF8
06080:  MOVFF  03,419
06084:  MOVFF  02,418
06088:  MOVFF  01,417
0608C:  MOVFF  00,416
....................          fprintf(PC, "3V3_1_Current = %.3f mA\n\r", _3V3_1_Cur); 
06090:  MOVLW  A0
06092:  MOVWF  FF6
06094:  MOVLW  08
06096:  MOVWF  FF7
06098:  MOVLW  00
0609A:  MOVWF  FF8
0609C:  MOVLW  10
0609E:  MOVLB  4
060A0:  MOVWF  x3D
060A2:  MOVLB  0
060A4:  CALL   20A4
060A8:  MOVLW  89
060AA:  MOVWF  FE9
060AC:  MOVFF  419,436
060B0:  MOVFF  418,435
060B4:  MOVFF  417,434
060B8:  MOVFF  416,433
060BC:  MOVLW  03
060BE:  MOVLB  4
060C0:  MOVWF  x37
060C2:  MOVLB  0
060C4:  CALL   4D56
060C8:  MOVLW  B4
060CA:  MOVWF  FF6
060CC:  MOVLW  08
060CE:  MOVWF  FF7
060D0:  MOVLW  00
060D2:  MOVWF  FF8
060D4:  MOVLW  05
060D6:  MOVLB  4
060D8:  MOVWF  x3D
060DA:  MOVLB  0
060DC:  CALL   20A4
....................          float _3V3_2_Cur = 0.4628*( (float) make16(RP_SAVED_DATA[11],RP_SAVED_DATA[12]) ) - 6.2077 ; 
060E0:  MOVFF  380,03
060E4:  MOVFF  381,433
060E8:  MOVFF  03,434
060EC:  MOVLB  0
060EE:  CALL   4A88
060F2:  MOVLW  1F
060F4:  MOVLB  4
060F6:  MOVWF  x43
060F8:  MOVLW  F4
060FA:  MOVWF  x42
060FC:  MOVLW  6C
060FE:  MOVWF  x41
06100:  MOVLW  7D
06102:  MOVWF  x40
06104:  MOVFF  03,447
06108:  MOVFF  02,446
0610C:  MOVFF  01,445
06110:  MOVFF  00,444
06114:  MOVLB  0
06116:  CALL   4ABE
0611A:  MOVFF  03,433
0611E:  MOVFF  02,432
06122:  MOVFF  01,431
06126:  MOVFF  00,430
0612A:  BSF    FD8.1
0612C:  MOVFF  03,43A
06130:  MOVFF  02,439
06134:  MOVFF  01,438
06138:  MOVFF  00,437
0613C:  MOVLW  7A
0613E:  MOVLB  4
06140:  MOVWF  x3E
06142:  MOVLW  A5
06144:  MOVWF  x3D
06146:  MOVLW  46
06148:  MOVWF  x3C
0614A:  MOVLW  81
0614C:  MOVWF  x3B
0614E:  MOVLB  0
06150:  CALL   4EF8
06154:  MOVFF  03,41D
06158:  MOVFF  02,41C
0615C:  MOVFF  01,41B
06160:  MOVFF  00,41A
....................          fprintf(PC, "3V3_2_Current = %.3f mA\n\r", _3V3_2_Cur);  
06164:  MOVLW  BA
06166:  MOVWF  FF6
06168:  MOVLW  08
0616A:  MOVWF  FF7
0616C:  MOVLW  00
0616E:  MOVWF  FF8
06170:  MOVLW  10
06172:  MOVLB  4
06174:  MOVWF  x3D
06176:  MOVLB  0
06178:  CALL   20A4
0617C:  MOVLW  89
0617E:  MOVWF  FE9
06180:  MOVFF  41D,436
06184:  MOVFF  41C,435
06188:  MOVFF  41B,434
0618C:  MOVFF  41A,433
06190:  MOVLW  03
06192:  MOVLB  4
06194:  MOVWF  x37
06196:  MOVLB  0
06198:  CALL   4D56
0619C:  MOVLW  CE
0619E:  MOVWF  FF6
061A0:  MOVLW  08
061A2:  MOVWF  FF7
061A4:  MOVLW  00
061A6:  MOVWF  FF8
061A8:  MOVLW  05
061AA:  MOVLB  4
061AC:  MOVWF  x3D
061AE:  MOVLB  0
061B0:  CALL   20A4
....................          float _5V0_Cur = 0.4628*( (float) make16(RP_SAVED_DATA[13],RP_SAVED_DATA[14]) ) - 6.2077 ; 
061B4:  MOVFF  382,03
061B8:  MOVFF  383,433
061BC:  MOVFF  03,434
061C0:  MOVLB  0
061C2:  CALL   4A88
061C6:  MOVLW  1F
061C8:  MOVLB  4
061CA:  MOVWF  x43
061CC:  MOVLW  F4
061CE:  MOVWF  x42
061D0:  MOVLW  6C
061D2:  MOVWF  x41
061D4:  MOVLW  7D
061D6:  MOVWF  x40
061D8:  MOVFF  03,447
061DC:  MOVFF  02,446
061E0:  MOVFF  01,445
061E4:  MOVFF  00,444
061E8:  MOVLB  0
061EA:  CALL   4ABE
061EE:  MOVFF  03,433
061F2:  MOVFF  02,432
061F6:  MOVFF  01,431
061FA:  MOVFF  00,430
061FE:  BSF    FD8.1
06200:  MOVFF  03,43A
06204:  MOVFF  02,439
06208:  MOVFF  01,438
0620C:  MOVFF  00,437
06210:  MOVLW  7A
06212:  MOVLB  4
06214:  MOVWF  x3E
06216:  MOVLW  A5
06218:  MOVWF  x3D
0621A:  MOVLW  46
0621C:  MOVWF  x3C
0621E:  MOVLW  81
06220:  MOVWF  x3B
06222:  MOVLB  0
06224:  CALL   4EF8
06228:  MOVFF  03,421
0622C:  MOVFF  02,420
06230:  MOVFF  01,41F
06234:  MOVFF  00,41E
....................          fprintf(PC, "5V0_Current = %.3f mA\n\r", _5V0_Cur); 
06238:  MOVLW  D4
0623A:  MOVWF  FF6
0623C:  MOVLW  08
0623E:  MOVWF  FF7
06240:  MOVLW  00
06242:  MOVWF  FF8
06244:  MOVLW  0E
06246:  MOVLB  4
06248:  MOVWF  x3D
0624A:  MOVLB  0
0624C:  CALL   20A4
06250:  MOVLW  89
06252:  MOVWF  FE9
06254:  MOVFF  421,436
06258:  MOVFF  420,435
0625C:  MOVFF  41F,434
06260:  MOVFF  41E,433
06264:  MOVLW  03
06266:  MOVLB  4
06268:  MOVWF  x37
0626A:  MOVLB  0
0626C:  CALL   4D56
06270:  MOVLW  E6
06272:  MOVWF  FF6
06274:  MOVLW  08
06276:  MOVWF  FF7
06278:  MOVLW  00
0627A:  MOVWF  FF8
0627C:  MOVLW  05
0627E:  MOVLB  4
06280:  MOVWF  x3D
06282:  MOVLB  0
06284:  CALL   20A4
....................          float UN1_Cur = 0.5758*( (float) make16(RP_SAVED_DATA[15],RP_SAVED_DATA[16]) ) - 2.4207 ; 
06288:  MOVFF  384,03
0628C:  MOVFF  385,433
06290:  MOVFF  03,434
06294:  MOVLB  0
06296:  CALL   4A88
0629A:  MOVLW  A1
0629C:  MOVLB  4
0629E:  MOVWF  x43
062A0:  MOVLW  67
062A2:  MOVWF  x42
062A4:  MOVLW  13
062A6:  MOVWF  x41
062A8:  MOVLW  7E
062AA:  MOVWF  x40
062AC:  MOVFF  03,447
062B0:  MOVFF  02,446
062B4:  MOVFF  01,445
062B8:  MOVFF  00,444
062BC:  MOVLB  0
062BE:  CALL   4ABE
062C2:  MOVFF  03,433
062C6:  MOVFF  02,432
062CA:  MOVFF  01,431
062CE:  MOVFF  00,430
062D2:  BSF    FD8.1
062D4:  MOVFF  03,43A
062D8:  MOVFF  02,439
062DC:  MOVFF  01,438
062E0:  MOVFF  00,437
062E4:  MOVLW  C0
062E6:  MOVLB  4
062E8:  MOVWF  x3E
062EA:  MOVLW  EC
062EC:  MOVWF  x3D
062EE:  MOVLW  1A
062F0:  MOVWF  x3C
062F2:  MOVLW  80
062F4:  MOVWF  x3B
062F6:  MOVLB  0
062F8:  CALL   4EF8
062FC:  MOVFF  03,425
06300:  MOVFF  02,424
06304:  MOVFF  01,423
06308:  MOVFF  00,422
....................          fprintf(PC, "UN_1_Current = %.3f mA\n\r", UN1_Cur); 
0630C:  MOVLW  EC
0630E:  MOVWF  FF6
06310:  MOVLW  08
06312:  MOVWF  FF7
06314:  MOVLW  00
06316:  MOVWF  FF8
06318:  MOVLW  0F
0631A:  MOVLB  4
0631C:  MOVWF  x3D
0631E:  MOVLB  0
06320:  CALL   20A4
06324:  MOVLW  89
06326:  MOVWF  FE9
06328:  MOVFF  425,436
0632C:  MOVFF  424,435
06330:  MOVFF  423,434
06334:  MOVFF  422,433
06338:  MOVLW  03
0633A:  MOVLB  4
0633C:  MOVWF  x37
0633E:  MOVLB  0
06340:  CALL   4D56
06344:  MOVLW  FF
06346:  MOVWF  FF6
06348:  MOVLW  08
0634A:  MOVWF  FF7
0634C:  MOVLW  00
0634E:  MOVWF  FF8
06350:  MOVLW  05
06352:  MOVLB  4
06354:  MOVWF  x3D
06356:  MOVLB  0
06358:  CALL   20A4
....................          float UN2_Cur = 0.5758*( (float) make16(RP_SAVED_DATA[17],RP_SAVED_DATA[18]) ) - 2.4207 ; 
0635C:  MOVFF  386,03
06360:  MOVFF  387,433
06364:  MOVFF  03,434
06368:  MOVLB  0
0636A:  CALL   4A88
0636E:  MOVLW  A1
06370:  MOVLB  4
06372:  MOVWF  x43
06374:  MOVLW  67
06376:  MOVWF  x42
06378:  MOVLW  13
0637A:  MOVWF  x41
0637C:  MOVLW  7E
0637E:  MOVWF  x40
06380:  MOVFF  03,447
06384:  MOVFF  02,446
06388:  MOVFF  01,445
0638C:  MOVFF  00,444
06390:  MOVLB  0
06392:  CALL   4ABE
06396:  MOVFF  03,433
0639A:  MOVFF  02,432
0639E:  MOVFF  01,431
063A2:  MOVFF  00,430
063A6:  BSF    FD8.1
063A8:  MOVFF  03,43A
063AC:  MOVFF  02,439
063B0:  MOVFF  01,438
063B4:  MOVFF  00,437
063B8:  MOVLW  C0
063BA:  MOVLB  4
063BC:  MOVWF  x3E
063BE:  MOVLW  EC
063C0:  MOVWF  x3D
063C2:  MOVLW  1A
063C4:  MOVWF  x3C
063C6:  MOVLW  80
063C8:  MOVWF  x3B
063CA:  MOVLB  0
063CC:  CALL   4EF8
063D0:  MOVFF  03,429
063D4:  MOVFF  02,428
063D8:  MOVFF  01,427
063DC:  MOVFF  00,426
....................          fprintf(PC, "UN_2_Current = %.3f mA\n\r", UN2_Cur); 
063E0:  MOVLW  06
063E2:  MOVWF  FF6
063E4:  MOVLW  09
063E6:  MOVWF  FF7
063E8:  MOVLW  00
063EA:  MOVWF  FF8
063EC:  MOVLW  0F
063EE:  MOVLB  4
063F0:  MOVWF  x3D
063F2:  MOVLB  0
063F4:  CALL   20A4
063F8:  MOVLW  89
063FA:  MOVWF  FE9
063FC:  MOVFF  429,436
06400:  MOVFF  428,435
06404:  MOVFF  427,434
06408:  MOVFF  426,433
0640C:  MOVLW  03
0640E:  MOVLB  4
06410:  MOVWF  x37
06412:  MOVLB  0
06414:  CALL   4D56
06418:  MOVLW  19
0641A:  MOVWF  FF6
0641C:  MOVLW  09
0641E:  MOVWF  FF7
06420:  MOVLW  00
06422:  MOVWF  FF8
06424:  MOVLW  05
06426:  MOVLB  4
06428:  MOVWF  x3D
0642A:  MOVLB  0
0642C:  CALL   20A4
....................           
....................          fprintf(PC, "Num of MainPIC Reset = %u\n\r", RP_SAVED_DATA[19]) ; 
06430:  MOVLW  20
06432:  MOVWF  FF6
06434:  MOVLW  09
06436:  MOVWF  FF7
06438:  MOVLW  00
0643A:  MOVWF  FF8
0643C:  MOVLW  17
0643E:  MOVLB  4
06440:  MOVWF  x3D
06442:  MOVLB  0
06444:  CALL   20A4
06448:  MOVFF  388,43C
0644C:  MOVLW  1B
0644E:  MOVLB  4
06450:  MOVWF  x3D
06452:  MOVLB  0
06454:  CALL   29CE
06458:  MOVLW  0A
0645A:  BTFSS  F9E.4
0645C:  BRA    645A
0645E:  MOVWF  FAD
06460:  MOVLW  0D
06462:  BTFSS  F9E.4
06464:  BRA    6462
06466:  MOVWF  FAD
....................          fprintf(PC, "Num of ComPIC  Reset = %u\n\r", RP_SAVED_DATA[20]) ; 
06468:  MOVLW  3C
0646A:  MOVWF  FF6
0646C:  MOVLW  09
0646E:  MOVWF  FF7
06470:  MOVLW  00
06472:  MOVWF  FF8
06474:  MOVLW  17
06476:  MOVLB  4
06478:  MOVWF  x3D
0647A:  MOVLB  0
0647C:  CALL   20A4
06480:  MOVFF  389,43C
06484:  MOVLW  1B
06486:  MOVLB  4
06488:  MOVWF  x3D
0648A:  MOVLB  0
0648C:  CALL   29CE
06490:  MOVLW  0A
06492:  BTFSS  F9E.4
06494:  BRA    6492
06496:  MOVWF  FAD
06498:  MOVLW  0D
0649A:  BTFSS  F9E.4
0649C:  BRA    649A
0649E:  MOVWF  FAD
....................          fprintf(PC, "Power Line Status = %X\n\r",    RP_SAVED_DATA[21]) ; 
064A0:  MOVLW  58
064A2:  MOVWF  FF6
064A4:  MOVLW  09
064A6:  MOVWF  FF7
064A8:  MOVLW  00
064AA:  MOVWF  FF8
064AC:  MOVLW  14
064AE:  MOVLB  4
064B0:  MOVWF  x3D
064B2:  MOVLB  0
064B4:  CALL   20A4
064B8:  MOVFF  38A,43E
064BC:  MOVLW  37
064BE:  MOVLB  4
064C0:  MOVWF  x3F
064C2:  MOVLB  0
064C4:  CALL   20D6
064C8:  MOVLW  0A
064CA:  BTFSS  F9E.4
064CC:  BRA    64CA
064CE:  MOVWF  FAD
064D0:  MOVLW  0D
064D2:  BTFSS  F9E.4
064D4:  BRA    64D2
064D6:  MOVWF  FAD
....................          fprintf(PC, "Last Reset Hour   = %Lu\n\r",  make16( RP_SAVED_DATA[22], RP_SAVED_DATA[23] ) ) ; 
064D8:  MOVFF  38B,431
064DC:  MOVFF  38C,430
064E0:  MOVLW  72
064E2:  MOVWF  FF6
064E4:  MOVLW  09
064E6:  MOVWF  FF7
064E8:  MOVLW  00
064EA:  MOVWF  FF8
064EC:  MOVLW  14
064EE:  MOVLB  4
064F0:  MOVWF  x3D
064F2:  MOVLB  0
064F4:  CALL   20A4
064F8:  MOVLW  10
064FA:  MOVWF  FE9
064FC:  MOVFF  431,436
06500:  MOVFF  430,435
06504:  CALL   2CD2
06508:  MOVLW  0A
0650A:  BTFSS  F9E.4
0650C:  BRA    650A
0650E:  MOVWF  FAD
06510:  MOVLW  0D
06512:  BTFSS  F9E.4
06514:  BRA    6512
06516:  MOVWF  FAD
....................          //fprintf(PC, "Num of MainPIC Reset = %u \n\r", RP_SAVED_DATA[19]); 
....................           
....................          CLEAR_DATA_ARRAY( RP_SAVED_DATA , 40 ); 
06518:  MOVLW  03
0651A:  MOVLB  4
0651C:  MOVWF  x38
0651E:  MOVLW  75
06520:  MOVWF  x37
06522:  MOVLW  28
06524:  MOVWF  x39
06526:  MOVLB  0
06528:  CALL   2F54
....................          printline(); 
0652C:  CALL   2092
06530:  MOVLB  3
....................       } 
....................        
....................       // Printing FAB PICC Data  
....................       if( FP_FLAG == 1 ) 
06532:  DECFSZ xFA,W
06534:  GOTO   7F22
....................       { 
....................          FP_FLAG = 0 ; 
06538:  CLRF   xFA
....................          fprintf(PC, "FAB PIC Data ############\n\r"); 
0653A:  MOVLW  8C
0653C:  MOVWF  FF6
0653E:  MOVLW  09
06540:  MOVWF  FF7
06542:  MOVLW  00
06544:  MOVWF  FF8
06546:  MOVLB  0
06548:  CALL   2068
....................          float Fvar = 0; 
0654C:  MOVLB  4
0654E:  CLRF   x2D
06550:  CLRF   x2C
06552:  CLRF   x2B
06554:  CLRF   x2A
....................           
....................          Fvar = 6.6*( (float) FP_SAVED_DATA[3] )/256 ; 
06556:  CLRF   x34
06558:  MOVFF  3A2,433
0655C:  MOVLB  0
0655E:  CALL   4A88
06562:  MOVLW  33
06564:  MOVLB  4
06566:  MOVWF  x43
06568:  MOVWF  x42
0656A:  MOVLW  53
0656C:  MOVWF  x41
0656E:  MOVLW  81
06570:  MOVWF  x40
06572:  MOVFF  03,447
06576:  MOVFF  02,446
0657A:  MOVFF  01,445
0657E:  MOVFF  00,444
06582:  MOVLB  0
06584:  CALL   4ABE
06588:  MOVFF  03,433
0658C:  MOVFF  02,432
06590:  MOVFF  01,431
06594:  MOVFF  00,430
06598:  MOVFF  03,43A
0659C:  MOVFF  02,439
065A0:  MOVFF  01,438
065A4:  MOVFF  00,437
065A8:  MOVLB  4
065AA:  CLRF   x3E
065AC:  CLRF   x3D
065AE:  CLRF   x3C
065B0:  MOVLW  87
065B2:  MOVWF  x3B
065B4:  MOVLB  0
065B6:  CALL   4BB4
065BA:  MOVFF  03,42D
065BE:  MOVFF  02,42C
065C2:  MOVFF  01,42B
065C6:  MOVFF  00,42A
....................          fprintf(PC, "RAW Vol = %.3f V   ", Fvar);  
065CA:  MOVLW  A8
065CC:  MOVWF  FF6
065CE:  MOVLW  09
065D0:  MOVWF  FF7
065D2:  MOVLW  00
065D4:  MOVWF  FF8
065D6:  MOVLW  0A
065D8:  MOVLB  4
065DA:  MOVWF  x3D
065DC:  MOVLB  0
065DE:  CALL   20A4
065E2:  MOVLW  89
065E4:  MOVWF  FE9
065E6:  MOVFF  42D,436
065EA:  MOVFF  42C,435
065EE:  MOVFF  42B,434
065F2:  MOVFF  42A,433
065F6:  MOVLW  03
065F8:  MOVLB  4
065FA:  MOVWF  x37
065FC:  MOVLB  0
065FE:  CALL   4D56
06602:  MOVLW  B6
06604:  MOVWF  FF6
06606:  MOVLW  09
06608:  MOVWF  FF7
0660A:  MOVLW  00
0660C:  MOVWF  FF8
0660E:  MOVLW  05
06610:  MOVLB  4
06612:  MOVWF  x3D
06614:  MOVLB  0
06616:  CALL   20A4
....................          //RAW current 
....................          unsigned int16 ADC_DEC = make16( FP_SAVED_DATA[4], FP_SAVED_DATA[32] ); 
0661A:  MOVFF  3A3,42F
0661E:  MOVFF  3BF,42E
....................          Fvar = 4.1443*( (float)ADC_DEC ) - 1741.6;           
06622:  MOVFF  42F,434
06626:  MOVFF  42E,433
0662A:  CALL   4A88
0662E:  MOVLW  1B
06630:  MOVLB  4
06632:  MOVWF  x43
06634:  MOVLW  9E
06636:  MOVWF  x42
06638:  MOVLW  04
0663A:  MOVWF  x41
0663C:  MOVLW  81
0663E:  MOVWF  x40
06640:  MOVFF  03,447
06644:  MOVFF  02,446
06648:  MOVFF  01,445
0664C:  MOVFF  00,444
06650:  MOVLB  0
06652:  CALL   4ABE
06656:  MOVFF  03,433
0665A:  MOVFF  02,432
0665E:  MOVFF  01,431
06662:  MOVFF  00,430
06666:  BSF    FD8.1
06668:  MOVFF  03,43A
0666C:  MOVFF  02,439
06670:  MOVFF  01,438
06674:  MOVFF  00,437
06678:  MOVLW  33
0667A:  MOVLB  4
0667C:  MOVWF  x3E
0667E:  MOVLW  B3
06680:  MOVWF  x3D
06682:  MOVLW  59
06684:  MOVWF  x3C
06686:  MOVLW  89
06688:  MOVWF  x3B
0668A:  MOVLB  0
0668C:  CALL   4EF8
06690:  MOVFF  03,42D
06694:  MOVFF  02,42C
06698:  MOVFF  01,42B
0669C:  MOVFF  00,42A
....................          fprintf(PC, "Cur = %.1f mA\n\r", Fvar);  
066A0:  MOVLW  BC
066A2:  MOVWF  FF6
066A4:  MOVLW  09
066A6:  MOVWF  FF7
066A8:  MOVLW  00
066AA:  MOVWF  FF8
066AC:  MOVLW  06
066AE:  MOVLB  4
066B0:  MOVWF  x3D
066B2:  MOVLB  0
066B4:  CALL   20A4
066B8:  MOVLW  89
066BA:  MOVWF  FE9
066BC:  MOVFF  42D,436
066C0:  MOVFF  42C,435
066C4:  MOVFF  42B,434
066C8:  MOVFF  42A,433
066CC:  MOVLW  01
066CE:  MOVLB  4
066D0:  MOVWF  x37
066D2:  MOVLB  0
066D4:  CALL   4D56
066D8:  MOVLW  C6
066DA:  MOVWF  FF6
066DC:  MOVLW  09
066DE:  MOVWF  FF7
066E0:  MOVLW  00
066E2:  MOVWF  FF8
066E4:  MOVLW  05
066E6:  MOVLB  4
066E8:  MOVWF  x3D
066EA:  MOVLB  0
066EC:  CALL   20A4
....................           
....................          //battery voltage 
....................          Fvar = 6.6*( (float) FP_SAVED_DATA[5] )/256 ;           
066F0:  MOVLB  4
066F2:  CLRF   x34
066F4:  MOVFF  3A4,433
066F8:  MOVLB  0
066FA:  CALL   4A88
066FE:  MOVLW  33
06700:  MOVLB  4
06702:  MOVWF  x43
06704:  MOVWF  x42
06706:  MOVLW  53
06708:  MOVWF  x41
0670A:  MOVLW  81
0670C:  MOVWF  x40
0670E:  MOVFF  03,447
06712:  MOVFF  02,446
06716:  MOVFF  01,445
0671A:  MOVFF  00,444
0671E:  MOVLB  0
06720:  CALL   4ABE
06724:  MOVFF  03,433
06728:  MOVFF  02,432
0672C:  MOVFF  01,431
06730:  MOVFF  00,430
06734:  MOVFF  03,43A
06738:  MOVFF  02,439
0673C:  MOVFF  01,438
06740:  MOVFF  00,437
06744:  MOVLB  4
06746:  CLRF   x3E
06748:  CLRF   x3D
0674A:  CLRF   x3C
0674C:  MOVLW  87
0674E:  MOVWF  x3B
06750:  MOVLB  0
06752:  CALL   4BB4
06756:  MOVFF  03,42D
0675A:  MOVFF  02,42C
0675E:  MOVFF  01,42B
06762:  MOVFF  00,42A
....................          fprintf(PC, "BAT Vol = %.3f V   ", Fvar); 
06766:  MOVLW  CC
06768:  MOVWF  FF6
0676A:  MOVLW  09
0676C:  MOVWF  FF7
0676E:  MOVLW  00
06770:  MOVWF  FF8
06772:  MOVLW  0A
06774:  MOVLB  4
06776:  MOVWF  x3D
06778:  MOVLB  0
0677A:  CALL   20A4
0677E:  MOVLW  89
06780:  MOVWF  FE9
06782:  MOVFF  42D,436
06786:  MOVFF  42C,435
0678A:  MOVFF  42B,434
0678E:  MOVFF  42A,433
06792:  MOVLW  03
06794:  MOVLB  4
06796:  MOVWF  x37
06798:  MOVLB  0
0679A:  CALL   4D56
0679E:  MOVLW  DA
067A0:  MOVWF  FF6
067A2:  MOVLW  09
067A4:  MOVWF  FF7
067A6:  MOVLW  00
067A8:  MOVWF  FF8
067AA:  MOVLW  05
067AC:  MOVLB  4
067AE:  MOVWF  x3D
067B0:  MOVLB  0
067B2:  CALL   20A4
....................          //Battery current 
....................          ADC_DEC = make16( FP_SAVED_DATA[6], FP_SAVED_DATA[33] ); 
067B6:  MOVFF  3A5,42F
067BA:  MOVFF  3C0,42E
....................          Fvar = 3.0464*( (float)ADC_DEC ) - 6260; 
067BE:  MOVFF  42F,434
067C2:  MOVFF  42E,433
067C6:  CALL   4A88
067CA:  MOVLW  38
067CC:  MOVLB  4
067CE:  MOVWF  x43
067D0:  MOVLW  F8
067D2:  MOVWF  x42
067D4:  MOVLW  42
067D6:  MOVWF  x41
067D8:  MOVLW  80
067DA:  MOVWF  x40
067DC:  MOVFF  03,447
067E0:  MOVFF  02,446
067E4:  MOVFF  01,445
067E8:  MOVFF  00,444
067EC:  MOVLB  0
067EE:  CALL   4ABE
067F2:  MOVFF  03,433
067F6:  MOVFF  02,432
067FA:  MOVFF  01,431
067FE:  MOVFF  00,430
06802:  BSF    FD8.1
06804:  MOVFF  03,43A
06808:  MOVFF  02,439
0680C:  MOVFF  01,438
06810:  MOVFF  00,437
06814:  MOVLB  4
06816:  CLRF   x3E
06818:  MOVLW  A0
0681A:  MOVWF  x3D
0681C:  MOVLW  43
0681E:  MOVWF  x3C
06820:  MOVLW  8B
06822:  MOVWF  x3B
06824:  MOVLB  0
06826:  CALL   4EF8
0682A:  MOVFF  03,42D
0682E:  MOVFF  02,42C
06832:  MOVFF  01,42B
06836:  MOVFF  00,42A
....................          fprintf(PC, "Cur = %.1f mA   ", Fvar);  
0683A:  MOVLW  E0
0683C:  MOVWF  FF6
0683E:  MOVLW  09
06840:  MOVWF  FF7
06842:  MOVLW  00
06844:  MOVWF  FF8
06846:  MOVLW  06
06848:  MOVLB  4
0684A:  MOVWF  x3D
0684C:  MOVLB  0
0684E:  CALL   20A4
06852:  MOVLW  89
06854:  MOVWF  FE9
06856:  MOVFF  42D,436
0685A:  MOVFF  42C,435
0685E:  MOVFF  42B,434
06862:  MOVFF  42A,433
06866:  MOVLW  01
06868:  MOVLB  4
0686A:  MOVWF  x37
0686C:  MOVLB  0
0686E:  CALL   4D56
06872:  MOVLW  EA
06874:  MOVWF  FF6
06876:  MOVLW  09
06878:  MOVWF  FF7
0687A:  MOVLW  00
0687C:  MOVWF  FF8
0687E:  MOVLW  06
06880:  MOVLB  4
06882:  MOVWF  x3D
06884:  MOVLB  0
06886:  CALL   20A4
....................          //Battery temperature 
....................          fprintf(PC, "FP_SAVED_DATA[7] = %x  \n\r", FP_SAVED_DATA[7]); 
0688A:  MOVLW  F2
0688C:  MOVWF  FF6
0688E:  MOVLW  09
06890:  MOVWF  FF7
06892:  MOVLW  00
06894:  MOVWF  FF8
06896:  MOVLW  13
06898:  MOVLB  4
0689A:  MOVWF  x3D
0689C:  MOVLB  0
0689E:  CALL   20A4
068A2:  MOVFF  3A6,43E
068A6:  MOVLW  57
068A8:  MOVLB  4
068AA:  MOVWF  x3F
068AC:  MOVLB  0
068AE:  CALL   20D6
068B2:  MOVLW  07
068B4:  MOVWF  FF6
068B6:  MOVLW  0A
068B8:  MOVWF  FF7
068BA:  MOVLW  00
068BC:  MOVWF  FF8
068BE:  MOVLW  04
068C0:  MOVLB  4
068C2:  MOVWF  x3D
068C4:  MOVLB  0
068C6:  CALL   20A4
....................          Fvar = 3.3*( (float) FP_SAVED_DATA[7] )/256 ; 
068CA:  MOVLB  4
068CC:  CLRF   x34
068CE:  MOVFF  3A6,433
068D2:  MOVLB  0
068D4:  CALL   4A88
068D8:  MOVLW  33
068DA:  MOVLB  4
068DC:  MOVWF  x43
068DE:  MOVWF  x42
068E0:  MOVLW  53
068E2:  MOVWF  x41
068E4:  MOVLW  80
068E6:  MOVWF  x40
068E8:  MOVFF  03,447
068EC:  MOVFF  02,446
068F0:  MOVFF  01,445
068F4:  MOVFF  00,444
068F8:  MOVLB  0
068FA:  CALL   4ABE
068FE:  MOVFF  03,433
06902:  MOVFF  02,432
06906:  MOVFF  01,431
0690A:  MOVFF  00,430
0690E:  MOVFF  03,43A
06912:  MOVFF  02,439
06916:  MOVFF  01,438
0691A:  MOVFF  00,437
0691E:  MOVLB  4
06920:  CLRF   x3E
06922:  CLRF   x3D
06924:  CLRF   x3C
06926:  MOVLW  87
06928:  MOVWF  x3B
0692A:  MOVLB  0
0692C:  CALL   4BB4
06930:  MOVFF  03,42D
06934:  MOVFF  02,42C
06938:  MOVFF  01,42B
0693C:  MOVFF  00,42A
....................          Fvar = 0.5534*Fvar*Fvar - 37.995*Fvar + 87.329 ;                       
06940:  MOVLW  9F
06942:  MOVLB  4
06944:  MOVWF  x43
06946:  MOVLW  AB
06948:  MOVWF  x42
0694A:  MOVLW  0D
0694C:  MOVWF  x41
0694E:  MOVLW  7E
06950:  MOVWF  x40
06952:  MOVFF  42D,447
06956:  MOVFF  42C,446
0695A:  MOVFF  42B,445
0695E:  MOVFF  42A,444
06962:  MOVLB  0
06964:  CALL   4ABE
06968:  MOVFF  03,433
0696C:  MOVFF  02,432
06970:  MOVFF  01,431
06974:  MOVFF  00,430
06978:  MOVFF  03,443
0697C:  MOVFF  02,442
06980:  MOVFF  01,441
06984:  MOVFF  00,440
06988:  MOVFF  42D,447
0698C:  MOVFF  42C,446
06990:  MOVFF  42B,445
06994:  MOVFF  42A,444
06998:  CALL   4ABE
0699C:  MOVFF  03,433
069A0:  MOVFF  02,432
069A4:  MOVFF  01,431
069A8:  MOVFF  00,430
069AC:  MOVLW  E1
069AE:  MOVLB  4
069B0:  MOVWF  x43
069B2:  MOVLW  FA
069B4:  MOVWF  x42
069B6:  MOVLW  17
069B8:  MOVWF  x41
069BA:  MOVLW  84
069BC:  MOVWF  x40
069BE:  MOVFF  42D,447
069C2:  MOVFF  42C,446
069C6:  MOVFF  42B,445
069CA:  MOVFF  42A,444
069CE:  MOVLB  0
069D0:  CALL   4ABE
069D4:  BSF    FD8.1
069D6:  MOVFF  433,43A
069DA:  MOVFF  432,439
069DE:  MOVFF  431,438
069E2:  MOVFF  430,437
069E6:  MOVFF  03,43E
069EA:  MOVFF  02,43D
069EE:  MOVFF  01,43C
069F2:  MOVFF  00,43B
069F6:  CALL   4EF8
069FA:  MOVFF  03,433
069FE:  MOVFF  02,432
06A02:  MOVFF  01,431
06A06:  MOVFF  00,430
06A0A:  BCF    FD8.1
06A0C:  MOVFF  03,43A
06A10:  MOVFF  02,439
06A14:  MOVFF  01,438
06A18:  MOVFF  00,437
06A1C:  MOVLW  73
06A1E:  MOVLB  4
06A20:  MOVWF  x3E
06A22:  MOVLW  A8
06A24:  MOVWF  x3D
06A26:  MOVLW  2E
06A28:  MOVWF  x3C
06A2A:  MOVLW  85
06A2C:  MOVWF  x3B
06A2E:  MOVLB  0
06A30:  CALL   4EF8
06A34:  MOVFF  03,42D
06A38:  MOVFF  02,42C
06A3C:  MOVFF  01,42B
06A40:  MOVFF  00,42A
....................          fprintf(PC, "Temp = %.1f C  \n\r", Fvar);   
06A44:  MOVLW  0C
06A46:  MOVWF  FF6
06A48:  MOVLW  0A
06A4A:  MOVWF  FF7
06A4C:  MOVLW  00
06A4E:  MOVWF  FF8
06A50:  MOVLW  07
06A52:  MOVLB  4
06A54:  MOVWF  x3D
06A56:  MOVLB  0
06A58:  CALL   20A4
06A5C:  MOVLW  89
06A5E:  MOVWF  FE9
06A60:  MOVFF  42D,436
06A64:  MOVFF  42C,435
06A68:  MOVFF  42B,434
06A6C:  MOVFF  42A,433
06A70:  MOVLW  01
06A72:  MOVLB  4
06A74:  MOVWF  x37
06A76:  MOVLB  0
06A78:  CALL   4D56
06A7C:  MOVLW  17
06A7E:  MOVWF  FF6
06A80:  MOVLW  0A
06A82:  MOVWF  FF7
06A84:  MOVLW  00
06A86:  MOVWF  FF8
06A88:  MOVLW  06
06A8A:  MOVLB  4
06A8C:  MOVWF  x3D
06A8E:  MOVLB  0
06A90:  CALL   20A4
....................           
....................          //solar bus voltage 
....................          Fvar = 6.6*( (float) FP_SAVED_DATA[8] )/256 ;          
06A94:  MOVLB  4
06A96:  CLRF   x34
06A98:  MOVFF  3A7,433
06A9C:  MOVLB  0
06A9E:  CALL   4A88
06AA2:  MOVLW  33
06AA4:  MOVLB  4
06AA6:  MOVWF  x43
06AA8:  MOVWF  x42
06AAA:  MOVLW  53
06AAC:  MOVWF  x41
06AAE:  MOVLW  81
06AB0:  MOVWF  x40
06AB2:  MOVFF  03,447
06AB6:  MOVFF  02,446
06ABA:  MOVFF  01,445
06ABE:  MOVFF  00,444
06AC2:  MOVLB  0
06AC4:  CALL   4ABE
06AC8:  MOVFF  03,433
06ACC:  MOVFF  02,432
06AD0:  MOVFF  01,431
06AD4:  MOVFF  00,430
06AD8:  MOVFF  03,43A
06ADC:  MOVFF  02,439
06AE0:  MOVFF  01,438
06AE4:  MOVFF  00,437
06AE8:  MOVLB  4
06AEA:  CLRF   x3E
06AEC:  CLRF   x3D
06AEE:  CLRF   x3C
06AF0:  MOVLW  87
06AF2:  MOVWF  x3B
06AF4:  MOVLB  0
06AF6:  CALL   4BB4
06AFA:  MOVFF  03,42D
06AFE:  MOVFF  02,42C
06B02:  MOVFF  01,42B
06B06:  MOVFF  00,42A
....................          fprintf(PC, "S_B Vol = %.3f V   ", Fvar);  
06B0A:  MOVLW  1E
06B0C:  MOVWF  FF6
06B0E:  MOVLW  0A
06B10:  MOVWF  FF7
06B12:  MOVLW  00
06B14:  MOVWF  FF8
06B16:  MOVLW  0A
06B18:  MOVLB  4
06B1A:  MOVWF  x3D
06B1C:  MOVLB  0
06B1E:  CALL   20A4
06B22:  MOVLW  89
06B24:  MOVWF  FE9
06B26:  MOVFF  42D,436
06B2A:  MOVFF  42C,435
06B2E:  MOVFF  42B,434
06B32:  MOVFF  42A,433
06B36:  MOVLW  03
06B38:  MOVLB  4
06B3A:  MOVWF  x37
06B3C:  MOVLB  0
06B3E:  CALL   4D56
06B42:  MOVLW  2C
06B44:  MOVWF  FF6
06B46:  MOVLW  0A
06B48:  MOVWF  FF7
06B4A:  MOVLW  00
06B4C:  MOVWF  FF8
06B4E:  MOVLW  05
06B50:  MOVLB  4
06B52:  MOVWF  x3D
06B54:  MOVLB  0
06B56:  CALL   20A4
....................          //solar bus current 
....................          ADC_DEC = make16( FP_SAVED_DATA[9], FP_SAVED_DATA[34] ); 
06B5A:  MOVFF  3A8,42F
06B5E:  MOVFF  3C1,42E
....................          Fvar = 4.266*( (float)ADC_DEC ) - 1796 ; 
06B62:  MOVFF  42F,434
06B66:  MOVFF  42E,433
06B6A:  CALL   4A88
06B6E:  MOVLW  12
06B70:  MOVLB  4
06B72:  MOVWF  x43
06B74:  MOVLW  83
06B76:  MOVWF  x42
06B78:  MOVLW  08
06B7A:  MOVWF  x41
06B7C:  MOVLW  81
06B7E:  MOVWF  x40
06B80:  MOVFF  03,447
06B84:  MOVFF  02,446
06B88:  MOVFF  01,445
06B8C:  MOVFF  00,444
06B90:  MOVLB  0
06B92:  CALL   4ABE
06B96:  MOVFF  03,433
06B9A:  MOVFF  02,432
06B9E:  MOVFF  01,431
06BA2:  MOVFF  00,430
06BA6:  BSF    FD8.1
06BA8:  MOVFF  03,43A
06BAC:  MOVFF  02,439
06BB0:  MOVFF  01,438
06BB4:  MOVFF  00,437
06BB8:  MOVLB  4
06BBA:  CLRF   x3E
06BBC:  MOVLW  80
06BBE:  MOVWF  x3D
06BC0:  MOVLW  60
06BC2:  MOVWF  x3C
06BC4:  MOVLW  89
06BC6:  MOVWF  x3B
06BC8:  MOVLB  0
06BCA:  CALL   4EF8
06BCE:  MOVFF  03,42D
06BD2:  MOVFF  02,42C
06BD6:  MOVFF  01,42B
06BDA:  MOVFF  00,42A
....................          fprintf(PC, "Cur = %.1f mA\n\r", Fvar);  
06BDE:  MOVLW  32
06BE0:  MOVWF  FF6
06BE2:  MOVLW  0A
06BE4:  MOVWF  FF7
06BE6:  MOVLW  00
06BE8:  MOVWF  FF8
06BEA:  MOVLW  06
06BEC:  MOVLB  4
06BEE:  MOVWF  x3D
06BF0:  MOVLB  0
06BF2:  CALL   20A4
06BF6:  MOVLW  89
06BF8:  MOVWF  FE9
06BFA:  MOVFF  42D,436
06BFE:  MOVFF  42C,435
06C02:  MOVFF  42B,434
06C06:  MOVFF  42A,433
06C0A:  MOVLW  01
06C0C:  MOVLB  4
06C0E:  MOVWF  x37
06C10:  MOVLB  0
06C12:  CALL   4D56
06C16:  MOVLW  3C
06C18:  MOVWF  FF6
06C1A:  MOVLW  0A
06C1C:  MOVWF  FF7
06C1E:  MOVLW  00
06C20:  MOVWF  FF8
06C22:  MOVLW  05
06C24:  MOVLB  4
06C26:  MOVWF  x3D
06C28:  MOVLB  0
06C2A:  CALL   20A4
....................                   
....................          printline();        
06C2E:  CALL   2092
....................           
....................          // voltages and current and TEMP -x 
....................          V_MX = 6.25*( (float) FP_SAVED_DATA[19] )/256 ;          
06C32:  MOVLB  4
06C34:  CLRF   x34
06C36:  MOVFF  3B2,433
06C3A:  MOVLB  0
06C3C:  CALL   4A88
06C40:  MOVLB  4
06C42:  CLRF   x43
06C44:  CLRF   x42
06C46:  MOVLW  48
06C48:  MOVWF  x41
06C4A:  MOVLW  81
06C4C:  MOVWF  x40
06C4E:  MOVFF  03,447
06C52:  MOVFF  02,446
06C56:  MOVFF  01,445
06C5A:  MOVFF  00,444
06C5E:  MOVLB  0
06C60:  CALL   4ABE
06C64:  MOVFF  03,433
06C68:  MOVFF  02,432
06C6C:  MOVFF  01,431
06C70:  MOVFF  00,430
06C74:  MOVFF  03,43A
06C78:  MOVFF  02,439
06C7C:  MOVFF  01,438
06C80:  MOVFF  00,437
06C84:  MOVLB  4
06C86:  CLRF   x3E
06C88:  CLRF   x3D
06C8A:  CLRF   x3C
06C8C:  MOVLW  87
06C8E:  MOVWF  x3B
06C90:  MOVLB  0
06C92:  CALL   4BB4
06C96:  MOVFF  03,3D4
06C9A:  MOVFF  02,3D3
06C9E:  MOVFF  01,3D2
06CA2:  MOVFF  00,3D1
....................          fprintf(PC, "-X Vol = %.3f V   ", V_MX);          
06CA6:  MOVLW  42
06CA8:  MOVWF  FF6
06CAA:  MOVLW  0A
06CAC:  MOVWF  FF7
06CAE:  MOVLW  00
06CB0:  MOVWF  FF8
06CB2:  MOVLW  09
06CB4:  MOVLB  4
06CB6:  MOVWF  x3D
06CB8:  MOVLB  0
06CBA:  CALL   20A4
06CBE:  MOVLW  89
06CC0:  MOVWF  FE9
06CC2:  MOVFF  3D4,436
06CC6:  MOVFF  3D3,435
06CCA:  MOVFF  3D2,434
06CCE:  MOVFF  3D1,433
06CD2:  MOVLW  03
06CD4:  MOVLB  4
06CD6:  MOVWF  x37
06CD8:  MOVLB  0
06CDA:  CALL   4D56
06CDE:  MOVLW  4F
06CE0:  MOVWF  FF6
06CE2:  MOVLW  0A
06CE4:  MOVWF  FF7
06CE6:  MOVLW  00
06CE8:  MOVWF  FF8
06CEA:  MOVLW  05
06CEC:  MOVLB  4
06CEE:  MOVWF  x3D
06CF0:  MOVLB  0
06CF2:  CALL   20A4
....................          C_MX = 5.102*( (float)FP_SAVED_DATA[20] )  +3.367;          
06CF6:  MOVLB  4
06CF8:  CLRF   x34
06CFA:  MOVFF  3B3,433
06CFE:  MOVLB  0
06D00:  CALL   4A88
06D04:  MOVLW  96
06D06:  MOVLB  4
06D08:  MOVWF  x43
06D0A:  MOVLW  43
06D0C:  MOVWF  x42
06D0E:  MOVLW  23
06D10:  MOVWF  x41
06D12:  MOVLW  81
06D14:  MOVWF  x40
06D16:  MOVFF  03,447
06D1A:  MOVFF  02,446
06D1E:  MOVFF  01,445
06D22:  MOVFF  00,444
06D26:  MOVLB  0
06D28:  CALL   4ABE
06D2C:  MOVFF  03,433
06D30:  MOVFF  02,432
06D34:  MOVFF  01,431
06D38:  MOVFF  00,430
06D3C:  BCF    FD8.1
06D3E:  MOVFF  03,43A
06D42:  MOVFF  02,439
06D46:  MOVFF  01,438
06D4A:  MOVFF  00,437
06D4E:  MOVLW  EE
06D50:  MOVLB  4
06D52:  MOVWF  x3E
06D54:  MOVLW  7C
06D56:  MOVWF  x3D
06D58:  MOVLW  57
06D5A:  MOVWF  x3C
06D5C:  MOVLW  80
06D5E:  MOVWF  x3B
06D60:  MOVLB  0
06D62:  CALL   4EF8
06D66:  MOVFF  03,3D8
06D6A:  MOVFF  02,3D7
06D6E:  MOVFF  01,3D6
06D72:  MOVFF  00,3D5
....................          fprintf(PC, "Cur = %.1f mA   ", C_MX); 
06D76:  MOVLW  56
06D78:  MOVWF  FF6
06D7A:  MOVLW  0A
06D7C:  MOVWF  FF7
06D7E:  MOVLW  00
06D80:  MOVWF  FF8
06D82:  MOVLW  06
06D84:  MOVLB  4
06D86:  MOVWF  x3D
06D88:  MOVLB  0
06D8A:  CALL   20A4
06D8E:  MOVLW  89
06D90:  MOVWF  FE9
06D92:  MOVFF  3D8,436
06D96:  MOVFF  3D7,435
06D9A:  MOVFF  3D6,434
06D9E:  MOVFF  3D5,433
06DA2:  MOVLW  01
06DA4:  MOVLB  4
06DA6:  MOVWF  x37
06DA8:  MOVLB  0
06DAA:  CALL   4D56
06DAE:  MOVLW  60
06DB0:  MOVWF  FF6
06DB2:  MOVLW  0A
06DB4:  MOVWF  FF7
06DB6:  MOVLW  00
06DB8:  MOVWF  FF8
06DBA:  MOVLW  06
06DBC:  MOVLB  4
06DBE:  MOVWF  x3D
06DC0:  MOVLB  0
06DC2:  CALL   20A4
....................          Fvar = -181.01*(2.5*( (float) FP_SAVED_DATA[21] )/256)  +186.9;          
06DC6:  MOVLB  4
06DC8:  CLRF   x34
06DCA:  MOVFF  3B4,433
06DCE:  MOVLB  0
06DD0:  CALL   4A88
06DD4:  MOVLB  4
06DD6:  CLRF   x43
06DD8:  CLRF   x42
06DDA:  MOVLW  20
06DDC:  MOVWF  x41
06DDE:  MOVLW  80
06DE0:  MOVWF  x40
06DE2:  MOVFF  03,447
06DE6:  MOVFF  02,446
06DEA:  MOVFF  01,445
06DEE:  MOVFF  00,444
06DF2:  MOVLB  0
06DF4:  CALL   4ABE
06DF8:  MOVFF  03,433
06DFC:  MOVFF  02,432
06E00:  MOVFF  01,431
06E04:  MOVFF  00,430
06E08:  MOVFF  03,43A
06E0C:  MOVFF  02,439
06E10:  MOVFF  01,438
06E14:  MOVFF  00,437
06E18:  MOVLB  4
06E1A:  CLRF   x3E
06E1C:  CLRF   x3D
06E1E:  CLRF   x3C
06E20:  MOVLW  87
06E22:  MOVWF  x3B
06E24:  MOVLB  0
06E26:  CALL   4BB4
06E2A:  MOVLW  8F
06E2C:  MOVLB  4
06E2E:  MOVWF  x43
06E30:  MOVLW  02
06E32:  MOVWF  x42
06E34:  MOVLW  B5
06E36:  MOVWF  x41
06E38:  MOVLW  86
06E3A:  MOVWF  x40
06E3C:  MOVFF  03,447
06E40:  MOVFF  02,446
06E44:  MOVFF  01,445
06E48:  MOVFF  00,444
06E4C:  MOVLB  0
06E4E:  CALL   4ABE
06E52:  MOVFF  03,433
06E56:  MOVFF  02,432
06E5A:  MOVFF  01,431
06E5E:  MOVFF  00,430
06E62:  BCF    FD8.1
06E64:  MOVFF  03,43A
06E68:  MOVFF  02,439
06E6C:  MOVFF  01,438
06E70:  MOVFF  00,437
06E74:  MOVLW  66
06E76:  MOVLB  4
06E78:  MOVWF  x3E
06E7A:  MOVLW  E6
06E7C:  MOVWF  x3D
06E7E:  MOVLW  3A
06E80:  MOVWF  x3C
06E82:  MOVLW  86
06E84:  MOVWF  x3B
06E86:  MOVLB  0
06E88:  CALL   4EF8
06E8C:  MOVFF  03,42D
06E90:  MOVFF  02,42C
06E94:  MOVFF  01,42B
06E98:  MOVFF  00,42A
....................          fprintf(PC, "Temp = %.1f C\n\r", Fvar); 
06E9C:  MOVLW  68
06E9E:  MOVWF  FF6
06EA0:  MOVLW  0A
06EA2:  MOVWF  FF7
06EA4:  MOVLW  00
06EA6:  MOVWF  FF8
06EA8:  MOVLW  07
06EAA:  MOVLB  4
06EAC:  MOVWF  x3D
06EAE:  MOVLB  0
06EB0:  CALL   20A4
06EB4:  MOVLW  89
06EB6:  MOVWF  FE9
06EB8:  MOVFF  42D,436
06EBC:  MOVFF  42C,435
06EC0:  MOVFF  42B,434
06EC4:  MOVFF  42A,433
06EC8:  MOVLW  01
06ECA:  MOVLB  4
06ECC:  MOVWF  x37
06ECE:  MOVLB  0
06ED0:  CALL   4D56
06ED4:  MOVLW  73
06ED6:  MOVWF  FF6
06ED8:  MOVLW  0A
06EDA:  MOVWF  FF7
06EDC:  MOVLW  00
06EDE:  MOVWF  FF8
06EE0:  MOVLW  04
06EE2:  MOVLB  4
06EE4:  MOVWF  x3D
06EE6:  MOVLB  0
06EE8:  CALL   20A4
....................          SOLP_STATUS_MX = CHECK_SUNSHINE(V_MX, C_MX);  
06EEC:  MOVFF  3D4,436
06EF0:  MOVFF  3D3,435
06EF4:  MOVFF  3D2,434
06EF8:  MOVFF  3D1,433
06EFC:  MOVFF  3D8,43A
06F00:  MOVFF  3D7,439
06F04:  MOVFF  3D6,438
06F08:  MOVFF  3D5,437
06F0C:  CALL   51EC
06F10:  MOVFF  01,370
....................           
....................          // voltages and current and TEMP +X 
....................          V_PX = 6.25*( (float) FP_SAVED_DATA[10] )/256 ;          
06F14:  MOVLB  4
06F16:  CLRF   x34
06F18:  MOVFF  3A9,433
06F1C:  MOVLB  0
06F1E:  CALL   4A88
06F22:  MOVLB  4
06F24:  CLRF   x43
06F26:  CLRF   x42
06F28:  MOVLW  48
06F2A:  MOVWF  x41
06F2C:  MOVLW  81
06F2E:  MOVWF  x40
06F30:  MOVFF  03,447
06F34:  MOVFF  02,446
06F38:  MOVFF  01,445
06F3C:  MOVFF  00,444
06F40:  MOVLB  0
06F42:  CALL   4ABE
06F46:  MOVFF  03,433
06F4A:  MOVFF  02,432
06F4E:  MOVFF  01,431
06F52:  MOVFF  00,430
06F56:  MOVFF  03,43A
06F5A:  MOVFF  02,439
06F5E:  MOVFF  01,438
06F62:  MOVFF  00,437
06F66:  MOVLB  4
06F68:  CLRF   x3E
06F6A:  CLRF   x3D
06F6C:  CLRF   x3C
06F6E:  MOVLW  87
06F70:  MOVWF  x3B
06F72:  MOVLB  0
06F74:  CALL   4BB4
06F78:  MOVFF  03,3CC
06F7C:  MOVFF  02,3CB
06F80:  MOVFF  01,3CA
06F84:  MOVFF  00,3C9
....................          fprintf(PC, "+X Vol = %.3f V   ", V_PX); 
06F88:  MOVLW  78
06F8A:  MOVWF  FF6
06F8C:  MOVLW  0A
06F8E:  MOVWF  FF7
06F90:  MOVLW  00
06F92:  MOVWF  FF8
06F94:  MOVLW  09
06F96:  MOVLB  4
06F98:  MOVWF  x3D
06F9A:  MOVLB  0
06F9C:  CALL   20A4
06FA0:  MOVLW  89
06FA2:  MOVWF  FE9
06FA4:  MOVFF  3CC,436
06FA8:  MOVFF  3CB,435
06FAC:  MOVFF  3CA,434
06FB0:  MOVFF  3C9,433
06FB4:  MOVLW  03
06FB6:  MOVLB  4
06FB8:  MOVWF  x37
06FBA:  MOVLB  0
06FBC:  CALL   4D56
06FC0:  MOVLW  85
06FC2:  MOVWF  FF6
06FC4:  MOVLW  0A
06FC6:  MOVWF  FF7
06FC8:  MOVLW  00
06FCA:  MOVWF  FF8
06FCC:  MOVLW  05
06FCE:  MOVLB  4
06FD0:  MOVWF  x3D
06FD2:  MOVLB  0
06FD4:  CALL   20A4
....................          C_PX = 4.749*( (float)FP_SAVED_DATA[11] )  +4.587;          
06FD8:  MOVLB  4
06FDA:  CLRF   x34
06FDC:  MOVFF  3AA,433
06FE0:  MOVLB  0
06FE2:  CALL   4A88
06FE6:  MOVLW  CF
06FE8:  MOVLB  4
06FEA:  MOVWF  x43
06FEC:  MOVLW  F7
06FEE:  MOVWF  x42
06FF0:  MOVLW  17
06FF2:  MOVWF  x41
06FF4:  MOVLW  81
06FF6:  MOVWF  x40
06FF8:  MOVFF  03,447
06FFC:  MOVFF  02,446
07000:  MOVFF  01,445
07004:  MOVFF  00,444
07008:  MOVLB  0
0700A:  CALL   4ABE
0700E:  MOVFF  03,433
07012:  MOVFF  02,432
07016:  MOVFF  01,431
0701A:  MOVFF  00,430
0701E:  BCF    FD8.1
07020:  MOVFF  03,43A
07024:  MOVFF  02,439
07028:  MOVFF  01,438
0702C:  MOVFF  00,437
07030:  MOVLW  B4
07032:  MOVLB  4
07034:  MOVWF  x3E
07036:  MOVLW  C8
07038:  MOVWF  x3D
0703A:  MOVLW  12
0703C:  MOVWF  x3C
0703E:  MOVLW  81
07040:  MOVWF  x3B
07042:  MOVLB  0
07044:  CALL   4EF8
07048:  MOVFF  03,3D0
0704C:  MOVFF  02,3CF
07050:  MOVFF  01,3CE
07054:  MOVFF  00,3CD
....................          fprintf(PC, "Cur = %.1f mA   ", C_PX); 
07058:  MOVLW  8C
0705A:  MOVWF  FF6
0705C:  MOVLW  0A
0705E:  MOVWF  FF7
07060:  MOVLW  00
07062:  MOVWF  FF8
07064:  MOVLW  06
07066:  MOVLB  4
07068:  MOVWF  x3D
0706A:  MOVLB  0
0706C:  CALL   20A4
07070:  MOVLW  89
07072:  MOVWF  FE9
07074:  MOVFF  3D0,436
07078:  MOVFF  3CF,435
0707C:  MOVFF  3CE,434
07080:  MOVFF  3CD,433
07084:  MOVLW  01
07086:  MOVLB  4
07088:  MOVWF  x37
0708A:  MOVLB  0
0708C:  CALL   4D56
07090:  MOVLW  96
07092:  MOVWF  FF6
07094:  MOVLW  0A
07096:  MOVWF  FF7
07098:  MOVLW  00
0709A:  MOVWF  FF8
0709C:  MOVLW  06
0709E:  MOVLB  4
070A0:  MOVWF  x3D
070A2:  MOVLB  0
070A4:  CALL   20A4
....................          Fvar = -181.01*(2.5*( (float) FP_SAVED_DATA[12] )/256)  +186.9;          
070A8:  MOVLB  4
070AA:  CLRF   x34
070AC:  MOVFF  3AB,433
070B0:  MOVLB  0
070B2:  CALL   4A88
070B6:  MOVLB  4
070B8:  CLRF   x43
070BA:  CLRF   x42
070BC:  MOVLW  20
070BE:  MOVWF  x41
070C0:  MOVLW  80
070C2:  MOVWF  x40
070C4:  MOVFF  03,447
070C8:  MOVFF  02,446
070CC:  MOVFF  01,445
070D0:  MOVFF  00,444
070D4:  MOVLB  0
070D6:  CALL   4ABE
070DA:  MOVFF  03,433
070DE:  MOVFF  02,432
070E2:  MOVFF  01,431
070E6:  MOVFF  00,430
070EA:  MOVFF  03,43A
070EE:  MOVFF  02,439
070F2:  MOVFF  01,438
070F6:  MOVFF  00,437
070FA:  MOVLB  4
070FC:  CLRF   x3E
070FE:  CLRF   x3D
07100:  CLRF   x3C
07102:  MOVLW  87
07104:  MOVWF  x3B
07106:  MOVLB  0
07108:  CALL   4BB4
0710C:  MOVLW  8F
0710E:  MOVLB  4
07110:  MOVWF  x43
07112:  MOVLW  02
07114:  MOVWF  x42
07116:  MOVLW  B5
07118:  MOVWF  x41
0711A:  MOVLW  86
0711C:  MOVWF  x40
0711E:  MOVFF  03,447
07122:  MOVFF  02,446
07126:  MOVFF  01,445
0712A:  MOVFF  00,444
0712E:  MOVLB  0
07130:  CALL   4ABE
07134:  MOVFF  03,433
07138:  MOVFF  02,432
0713C:  MOVFF  01,431
07140:  MOVFF  00,430
07144:  BCF    FD8.1
07146:  MOVFF  03,43A
0714A:  MOVFF  02,439
0714E:  MOVFF  01,438
07152:  MOVFF  00,437
07156:  MOVLW  66
07158:  MOVLB  4
0715A:  MOVWF  x3E
0715C:  MOVLW  E6
0715E:  MOVWF  x3D
07160:  MOVLW  3A
07162:  MOVWF  x3C
07164:  MOVLW  86
07166:  MOVWF  x3B
07168:  MOVLB  0
0716A:  CALL   4EF8
0716E:  MOVFF  03,42D
07172:  MOVFF  02,42C
07176:  MOVFF  01,42B
0717A:  MOVFF  00,42A
....................          fprintf(PC, "Temp = %.1f C\n\r", Fvar); 
0717E:  MOVLW  9E
07180:  MOVWF  FF6
07182:  MOVLW  0A
07184:  MOVWF  FF7
07186:  MOVLW  00
07188:  MOVWF  FF8
0718A:  MOVLW  07
0718C:  MOVLB  4
0718E:  MOVWF  x3D
07190:  MOVLB  0
07192:  CALL   20A4
07196:  MOVLW  89
07198:  MOVWF  FE9
0719A:  MOVFF  42D,436
0719E:  MOVFF  42C,435
071A2:  MOVFF  42B,434
071A6:  MOVFF  42A,433
071AA:  MOVLW  01
071AC:  MOVLB  4
071AE:  MOVWF  x37
071B0:  MOVLB  0
071B2:  CALL   4D56
071B6:  MOVLW  A9
071B8:  MOVWF  FF6
071BA:  MOVLW  0A
071BC:  MOVWF  FF7
071BE:  MOVLW  00
071C0:  MOVWF  FF8
071C2:  MOVLW  04
071C4:  MOVLB  4
071C6:  MOVWF  x3D
071C8:  MOVLB  0
071CA:  CALL   20A4
....................          SOLP_STATUS_PX = CHECK_SUNSHINE(V_PX, C_PX); 
071CE:  MOVFF  3CC,436
071D2:  MOVFF  3CB,435
071D6:  MOVFF  3CA,434
071DA:  MOVFF  3C9,433
071DE:  MOVFF  3D0,43A
071E2:  MOVFF  3CF,439
071E6:  MOVFF  3CE,438
071EA:  MOVFF  3CD,437
071EE:  CALL   51EC
071F2:  MOVFF  01,36F
....................           
....................          // voltages and current and TEMP -Y 
....................          V_MY = 6.25*( (float) FP_SAVED_DATA[22] )/256 ;          
071F6:  MOVLB  4
071F8:  CLRF   x34
071FA:  MOVFF  3B5,433
071FE:  MOVLB  0
07200:  CALL   4A88
07204:  MOVLB  4
07206:  CLRF   x43
07208:  CLRF   x42
0720A:  MOVLW  48
0720C:  MOVWF  x41
0720E:  MOVLW  81
07210:  MOVWF  x40
07212:  MOVFF  03,447
07216:  MOVFF  02,446
0721A:  MOVFF  01,445
0721E:  MOVFF  00,444
07222:  MOVLB  0
07224:  CALL   4ABE
07228:  MOVFF  03,433
0722C:  MOVFF  02,432
07230:  MOVFF  01,431
07234:  MOVFF  00,430
07238:  MOVFF  03,43A
0723C:  MOVFF  02,439
07240:  MOVFF  01,438
07244:  MOVFF  00,437
07248:  MOVLB  4
0724A:  CLRF   x3E
0724C:  CLRF   x3D
0724E:  CLRF   x3C
07250:  MOVLW  87
07252:  MOVWF  x3B
07254:  MOVLB  0
07256:  CALL   4BB4
0725A:  MOVFF  03,3E4
0725E:  MOVFF  02,3E3
07262:  MOVFF  01,3E2
07266:  MOVFF  00,3E1
....................          fprintf(PC, "-Y Vol = %.3f V   ", V_MY); 
0726A:  MOVLW  AE
0726C:  MOVWF  FF6
0726E:  MOVLW  0A
07270:  MOVWF  FF7
07272:  MOVLW  00
07274:  MOVWF  FF8
07276:  MOVLW  09
07278:  MOVLB  4
0727A:  MOVWF  x3D
0727C:  MOVLB  0
0727E:  CALL   20A4
07282:  MOVLW  89
07284:  MOVWF  FE9
07286:  MOVFF  3E4,436
0728A:  MOVFF  3E3,435
0728E:  MOVFF  3E2,434
07292:  MOVFF  3E1,433
07296:  MOVLW  03
07298:  MOVLB  4
0729A:  MOVWF  x37
0729C:  MOVLB  0
0729E:  CALL   4D56
072A2:  MOVLW  BB
072A4:  MOVWF  FF6
072A6:  MOVLW  0A
072A8:  MOVWF  FF7
072AA:  MOVLW  00
072AC:  MOVWF  FF8
072AE:  MOVLW  05
072B0:  MOVLB  4
072B2:  MOVWF  x3D
072B4:  MOVLB  0
072B6:  CALL   20A4
....................          C_MY = 4.71*( (float)FP_SAVED_DATA[23] )  -1.0456;          
072BA:  MOVLB  4
072BC:  CLRF   x34
072BE:  MOVFF  3B6,433
072C2:  MOVLB  0
072C4:  CALL   4A88
072C8:  MOVLW  52
072CA:  MOVLB  4
072CC:  MOVWF  x43
072CE:  MOVLW  B8
072D0:  MOVWF  x42
072D2:  MOVLW  16
072D4:  MOVWF  x41
072D6:  MOVLW  81
072D8:  MOVWF  x40
072DA:  MOVFF  03,447
072DE:  MOVFF  02,446
072E2:  MOVFF  01,445
072E6:  MOVFF  00,444
072EA:  MOVLB  0
072EC:  CALL   4ABE
072F0:  MOVFF  03,433
072F4:  MOVFF  02,432
072F8:  MOVFF  01,431
072FC:  MOVFF  00,430
07300:  BSF    FD8.1
07302:  MOVFF  03,43A
07306:  MOVFF  02,439
0730A:  MOVFF  01,438
0730E:  MOVFF  00,437
07312:  MOVLW  39
07314:  MOVLB  4
07316:  MOVWF  x3E
07318:  MOVLW  D6
0731A:  MOVWF  x3D
0731C:  MOVLW  05
0731E:  MOVWF  x3C
07320:  MOVLW  7F
07322:  MOVWF  x3B
07324:  MOVLB  0
07326:  CALL   4EF8
0732A:  MOVFF  03,3E8
0732E:  MOVFF  02,3E7
07332:  MOVFF  01,3E6
07336:  MOVFF  00,3E5
....................          fprintf(PC, "Cur = %.1f mA   ", C_MY); 
0733A:  MOVLW  C2
0733C:  MOVWF  FF6
0733E:  MOVLW  0A
07340:  MOVWF  FF7
07342:  MOVLW  00
07344:  MOVWF  FF8
07346:  MOVLW  06
07348:  MOVLB  4
0734A:  MOVWF  x3D
0734C:  MOVLB  0
0734E:  CALL   20A4
07352:  MOVLW  89
07354:  MOVWF  FE9
07356:  MOVFF  3E8,436
0735A:  MOVFF  3E7,435
0735E:  MOVFF  3E6,434
07362:  MOVFF  3E5,433
07366:  MOVLW  01
07368:  MOVLB  4
0736A:  MOVWF  x37
0736C:  MOVLB  0
0736E:  CALL   4D56
07372:  MOVLW  CC
07374:  MOVWF  FF6
07376:  MOVLW  0A
07378:  MOVWF  FF7
0737A:  MOVLW  00
0737C:  MOVWF  FF8
0737E:  MOVLW  06
07380:  MOVLB  4
07382:  MOVWF  x3D
07384:  MOVLB  0
07386:  CALL   20A4
....................          Fvar = -181.01*(2.5*( (float) FP_SAVED_DATA[15] )/256)  +186.9;          
0738A:  MOVLB  4
0738C:  CLRF   x34
0738E:  MOVFF  3AE,433
07392:  MOVLB  0
07394:  CALL   4A88
07398:  MOVLB  4
0739A:  CLRF   x43
0739C:  CLRF   x42
0739E:  MOVLW  20
073A0:  MOVWF  x41
073A2:  MOVLW  80
073A4:  MOVWF  x40
073A6:  MOVFF  03,447
073AA:  MOVFF  02,446
073AE:  MOVFF  01,445
073B2:  MOVFF  00,444
073B6:  MOVLB  0
073B8:  CALL   4ABE
073BC:  MOVFF  03,433
073C0:  MOVFF  02,432
073C4:  MOVFF  01,431
073C8:  MOVFF  00,430
073CC:  MOVFF  03,43A
073D0:  MOVFF  02,439
073D4:  MOVFF  01,438
073D8:  MOVFF  00,437
073DC:  MOVLB  4
073DE:  CLRF   x3E
073E0:  CLRF   x3D
073E2:  CLRF   x3C
073E4:  MOVLW  87
073E6:  MOVWF  x3B
073E8:  MOVLB  0
073EA:  CALL   4BB4
073EE:  MOVLW  8F
073F0:  MOVLB  4
073F2:  MOVWF  x43
073F4:  MOVLW  02
073F6:  MOVWF  x42
073F8:  MOVLW  B5
073FA:  MOVWF  x41
073FC:  MOVLW  86
073FE:  MOVWF  x40
07400:  MOVFF  03,447
07404:  MOVFF  02,446
07408:  MOVFF  01,445
0740C:  MOVFF  00,444
07410:  MOVLB  0
07412:  CALL   4ABE
07416:  MOVFF  03,433
0741A:  MOVFF  02,432
0741E:  MOVFF  01,431
07422:  MOVFF  00,430
07426:  BCF    FD8.1
07428:  MOVFF  03,43A
0742C:  MOVFF  02,439
07430:  MOVFF  01,438
07434:  MOVFF  00,437
07438:  MOVLW  66
0743A:  MOVLB  4
0743C:  MOVWF  x3E
0743E:  MOVLW  E6
07440:  MOVWF  x3D
07442:  MOVLW  3A
07444:  MOVWF  x3C
07446:  MOVLW  86
07448:  MOVWF  x3B
0744A:  MOVLB  0
0744C:  CALL   4EF8
07450:  MOVFF  03,42D
07454:  MOVFF  02,42C
07458:  MOVFF  01,42B
0745C:  MOVFF  00,42A
....................          fprintf(PC, "Temp = %.1f C\n\r", Fvar); 
07460:  MOVLW  D4
07462:  MOVWF  FF6
07464:  MOVLW  0A
07466:  MOVWF  FF7
07468:  MOVLW  00
0746A:  MOVWF  FF8
0746C:  MOVLW  07
0746E:  MOVLB  4
07470:  MOVWF  x3D
07472:  MOVLB  0
07474:  CALL   20A4
07478:  MOVLW  89
0747A:  MOVWF  FE9
0747C:  MOVFF  42D,436
07480:  MOVFF  42C,435
07484:  MOVFF  42B,434
07488:  MOVFF  42A,433
0748C:  MOVLW  01
0748E:  MOVLB  4
07490:  MOVWF  x37
07492:  MOVLB  0
07494:  CALL   4D56
07498:  MOVLW  DF
0749A:  MOVWF  FF6
0749C:  MOVLW  0A
0749E:  MOVWF  FF7
074A0:  MOVLW  00
074A2:  MOVWF  FF8
074A4:  MOVLW  04
074A6:  MOVLB  4
074A8:  MOVWF  x3D
074AA:  MOVLB  0
074AC:  CALL   20A4
....................          SOLP_STATUS_MY = CHECK_SUNSHINE(V_MY, C_MY); 
074B0:  MOVFF  3E4,436
074B4:  MOVFF  3E3,435
074B8:  MOVFF  3E2,434
074BC:  MOVFF  3E1,433
074C0:  MOVFF  3E8,43A
074C4:  MOVFF  3E7,439
074C8:  MOVFF  3E6,438
074CC:  MOVFF  3E5,437
074D0:  CALL   51EC
074D4:  MOVFF  01,372
....................           
....................          // voltages and current and TEMP +Y 
....................          V_PY = 6.25*( (float) FP_SAVED_DATA[13] )/256 ;         
074D8:  MOVLB  4
074DA:  CLRF   x34
074DC:  MOVFF  3AC,433
074E0:  MOVLB  0
074E2:  CALL   4A88
074E6:  MOVLB  4
074E8:  CLRF   x43
074EA:  CLRF   x42
074EC:  MOVLW  48
074EE:  MOVWF  x41
074F0:  MOVLW  81
074F2:  MOVWF  x40
074F4:  MOVFF  03,447
074F8:  MOVFF  02,446
074FC:  MOVFF  01,445
07500:  MOVFF  00,444
07504:  MOVLB  0
07506:  CALL   4ABE
0750A:  MOVFF  03,433
0750E:  MOVFF  02,432
07512:  MOVFF  01,431
07516:  MOVFF  00,430
0751A:  MOVFF  03,43A
0751E:  MOVFF  02,439
07522:  MOVFF  01,438
07526:  MOVFF  00,437
0752A:  MOVLB  4
0752C:  CLRF   x3E
0752E:  CLRF   x3D
07530:  CLRF   x3C
07532:  MOVLW  87
07534:  MOVWF  x3B
07536:  MOVLB  0
07538:  CALL   4BB4
0753C:  MOVFF  03,3DC
07540:  MOVFF  02,3DB
07544:  MOVFF  01,3DA
07548:  MOVFF  00,3D9
....................          fprintf(PC, "+Y Vol = %.3f V   ", V_PY); 
0754C:  MOVLW  E4
0754E:  MOVWF  FF6
07550:  MOVLW  0A
07552:  MOVWF  FF7
07554:  MOVLW  00
07556:  MOVWF  FF8
07558:  MOVLW  09
0755A:  MOVLB  4
0755C:  MOVWF  x3D
0755E:  MOVLB  0
07560:  CALL   20A4
07564:  MOVLW  89
07566:  MOVWF  FE9
07568:  MOVFF  3DC,436
0756C:  MOVFF  3DB,435
07570:  MOVFF  3DA,434
07574:  MOVFF  3D9,433
07578:  MOVLW  03
0757A:  MOVLB  4
0757C:  MOVWF  x37
0757E:  MOVLB  0
07580:  CALL   4D56
07584:  MOVLW  F1
07586:  MOVWF  FF6
07588:  MOVLW  0A
0758A:  MOVWF  FF7
0758C:  MOVLW  00
0758E:  MOVWF  FF8
07590:  MOVLW  05
07592:  MOVLB  4
07594:  MOVWF  x3D
07596:  MOVLB  0
07598:  CALL   20A4
....................          C_PY = 4.68*( (float)FP_SAVED_DATA[14] ) - 5.044;   
0759C:  MOVLB  4
0759E:  CLRF   x34
075A0:  MOVFF  3AD,433
075A4:  MOVLB  0
075A6:  CALL   4A88
075AA:  MOVLW  8F
075AC:  MOVLB  4
075AE:  MOVWF  x43
075B0:  MOVLW  C2
075B2:  MOVWF  x42
075B4:  MOVLW  15
075B6:  MOVWF  x41
075B8:  MOVLW  81
075BA:  MOVWF  x40
075BC:  MOVFF  03,447
075C0:  MOVFF  02,446
075C4:  MOVFF  01,445
075C8:  MOVFF  00,444
075CC:  MOVLB  0
075CE:  CALL   4ABE
075D2:  MOVFF  03,433
075D6:  MOVFF  02,432
075DA:  MOVFF  01,431
075DE:  MOVFF  00,430
075E2:  BSF    FD8.1
075E4:  MOVFF  03,43A
075E8:  MOVFF  02,439
075EC:  MOVFF  01,438
075F0:  MOVFF  00,437
075F4:  MOVLW  73
075F6:  MOVLB  4
075F8:  MOVWF  x3E
075FA:  MOVLW  68
075FC:  MOVWF  x3D
075FE:  MOVLW  21
07600:  MOVWF  x3C
07602:  MOVLW  81
07604:  MOVWF  x3B
07606:  MOVLB  0
07608:  CALL   4EF8
0760C:  MOVFF  03,3E0
07610:  MOVFF  02,3DF
07614:  MOVFF  01,3DE
07618:  MOVFF  00,3DD
....................          fprintf(PC, "Cur = %.1f mA   ", C_PY); 
0761C:  MOVLW  F8
0761E:  MOVWF  FF6
07620:  MOVLW  0A
07622:  MOVWF  FF7
07624:  MOVLW  00
07626:  MOVWF  FF8
07628:  MOVLW  06
0762A:  MOVLB  4
0762C:  MOVWF  x3D
0762E:  MOVLB  0
07630:  CALL   20A4
07634:  MOVLW  89
07636:  MOVWF  FE9
07638:  MOVFF  3E0,436
0763C:  MOVFF  3DF,435
07640:  MOVFF  3DE,434
07644:  MOVFF  3DD,433
07648:  MOVLW  01
0764A:  MOVLB  4
0764C:  MOVWF  x37
0764E:  MOVLB  0
07650:  CALL   4D56
07654:  MOVLW  02
07656:  MOVWF  FF6
07658:  MOVLW  0B
0765A:  MOVWF  FF7
0765C:  MOVLW  00
0765E:  MOVWF  FF8
07660:  MOVLW  06
07662:  MOVLB  4
07664:  MOVWF  x3D
07666:  MOVLB  0
07668:  CALL   20A4
....................          Fvar = -181.01*(2.5*( (float) FP_SAVED_DATA[24] )/256)  +186.9;          
0766C:  MOVLB  4
0766E:  CLRF   x34
07670:  MOVFF  3B7,433
07674:  MOVLB  0
07676:  CALL   4A88
0767A:  MOVLB  4
0767C:  CLRF   x43
0767E:  CLRF   x42
07680:  MOVLW  20
07682:  MOVWF  x41
07684:  MOVLW  80
07686:  MOVWF  x40
07688:  MOVFF  03,447
0768C:  MOVFF  02,446
07690:  MOVFF  01,445
07694:  MOVFF  00,444
07698:  MOVLB  0
0769A:  CALL   4ABE
0769E:  MOVFF  03,433
076A2:  MOVFF  02,432
076A6:  MOVFF  01,431
076AA:  MOVFF  00,430
076AE:  MOVFF  03,43A
076B2:  MOVFF  02,439
076B6:  MOVFF  01,438
076BA:  MOVFF  00,437
076BE:  MOVLB  4
076C0:  CLRF   x3E
076C2:  CLRF   x3D
076C4:  CLRF   x3C
076C6:  MOVLW  87
076C8:  MOVWF  x3B
076CA:  MOVLB  0
076CC:  CALL   4BB4
076D0:  MOVLW  8F
076D2:  MOVLB  4
076D4:  MOVWF  x43
076D6:  MOVLW  02
076D8:  MOVWF  x42
076DA:  MOVLW  B5
076DC:  MOVWF  x41
076DE:  MOVLW  86
076E0:  MOVWF  x40
076E2:  MOVFF  03,447
076E6:  MOVFF  02,446
076EA:  MOVFF  01,445
076EE:  MOVFF  00,444
076F2:  MOVLB  0
076F4:  CALL   4ABE
076F8:  MOVFF  03,433
076FC:  MOVFF  02,432
07700:  MOVFF  01,431
07704:  MOVFF  00,430
07708:  BCF    FD8.1
0770A:  MOVFF  03,43A
0770E:  MOVFF  02,439
07712:  MOVFF  01,438
07716:  MOVFF  00,437
0771A:  MOVLW  66
0771C:  MOVLB  4
0771E:  MOVWF  x3E
07720:  MOVLW  E6
07722:  MOVWF  x3D
07724:  MOVLW  3A
07726:  MOVWF  x3C
07728:  MOVLW  86
0772A:  MOVWF  x3B
0772C:  MOVLB  0
0772E:  CALL   4EF8
07732:  MOVFF  03,42D
07736:  MOVFF  02,42C
0773A:  MOVFF  01,42B
0773E:  MOVFF  00,42A
....................          fprintf(PC, "Temp = %.1f C\n\r", Fvar); 
07742:  MOVLW  0A
07744:  MOVWF  FF6
07746:  MOVLW  0B
07748:  MOVWF  FF7
0774A:  MOVLW  00
0774C:  MOVWF  FF8
0774E:  MOVLW  07
07750:  MOVLB  4
07752:  MOVWF  x3D
07754:  MOVLB  0
07756:  CALL   20A4
0775A:  MOVLW  89
0775C:  MOVWF  FE9
0775E:  MOVFF  42D,436
07762:  MOVFF  42C,435
07766:  MOVFF  42B,434
0776A:  MOVFF  42A,433
0776E:  MOVLW  01
07770:  MOVLB  4
07772:  MOVWF  x37
07774:  MOVLB  0
07776:  CALL   4D56
0777A:  MOVLW  15
0777C:  MOVWF  FF6
0777E:  MOVLW  0B
07780:  MOVWF  FF7
07782:  MOVLW  00
07784:  MOVWF  FF8
07786:  MOVLW  04
07788:  MOVLB  4
0778A:  MOVWF  x3D
0778C:  MOVLB  0
0778E:  CALL   20A4
....................          SOLP_STATUS_PY = CHECK_SUNSHINE(V_PY, C_PY); 
07792:  MOVFF  3DC,436
07796:  MOVFF  3DB,435
0779A:  MOVFF  3DA,434
0779E:  MOVFF  3D9,433
077A2:  MOVFF  3E0,43A
077A6:  MOVFF  3DF,439
077AA:  MOVFF  3DE,438
077AE:  MOVFF  3DD,437
077B2:  CALL   51EC
077B6:  MOVFF  01,371
....................           
....................          // voltages and current and TEMP -Z 
....................          V_MZ = 6.25*( (float) FP_SAVED_DATA[25] )/256 ;          
077BA:  MOVLB  4
077BC:  CLRF   x34
077BE:  MOVFF  3B8,433
077C2:  MOVLB  0
077C4:  CALL   4A88
077C8:  MOVLB  4
077CA:  CLRF   x43
077CC:  CLRF   x42
077CE:  MOVLW  48
077D0:  MOVWF  x41
077D2:  MOVLW  81
077D4:  MOVWF  x40
077D6:  MOVFF  03,447
077DA:  MOVFF  02,446
077DE:  MOVFF  01,445
077E2:  MOVFF  00,444
077E6:  MOVLB  0
077E8:  CALL   4ABE
077EC:  MOVFF  03,433
077F0:  MOVFF  02,432
077F4:  MOVFF  01,431
077F8:  MOVFF  00,430
077FC:  MOVFF  03,43A
07800:  MOVFF  02,439
07804:  MOVFF  01,438
07808:  MOVFF  00,437
0780C:  MOVLB  4
0780E:  CLRF   x3E
07810:  CLRF   x3D
07812:  CLRF   x3C
07814:  MOVLW  87
07816:  MOVWF  x3B
07818:  MOVLB  0
0781A:  CALL   4BB4
0781E:  MOVFF  03,3F4
07822:  MOVFF  02,3F3
07826:  MOVFF  01,3F2
0782A:  MOVFF  00,3F1
....................          fprintf(PC, "-Z Vol = %.3f V   ", V_MZ);  
0782E:  MOVLW  1A
07830:  MOVWF  FF6
07832:  MOVLW  0B
07834:  MOVWF  FF7
07836:  MOVLW  00
07838:  MOVWF  FF8
0783A:  MOVLW  09
0783C:  MOVLB  4
0783E:  MOVWF  x3D
07840:  MOVLB  0
07842:  CALL   20A4
07846:  MOVLW  89
07848:  MOVWF  FE9
0784A:  MOVFF  3F4,436
0784E:  MOVFF  3F3,435
07852:  MOVFF  3F2,434
07856:  MOVFF  3F1,433
0785A:  MOVLW  03
0785C:  MOVLB  4
0785E:  MOVWF  x37
07860:  MOVLB  0
07862:  CALL   4D56
07866:  MOVLW  27
07868:  MOVWF  FF6
0786A:  MOVLW  0B
0786C:  MOVWF  FF7
0786E:  MOVLW  00
07870:  MOVWF  FF8
07872:  MOVLW  05
07874:  MOVLB  4
07876:  MOVWF  x3D
07878:  MOVLB  0
0787A:  CALL   20A4
....................          C_MZ = 4.965*( (float)FP_SAVED_DATA[26] ) +0.802;          
0787E:  MOVLB  4
07880:  CLRF   x34
07882:  MOVFF  3B9,433
07886:  MOVLB  0
07888:  CALL   4A88
0788C:  MOVLW  48
0788E:  MOVLB  4
07890:  MOVWF  x43
07892:  MOVLW  E1
07894:  MOVWF  x42
07896:  MOVLW  1E
07898:  MOVWF  x41
0789A:  MOVLW  81
0789C:  MOVWF  x40
0789E:  MOVFF  03,447
078A2:  MOVFF  02,446
078A6:  MOVFF  01,445
078AA:  MOVFF  00,444
078AE:  MOVLB  0
078B0:  CALL   4ABE
078B4:  MOVFF  03,433
078B8:  MOVFF  02,432
078BC:  MOVFF  01,431
078C0:  MOVFF  00,430
078C4:  BCF    FD8.1
078C6:  MOVFF  03,43A
078CA:  MOVFF  02,439
078CE:  MOVFF  01,438
078D2:  MOVFF  00,437
078D6:  MOVLW  DF
078D8:  MOVLB  4
078DA:  MOVWF  x3E
078DC:  MOVLW  4F
078DE:  MOVWF  x3D
078E0:  MOVLW  4D
078E2:  MOVWF  x3C
078E4:  MOVLW  7E
078E6:  MOVWF  x3B
078E8:  MOVLB  0
078EA:  CALL   4EF8
078EE:  MOVFF  03,3F8
078F2:  MOVFF  02,3F7
078F6:  MOVFF  01,3F6
078FA:  MOVFF  00,3F5
....................          fprintf(PC, "Cur = %.1f mA   ", C_MZ); 
078FE:  MOVLW  2E
07900:  MOVWF  FF6
07902:  MOVLW  0B
07904:  MOVWF  FF7
07906:  MOVLW  00
07908:  MOVWF  FF8
0790A:  MOVLW  06
0790C:  MOVLB  4
0790E:  MOVWF  x3D
07910:  MOVLB  0
07912:  CALL   20A4
07916:  MOVLW  89
07918:  MOVWF  FE9
0791A:  MOVFF  3F8,436
0791E:  MOVFF  3F7,435
07922:  MOVFF  3F6,434
07926:  MOVFF  3F5,433
0792A:  MOVLW  01
0792C:  MOVLB  4
0792E:  MOVWF  x37
07930:  MOVLB  0
07932:  CALL   4D56
07936:  MOVLW  38
07938:  MOVWF  FF6
0793A:  MOVLW  0B
0793C:  MOVWF  FF7
0793E:  MOVLW  00
07940:  MOVWF  FF8
07942:  MOVLW  06
07944:  MOVLB  4
07946:  MOVWF  x3D
07948:  MOVLB  0
0794A:  CALL   20A4
....................          Fvar = -181.01*(2.5*( (float) FP_SAVED_DATA[27] )/256)  +186.9;          
0794E:  MOVLB  4
07950:  CLRF   x34
07952:  MOVFF  3BA,433
07956:  MOVLB  0
07958:  CALL   4A88
0795C:  MOVLB  4
0795E:  CLRF   x43
07960:  CLRF   x42
07962:  MOVLW  20
07964:  MOVWF  x41
07966:  MOVLW  80
07968:  MOVWF  x40
0796A:  MOVFF  03,447
0796E:  MOVFF  02,446
07972:  MOVFF  01,445
07976:  MOVFF  00,444
0797A:  MOVLB  0
0797C:  CALL   4ABE
07980:  MOVFF  03,433
07984:  MOVFF  02,432
07988:  MOVFF  01,431
0798C:  MOVFF  00,430
07990:  MOVFF  03,43A
07994:  MOVFF  02,439
07998:  MOVFF  01,438
0799C:  MOVFF  00,437
079A0:  MOVLB  4
079A2:  CLRF   x3E
079A4:  CLRF   x3D
079A6:  CLRF   x3C
079A8:  MOVLW  87
079AA:  MOVWF  x3B
079AC:  MOVLB  0
079AE:  CALL   4BB4
079B2:  MOVLW  8F
079B4:  MOVLB  4
079B6:  MOVWF  x43
079B8:  MOVLW  02
079BA:  MOVWF  x42
079BC:  MOVLW  B5
079BE:  MOVWF  x41
079C0:  MOVLW  86
079C2:  MOVWF  x40
079C4:  MOVFF  03,447
079C8:  MOVFF  02,446
079CC:  MOVFF  01,445
079D0:  MOVFF  00,444
079D4:  MOVLB  0
079D6:  CALL   4ABE
079DA:  MOVFF  03,433
079DE:  MOVFF  02,432
079E2:  MOVFF  01,431
079E6:  MOVFF  00,430
079EA:  BCF    FD8.1
079EC:  MOVFF  03,43A
079F0:  MOVFF  02,439
079F4:  MOVFF  01,438
079F8:  MOVFF  00,437
079FC:  MOVLW  66
079FE:  MOVLB  4
07A00:  MOVWF  x3E
07A02:  MOVLW  E6
07A04:  MOVWF  x3D
07A06:  MOVLW  3A
07A08:  MOVWF  x3C
07A0A:  MOVLW  86
07A0C:  MOVWF  x3B
07A0E:  MOVLB  0
07A10:  CALL   4EF8
07A14:  MOVFF  03,42D
07A18:  MOVFF  02,42C
07A1C:  MOVFF  01,42B
07A20:  MOVFF  00,42A
....................          fprintf(PC, "Temp = %.1f C\n\r", Fvar); 
07A24:  MOVLW  40
07A26:  MOVWF  FF6
07A28:  MOVLW  0B
07A2A:  MOVWF  FF7
07A2C:  MOVLW  00
07A2E:  MOVWF  FF8
07A30:  MOVLW  07
07A32:  MOVLB  4
07A34:  MOVWF  x3D
07A36:  MOVLB  0
07A38:  CALL   20A4
07A3C:  MOVLW  89
07A3E:  MOVWF  FE9
07A40:  MOVFF  42D,436
07A44:  MOVFF  42C,435
07A48:  MOVFF  42B,434
07A4C:  MOVFF  42A,433
07A50:  MOVLW  01
07A52:  MOVLB  4
07A54:  MOVWF  x37
07A56:  MOVLB  0
07A58:  CALL   4D56
07A5C:  MOVLW  4B
07A5E:  MOVWF  FF6
07A60:  MOVLW  0B
07A62:  MOVWF  FF7
07A64:  MOVLW  00
07A66:  MOVWF  FF8
07A68:  MOVLW  04
07A6A:  MOVLB  4
07A6C:  MOVWF  x3D
07A6E:  MOVLB  0
07A70:  CALL   20A4
....................          SOLP_STATUS_MZ = CHECK_SUNSHINE(V_MZ, C_MZ); 
07A74:  MOVFF  3F4,436
07A78:  MOVFF  3F3,435
07A7C:  MOVFF  3F2,434
07A80:  MOVFF  3F1,433
07A84:  MOVFF  3F8,43A
07A88:  MOVFF  3F7,439
07A8C:  MOVFF  3F6,438
07A90:  MOVFF  3F5,437
07A94:  CALL   51EC
07A98:  MOVFF  01,374
....................           
....................          // voltages and current and TEMP +Z 
....................          V_PZ = 6.25*( (float) FP_SAVED_DATA[16] )/256 ;          
07A9C:  MOVLB  4
07A9E:  CLRF   x34
07AA0:  MOVFF  3AF,433
07AA4:  MOVLB  0
07AA6:  CALL   4A88
07AAA:  MOVLB  4
07AAC:  CLRF   x43
07AAE:  CLRF   x42
07AB0:  MOVLW  48
07AB2:  MOVWF  x41
07AB4:  MOVLW  81
07AB6:  MOVWF  x40
07AB8:  MOVFF  03,447
07ABC:  MOVFF  02,446
07AC0:  MOVFF  01,445
07AC4:  MOVFF  00,444
07AC8:  MOVLB  0
07ACA:  CALL   4ABE
07ACE:  MOVFF  03,433
07AD2:  MOVFF  02,432
07AD6:  MOVFF  01,431
07ADA:  MOVFF  00,430
07ADE:  MOVFF  03,43A
07AE2:  MOVFF  02,439
07AE6:  MOVFF  01,438
07AEA:  MOVFF  00,437
07AEE:  MOVLB  4
07AF0:  CLRF   x3E
07AF2:  CLRF   x3D
07AF4:  CLRF   x3C
07AF6:  MOVLW  87
07AF8:  MOVWF  x3B
07AFA:  MOVLB  0
07AFC:  CALL   4BB4
07B00:  MOVFF  03,3EC
07B04:  MOVFF  02,3EB
07B08:  MOVFF  01,3EA
07B0C:  MOVFF  00,3E9
....................          fprintf(PC, "+Z Vol = %.3f V   ", V_PZ); 
07B10:  MOVLW  50
07B12:  MOVWF  FF6
07B14:  MOVLW  0B
07B16:  MOVWF  FF7
07B18:  MOVLW  00
07B1A:  MOVWF  FF8
07B1C:  MOVLW  09
07B1E:  MOVLB  4
07B20:  MOVWF  x3D
07B22:  MOVLB  0
07B24:  CALL   20A4
07B28:  MOVLW  89
07B2A:  MOVWF  FE9
07B2C:  MOVFF  3EC,436
07B30:  MOVFF  3EB,435
07B34:  MOVFF  3EA,434
07B38:  MOVFF  3E9,433
07B3C:  MOVLW  03
07B3E:  MOVLB  4
07B40:  MOVWF  x37
07B42:  MOVLB  0
07B44:  CALL   4D56
07B48:  MOVLW  5D
07B4A:  MOVWF  FF6
07B4C:  MOVLW  0B
07B4E:  MOVWF  FF7
07B50:  MOVLW  00
07B52:  MOVWF  FF8
07B54:  MOVLW  05
07B56:  MOVLB  4
07B58:  MOVWF  x3D
07B5A:  MOVLB  0
07B5C:  CALL   20A4
....................          C_PZ = 4.752*( (float)FP_SAVED_DATA[17] ) -0.4066;          
07B60:  MOVLB  4
07B62:  CLRF   x34
07B64:  MOVFF  3B0,433
07B68:  MOVLB  0
07B6A:  CALL   4A88
07B6E:  MOVLW  62
07B70:  MOVLB  4
07B72:  MOVWF  x43
07B74:  MOVLW  10
07B76:  MOVWF  x42
07B78:  MOVLW  18
07B7A:  MOVWF  x41
07B7C:  MOVLW  81
07B7E:  MOVWF  x40
07B80:  MOVFF  03,447
07B84:  MOVFF  02,446
07B88:  MOVFF  01,445
07B8C:  MOVFF  00,444
07B90:  MOVLB  0
07B92:  CALL   4ABE
07B96:  MOVFF  03,433
07B9A:  MOVFF  02,432
07B9E:  MOVFF  01,431
07BA2:  MOVFF  00,430
07BA6:  BSF    FD8.1
07BA8:  MOVFF  03,43A
07BAC:  MOVFF  02,439
07BB0:  MOVFF  01,438
07BB4:  MOVFF  00,437
07BB8:  MOVLW  E0
07BBA:  MOVLB  4
07BBC:  MOVWF  x3E
07BBE:  MOVLW  2D
07BC0:  MOVWF  x3D
07BC2:  MOVLW  50
07BC4:  MOVWF  x3C
07BC6:  MOVLW  7D
07BC8:  MOVWF  x3B
07BCA:  MOVLB  0
07BCC:  CALL   4EF8
07BD0:  MOVFF  03,3F0
07BD4:  MOVFF  02,3EF
07BD8:  MOVFF  01,3EE
07BDC:  MOVFF  00,3ED
....................          fprintf(PC, "Cur = %.1f mA   ", C_PZ); 
07BE0:  MOVLW  64
07BE2:  MOVWF  FF6
07BE4:  MOVLW  0B
07BE6:  MOVWF  FF7
07BE8:  MOVLW  00
07BEA:  MOVWF  FF8
07BEC:  MOVLW  06
07BEE:  MOVLB  4
07BF0:  MOVWF  x3D
07BF2:  MOVLB  0
07BF4:  CALL   20A4
07BF8:  MOVLW  89
07BFA:  MOVWF  FE9
07BFC:  MOVFF  3F0,436
07C00:  MOVFF  3EF,435
07C04:  MOVFF  3EE,434
07C08:  MOVFF  3ED,433
07C0C:  MOVLW  01
07C0E:  MOVLB  4
07C10:  MOVWF  x37
07C12:  MOVLB  0
07C14:  CALL   4D56
07C18:  MOVLW  6E
07C1A:  MOVWF  FF6
07C1C:  MOVLW  0B
07C1E:  MOVWF  FF7
07C20:  MOVLW  00
07C22:  MOVWF  FF8
07C24:  MOVLW  06
07C26:  MOVLB  4
07C28:  MOVWF  x3D
07C2A:  MOVLB  0
07C2C:  CALL   20A4
....................          Fvar = -181.01*(2.5*( (float) FP_SAVED_DATA[18] )/256)  +186.9;          
07C30:  MOVLB  4
07C32:  CLRF   x34
07C34:  MOVFF  3B1,433
07C38:  MOVLB  0
07C3A:  CALL   4A88
07C3E:  MOVLB  4
07C40:  CLRF   x43
07C42:  CLRF   x42
07C44:  MOVLW  20
07C46:  MOVWF  x41
07C48:  MOVLW  80
07C4A:  MOVWF  x40
07C4C:  MOVFF  03,447
07C50:  MOVFF  02,446
07C54:  MOVFF  01,445
07C58:  MOVFF  00,444
07C5C:  MOVLB  0
07C5E:  CALL   4ABE
07C62:  MOVFF  03,433
07C66:  MOVFF  02,432
07C6A:  MOVFF  01,431
07C6E:  MOVFF  00,430
07C72:  MOVFF  03,43A
07C76:  MOVFF  02,439
07C7A:  MOVFF  01,438
07C7E:  MOVFF  00,437
07C82:  MOVLB  4
07C84:  CLRF   x3E
07C86:  CLRF   x3D
07C88:  CLRF   x3C
07C8A:  MOVLW  87
07C8C:  MOVWF  x3B
07C8E:  MOVLB  0
07C90:  CALL   4BB4
07C94:  MOVLW  8F
07C96:  MOVLB  4
07C98:  MOVWF  x43
07C9A:  MOVLW  02
07C9C:  MOVWF  x42
07C9E:  MOVLW  B5
07CA0:  MOVWF  x41
07CA2:  MOVLW  86
07CA4:  MOVWF  x40
07CA6:  MOVFF  03,447
07CAA:  MOVFF  02,446
07CAE:  MOVFF  01,445
07CB2:  MOVFF  00,444
07CB6:  MOVLB  0
07CB8:  CALL   4ABE
07CBC:  MOVFF  03,433
07CC0:  MOVFF  02,432
07CC4:  MOVFF  01,431
07CC8:  MOVFF  00,430
07CCC:  BCF    FD8.1
07CCE:  MOVFF  03,43A
07CD2:  MOVFF  02,439
07CD6:  MOVFF  01,438
07CDA:  MOVFF  00,437
07CDE:  MOVLW  66
07CE0:  MOVLB  4
07CE2:  MOVWF  x3E
07CE4:  MOVLW  E6
07CE6:  MOVWF  x3D
07CE8:  MOVLW  3A
07CEA:  MOVWF  x3C
07CEC:  MOVLW  86
07CEE:  MOVWF  x3B
07CF0:  MOVLB  0
07CF2:  CALL   4EF8
07CF6:  MOVFF  03,42D
07CFA:  MOVFF  02,42C
07CFE:  MOVFF  01,42B
07D02:  MOVFF  00,42A
....................          fprintf(PC, "Temp = %.1f C\n\r", Fvar); 
07D06:  MOVLW  76
07D08:  MOVWF  FF6
07D0A:  MOVLW  0B
07D0C:  MOVWF  FF7
07D0E:  MOVLW  00
07D10:  MOVWF  FF8
07D12:  MOVLW  07
07D14:  MOVLB  4
07D16:  MOVWF  x3D
07D18:  MOVLB  0
07D1A:  CALL   20A4
07D1E:  MOVLW  89
07D20:  MOVWF  FE9
07D22:  MOVFF  42D,436
07D26:  MOVFF  42C,435
07D2A:  MOVFF  42B,434
07D2E:  MOVFF  42A,433
07D32:  MOVLW  01
07D34:  MOVLB  4
07D36:  MOVWF  x37
07D38:  MOVLB  0
07D3A:  CALL   4D56
07D3E:  MOVLW  81
07D40:  MOVWF  FF6
07D42:  MOVLW  0B
07D44:  MOVWF  FF7
07D46:  MOVLW  00
07D48:  MOVWF  FF8
07D4A:  MOVLW  04
07D4C:  MOVLB  4
07D4E:  MOVWF  x3D
07D50:  MOVLB  0
07D52:  CALL   20A4
....................          SOLP_STATUS_PZ = CHECK_SUNSHINE(V_PZ, C_PZ); 
07D56:  MOVFF  3EC,436
07D5A:  MOVFF  3EB,435
07D5E:  MOVFF  3EA,434
07D62:  MOVFF  3E9,433
07D66:  MOVFF  3F0,43A
07D6A:  MOVFF  3EF,439
07D6E:  MOVFF  3EE,438
07D72:  MOVFF  3ED,437
07D76:  CALL   51EC
07D7A:  MOVFF  01,373
....................           
....................          printline(); 
07D7E:  CALL   2092
....................                    
....................          Fvar = -181.01*(2.5*( (float) FP_SAVED_DATA[28] )/256)  +178.9;       // -8 degree for callibration   
07D82:  MOVLB  4
07D84:  CLRF   x34
07D86:  MOVFF  3BB,433
07D8A:  MOVLB  0
07D8C:  CALL   4A88
07D90:  MOVLB  4
07D92:  CLRF   x43
07D94:  CLRF   x42
07D96:  MOVLW  20
07D98:  MOVWF  x41
07D9A:  MOVLW  80
07D9C:  MOVWF  x40
07D9E:  MOVFF  03,447
07DA2:  MOVFF  02,446
07DA6:  MOVFF  01,445
07DAA:  MOVFF  00,444
07DAE:  MOVLB  0
07DB0:  CALL   4ABE
07DB4:  MOVFF  03,433
07DB8:  MOVFF  02,432
07DBC:  MOVFF  01,431
07DC0:  MOVFF  00,430
07DC4:  MOVFF  03,43A
07DC8:  MOVFF  02,439
07DCC:  MOVFF  01,438
07DD0:  MOVFF  00,437
07DD4:  MOVLB  4
07DD6:  CLRF   x3E
07DD8:  CLRF   x3D
07DDA:  CLRF   x3C
07DDC:  MOVLW  87
07DDE:  MOVWF  x3B
07DE0:  MOVLB  0
07DE2:  CALL   4BB4
07DE6:  MOVLW  8F
07DE8:  MOVLB  4
07DEA:  MOVWF  x43
07DEC:  MOVLW  02
07DEE:  MOVWF  x42
07DF0:  MOVLW  B5
07DF2:  MOVWF  x41
07DF4:  MOVLW  86
07DF6:  MOVWF  x40
07DF8:  MOVFF  03,447
07DFC:  MOVFF  02,446
07E00:  MOVFF  01,445
07E04:  MOVFF  00,444
07E08:  MOVLB  0
07E0A:  CALL   4ABE
07E0E:  MOVFF  03,433
07E12:  MOVFF  02,432
07E16:  MOVFF  01,431
07E1A:  MOVFF  00,430
07E1E:  BCF    FD8.1
07E20:  MOVFF  03,43A
07E24:  MOVFF  02,439
07E28:  MOVFF  01,438
07E2C:  MOVFF  00,437
07E30:  MOVLW  66
07E32:  MOVLB  4
07E34:  MOVWF  x3E
07E36:  MOVLW  E6
07E38:  MOVWF  x3D
07E3A:  MOVLW  32
07E3C:  MOVWF  x3C
07E3E:  MOVLW  86
07E40:  MOVWF  x3B
07E42:  MOVLB  0
07E44:  CALL   4EF8
07E48:  MOVFF  03,42D
07E4C:  MOVFF  02,42C
07E50:  MOVFF  01,42B
07E54:  MOVFF  00,42A
....................          fprintf(PC, "Backplane temp = %.1f C\n\r", Fvar); 
07E58:  MOVLW  86
07E5A:  MOVWF  FF6
07E5C:  MOVLW  0B
07E5E:  MOVWF  FF7
07E60:  MOVLW  00
07E62:  MOVWF  FF8
07E64:  MOVLW  11
07E66:  MOVLB  4
07E68:  MOVWF  x3D
07E6A:  MOVLB  0
07E6C:  CALL   20A4
07E70:  MOVLW  89
07E72:  MOVWF  FE9
07E74:  MOVFF  42D,436
07E78:  MOVFF  42C,435
07E7C:  MOVFF  42B,434
07E80:  MOVFF  42A,433
07E84:  MOVLW  01
07E86:  MOVLB  4
07E88:  MOVWF  x37
07E8A:  MOVLB  0
07E8C:  CALL   4D56
07E90:  MOVLW  9B
07E92:  MOVWF  FF6
07E94:  MOVLW  0B
07E96:  MOVWF  FF7
07E98:  MOVLW  00
07E9A:  MOVWF  FF8
07E9C:  MOVLW  04
07E9E:  MOVLB  4
07EA0:  MOVWF  x3D
07EA2:  MOVLB  0
07EA4:  CALL   20A4
....................          printline(); 
07EA8:  CALL   2092
....................           
....................          if( FP_SAVED_DATA[30] == 0x01 ) fprintf(PC, "FAB Kill Switch Close\n\r"); 
07EAC:  MOVLB  3
07EAE:  DECFSZ xBD,W
07EB0:  BRA    7EC8
07EB2:  MOVLW  A0
07EB4:  MOVWF  FF6
07EB6:  MOVLW  0B
07EB8:  MOVWF  FF7
07EBA:  MOVLW  00
07EBC:  MOVWF  FF8
07EBE:  MOVLB  0
07EC0:  CALL   2068
07EC4:  BRA    7EDA
07EC6:  MOVLB  3
....................          else fprintf(PC, "FAB Kill Switch Open\n\r"); 
07EC8:  MOVLW  B8
07ECA:  MOVWF  FF6
07ECC:  MOVLW  0B
07ECE:  MOVWF  FF7
07ED0:  MOVLW  00
07ED2:  MOVWF  FF8
07ED4:  MOVLB  0
07ED6:  CALL   2068
....................          if( FP_SAVED_DATA[31] == 0x01 ) fprintf(PC, "OBC Kill Switch Close\n\r"); 
07EDA:  MOVLB  3
07EDC:  DECFSZ xBE,W
07EDE:  BRA    7EF6
07EE0:  MOVLW  D0
07EE2:  MOVWF  FF6
07EE4:  MOVLW  0B
07EE6:  MOVWF  FF7
07EE8:  MOVLW  00
07EEA:  MOVWF  FF8
07EEC:  MOVLB  0
07EEE:  CALL   2068
07EF2:  BRA    7F08
07EF4:  MOVLB  3
....................          else fprintf(PC, "OBC Kill Switch Open\n\r"); 
07EF6:  MOVLW  E8
07EF8:  MOVWF  FF6
07EFA:  MOVLW  0B
07EFC:  MOVWF  FF7
07EFE:  MOVLW  00
07F00:  MOVWF  FF8
07F02:  MOVLB  0
07F04:  CALL   2068
....................           
....................          CLEAR_DATA_ARRAY( FP_SAVED_DATA , 40 ); 
07F08:  MOVLW  03
07F0A:  MOVLB  4
07F0C:  MOVWF  x38
07F0E:  MOVLW  9F
07F10:  MOVWF  x37
07F12:  MOVLW  28
07F14:  MOVWF  x39
07F16:  MOVLB  0
07F18:  CALL   2F54
....................          printline(); 
07F1C:  CALL   2092
07F20:  MOVLB  3
....................       }  
....................        
....................       GENARATE_CW_DATA(); 
07F22:  MOVLB  0
07F24:  GOTO   5250
....................       CLEAR_DATA_ARRAY( FAB_TO_MPIC_ARRAY , 40 ); 
07F28:  MOVLW  01
07F2A:  MOVLB  4
07F2C:  MOVWF  x38
07F2E:  MOVLW  10
07F30:  MOVWF  x37
07F32:  MOVLW  28
07F34:  MOVWF  x39
07F36:  MOVLB  0
07F38:  CALL   2F54
....................       CLEAR_DATA_ARRAY( RPIC_TO_MPIC_ARRAY, 40 ); 
07F3C:  MOVLB  4
07F3E:  CLRF   x38
07F40:  MOVLW  62
07F42:  MOVWF  x37
07F44:  MOVLW  28
07F46:  MOVWF  x39
07F48:  MOVLB  0
07F4A:  CALL   2F54
07F4E:  MOVLB  1
....................    }        
07F50:  MOVLB  0
07F52:  GOTO   B212 (RETURN)
.................... } 
....................  
....................  
.................... void SET_RESET_PIC_TIME(char yr, char mn, char dy, char hr, char mi, char sc)  //0x7B 
.................... { 
....................    CLEAR_DATA_ARRAY( MPIC_TO_RPIC_ARRAY, 10 ); 
*
0AC20:  MOVLB  4
0AC22:  CLRF   x38
0AC24:  MOVLW  58
0AC26:  MOVWF  x37
0AC28:  MOVLW  0A
0AC2A:  MOVWF  x39
0AC2C:  MOVLB  0
0AC2E:  CALL   2F54
....................    MPIC_TO_RPIC_ARRAY[0] = 0xA0;   // header 
0AC32:  MOVLW  A0
0AC34:  MOVWF  58
....................    MPIC_TO_RPIC_ARRAY[1] = 0x7B;   // comand 
0AC36:  MOVLW  7B
0AC38:  MOVWF  59
....................    MPIC_TO_RPIC_ARRAY[2] = yr  ; 
0AC3A:  MOVFF  3FD,5A
....................    MPIC_TO_RPIC_ARRAY[3] = mn  ; 
0AC3E:  MOVFF  3FE,5B
....................    MPIC_TO_RPIC_ARRAY[4] = dy  ; 
0AC42:  MOVFF  3FF,5C
....................    MPIC_TO_RPIC_ARRAY[5] = hr  ; 
0AC46:  MOVFF  400,5D
....................    MPIC_TO_RPIC_ARRAY[6] = mi  ; 
0AC4A:  MOVFF  401,5E
....................    MPIC_TO_RPIC_ARRAY[7] = sc  ;    
0AC4E:  MOVFF  402,5F
....................    MPIC_TO_RPIC_ARRAY[9] = 0xA1;   // footer 
0AC52:  MOVLW  A1
0AC54:  MOVWF  x61
....................     
....................    // sending command to reset pic__________________________________________ 
....................    COMUNICATION_WITH_RST_PIC_AND_WAIT_FOR_RESPONE(3, 500); 
0AC56:  MOVLB  4
0AC58:  CLRF   x34
0AC5A:  MOVLW  03
0AC5C:  MOVWF  x33
0AC5E:  MOVLW  01
0AC60:  MOVWF  x36
0AC62:  MOVLW  F4
0AC64:  MOVWF  x35
0AC66:  CLRF   x38
0AC68:  MOVLW  C8
0AC6A:  MOVWF  x37
0AC6C:  MOVLB  0
0AC6E:  CALL   3110
....................    if( RPIC_TO_MPIC_ARRAY[1] && RPIC_TO_MPIC_ARRAY[0] == 0xA0 && RPIC_TO_MPIC_ARRAY[31] == 0xA1 ) 
0AC72:  MOVF   x63,F
0AC74:  BZ    ACAA
0AC76:  MOVF   x62,W
0AC78:  SUBLW  A0
0AC7A:  BNZ   ACAA
0AC7C:  MOVF   x81,W
0AC7E:  SUBLW  A1
0AC80:  BNZ   ACAA
....................    { 
....................       Fprintf(PC,"Reset pic time updated\n\r");  
0AC82:  MOVLW  00
0AC84:  MOVWF  FF6
0AC86:  MOVLW  0C
0AC88:  MOVWF  FF7
0AC8A:  MOVLW  00
0AC8C:  MOVWF  FF8
0AC8E:  CALL   2068
....................       printline(); 
0AC92:  CALL   2092
....................        
....................       CLEAR_DATA_ARRAY( RPIC_TO_MPIC_ARRAY, 32 ); 
0AC96:  MOVLB  4
0AC98:  CLRF   x38
0AC9A:  MOVLW  62
0AC9C:  MOVWF  x37
0AC9E:  MOVLW  20
0ACA0:  MOVWF  x39
0ACA2:  MOVLB  0
0ACA4:  CALL   2F54
....................    } 
0ACA8:  BRA    ACBA
....................     
....................    else Fprintf(PC,"Reset pic time not updated\n\r");  
0ACAA:  MOVLW  1A
0ACAC:  MOVWF  FF6
0ACAE:  MOVLW  0C
0ACB0:  MOVWF  FF7
0ACB2:  MOVLW  00
0ACB4:  MOVWF  FF8
0ACB6:  CALL   2068
0ACBA:  GOTO   ACEE (RETURN)
.................... } 
....................  
.................... void POWER_LINE_CONTROL_USING_MPIC_COMMAND_TO_RST_PIC(char _3v3_1, char _3v3_2, char _5v0, char UNR_2 ) // 0x7C 
.................... { 
....................    Fprintf(PC,"Power line control using main pic command to reset pic\n\r"); 
....................  
....................    CLEAR_DATA_ARRAY( RPIC_TO_MPIC_ARRAY, 32); 
....................    MPIC_TO_RPIC_ARRAY[0]  = 0xA0   ; 
....................    MPIC_TO_RPIC_ARRAY[1]  = 0x7C   ; 
....................    MPIC_TO_RPIC_ARRAY[2]  = _3v3_1 ; 
....................    MPIC_TO_RPIC_ARRAY[3]  = _3v3_2 ; 
....................    MPIC_TO_RPIC_ARRAY[4]  = _5v0   ; 
....................    MPIC_TO_RPIC_ARRAY[5]  = UNR_2  ; 
....................    MPIC_TO_RPIC_ARRAY[9]  = 0xA1   ;   // footer 
....................     
....................    // sending command to reset pic__________________________________________ 
....................    COMUNICATION_WITH_RST_PIC_AND_WAIT_FOR_RESPONE(3, 500); 
....................    if( RPIC_TO_MPIC_ARRAY[1] == 0x7C && RPIC_TO_MPIC_ARRAY[0] == 0xA0 && RPIC_TO_MPIC_ARRAY[31] == 0xA1 ) 
....................    {  
....................       Fprintf(PC,"Reset pic power line controlled\n\r");  
....................       printline(); 
....................       CLEAR_DATA_ARRAY( RPIC_TO_MPIC_ARRAY, 32 );  
....................    } 
....................     
....................    else Fprintf(PC,"Reset pic did not respond\n\r"); 
.................... } 
....................  
.................... // deploy antenna set -1 ______________________________________________________ 
.................... Void DEPLOY_ANTENNAS_SET_1(char dep_time, char num_of_days) 
.................... { 
....................    if(ANT_SET_1_DEP_FLAG == 1) 
*
03380:  MOVLB  1
03382:  DECFSZ x97,W
03384:  BRA    39B8
03386:  MOVF   x98,F
03388:  BTFSS  FD8.2
0338A:  BRA    39B8
....................    { 
....................       //deployment at 00:30:00 
....................       if( (MP_RTC_HOUR==0) && (MP_RTC_MIN==dep_time) && (0<=MP_RTC_SEC) && (MP_RTC_SEC<=10) ) 
0338C:  MOVF   xC0,F
0338E:  BTFSS  FD8.2
03390:  BRA    39B8
03392:  MOVLB  3
03394:  MOVF   xFD,W
03396:  MOVLB  1
03398:  SUBWF  xC1,W
0339A:  BTFSS  FD8.2
0339C:  BRA    39B8
0339E:  MOVF   xC2,W
033A0:  SUBLW  0A
033A2:  BTFSS  FD8.0
033A4:  BRA    39B8
....................       { 
....................          Fprintf(PC,"Time %u: %u: %u\n\r", MP_RTC_HOUR, MP_RTC_MIN, MP_RTC_SEC ); 
033A6:  MOVLW  B0
033A8:  MOVWF  FF6
033AA:  MOVLW  0C
033AC:  MOVWF  FF7
033AE:  MOVLW  00
033B0:  MOVWF  FF8
033B2:  MOVLW  05
033B4:  MOVLB  4
033B6:  MOVWF  x3D
033B8:  MOVLB  0
033BA:  CALL   20A4
033BE:  MOVFF  1C0,43C
033C2:  MOVLW  1B
033C4:  MOVLB  4
033C6:  MOVWF  x3D
033C8:  MOVLB  0
033CA:  CALL   29CE
033CE:  MOVLW  3A
033D0:  BTFSS  F9E.4
033D2:  BRA    33D0
033D4:  MOVWF  FAD
033D6:  MOVLW  20
033D8:  BTFSS  F9E.4
033DA:  BRA    33D8
033DC:  MOVWF  FAD
033DE:  MOVFF  1C1,43C
033E2:  MOVLW  1B
033E4:  MOVLB  4
033E6:  MOVWF  x3D
033E8:  MOVLB  0
033EA:  CALL   29CE
033EE:  MOVLW  3A
033F0:  BTFSS  F9E.4
033F2:  BRA    33F0
033F4:  MOVWF  FAD
033F6:  MOVLW  20
033F8:  BTFSS  F9E.4
033FA:  BRA    33F8
033FC:  MOVWF  FAD
033FE:  MOVFF  1C2,43C
03402:  MOVLW  1B
03404:  MOVLB  4
03406:  MOVWF  x3D
03408:  MOVLB  0
0340A:  CALL   29CE
0340E:  MOVLW  0A
03410:  BTFSS  F9E.4
03412:  BRA    3410
03414:  MOVWF  FAD
03416:  MOVLW  0D
03418:  BTFSS  F9E.4
0341A:  BRA    3418
0341C:  MOVWF  FAD
....................          _CW_STATUS_30MIN = Enabled ; 
0341E:  MOVLW  AA
03420:  MOVLB  1
03422:  MOVWF  xEB
....................          printline(); 
03424:  MOVLB  0
03426:  CALL   2092
....................          Fprintf(PC,"Antenna set-1 deployments\n\r"); 
0342A:  MOVLW  C2
0342C:  MOVWF  FF6
0342E:  MOVLW  0C
03430:  MOVWF  FF7
03432:  MOVLW  00
03434:  MOVWF  FF8
03436:  CALL   2068
....................          //reading antenna flags 
....................          unsigned int16 DF1 = READ_PROGRAM_EEPROM(0x18000); 
....................          unsigned int16 A1C = READ_PROGRAM_EEPROM(0x18002); 
....................          unsigned int16 DF2 = READ_PROGRAM_EEPROM(0x18004);  
....................          unsigned int16 A2C = READ_PROGRAM_EEPROM(0x18006); 
0343A:  MOVFF  FF2,408
0343E:  BCF    FF2.7
03440:  MOVLW  01
03442:  MOVWF  FF8
03444:  MOVLW  80
03446:  MOVWF  FF7
03448:  CLRF   FF6
0344A:  TBLRD*+
0344C:  MOVF   FF5,W
0344E:  TBLRD*
03450:  MOVFF  FF5,03
03454:  CLRF   FF8
03456:  MOVLB  4
03458:  BTFSC  x08.7
0345A:  BSF    FF2.7
0345C:  MOVLB  3
0345E:  MOVWF  xFF
03460:  MOVFF  03,400
03464:  MOVFF  FF2,408
03468:  BCF    FF2.7
0346A:  MOVLW  01
0346C:  MOVWF  FF8
0346E:  MOVLW  80
03470:  MOVWF  FF7
03472:  MOVLW  02
03474:  MOVWF  FF6
03476:  TBLRD*+
03478:  MOVF   FF5,W
0347A:  TBLRD*
0347C:  MOVFF  FF5,03
03480:  CLRF   FF8
03482:  MOVLB  4
03484:  BTFSC  x08.7
03486:  BSF    FF2.7
03488:  MOVWF  x01
0348A:  MOVFF  03,402
0348E:  MOVFF  FF2,408
03492:  BCF    FF2.7
03494:  MOVLW  01
03496:  MOVWF  FF8
03498:  MOVLW  80
0349A:  MOVWF  FF7
0349C:  MOVLW  04
0349E:  MOVWF  FF6
034A0:  TBLRD*+
034A2:  MOVF   FF5,W
034A4:  TBLRD*
034A6:  MOVFF  FF5,03
034AA:  CLRF   FF8
034AC:  BTFSC  x08.7
034AE:  BSF    FF2.7
034B0:  MOVWF  x03
034B2:  MOVFF  03,404
034B6:  MOVFF  FF2,408
034BA:  BCF    FF2.7
034BC:  MOVLW  01
034BE:  MOVWF  FF8
034C0:  MOVLW  80
034C2:  MOVWF  FF7
034C4:  MOVLW  06
034C6:  MOVWF  FF6
034C8:  TBLRD*+
034CA:  MOVF   FF5,W
034CC:  TBLRD*
034CE:  MOVFF  FF5,03
034D2:  CLRF   FF8
034D4:  BTFSC  x08.7
034D6:  BSF    FF2.7
034D8:  MOVWF  x05
034DA:  MOVFF  03,406
....................           
....................          // printing antenna related variables  
....................          Fprintf(PC,"current antenna related variable values before deployment\n\r"); 
034DE:  MOVLW  DE
034E0:  MOVWF  FF6
034E2:  MOVLW  0C
034E4:  MOVWF  FF7
034E6:  MOVLW  00
034E8:  MOVWF  FF8
034EA:  MOVLB  0
034EC:  CALL   2068
....................          Fprintf(PC,"ANT_SET_1_DEP_FLAG = %LX\n\r",DF1); 
034F0:  MOVLW  1A
034F2:  MOVWF  FF6
034F4:  MOVLW  0D
034F6:  MOVWF  FF7
034F8:  MOVLW  00
034FA:  MOVWF  FF8
034FC:  MOVLW  15
034FE:  MOVLB  4
03500:  MOVWF  x3D
03502:  MOVLB  0
03504:  CALL   20A4
03508:  MOVFF  400,43E
0350C:  MOVLW  37
0350E:  MOVLB  4
03510:  MOVWF  x3F
03512:  MOVLB  0
03514:  CALL   20D6
03518:  MOVFF  3FF,43E
0351C:  MOVLW  37
0351E:  MOVLB  4
03520:  MOVWF  x3F
03522:  MOVLB  0
03524:  CALL   20D6
03528:  MOVLW  0A
0352A:  BTFSS  F9E.4
0352C:  BRA    352A
0352E:  MOVWF  FAD
03530:  MOVLW  0D
03532:  BTFSS  F9E.4
03534:  BRA    3532
03536:  MOVWF  FAD
....................          Fprintf(PC,"ANTSET_1_COUNT = %LX\n\r",A1C); 
03538:  MOVLW  36
0353A:  MOVWF  FF6
0353C:  MOVLW  0D
0353E:  MOVWF  FF7
03540:  MOVLW  00
03542:  MOVWF  FF8
03544:  MOVLW  11
03546:  MOVLB  4
03548:  MOVWF  x3D
0354A:  MOVLB  0
0354C:  CALL   20A4
03550:  MOVFF  402,43E
03554:  MOVLW  37
03556:  MOVLB  4
03558:  MOVWF  x3F
0355A:  MOVLB  0
0355C:  CALL   20D6
03560:  MOVFF  401,43E
03564:  MOVLW  37
03566:  MOVLB  4
03568:  MOVWF  x3F
0356A:  MOVLB  0
0356C:  CALL   20D6
03570:  MOVLW  0A
03572:  BTFSS  F9E.4
03574:  BRA    3572
03576:  MOVWF  FAD
03578:  MOVLW  0D
0357A:  BTFSS  F9E.4
0357C:  BRA    357A
0357E:  MOVWF  FAD
....................          Fprintf(PC,"ANT_SET_2_DEP_FLAG = %LX\n\r",DF2); 
03580:  MOVLW  4E
03582:  MOVWF  FF6
03584:  MOVLW  0D
03586:  MOVWF  FF7
03588:  MOVLW  00
0358A:  MOVWF  FF8
0358C:  MOVLW  15
0358E:  MOVLB  4
03590:  MOVWF  x3D
03592:  MOVLB  0
03594:  CALL   20A4
03598:  MOVFF  404,43E
0359C:  MOVLW  37
0359E:  MOVLB  4
035A0:  MOVWF  x3F
035A2:  MOVLB  0
035A4:  CALL   20D6
035A8:  MOVFF  403,43E
035AC:  MOVLW  37
035AE:  MOVLB  4
035B0:  MOVWF  x3F
035B2:  MOVLB  0
035B4:  CALL   20D6
035B8:  MOVLW  0A
035BA:  BTFSS  F9E.4
035BC:  BRA    35BA
035BE:  MOVWF  FAD
035C0:  MOVLW  0D
035C2:  BTFSS  F9E.4
035C4:  BRA    35C2
035C6:  MOVWF  FAD
....................          Fprintf(PC,"ANTSET_2_COUNT = %LX\n\r",A2C); 
035C8:  MOVLW  6A
035CA:  MOVWF  FF6
035CC:  MOVLW  0D
035CE:  MOVWF  FF7
035D0:  MOVLW  00
035D2:  MOVWF  FF8
035D4:  MOVLW  11
035D6:  MOVLB  4
035D8:  MOVWF  x3D
035DA:  MOVLB  0
035DC:  CALL   20A4
035E0:  MOVFF  406,43E
035E4:  MOVLW  37
035E6:  MOVLB  4
035E8:  MOVWF  x3F
035EA:  MOVLB  0
035EC:  CALL   20D6
035F0:  MOVFF  405,43E
035F4:  MOVLW  37
035F6:  MOVLB  4
035F8:  MOVWF  x3F
035FA:  MOVLB  0
035FC:  CALL   20D6
03600:  MOVLW  0A
03602:  BTFSS  F9E.4
03604:  BRA    3602
03606:  MOVWF  FAD
03608:  MOVLW  0D
0360A:  BTFSS  F9E.4
0360C:  BRA    360A
0360E:  MOVWF  FAD
....................           
....................          if(A1C < num_of_days) 
03610:  MOVLB  4
03612:  MOVF   x02,F
03614:  BTFSS  FD8.2
03616:  BRA    39AE
03618:  MOVLB  3
0361A:  MOVF   xFE,W
0361C:  MOVLB  4
0361E:  SUBWF  x01,W
03620:  BTFSC  FD8.0
03622:  BRA    39AE
....................          {   
....................             CLEAR_DATA_ARRAY( MPIC_TO_RPIC_ARRAY, 10 ); 
03624:  CLRF   x38
03626:  MOVLW  58
03628:  MOVWF  x37
0362A:  MOVLW  0A
0362C:  MOVWF  x39
0362E:  MOVLB  0
03630:  RCALL  2F54
....................             MPIC_TO_RPIC_ARRAY[0] = 0xA0;   // header 
03632:  MOVLW  A0
03634:  MOVWF  58
....................             MPIC_TO_RPIC_ARRAY[1] = 0xDA;   // comand 
03636:  MOVLW  DA
03638:  MOVWF  59
....................             MPIC_TO_RPIC_ARRAY[9] = 0xA1;   // footer 
0363A:  MOVLW  A1
0363C:  MOVWF  x61
....................        
....................             // sending command to reset pic wait for respone we will try 10 times 
....................             // until reset pic reply  
....................             COMUNICATION_WITH_RST_PIC_AND_WAIT_FOR_RESPONE(5, 5000); 
0363E:  MOVLB  4
03640:  CLRF   x34
03642:  MOVLW  05
03644:  MOVWF  x33
03646:  MOVLW  13
03648:  MOVWF  x36
0364A:  MOVLW  88
0364C:  MOVWF  x35
0364E:  CLRF   x38
03650:  MOVLW  C8
03652:  MOVWF  x37
03654:  MOVLB  0
03656:  RCALL  3110
....................              
.................... //!            if( MPIC_TO_RPIC_ARRAY[1] == 0xDA && RPIC_TO_MPIC_ARRAY[0] == 0xA0 && RPIC_TO_MPIC_ARRAY[31] == 0xA1 ) 
.................... //!            { 
....................                // then we start antena deployment  
....................                Fprintf(PC,"ResetPIC responded correctly\n\r"); 
03658:  MOVLW  82
0365A:  MOVWF  FF6
0365C:  MOVLW  0D
0365E:  MOVWF  FF7
03660:  MOVLW  00
03662:  MOVWF  FF8
03664:  CALL   2068
....................                Fprintf(PC,"Antenna set-1 deployment started\n\r");  
03668:  MOVLW  A2
0366A:  MOVWF  FF6
0366C:  MOVLW  0D
0366E:  MOVWF  FF7
03670:  MOVLW  00
03672:  MOVWF  FF8
03674:  CALL   2068
....................                 
....................                OUTPUT_HIGH(PIN_B0); 
03678:  BCF    F93.0
0367A:  BSF    F8A.0
....................                for( int i = 0; i<25; i++) 
0367C:  MOVLB  4
0367E:  CLRF   x07
03680:  MOVF   x07,W
03682:  SUBLW  18
03684:  BNC   36E2
....................                { 
....................                   Delay_ms(1000); 
03686:  MOVLW  04
03688:  MOVWF  x08
0368A:  MOVLW  FA
0368C:  MOVWF  x3E
0368E:  MOVLB  0
03690:  CALL   1DA0
03694:  MOVLB  4
03696:  DECFSZ x08,F
03698:  BRA    368A
....................                   Fprintf(PC,"Counting deployment time %02d Sec\n\r", i+1); 
0369A:  MOVLW  01
0369C:  ADDWF  x07,W
0369E:  MOVWF  x08
036A0:  MOVLW  C6
036A2:  MOVWF  FF6
036A4:  MOVLW  0D
036A6:  MOVWF  FF7
036A8:  MOVLW  00
036AA:  MOVWF  FF8
036AC:  MOVLW  19
036AE:  MOVWF  x3D
036B0:  MOVLB  0
036B2:  CALL   20A4
036B6:  MOVFF  408,409
036BA:  MOVLW  01
036BC:  MOVLB  4
036BE:  MOVWF  x0A
036C0:  MOVLB  0
036C2:  RCALL  3242
036C4:  MOVLW  E3
036C6:  MOVWF  FF6
036C8:  MOVLW  0D
036CA:  MOVWF  FF7
036CC:  MOVLW  00
036CE:  MOVWF  FF8
036D0:  MOVLW  06
036D2:  MOVLB  4
036D4:  MOVWF  x3D
036D6:  MOVLB  0
036D8:  CALL   20A4
036DC:  MOVLB  4
036DE:  INCF   x07,F
036E0:  BRA    3680
....................                } 
....................                OUTPUT_LOW(PIN_B0); 
036E2:  BCF    F93.0
036E4:  BCF    F8A.0
....................                 
....................                Fprintf(PC,"Antenna-1 deployment finished\n\r");  
036E6:  MOVLW  EA
036E8:  MOVWF  FF6
036EA:  MOVLW  0D
036EC:  MOVWF  FF7
036EE:  MOVLW  00
036F0:  MOVWF  FF8
036F2:  MOVLB  0
036F4:  CALL   2068
....................              
....................                // now we are updating antenna related varibles to memory EEPROM 
....................                A1C++; // we already try one time deployment, since we have to increase antenna 1 counter in memory 
036F8:  MOVLB  4
036FA:  INCF   x01,F
036FC:  BTFSC  FD8.2
036FE:  INCF   x02,F
....................                 
....................                if( A1C >=5) DF1 = 0; // antenna 1 counter reach this value antenna set 1 is not in deplyment mode 
03700:  MOVF   x02,F
03702:  BNZ   370A
03704:  MOVF   x01,W
03706:  SUBLW  04
03708:  BC    3712
0370A:  CLRF   x00
0370C:  MOVLB  3
0370E:  CLRF   xFF
03710:  MOVLB  4
....................                 
....................                // writing antenna related variable to EEPROM 
....................                ERASE_PROGRAM_EEPROM(0x18000); 
03712:  BSF    FD0.6
03714:  MOVLW  01
03716:  MOVWF  FF8
03718:  MOVLW  80
0371A:  MOVWF  FF7
0371C:  CLRF   FF6
0371E:  BSF    F7F.4
03720:  MOVLB  0
03722:  RCALL  3304
03724:  CLRF   FF8
....................                WRITE_PROGRAM_EEPROM(0x18000,DF1); 
03726:  BSF    FD0.6
03728:  MOVLW  01
0372A:  MOVWF  FF8
0372C:  MOVLW  80
0372E:  MOVWF  FF7
03730:  CLRF   FF6
03732:  RCALL  3322
03734:  CLRF   FF6
03736:  MOVFF  3FF,FF5
0373A:  TBLWT*+
0373C:  MOVFF  400,FF5
03740:  TBLWT*
03742:  RCALL  3304
03744:  CLRF   FF8
03746:  CLRF   FF8
....................                WRITE_PROGRAM_EEPROM(0x18002,A1C); 
03748:  BSF    FD0.6
0374A:  MOVLW  01
0374C:  MOVWF  FF8
0374E:  MOVLW  80
03750:  MOVWF  FF7
03752:  MOVLW  02
03754:  MOVWF  FF6
03756:  RCALL  3322
03758:  MOVLW  02
0375A:  MOVWF  FF6
0375C:  MOVFF  401,FF5
03760:  TBLWT*+
03762:  MOVFF  402,FF5
03766:  TBLWT*
03768:  RCALL  3304
0376A:  CLRF   FF8
0376C:  CLRF   FF8
....................                WRITE_PROGRAM_EEPROM(0x18004,DF2); 
0376E:  BSF    FD0.6
03770:  MOVLW  01
03772:  MOVWF  FF8
03774:  MOVLW  80
03776:  MOVWF  FF7
03778:  MOVLW  04
0377A:  MOVWF  FF6
0377C:  RCALL  3322
0377E:  MOVLW  04
03780:  MOVWF  FF6
03782:  MOVFF  403,FF5
03786:  TBLWT*+
03788:  MOVFF  404,FF5
0378C:  TBLWT*
0378E:  RCALL  3304
03790:  CLRF   FF8
03792:  CLRF   FF8
....................                WRITE_PROGRAM_EEPROM(0x18006,A2C); 
03794:  BSF    FD0.6
03796:  MOVLW  01
03798:  MOVWF  FF8
0379A:  MOVLW  80
0379C:  MOVWF  FF7
0379E:  MOVLW  06
037A0:  MOVWF  FF6
037A2:  RCALL  3322
037A4:  MOVLW  06
037A6:  MOVWF  FF6
037A8:  MOVFF  405,FF5
037AC:  TBLWT*+
037AE:  MOVFF  406,FF5
037B2:  TBLWT*
037B4:  RCALL  3304
037B6:  CLRF   FF8
037B8:  CLRF   FF8
....................                 
....................                ANT_SET_1_DEP_FLAG = READ_PROGRAM_EEPROM(0x18000); 
037BA:  MOVFF  FF2,408
037BE:  BCF    FF2.7
037C0:  MOVLW  01
037C2:  MOVWF  FF8
037C4:  MOVLW  80
037C6:  MOVWF  FF7
037C8:  CLRF   FF6
037CA:  TBLRD*+
037CC:  MOVF   FF5,W
037CE:  TBLRD*
037D0:  MOVFF  FF5,03
037D4:  CLRF   FF8
037D6:  MOVLB  4
037D8:  BTFSC  x08.7
037DA:  BSF    FF2.7
037DC:  MOVLB  1
037DE:  MOVWF  x97
037E0:  MOVFF  03,198
....................                ANTSET_1_COUNT     = READ_PROGRAM_EEPROM(0x18002); 
037E4:  MOVFF  FF2,408
037E8:  BCF    FF2.7
037EA:  MOVLW  01
037EC:  MOVWF  FF8
037EE:  MOVLW  80
037F0:  MOVWF  FF7
037F2:  MOVLW  02
037F4:  MOVWF  FF6
037F6:  TBLRD*+
037F8:  MOVF   FF5,W
037FA:  TBLRD*
037FC:  MOVFF  FF5,03
03800:  CLRF   FF8
03802:  MOVLB  4
03804:  BTFSC  x08.7
03806:  BSF    FF2.7
03808:  MOVLB  1
0380A:  MOVWF  x9B
0380C:  MOVFF  03,19C
....................                ANT_SET_2_DEP_FLAG = READ_PROGRAM_EEPROM(0x18004);  
03810:  MOVFF  FF2,408
03814:  BCF    FF2.7
03816:  MOVLW  01
03818:  MOVWF  FF8
0381A:  MOVLW  80
0381C:  MOVWF  FF7
0381E:  MOVLW  04
03820:  MOVWF  FF6
03822:  TBLRD*+
03824:  MOVF   FF5,W
03826:  TBLRD*
03828:  MOVFF  FF5,03
0382C:  CLRF   FF8
0382E:  MOVLB  4
03830:  BTFSC  x08.7
03832:  BSF    FF2.7
03834:  MOVLB  1
03836:  MOVWF  x99
03838:  MOVFF  03,19A
....................                ANTSET_2_COUNT     = READ_PROGRAM_EEPROM(0x18006); 
0383C:  MOVFF  FF2,408
03840:  BCF    FF2.7
03842:  MOVLW  01
03844:  MOVWF  FF8
03846:  MOVLW  80
03848:  MOVWF  FF7
0384A:  MOVLW  06
0384C:  MOVWF  FF6
0384E:  TBLRD*+
03850:  MOVF   FF5,W
03852:  TBLRD*
03854:  MOVFF  FF5,03
03858:  CLRF   FF8
0385A:  MOVLB  4
0385C:  BTFSC  x08.7
0385E:  BSF    FF2.7
03860:  MOVLB  1
03862:  MOVWF  x9D
03864:  MOVFF  03,19E
....................                 
....................                 // printing antenna related variables  
....................                Fprintf(PC,"current antenna related variable values after deployment\n\r"); 
03868:  MOVLW  0A
0386A:  MOVWF  FF6
0386C:  MOVLW  0E
0386E:  MOVWF  FF7
03870:  MOVLW  00
03872:  MOVWF  FF8
03874:  MOVLB  0
03876:  CALL   2068
....................                Fprintf(PC,"ANT_SET_1_DEP_FLAG = %LX\n\r",ANT_SET_1_DEP_FLAG); 
0387A:  MOVLW  46
0387C:  MOVWF  FF6
0387E:  MOVLW  0E
03880:  MOVWF  FF7
03882:  MOVLW  00
03884:  MOVWF  FF8
03886:  MOVLW  15
03888:  MOVLB  4
0388A:  MOVWF  x3D
0388C:  MOVLB  0
0388E:  CALL   20A4
03892:  MOVFF  198,43E
03896:  MOVLW  37
03898:  MOVLB  4
0389A:  MOVWF  x3F
0389C:  MOVLB  0
0389E:  CALL   20D6
038A2:  MOVFF  197,43E
038A6:  MOVLW  37
038A8:  MOVLB  4
038AA:  MOVWF  x3F
038AC:  MOVLB  0
038AE:  CALL   20D6
038B2:  MOVLW  0A
038B4:  BTFSS  F9E.4
038B6:  BRA    38B4
038B8:  MOVWF  FAD
038BA:  MOVLW  0D
038BC:  BTFSS  F9E.4
038BE:  BRA    38BC
038C0:  MOVWF  FAD
....................                Fprintf(PC,"ANTSET_1_COUNT = %LX\n\r",ANTSET_1_COUNT); 
038C2:  MOVLW  62
038C4:  MOVWF  FF6
038C6:  MOVLW  0E
038C8:  MOVWF  FF7
038CA:  MOVLW  00
038CC:  MOVWF  FF8
038CE:  MOVLW  11
038D0:  MOVLB  4
038D2:  MOVWF  x3D
038D4:  MOVLB  0
038D6:  CALL   20A4
038DA:  MOVFF  19C,43E
038DE:  MOVLW  37
038E0:  MOVLB  4
038E2:  MOVWF  x3F
038E4:  MOVLB  0
038E6:  CALL   20D6
038EA:  MOVFF  19B,43E
038EE:  MOVLW  37
038F0:  MOVLB  4
038F2:  MOVWF  x3F
038F4:  MOVLB  0
038F6:  CALL   20D6
038FA:  MOVLW  0A
038FC:  BTFSS  F9E.4
038FE:  BRA    38FC
03900:  MOVWF  FAD
03902:  MOVLW  0D
03904:  BTFSS  F9E.4
03906:  BRA    3904
03908:  MOVWF  FAD
....................                Fprintf(PC,"ANT_SET_2_DEP_FLAG = %LX\n\r",DF2); 
0390A:  MOVLW  7A
0390C:  MOVWF  FF6
0390E:  MOVLW  0E
03910:  MOVWF  FF7
03912:  MOVLW  00
03914:  MOVWF  FF8
03916:  MOVLW  15
03918:  MOVLB  4
0391A:  MOVWF  x3D
0391C:  MOVLB  0
0391E:  CALL   20A4
03922:  MOVFF  404,43E
03926:  MOVLW  37
03928:  MOVLB  4
0392A:  MOVWF  x3F
0392C:  MOVLB  0
0392E:  CALL   20D6
03932:  MOVFF  403,43E
03936:  MOVLW  37
03938:  MOVLB  4
0393A:  MOVWF  x3F
0393C:  MOVLB  0
0393E:  CALL   20D6
03942:  MOVLW  0A
03944:  BTFSS  F9E.4
03946:  BRA    3944
03948:  MOVWF  FAD
0394A:  MOVLW  0D
0394C:  BTFSS  F9E.4
0394E:  BRA    394C
03950:  MOVWF  FAD
....................                Fprintf(PC,"ANTSET_2_COUNT = %LX\n\r",ANTSET_2_COUNT); 
03952:  MOVLW  96
03954:  MOVWF  FF6
03956:  MOVLW  0E
03958:  MOVWF  FF7
0395A:  MOVLW  00
0395C:  MOVWF  FF8
0395E:  MOVLW  11
03960:  MOVLB  4
03962:  MOVWF  x3D
03964:  MOVLB  0
03966:  CALL   20A4
0396A:  MOVFF  19E,43E
0396E:  MOVLW  37
03970:  MOVLB  4
03972:  MOVWF  x3F
03974:  MOVLB  0
03976:  CALL   20D6
0397A:  MOVFF  19D,43E
0397E:  MOVLW  37
03980:  MOVLB  4
03982:  MOVWF  x3F
03984:  MOVLB  0
03986:  CALL   20D6
0398A:  MOVLW  0A
0398C:  BTFSS  F9E.4
0398E:  BRA    398C
03990:  MOVWF  FAD
03992:  MOVLW  0D
03994:  BTFSS  F9E.4
03996:  BRA    3994
03998:  MOVWF  FAD
....................             //} 
....................              
.................... //!            else   
.................... //!            { 
.................... //!               Fprintf(PC,"Reset PIC did not reply to antenna deployment request\n\r "); 
.................... //!            } 
....................              
....................             // finaly clear the data array received from com port 
....................             CLEAR_DATA_ARRAY( RPIC_TO_MPIC_ARRAY, 32 ); 
0399A:  MOVLB  4
0399C:  CLRF   x38
0399E:  MOVLW  62
039A0:  MOVWF  x37
039A2:  MOVLW  20
039A4:  MOVWF  x39
039A6:  MOVLB  0
039A8:  CALL   2F54
039AC:  MOVLB  4
....................          } 
....................          printline(); 
039AE:  MOVLB  0
039B0:  CALL   2092
....................          READ_MP_RTC_(); 
039B4:  RCALL  3338
039B6:  MOVLB  1
....................       } 
....................    }  
039B8:  MOVLB  0
039BA:  GOTO   B1F6 (RETURN)
.................... } 
....................  
.................... // deplying antenna set 2______________________________________________________ 
.................... Void DEPLOY_ANTENNAS_SET_2(char dep_time, char num_of_days) 
.................... { 
....................    if(ANT_SET_2_DEP_FLAG == 1) 
039BE:  MOVLB  1
039C0:  DECFSZ x99,W
039C2:  BRA    3F82
039C4:  MOVF   x9A,F
039C6:  BTFSS  FD8.2
039C8:  BRA    3F82
....................    { 
....................       //deployment at 00:30:00 
....................       if( (MP_RTC_HOUR==0) && (MP_RTC_MIN==dep_time) && (0<=MP_RTC_SEC) && (MP_RTC_SEC<=10) ) 
039CA:  MOVF   xC0,F
039CC:  BTFSS  FD8.2
039CE:  BRA    3F82
039D0:  MOVLB  3
039D2:  MOVF   xFD,W
039D4:  MOVLB  1
039D6:  SUBWF  xC1,W
039D8:  BTFSS  FD8.2
039DA:  BRA    3F82
039DC:  MOVF   xC2,W
039DE:  SUBLW  0A
039E0:  BTFSS  FD8.0
039E2:  BRA    3F82
....................       { 
....................           
....................          _CW_STATUS_30MIN = Enabled ; 
039E4:  MOVLW  AA
039E6:  MOVWF  xEB
....................           
....................          printline(); 
039E8:  MOVLB  0
039EA:  CALL   2092
....................          Fprintf(PC,"Antenna set-2 deployments\n\r"); 
039EE:  MOVLW  AE
039F0:  MOVWF  FF6
039F2:  MOVLW  0E
039F4:  MOVWF  FF7
039F6:  MOVLW  00
039F8:  MOVWF  FF8
039FA:  CALL   2068
....................          //reading antenna flags 
....................          unsigned int16 DF1 = READ_PROGRAM_EEPROM(0x18000); 
....................          unsigned int16 A1C = READ_PROGRAM_EEPROM(0x18002); 
....................          unsigned int16 DF2 = READ_PROGRAM_EEPROM(0x18004);  
....................          unsigned int16 A2C = READ_PROGRAM_EEPROM(0x18006); 
039FE:  MOVFF  FF2,408
03A02:  BCF    FF2.7
03A04:  MOVLW  01
03A06:  MOVWF  FF8
03A08:  MOVLW  80
03A0A:  MOVWF  FF7
03A0C:  CLRF   FF6
03A0E:  TBLRD*+
03A10:  MOVF   FF5,W
03A12:  TBLRD*
03A14:  MOVFF  FF5,03
03A18:  CLRF   FF8
03A1A:  MOVLB  4
03A1C:  BTFSC  x08.7
03A1E:  BSF    FF2.7
03A20:  MOVLB  3
03A22:  MOVWF  xFF
03A24:  MOVFF  03,400
03A28:  MOVFF  FF2,408
03A2C:  BCF    FF2.7
03A2E:  MOVLW  01
03A30:  MOVWF  FF8
03A32:  MOVLW  80
03A34:  MOVWF  FF7
03A36:  MOVLW  02
03A38:  MOVWF  FF6
03A3A:  TBLRD*+
03A3C:  MOVF   FF5,W
03A3E:  TBLRD*
03A40:  MOVFF  FF5,03
03A44:  CLRF   FF8
03A46:  MOVLB  4
03A48:  BTFSC  x08.7
03A4A:  BSF    FF2.7
03A4C:  MOVWF  x01
03A4E:  MOVFF  03,402
03A52:  MOVFF  FF2,408
03A56:  BCF    FF2.7
03A58:  MOVLW  01
03A5A:  MOVWF  FF8
03A5C:  MOVLW  80
03A5E:  MOVWF  FF7
03A60:  MOVLW  04
03A62:  MOVWF  FF6
03A64:  TBLRD*+
03A66:  MOVF   FF5,W
03A68:  TBLRD*
03A6A:  MOVFF  FF5,03
03A6E:  CLRF   FF8
03A70:  BTFSC  x08.7
03A72:  BSF    FF2.7
03A74:  MOVWF  x03
03A76:  MOVFF  03,404
03A7A:  MOVFF  FF2,408
03A7E:  BCF    FF2.7
03A80:  MOVLW  01
03A82:  MOVWF  FF8
03A84:  MOVLW  80
03A86:  MOVWF  FF7
03A88:  MOVLW  06
03A8A:  MOVWF  FF6
03A8C:  TBLRD*+
03A8E:  MOVF   FF5,W
03A90:  TBLRD*
03A92:  MOVFF  FF5,03
03A96:  CLRF   FF8
03A98:  BTFSC  x08.7
03A9A:  BSF    FF2.7
03A9C:  MOVWF  x05
03A9E:  MOVFF  03,406
....................           
....................          // printing antenna related variables  
....................          Fprintf(PC,"current antenna related variable values before deployment\n\r"); 
03AA2:  MOVLW  CA
03AA4:  MOVWF  FF6
03AA6:  MOVLW  0E
03AA8:  MOVWF  FF7
03AAA:  MOVLW  00
03AAC:  MOVWF  FF8
03AAE:  MOVLB  0
03AB0:  CALL   2068
....................          Fprintf(PC,"ANT_SET_1_DEP_FLAG = %LX\n\r",DF1); 
03AB4:  MOVLW  06
03AB6:  MOVWF  FF6
03AB8:  MOVLW  0F
03ABA:  MOVWF  FF7
03ABC:  MOVLW  00
03ABE:  MOVWF  FF8
03AC0:  MOVLW  15
03AC2:  MOVLB  4
03AC4:  MOVWF  x3D
03AC6:  MOVLB  0
03AC8:  CALL   20A4
03ACC:  MOVFF  400,43E
03AD0:  MOVLW  37
03AD2:  MOVLB  4
03AD4:  MOVWF  x3F
03AD6:  MOVLB  0
03AD8:  CALL   20D6
03ADC:  MOVFF  3FF,43E
03AE0:  MOVLW  37
03AE2:  MOVLB  4
03AE4:  MOVWF  x3F
03AE6:  MOVLB  0
03AE8:  CALL   20D6
03AEC:  MOVLW  0A
03AEE:  BTFSS  F9E.4
03AF0:  BRA    3AEE
03AF2:  MOVWF  FAD
03AF4:  MOVLW  0D
03AF6:  BTFSS  F9E.4
03AF8:  BRA    3AF6
03AFA:  MOVWF  FAD
....................          Fprintf(PC,"ANTSET_1_COUNT = %LX\n\r",A1C); 
03AFC:  MOVLW  22
03AFE:  MOVWF  FF6
03B00:  MOVLW  0F
03B02:  MOVWF  FF7
03B04:  MOVLW  00
03B06:  MOVWF  FF8
03B08:  MOVLW  11
03B0A:  MOVLB  4
03B0C:  MOVWF  x3D
03B0E:  MOVLB  0
03B10:  CALL   20A4
03B14:  MOVFF  402,43E
03B18:  MOVLW  37
03B1A:  MOVLB  4
03B1C:  MOVWF  x3F
03B1E:  MOVLB  0
03B20:  CALL   20D6
03B24:  MOVFF  401,43E
03B28:  MOVLW  37
03B2A:  MOVLB  4
03B2C:  MOVWF  x3F
03B2E:  MOVLB  0
03B30:  CALL   20D6
03B34:  MOVLW  0A
03B36:  BTFSS  F9E.4
03B38:  BRA    3B36
03B3A:  MOVWF  FAD
03B3C:  MOVLW  0D
03B3E:  BTFSS  F9E.4
03B40:  BRA    3B3E
03B42:  MOVWF  FAD
....................          Fprintf(PC,"ANT_SET_2_DEP_FLAG = %LX\n\r",DF2); 
03B44:  MOVLW  3A
03B46:  MOVWF  FF6
03B48:  MOVLW  0F
03B4A:  MOVWF  FF7
03B4C:  MOVLW  00
03B4E:  MOVWF  FF8
03B50:  MOVLW  15
03B52:  MOVLB  4
03B54:  MOVWF  x3D
03B56:  MOVLB  0
03B58:  CALL   20A4
03B5C:  MOVFF  404,43E
03B60:  MOVLW  37
03B62:  MOVLB  4
03B64:  MOVWF  x3F
03B66:  MOVLB  0
03B68:  CALL   20D6
03B6C:  MOVFF  403,43E
03B70:  MOVLW  37
03B72:  MOVLB  4
03B74:  MOVWF  x3F
03B76:  MOVLB  0
03B78:  CALL   20D6
03B7C:  MOVLW  0A
03B7E:  BTFSS  F9E.4
03B80:  BRA    3B7E
03B82:  MOVWF  FAD
03B84:  MOVLW  0D
03B86:  BTFSS  F9E.4
03B88:  BRA    3B86
03B8A:  MOVWF  FAD
....................          Fprintf(PC,"ANTSET_2_COUNT = %LX\n\r",A2C); 
03B8C:  MOVLW  56
03B8E:  MOVWF  FF6
03B90:  MOVLW  0F
03B92:  MOVWF  FF7
03B94:  MOVLW  00
03B96:  MOVWF  FF8
03B98:  MOVLW  11
03B9A:  MOVLB  4
03B9C:  MOVWF  x3D
03B9E:  MOVLB  0
03BA0:  CALL   20A4
03BA4:  MOVFF  406,43E
03BA8:  MOVLW  37
03BAA:  MOVLB  4
03BAC:  MOVWF  x3F
03BAE:  MOVLB  0
03BB0:  CALL   20D6
03BB4:  MOVFF  405,43E
03BB8:  MOVLW  37
03BBA:  MOVLB  4
03BBC:  MOVWF  x3F
03BBE:  MOVLB  0
03BC0:  CALL   20D6
03BC4:  MOVLW  0A
03BC6:  BTFSS  F9E.4
03BC8:  BRA    3BC6
03BCA:  MOVWF  FAD
03BCC:  MOVLW  0D
03BCE:  BTFSS  F9E.4
03BD0:  BRA    3BCE
03BD2:  MOVWF  FAD
....................           
....................          if(A2C < num_of_days) 
03BD4:  MOVLB  4
03BD6:  MOVF   x06,F
03BD8:  BTFSS  FD8.2
03BDA:  BRA    3F76
03BDC:  MOVLB  3
03BDE:  MOVF   xFE,W
03BE0:  MOVLB  4
03BE2:  SUBWF  x05,W
03BE4:  BTFSC  FD8.0
03BE6:  BRA    3F76
....................          {   
....................             CLEAR_DATA_ARRAY( MPIC_TO_RPIC_ARRAY, 10 ); 
03BE8:  CLRF   x38
03BEA:  MOVLW  58
03BEC:  MOVWF  x37
03BEE:  MOVLW  0A
03BF0:  MOVWF  x39
03BF2:  MOVLB  0
03BF4:  CALL   2F54
....................             MPIC_TO_RPIC_ARRAY[0] = 0xA0;   // header 
03BF8:  MOVLW  A0
03BFA:  MOVWF  58
....................             MPIC_TO_RPIC_ARRAY[1] = 0xDA;   // comand 
03BFC:  MOVLW  DA
03BFE:  MOVWF  59
....................             MPIC_TO_RPIC_ARRAY[9] = 0xA1;   // footer 
03C00:  MOVLW  A1
03C02:  MOVWF  x61
....................        
....................             // sending command to reset pic wait for respone we will try 10 times 
....................             // until reset pic reply  
....................             COMUNICATION_WITH_RST_PIC_AND_WAIT_FOR_RESPONE(5, 5000); 
03C04:  MOVLB  4
03C06:  CLRF   x34
03C08:  MOVLW  05
03C0A:  MOVWF  x33
03C0C:  MOVLW  13
03C0E:  MOVWF  x36
03C10:  MOVLW  88
03C12:  MOVWF  x35
03C14:  CLRF   x38
03C16:  MOVLW  C8
03C18:  MOVWF  x37
03C1A:  MOVLB  0
03C1C:  CALL   3110
....................              
.................... //!            if( MPIC_TO_RPIC_ARRAY[1] == 0xDA && RPIC_TO_MPIC_ARRAY[0] == 0xA0 && RPIC_TO_MPIC_ARRAY[31] == 0xA1 ) 
.................... //!            { 
....................                // then we start antena deployment             
....................                Fprintf(PC,"Antenna set-2 deployment started\n\r");  
03C20:  MOVLW  6E
03C22:  MOVWF  FF6
03C24:  MOVLW  0F
03C26:  MOVWF  FF7
03C28:  MOVLW  00
03C2A:  MOVWF  FF8
03C2C:  CALL   2068
....................                 
....................                OUTPUT_HIGH(PIN_B1); 
03C30:  BCF    F93.1
03C32:  BSF    F8A.1
....................                for( int i = 0; i<25; i++) 
03C34:  MOVLB  4
03C36:  CLRF   x07
03C38:  MOVF   x07,W
03C3A:  SUBLW  18
03C3C:  BNC   3C9C
....................                { 
....................                   Delay_ms(1000); 
03C3E:  MOVLW  04
03C40:  MOVWF  x08
03C42:  MOVLW  FA
03C44:  MOVWF  x3E
03C46:  MOVLB  0
03C48:  CALL   1DA0
03C4C:  MOVLB  4
03C4E:  DECFSZ x08,F
03C50:  BRA    3C42
....................                   Fprintf(PC,"Counting deployment time %02d Sec\n\r", i+1); 
03C52:  MOVLW  01
03C54:  ADDWF  x07,W
03C56:  MOVWF  x08
03C58:  MOVLW  92
03C5A:  MOVWF  FF6
03C5C:  MOVLW  0F
03C5E:  MOVWF  FF7
03C60:  MOVLW  00
03C62:  MOVWF  FF8
03C64:  MOVLW  19
03C66:  MOVWF  x3D
03C68:  MOVLB  0
03C6A:  CALL   20A4
03C6E:  MOVFF  408,409
03C72:  MOVLW  01
03C74:  MOVLB  4
03C76:  MOVWF  x0A
03C78:  MOVLB  0
03C7A:  CALL   3242
03C7E:  MOVLW  AF
03C80:  MOVWF  FF6
03C82:  MOVLW  0F
03C84:  MOVWF  FF7
03C86:  MOVLW  00
03C88:  MOVWF  FF8
03C8A:  MOVLW  06
03C8C:  MOVLB  4
03C8E:  MOVWF  x3D
03C90:  MOVLB  0
03C92:  CALL   20A4
03C96:  MOVLB  4
03C98:  INCF   x07,F
03C9A:  BRA    3C38
....................                }                
....................                OUTPUT_LOW(PIN_B1); 
03C9C:  BCF    F93.1
03C9E:  BCF    F8A.1
....................                 
....................                Fprintf(PC,"Antenna-2 deployment finished\n\r");  
03CA0:  MOVLW  B6
03CA2:  MOVWF  FF6
03CA4:  MOVLW  0F
03CA6:  MOVWF  FF7
03CA8:  MOVLW  00
03CAA:  MOVWF  FF8
03CAC:  MOVLB  0
03CAE:  CALL   2068
....................              
....................                // now we are updating antenna related varibles to memory EEPROM 
....................                A2C++; // we already try one time deployment, since we have to increase antenna 2 counter in memory 
03CB2:  MOVLB  4
03CB4:  INCF   x05,F
03CB6:  BTFSC  FD8.2
03CB8:  INCF   x06,F
....................                 
....................                if( A2C >=5) DF2 = 0; // antenna 1 counter reach this value antenna set 2 is not in deplyment mode 
03CBA:  MOVF   x06,F
03CBC:  BNZ   3CC4
03CBE:  MOVF   x05,W
03CC0:  SUBLW  04
03CC2:  BC    3CC8
03CC4:  CLRF   x04
03CC6:  CLRF   x03
....................                 
....................                // writing antenna related variable to EEPROM 
....................                ERASE_PROGRAM_EEPROM(0x18000); 
03CC8:  BSF    FD0.6
03CCA:  MOVLW  01
03CCC:  MOVWF  FF8
03CCE:  MOVLW  80
03CD0:  MOVWF  FF7
03CD2:  CLRF   FF6
03CD4:  BSF    F7F.4
03CD6:  MOVLB  0
03CD8:  CALL   3304
03CDC:  CLRF   FF8
....................                WRITE_PROGRAM_EEPROM(0x18000,DF1); 
03CDE:  BSF    FD0.6
03CE0:  MOVLW  01
03CE2:  MOVWF  FF8
03CE4:  MOVLW  80
03CE6:  MOVWF  FF7
03CE8:  CLRF   FF6
03CEA:  CALL   3322
03CEE:  CLRF   FF6
03CF0:  MOVFF  3FF,FF5
03CF4:  TBLWT*+
03CF6:  MOVFF  400,FF5
03CFA:  TBLWT*
03CFC:  CALL   3304
03D00:  CLRF   FF8
03D02:  CLRF   FF8
....................                WRITE_PROGRAM_EEPROM(0x18002,A1C); 
03D04:  BSF    FD0.6
03D06:  MOVLW  01
03D08:  MOVWF  FF8
03D0A:  MOVLW  80
03D0C:  MOVWF  FF7
03D0E:  MOVLW  02
03D10:  MOVWF  FF6
03D12:  CALL   3322
03D16:  MOVLW  02
03D18:  MOVWF  FF6
03D1A:  MOVFF  401,FF5
03D1E:  TBLWT*+
03D20:  MOVFF  402,FF5
03D24:  TBLWT*
03D26:  CALL   3304
03D2A:  CLRF   FF8
03D2C:  CLRF   FF8
....................                WRITE_PROGRAM_EEPROM(0x18004,DF2); 
03D2E:  BSF    FD0.6
03D30:  MOVLW  01
03D32:  MOVWF  FF8
03D34:  MOVLW  80
03D36:  MOVWF  FF7
03D38:  MOVLW  04
03D3A:  MOVWF  FF6
03D3C:  CALL   3322
03D40:  MOVLW  04
03D42:  MOVWF  FF6
03D44:  MOVFF  403,FF5
03D48:  TBLWT*+
03D4A:  MOVFF  404,FF5
03D4E:  TBLWT*
03D50:  CALL   3304
03D54:  CLRF   FF8
03D56:  CLRF   FF8
....................                WRITE_PROGRAM_EEPROM(0x18006,A2C); 
03D58:  BSF    FD0.6
03D5A:  MOVLW  01
03D5C:  MOVWF  FF8
03D5E:  MOVLW  80
03D60:  MOVWF  FF7
03D62:  MOVLW  06
03D64:  MOVWF  FF6
03D66:  CALL   3322
03D6A:  MOVLW  06
03D6C:  MOVWF  FF6
03D6E:  MOVFF  405,FF5
03D72:  TBLWT*+
03D74:  MOVFF  406,FF5
03D78:  TBLWT*
03D7A:  CALL   3304
03D7E:  CLRF   FF8
03D80:  CLRF   FF8
....................                 
....................                ANT_SET_1_DEP_FLAG = READ_PROGRAM_EEPROM(0x18000); 
03D82:  MOVFF  FF2,408
03D86:  BCF    FF2.7
03D88:  MOVLW  01
03D8A:  MOVWF  FF8
03D8C:  MOVLW  80
03D8E:  MOVWF  FF7
03D90:  CLRF   FF6
03D92:  TBLRD*+
03D94:  MOVF   FF5,W
03D96:  TBLRD*
03D98:  MOVFF  FF5,03
03D9C:  CLRF   FF8
03D9E:  MOVLB  4
03DA0:  BTFSC  x08.7
03DA2:  BSF    FF2.7
03DA4:  MOVLB  1
03DA6:  MOVWF  x97
03DA8:  MOVFF  03,198
....................                ANTSET_1_COUNT     = READ_PROGRAM_EEPROM(0x18002); 
03DAC:  MOVFF  FF2,408
03DB0:  BCF    FF2.7
03DB2:  MOVLW  01
03DB4:  MOVWF  FF8
03DB6:  MOVLW  80
03DB8:  MOVWF  FF7
03DBA:  MOVLW  02
03DBC:  MOVWF  FF6
03DBE:  TBLRD*+
03DC0:  MOVF   FF5,W
03DC2:  TBLRD*
03DC4:  MOVFF  FF5,03
03DC8:  CLRF   FF8
03DCA:  MOVLB  4
03DCC:  BTFSC  x08.7
03DCE:  BSF    FF2.7
03DD0:  MOVLB  1
03DD2:  MOVWF  x9B
03DD4:  MOVFF  03,19C
....................                ANT_SET_2_DEP_FLAG = READ_PROGRAM_EEPROM(0x18004);  
03DD8:  MOVFF  FF2,408
03DDC:  BCF    FF2.7
03DDE:  MOVLW  01
03DE0:  MOVWF  FF8
03DE2:  MOVLW  80
03DE4:  MOVWF  FF7
03DE6:  MOVLW  04
03DE8:  MOVWF  FF6
03DEA:  TBLRD*+
03DEC:  MOVF   FF5,W
03DEE:  TBLRD*
03DF0:  MOVFF  FF5,03
03DF4:  CLRF   FF8
03DF6:  MOVLB  4
03DF8:  BTFSC  x08.7
03DFA:  BSF    FF2.7
03DFC:  MOVLB  1
03DFE:  MOVWF  x99
03E00:  MOVFF  03,19A
....................                ANTSET_2_COUNT     = READ_PROGRAM_EEPROM(0x18006); 
03E04:  MOVFF  FF2,408
03E08:  BCF    FF2.7
03E0A:  MOVLW  01
03E0C:  MOVWF  FF8
03E0E:  MOVLW  80
03E10:  MOVWF  FF7
03E12:  MOVLW  06
03E14:  MOVWF  FF6
03E16:  TBLRD*+
03E18:  MOVF   FF5,W
03E1A:  TBLRD*
03E1C:  MOVFF  FF5,03
03E20:  CLRF   FF8
03E22:  MOVLB  4
03E24:  BTFSC  x08.7
03E26:  BSF    FF2.7
03E28:  MOVLB  1
03E2A:  MOVWF  x9D
03E2C:  MOVFF  03,19E
....................                 
....................                 // printing antenna related variables  
....................                Fprintf(PC,"current antenna related variable values after deployment\n\r"); 
03E30:  MOVLW  D6
03E32:  MOVWF  FF6
03E34:  MOVLW  0F
03E36:  MOVWF  FF7
03E38:  MOVLW  00
03E3A:  MOVWF  FF8
03E3C:  MOVLB  0
03E3E:  CALL   2068
....................                Fprintf(PC,"ANT_SET_1_DEP_FLAG = %LX\n\r",ANT_SET_1_DEP_FLAG); 
03E42:  MOVLW  12
03E44:  MOVWF  FF6
03E46:  MOVLW  10
03E48:  MOVWF  FF7
03E4A:  MOVLW  00
03E4C:  MOVWF  FF8
03E4E:  MOVLW  15
03E50:  MOVLB  4
03E52:  MOVWF  x3D
03E54:  MOVLB  0
03E56:  CALL   20A4
03E5A:  MOVFF  198,43E
03E5E:  MOVLW  37
03E60:  MOVLB  4
03E62:  MOVWF  x3F
03E64:  MOVLB  0
03E66:  CALL   20D6
03E6A:  MOVFF  197,43E
03E6E:  MOVLW  37
03E70:  MOVLB  4
03E72:  MOVWF  x3F
03E74:  MOVLB  0
03E76:  CALL   20D6
03E7A:  MOVLW  0A
03E7C:  BTFSS  F9E.4
03E7E:  BRA    3E7C
03E80:  MOVWF  FAD
03E82:  MOVLW  0D
03E84:  BTFSS  F9E.4
03E86:  BRA    3E84
03E88:  MOVWF  FAD
....................                Fprintf(PC,"ANTSET_1_COUNT = %LX\n\r",ANTSET_1_COUNT); 
03E8A:  MOVLW  2E
03E8C:  MOVWF  FF6
03E8E:  MOVLW  10
03E90:  MOVWF  FF7
03E92:  MOVLW  00
03E94:  MOVWF  FF8
03E96:  MOVLW  11
03E98:  MOVLB  4
03E9A:  MOVWF  x3D
03E9C:  MOVLB  0
03E9E:  CALL   20A4
03EA2:  MOVFF  19C,43E
03EA6:  MOVLW  37
03EA8:  MOVLB  4
03EAA:  MOVWF  x3F
03EAC:  MOVLB  0
03EAE:  CALL   20D6
03EB2:  MOVFF  19B,43E
03EB6:  MOVLW  37
03EB8:  MOVLB  4
03EBA:  MOVWF  x3F
03EBC:  MOVLB  0
03EBE:  CALL   20D6
03EC2:  MOVLW  0A
03EC4:  BTFSS  F9E.4
03EC6:  BRA    3EC4
03EC8:  MOVWF  FAD
03ECA:  MOVLW  0D
03ECC:  BTFSS  F9E.4
03ECE:  BRA    3ECC
03ED0:  MOVWF  FAD
....................                Fprintf(PC,"ANT_SET_2_DEP_FLAG = %LX\n\r",DF2); 
03ED2:  MOVLW  46
03ED4:  MOVWF  FF6
03ED6:  MOVLW  10
03ED8:  MOVWF  FF7
03EDA:  MOVLW  00
03EDC:  MOVWF  FF8
03EDE:  MOVLW  15
03EE0:  MOVLB  4
03EE2:  MOVWF  x3D
03EE4:  MOVLB  0
03EE6:  CALL   20A4
03EEA:  MOVFF  404,43E
03EEE:  MOVLW  37
03EF0:  MOVLB  4
03EF2:  MOVWF  x3F
03EF4:  MOVLB  0
03EF6:  CALL   20D6
03EFA:  MOVFF  403,43E
03EFE:  MOVLW  37
03F00:  MOVLB  4
03F02:  MOVWF  x3F
03F04:  MOVLB  0
03F06:  CALL   20D6
03F0A:  MOVLW  0A
03F0C:  BTFSS  F9E.4
03F0E:  BRA    3F0C
03F10:  MOVWF  FAD
03F12:  MOVLW  0D
03F14:  BTFSS  F9E.4
03F16:  BRA    3F14
03F18:  MOVWF  FAD
....................                Fprintf(PC,"ANTSET_2_COUNT = %LX\n\r",ANTSET_2_COUNT); 
03F1A:  MOVLW  62
03F1C:  MOVWF  FF6
03F1E:  MOVLW  10
03F20:  MOVWF  FF7
03F22:  MOVLW  00
03F24:  MOVWF  FF8
03F26:  MOVLW  11
03F28:  MOVLB  4
03F2A:  MOVWF  x3D
03F2C:  MOVLB  0
03F2E:  CALL   20A4
03F32:  MOVFF  19E,43E
03F36:  MOVLW  37
03F38:  MOVLB  4
03F3A:  MOVWF  x3F
03F3C:  MOVLB  0
03F3E:  CALL   20D6
03F42:  MOVFF  19D,43E
03F46:  MOVLW  37
03F48:  MOVLB  4
03F4A:  MOVWF  x3F
03F4C:  MOVLB  0
03F4E:  CALL   20D6
03F52:  MOVLW  0A
03F54:  BTFSS  F9E.4
03F56:  BRA    3F54
03F58:  MOVWF  FAD
03F5A:  MOVLW  0D
03F5C:  BTFSS  F9E.4
03F5E:  BRA    3F5C
03F60:  MOVWF  FAD
....................             //} 
....................              
.................... //!            else   
.................... //!            { 
.................... //!               Fprintf(PC,"Reset PIC did not reply to antenna deployment request\n\r "); 
.................... //!            } 
....................              
....................             // finaly clear the data array received from com port 
....................             CLEAR_DATA_ARRAY( RPIC_TO_MPIC_ARRAY, 32 ); 
03F62:  MOVLB  4
03F64:  CLRF   x38
03F66:  MOVLW  62
03F68:  MOVWF  x37
03F6A:  MOVLW  20
03F6C:  MOVWF  x39
03F6E:  MOVLB  0
03F70:  CALL   2F54
03F74:  MOVLB  4
....................          } 
....................          printline(); 
03F76:  MOVLB  0
03F78:  CALL   2092
....................          READ_MP_RTC_(); 
03F7C:  CALL   3338
03F80:  MOVLB  1
....................       } 
....................    }  
03F82:  MOVLB  0
03F84:  GOTO   B206 (RETURN)
.................... } 
....................  
.................... // this function will load the antenaa flags when main pic reset 
.................... void LOAD_ANTENNA_DEPLOYMENT_VALUES() 
.................... { 
....................       printline(); 
*
0211C:  RCALL  2092
....................       Fprintf(PC,"Antenna deploymet values loaded\n\r"); 
0211E:  MOVLW  7A
02120:  MOVWF  FF6
02122:  MOVLW  10
02124:  MOVWF  FF7
02126:  MOVLW  00
02128:  MOVWF  FF8
0212A:  RCALL  2068
....................       ANT_SET_1_DEP_FLAG = READ_PROGRAM_EEPROM(0x18000); 
0212C:  MOVFF  FF2,3FD
02130:  BCF    FF2.7
02132:  MOVLW  01
02134:  MOVWF  FF8
02136:  MOVLW  80
02138:  MOVWF  FF7
0213A:  CLRF   FF6
0213C:  TBLRD*+
0213E:  MOVF   FF5,W
02140:  TBLRD*
02142:  MOVFF  FF5,03
02146:  CLRF   FF8
02148:  MOVLB  3
0214A:  BTFSC  xFD.7
0214C:  BSF    FF2.7
0214E:  MOVLB  1
02150:  MOVWF  x97
02152:  MOVFF  03,198
....................       ANTSET_1_COUNT     = READ_PROGRAM_EEPROM(0x18002); 
02156:  MOVFF  FF2,3FD
0215A:  BCF    FF2.7
0215C:  MOVLW  01
0215E:  MOVWF  FF8
02160:  MOVLW  80
02162:  MOVWF  FF7
02164:  MOVLW  02
02166:  MOVWF  FF6
02168:  TBLRD*+
0216A:  MOVF   FF5,W
0216C:  TBLRD*
0216E:  MOVFF  FF5,03
02172:  CLRF   FF8
02174:  MOVLB  3
02176:  BTFSC  xFD.7
02178:  BSF    FF2.7
0217A:  MOVLB  1
0217C:  MOVWF  x9B
0217E:  MOVFF  03,19C
....................       ANT_SET_2_DEP_FLAG = READ_PROGRAM_EEPROM(0x18004);  
02182:  MOVFF  FF2,3FD
02186:  BCF    FF2.7
02188:  MOVLW  01
0218A:  MOVWF  FF8
0218C:  MOVLW  80
0218E:  MOVWF  FF7
02190:  MOVLW  04
02192:  MOVWF  FF6
02194:  TBLRD*+
02196:  MOVF   FF5,W
02198:  TBLRD*
0219A:  MOVFF  FF5,03
0219E:  CLRF   FF8
021A0:  MOVLB  3
021A2:  BTFSC  xFD.7
021A4:  BSF    FF2.7
021A6:  MOVLB  1
021A8:  MOVWF  x99
021AA:  MOVFF  03,19A
....................       ANTSET_2_COUNT     = READ_PROGRAM_EEPROM(0x18006); 
021AE:  MOVFF  FF2,3FD
021B2:  BCF    FF2.7
021B4:  MOVLW  01
021B6:  MOVWF  FF8
021B8:  MOVLW  80
021BA:  MOVWF  FF7
021BC:  MOVLW  06
021BE:  MOVWF  FF6
021C0:  TBLRD*+
021C2:  MOVF   FF5,W
021C4:  TBLRD*
021C6:  MOVFF  FF5,03
021CA:  CLRF   FF8
021CC:  MOVLB  3
021CE:  BTFSC  xFD.7
021D0:  BSF    FF2.7
021D2:  MOVLB  1
021D4:  MOVWF  x9D
021D6:  MOVFF  03,19E
....................     
....................       if( ANT_SET_1_DEP_FLAG != 0x0001 ) ANT_SET_1_DEP_FLAG = 0; 
021DA:  DECFSZ x97,W
021DC:  BRA    21E2
021DE:  MOVF   x98,F
021E0:  BZ    21E6
021E2:  CLRF   x98
021E4:  CLRF   x97
....................       if( ANT_SET_2_DEP_FLAG != 0x0001 ) ANT_SET_2_DEP_FLAG = 0; 
021E6:  DECFSZ x99,W
021E8:  BRA    21EE
021EA:  MOVF   x9A,F
021EC:  BZ    21F2
021EE:  CLRF   x9A
021F0:  CLRF   x99
....................       // printing antenna related variables  
....................        
....................  
....................        
....................       Fprintf(PC,"ANT_SET_1_DEP_FLAG = %LX\n\r",ANT_SET_1_DEP_FLAG); 
021F2:  MOVLW  9C
021F4:  MOVWF  FF6
021F6:  MOVLW  10
021F8:  MOVWF  FF7
021FA:  MOVLW  00
021FC:  MOVWF  FF8
021FE:  MOVLW  15
02200:  MOVLB  4
02202:  MOVWF  x3D
02204:  MOVLB  0
02206:  RCALL  20A4
02208:  MOVFF  198,43E
0220C:  MOVLW  37
0220E:  MOVLB  4
02210:  MOVWF  x3F
02212:  MOVLB  0
02214:  RCALL  20D6
02216:  MOVFF  197,43E
0221A:  MOVLW  37
0221C:  MOVLB  4
0221E:  MOVWF  x3F
02220:  MOVLB  0
02222:  RCALL  20D6
02224:  MOVLW  0A
02226:  BTFSS  F9E.4
02228:  BRA    2226
0222A:  MOVWF  FAD
0222C:  MOVLW  0D
0222E:  BTFSS  F9E.4
02230:  BRA    222E
02232:  MOVWF  FAD
....................       Fprintf(PC,"ANTSET_1_COUNT = %LX\n\r",ANTSET_1_COUNT); 
02234:  MOVLW  B8
02236:  MOVWF  FF6
02238:  MOVLW  10
0223A:  MOVWF  FF7
0223C:  MOVLW  00
0223E:  MOVWF  FF8
02240:  MOVLW  11
02242:  MOVLB  4
02244:  MOVWF  x3D
02246:  MOVLB  0
02248:  RCALL  20A4
0224A:  MOVFF  19C,43E
0224E:  MOVLW  37
02250:  MOVLB  4
02252:  MOVWF  x3F
02254:  MOVLB  0
02256:  RCALL  20D6
02258:  MOVFF  19B,43E
0225C:  MOVLW  37
0225E:  MOVLB  4
02260:  MOVWF  x3F
02262:  MOVLB  0
02264:  RCALL  20D6
02266:  MOVLW  0A
02268:  BTFSS  F9E.4
0226A:  BRA    2268
0226C:  MOVWF  FAD
0226E:  MOVLW  0D
02270:  BTFSS  F9E.4
02272:  BRA    2270
02274:  MOVWF  FAD
....................       Fprintf(PC,"ANT_SET_2_DEP_FLAG = %LX\n\r",ANT_SET_2_DEP_FLAG); 
02276:  MOVLW  D0
02278:  MOVWF  FF6
0227A:  MOVLW  10
0227C:  MOVWF  FF7
0227E:  MOVLW  00
02280:  MOVWF  FF8
02282:  MOVLW  15
02284:  MOVLB  4
02286:  MOVWF  x3D
02288:  MOVLB  0
0228A:  RCALL  20A4
0228C:  MOVFF  19A,43E
02290:  MOVLW  37
02292:  MOVLB  4
02294:  MOVWF  x3F
02296:  MOVLB  0
02298:  RCALL  20D6
0229A:  MOVFF  199,43E
0229E:  MOVLW  37
022A0:  MOVLB  4
022A2:  MOVWF  x3F
022A4:  MOVLB  0
022A6:  RCALL  20D6
022A8:  MOVLW  0A
022AA:  BTFSS  F9E.4
022AC:  BRA    22AA
022AE:  MOVWF  FAD
022B0:  MOVLW  0D
022B2:  BTFSS  F9E.4
022B4:  BRA    22B2
022B6:  MOVWF  FAD
....................       Fprintf(PC,"ANTSET_2_COUNT = %LX\n\r",ANTSET_2_COUNT); 
022B8:  MOVLW  EC
022BA:  MOVWF  FF6
022BC:  MOVLW  10
022BE:  MOVWF  FF7
022C0:  MOVLW  00
022C2:  MOVWF  FF8
022C4:  MOVLW  11
022C6:  MOVLB  4
022C8:  MOVWF  x3D
022CA:  MOVLB  0
022CC:  RCALL  20A4
022CE:  MOVFF  19E,43E
022D2:  MOVLW  37
022D4:  MOVLB  4
022D6:  MOVWF  x3F
022D8:  MOVLB  0
022DA:  RCALL  20D6
022DC:  MOVFF  19D,43E
022E0:  MOVLW  37
022E2:  MOVLB  4
022E4:  MOVWF  x3F
022E6:  MOVLB  0
022E8:  RCALL  20D6
022EA:  MOVLW  0A
022EC:  BTFSS  F9E.4
022EE:  BRA    22EC
022F0:  MOVWF  FAD
022F2:  MOVLW  0D
022F4:  BTFSS  F9E.4
022F6:  BRA    22F4
022F8:  MOVWF  FAD
....................        
....................       if( ANTSET_1_COUNT == 0 ) 
022FA:  MOVLB  1
022FC:  MOVF   x9B,F
022FE:  BNZ   2340
02300:  MOVF   x9C,F
02302:  BNZ   2340
....................       { 
....................          _CW_STATUS_30MIN = Disabled ; 
02304:  MOVLW  BB
02306:  MOVWF  xEB
....................          Fprintf(PC,"Sat is not in CW transmit mode = %X\n\r",_CW_STATUS_30MIN); 
02308:  MOVLW  04
0230A:  MOVWF  FF6
0230C:  MOVLW  11
0230E:  MOVWF  FF7
02310:  MOVLW  00
02312:  MOVWF  FF8
02314:  MOVLW  21
02316:  MOVLB  4
02318:  MOVWF  x3D
0231A:  MOVLB  0
0231C:  RCALL  20A4
0231E:  MOVFF  1EB,43E
02322:  MOVLW  37
02324:  MOVLB  4
02326:  MOVWF  x3F
02328:  MOVLB  0
0232A:  RCALL  20D6
0232C:  MOVLW  0A
0232E:  BTFSS  F9E.4
02330:  BRA    232E
02332:  MOVWF  FAD
02334:  MOVLW  0D
02336:  BTFSS  F9E.4
02338:  BRA    2336
0233A:  MOVWF  FAD
....................       } 
0233C:  BRA    237C
0233E:  MOVLB  1
....................       else 
....................       { 
....................          _CW_STATUS_30MIN = Enabled ; 
02340:  MOVLW  AA
02342:  MOVWF  xEB
....................          Fprintf(PC,"Sat is in CW transmit mode = %X\n\r",_CW_STATUS_30MIN); 
02344:  MOVLW  2A
02346:  MOVWF  FF6
02348:  MOVLW  11
0234A:  MOVWF  FF7
0234C:  MOVLW  00
0234E:  MOVWF  FF8
02350:  MOVLW  1D
02352:  MOVLB  4
02354:  MOVWF  x3D
02356:  MOVLB  0
02358:  RCALL  20A4
0235A:  MOVFF  1EB,43E
0235E:  MOVLW  37
02360:  MOVLB  4
02362:  MOVWF  x3F
02364:  MOVLB  0
02366:  RCALL  20D6
02368:  MOVLW  0A
0236A:  BTFSS  F9E.4
0236C:  BRA    236A
0236E:  MOVWF  FAD
02370:  MOVLW  0D
02372:  BTFSS  F9E.4
02374:  BRA    2372
02376:  MOVWF  FAD
....................          Output_Low(LED_PIN);    // start led low 
02378:  BCF    F98.2
0237A:  BCF    F8F.2
....................       } 
....................       printline(); 
0237C:  RCALL  2092
0237E:  GOTO   B1D6 (RETURN)
.................... } 
....................  
.................... //!// 90 second comuniction with reset pic function_______________________________0x7A 
.................... //!void COMUNICATION_WITH_RST_PIC_90SEC(int sec) 
.................... //!{ 
.................... //!   if(SEC90_Count>= sec) 
.................... //!   { 
.................... //!      SEC90_Count = 0; 
.................... //!       
.................... //!      CLEAR_DATA_ARRAY( MPIC_TO_RPIC_ARRAY, 10 ); 
.................... //!      MPIC_TO_RPIC_ARRAY[0] = 0xA0;   // header 
.................... //!      MPIC_TO_RPIC_ARRAY[1] = 0x7A;   // comand 
.................... //!      MPIC_TO_RPIC_ARRAY[9] = 0xA1;   // footer 
.................... //!       
.................... //!      // just printing sending comand to reset pic_____________________________      
.................... //!      Fprintf(PC,"Sent comand to Reset PIC >> "); 
.................... //!      for(int i = 0; i<10; i++) 
.................... //!      { 
.................... //!         Fprintf(PC,"%X ",MPIC_TO_RPIC_ARRAY[i]); 
.................... //!      } 
.................... //!      printline(); 
.................... //!      //_______________________________________________________________________ 
.................... //!       
.................... //!      // sending command to reset pic__________________________________________ 
.................... //!      COMUNICATION_WITH_RST_PIC_AND_WAIT_FOR_RESPONE(3, 500); 
.................... //!       
.................... //!      //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
.................... //!      // executing received comand from rest pic_______________________________ 
.................... //!      if( RPIC_TO_MPIC_ARRAY[0] == 0xA0 && RPIC_TO_MPIC_ARRAY[1] == 0x7A  && RPIC_TO_MPIC_ARRAY[31] == 0xA1) 
.................... //!      { 
.................... //!         PRINT_RECIVED_COMMAND_FROM_RESET_PIC(); 
.................... //!         SYNC_MAIN_PIC_AND_RESET_PIC_TIME();    // if there is a time difference time will be updated 
.................... //!          
.................... //!         // calculating day number 
.................... //!         DAY_NUMBER = GET_DAY_NUMBER_OF_THE_YEAR(RPIC_TO_MPIC_ARRAY[2], RPIC_TO_MPIC_ARRAY[3], RPIC_TO_MPIC_ARRAY[4]); 
.................... //!         Fprintf(PC,"Day number = %03Lu\n\r", DAY_NUMBER); 
.................... //!          
.................... //!         RST_PIC_HSK_DATA_START_ADD = (DAY_NUMBER + 24) << 16;                                   
.................... //!         FAB_PIC_HSK_DATA_START_ADD = RST_PIC_HSK_DATA_START_ADD + 0x00008000 ; 
.................... //!          
.................... //!         //Erasing 64KB sector to write data 
.................... //!         if(SUCCESFULL_COMUNICATION_WITH_RST_PIC == 0 ) 
.................... //!         { 
.................... //!            OUTPUT_LOW(PIN_C5);  // put correct pic 
.................... //!            COM_FM_SECTOR_ERASE( RST_PIC_HSK_DATA_START_ADD, 64); 
.................... //!            fprintf(PC, "Reset PIC HSK data Starting address for today - 0x%LX\n\r",RST_PIC_HSK_DATA_START_ADD ); 
.................... //!            fprintf(PC, "FAB - PIC HSK data Starting address for today - 0x%LX\n\r",FAB_PIC_HSK_DATA_START_ADD ); 
.................... //!            OUTPUT_HIGH(PIN_C5); 
.................... //!         } 
.................... //!          
.................... //!         //Writing housekeeping data in the flash memory 
.................... //!         if( CFM_ACCESS_FLAG == 0 ) 
.................... //!         {   
.................... //!            OUTPUT_LOW(PIN_C5);      // get SFM access 
.................... //!            //_________________________________________________________________ 
.................... //!            // now we have already comunicate with reset and we have the reset pic reponse 
.................... //!            // and we have clearence to write data in COM FM, so we can comunicate with FAB  
.................... //!            // and get FAB HSK 
.................... //!            CLEAR_DATA_ARRAY( MPIC_TO_FAB_ARRAY, 3 ); 
.................... //!            MPIC_TO_FAB_ARRAY[0] = 0xFA;   // header 
.................... //!            MPIC_TO_FAB_ARRAY[1] = 0xA0;   // comand 
.................... //!            MPIC_TO_FAB_ARRAY[2] = 0xFB;   // footer 
.................... //!             
.................... //!            // sending command to reset pic__________________________________________ 
.................... //!            COMUNICATION_WITH_FAB_PIC_AND_WAIT_FOR_RESPONE(3, 500,100,32); 
.................... //!             
.................... //!            if( FAB_TO_MPIC_ARRAY[0] == 0xFA && FAB_TO_MPIC_ARRAY[1] == 0xA0  && FAB_TO_MPIC_ARRAY[31] == 0xFB) 
.................... //!            { 
.................... //!               fprintf(PC, "FABPIC comunication-> sucess:notsuccess = %Ld:%Ld\n\r",SUCCESFULL_COMUNICATION_WITH_FAB+1 ,FAILED_COMUNICATION_WITH_FAB ); 
.................... //!                
.................... //!               fprintf(PC, "Recent FAB HSK data writing location     - 0x%LX   Sec_num = %Lu\n\r", FAB_PIC_HSK_DATA_START_ADD  + (32* SUCCESFULL_COMUNICATION_WITH_FAB), DAY_NUMBER + 24 );   
.................... //!               COM_FM_BYTE_WRITE( FAB_PIC_HSK_DATA_START_ADD     + (32* SUCCESFULL_COMUNICATION_WITH_FAB) , RPIC_TO_MPIC_ARRAY[2] ) ; 
.................... //!               COM_FM_BYTE_WRITE( FAB_PIC_HSK_DATA_START_ADD + 1 + (32* SUCCESFULL_COMUNICATION_WITH_FAB) , RPIC_TO_MPIC_ARRAY[3] ) ; 
.................... //!               COM_FM_BYTE_WRITE( FAB_PIC_HSK_DATA_START_ADD + 2 + (32* SUCCESFULL_COMUNICATION_WITH_FAB) , RPIC_TO_MPIC_ARRAY[4] ) ; 
.................... //!                
.................... //!               unsigned int32 BYTE_ADDRESS_ = 0; 
.................... //!               for(int i = 3; i<=31; i++) 
.................... //!               { 
.................... //!                  BYTE_ADDRESS_ = FAB_PIC_HSK_DATA_START_ADD + i + (32* SUCCESFULL_COMUNICATION_WITH_FAB) ; 
.................... //!                  COM_FM_BYTE_WRITE( BYTE_ADDRESS_ ,FAB_TO_MPIC_ARRAY[i-1] ); 
.................... //!               } 
.................... //!                
.................... //!               fprintf(PC, "Saved data FAB pic HSK - "); 
.................... //!               for(int i = 0; i<32; i++) 
.................... //!               { 
.................... //!                  BYTE_ADDRESS_ = FAB_PIC_HSK_DATA_START_ADD + i + (32* SUCCESFULL_COMUNICATION_WITH_FAB); 
.................... //!                  fprintf(PC, "%X ",COM_FM_BYTE_READ( BYTE_ADDRESS_ ) ); 
.................... //!               } 
.................... //!               printLine(); 
.................... //!                
.................... //!               SUCCESFULL_COMUNICATION_WITH_FAB++; 
.................... //!            } 
.................... //!             
.................... //!            else 
.................... //!            { 
.................... //!               Fprintf(PC,"90 seconds comunication with FAB pic was not succesfull\n\r"); 
.................... //!               FAILED_COMUNICATION_WITH_FAB++; 
.................... //!            } 
.................... //!                       
.................... //!             
.................... //!            printline(); 
.................... //!            fprintf(PC, "RSTPIC comunication-> sucess:notsuccess = %Ld:%Ld\n\r",SUCCESFULL_COMUNICATION_WITH_RST_PIC+1 ,FAILED_COMUNICATION_WITH_RST_PIC ); 
.................... //!             
.................... //!            unsigned int32 BYTE_ADDRESS = 0; 
.................... //!            for(int i = 0; i<24; i++) 
.................... //!            { 
.................... //!               BYTE_ADDRESS = RST_PIC_HSK_DATA_START_ADD + i + (23* SUCCESFULL_COMUNICATION_WITH_RST_PIC) ; 
.................... //!               COM_FM_BYTE_WRITE( BYTE_ADDRESS ,RPIC_TO_MPIC_ARRAY[i+1] ); 
.................... //!               if( i == 0 ) 
.................... //!               { 
.................... //!                  //fprintf(PC, "HK data wrriting 64KB sector number - %Ld\n\r",(BYTE_ADDRESS>>16)&0x00000FFF ); 
.................... //!                  fprintf(PC, "Recent HSK data writing location     - 0x%LX   Sec_num = %Lu\n\r",BYTE_ADDRESS, DAY_NUMBER + 24 );    
.................... //!               } 
.................... //!            } 
.................... //!             
.................... //!            fprintf(PC, "Saved data Resetpic HSK - "); 
.................... //!            for(int i = 0; i<24; i++) 
.................... //!            { 
.................... //!               BYTE_ADDRESS = RST_PIC_HSK_DATA_START_ADD  + i + (23* SUCCESFULL_COMUNICATION_WITH_RST_PIC) ; 
.................... //!               fprintf(PC, "%X ",COM_FM_BYTE_READ( BYTE_ADDRESS ) ); 
.................... //!            } 
.................... //!            printLine(); 
.................... //!            printLine(); 
.................... //!            SUCCESFULL_COMUNICATION_WITH_RST_PIC++; 
.................... //!            OUTPUT_HIGH(PIN_C5); 
.................... //!         } 
.................... //!          
.................... //!         if( CFM_ACCESS_FLAG == 1 ) 
.................... //!         { 
.................... //!            fprintf(PC, "Cannot write house keeping data in Com FM due to access is given to ComPIC - "); 
.................... //!         }         
.................... //!                   
.................... //!         // finaly clear the data array received from reset pic 
.................... //!         CLEAR_DATA_ARRAY( RPIC_TO_MPIC_ARRAY, 32 ); 
.................... //!          
.................... //!      } 
.................... //!      //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
.................... //!       
.................... //!      else  
.................... //!      { 
.................... //!         Fprintf(PC,"90 seconds comunication with reset pic was not succesfull\n\r"); 
.................... //!         FAILED_COMUNICATION_WITH_RST_PIC++; 
.................... //!      } 
.................... //!   }        
.................... //!} 
....................  
....................  
.................... //!      fprintf(PC,"FAB data request command from main pic\n\r"); 
.................... //!       
.................... //!      CLEAR_DATA_ARRAY(FAB_TO_MPIC_ARRAY,35); 
.................... //!       
.................... //!      _RAW_C = AVERAGE_HECS_READING(RAW_CURRENT,500, 400); 
.................... //!      _BAT_C = AVERAGE_HECS_READING(BATTERY_CURRENT,500, 400); 
.................... //!      _SOL_C = AVERAGE_HECS_READING(SP_BUS_CURRENT,500, 400); 
.................... //!       
.................... //!      // preparing data 
.................... //!      FAB_TO_MPIC_ARRAY[0]  = 0xFA  ;        // header 
.................... //!       
.................... //!      FAB_TO_MPIC_ARRAY[1]  = 0xA0  ;        // command identifier   
.................... //!       
.................... //!      FAB_TO_MPIC_ARRAY[2]  = AVERAGE_PICADC_READING(RAW_VOLTAGE, 10, 100) ;     //READ_FAB_PIC_ADC( RAW_VOLTAGE )           ; 
.................... //!      FAB_TO_MPIC_ARRAY[3]  = (char)( (_RAW_C>>8) & 0x00FF) ;        
.................... //!      FAB_TO_MPIC_ARRAY[4]  = AVERAGE_PICADC_READING(BATTERY_VOLTAGE, 10, 100) ; //READ_FAB_PIC_ADC( BATTERY_VOLTAGE )       ; 
.................... //!      FAB_TO_MPIC_ARRAY[5]  = (char)( (_BAT_C>>8) & 0x00FF) ;    
.................... //!      FAB_TO_MPIC_ARRAY[6]  = READ_FAB_PIC_ADC( BATTERY_TEMP )             ; 
.................... //!      FAB_TO_MPIC_ARRAY[7]  = AVERAGE_PICADC_READING(SP_BUS_VOLTAGE, 10, 100) ;  //READ_FAB_PIC_ADC( SP_BUS_VOLTAGE )        ; 
.................... //!      FAB_TO_MPIC_ARRAY[8]  = (char)( (_SOL_C>>8) & 0x00FF) ;  
.................... //!             
.................... //!      FAB_TO_MPIC_ARRAY[9]  = AVERAGE_EXTADC_READING(PLUS_X_VOLTAGE, 10,100);      //READ_EXT_ADC_CHANELS( PLUS_X_VOLTAGE )  ; 
.................... //!      FAB_TO_MPIC_ARRAY[10] = AVERAGE_PICADC_READING(PLUS_X_SP_CURRENT, 10, 100) ; //READ_FAB_PIC_ADC( PLUS_X_SP_CURRENT )   ; 
.................... //!      FAB_TO_MPIC_ARRAY[11] = READ_EXT_ADC_CHANELS( PLUS_X_TEMP )     ; 
.................... //!       
.................... //!      FAB_TO_MPIC_ARRAY[12] = AVERAGE_EXTADC_READING(PLUS_Y_VOLTAGE, 10,100);   //READ_EXT_ADC_CHANELS( PLUS_Y_VOLTAGE )  ; 
.................... //!      FAB_TO_MPIC_ARRAY[13] = AVERAGE_PICADC_READING(PLUS_Y_SP_CURRENT, 10, 100) ; //READ_FAB_PIC_ADC( PLUS_Y_SP_CURRENT )   ; 
.................... //!      FAB_TO_MPIC_ARRAY[14] = READ_EXT_ADC_CHANELS( PLUS_Y_TEMP )     ; 
.................... //!       
.................... //!      FAB_TO_MPIC_ARRAY[15] = AVERAGE_EXTADC_READING(PLUS_Z_VOLTAGE, 10,100);   //READ_EXT_ADC_CHANELS( PLUS_Z_VOLTAGE )  ; 
.................... //!      FAB_TO_MPIC_ARRAY[16] = AVERAGE_PICADC_READING(PLUS_Z_SP_CURRENT, 10, 100) ; //READ_FAB_PIC_ADC( PLUS_Z_SP_CURRENT )   ; 
.................... //!      FAB_TO_MPIC_ARRAY[17] = READ_EXT_ADC_CHANELS( PLUS_Z_TEMP )     ; 
.................... //!       
.................... //!      FAB_TO_MPIC_ARRAY[18] = AVERAGE_EXTADC_READING(MINUS_X_VOLTAGE, 10,100);    //READ_EXT_ADC_CHANELS( MINUS_X_VOLTAGE ) ; 
.................... //!      FAB_TO_MPIC_ARRAY[19] = AVERAGE_PICADC_READING(MINUS_X_SP_CURRENT, 10, 100) ; //READ_FAB_PIC_ADC( MINUS_X_SP_CURRENT )  ; 
.................... //!      FAB_TO_MPIC_ARRAY[20] = READ_EXT_ADC_CHANELS( MINUS_X_TEMP )    ; 
.................... //!       
.................... //!      FAB_TO_MPIC_ARRAY[21] = AVERAGE_EXTADC_READING(MINUS_Y_VOLTAGE, 10,100);   //READ_EXT_ADC_CHANELS( MINUS_Y_VOLTAGE ) ; 
.................... //!      FAB_TO_MPIC_ARRAY[22] = AVERAGE_PICADC_READING(MINUS_Y_SP_CURRENT, 10, 100) ; //READ_FAB_PIC_ADC( MINUS_Y_SP_CURRENT )  ; 
.................... //!      FAB_TO_MPIC_ARRAY[23] = READ_EXT_ADC_CHANELS( MINUS_Y_TEMP )    ; 
.................... //!       
.................... //!      FAB_TO_MPIC_ARRAY[24] = AVERAGE_EXTADC_READING(MINUS_Z_VOLTAGE, 10,100);   //READ_EXT_ADC_CHANELS( MINUS_Z_VOLTAGE ) ; 
.................... //!      FAB_TO_MPIC_ARRAY[25] = AVERAGE_PICADC_READING(MINUS_Z_SP_CURRENT, 10, 100) ; //READ_FAB_PIC_ADC( MINUS_Z_SP_CURRENT )  ; 
.................... //!      FAB_TO_MPIC_ARRAY[26] = READ_EXT_ADC_CHANELS( MINUS_Z_TEMP )    ; 
.................... //!       
.................... //!      FAB_TO_MPIC_ARRAY[27] = READ_EXT_ADC_CHANELS( BACKPLANE_TEMP )  ; 
.................... //!      FAB_TO_MPIC_ARRAY[28] = READ_EXT_ADC_CHANELS( TEMP8 )           ; 
.................... //!      FAB_TO_MPIC_ARRAY[29] = input(FAB_KILL_SWITCH_STATUS_PIN)       ; 
.................... //!      FAB_TO_MPIC_ARRAY[30] = input(OBC_KILL_STATUS_STATUS_PIN)       ; 
.................... //!       
.................... //!      FAB_TO_MPIC_ARRAY[31] = (char)(_RAW_C & 0x00FF)     ; 
.................... //!      FAB_TO_MPIC_ARRAY[32] = (char)(_BAT_C & 0x00FF)     ; 
.................... //!      FAB_TO_MPIC_ARRAY[33] = (char)(_SOL_C & 0x00FF)     ; 
.................... //!       
.................... //!      FAB_TO_MPIC_ARRAY[34] = 0xFB                                    ;   // footer 
....................  
....................  
....................  
.................... #include <MPIC_FAB.c> 
.................... // this functions will check com pic FAB port incoming 
.................... void CHECK_UART_INCOMING_FROM_FAB_PIC() 
.................... { 
....................    if(FABPic_available()) 
*
04870:  RCALL  47EA
04872:  MOVF   01,F
04874:  BZ    48DC
....................    { 
....................       Delay_ms(100); 
04876:  MOVLW  64
04878:  MOVLB  4
0487A:  MOVWF  x3E
0487C:  MOVLB  0
0487E:  CALL   1DA0
....................       for( int i = 0; i<5; i++) 
04882:  MOVLB  4
04884:  CLRF   x3C
04886:  MOVF   x3C,W
04888:  SUBLW  04
0488A:  BNC   48A8
....................       { 
....................          if( FABPIC_Read() == 0xFA ) 
0488C:  MOVLB  0
0488E:  RCALL  4804
04890:  MOVF   01,W
04892:  SUBLW  FA
04894:  BNZ   48A2
....................          { 
....................             FAB_TO_MPIC_ARRAY[0] = 0xFA; 
04896:  MOVLW  FA
04898:  MOVLB  1
0489A:  MOVWF  x10
....................             break; 
0489C:  MOVLB  4
0489E:  BRA    48A8
048A0:  MOVLB  0
....................          } 
048A2:  MOVLB  4
048A4:  INCF   x3C,F
048A6:  BRA    4886
....................       } 
....................        
....................       for (int i=1; i<=50; i++) 
048A8:  MOVLW  01
048AA:  MOVWF  x3D
048AC:  MOVF   x3D,W
048AE:  SUBLW  32
048B0:  BNC   48DC
....................       { 
....................          FAB_TO_MPIC_ARRAY[i] = FABPIC_Read(); 
048B2:  CLRF   03
048B4:  MOVF   x3D,W
048B6:  ADDLW  10
048B8:  MOVWF  01
048BA:  MOVLW  01
048BC:  ADDWFC 03,F
048BE:  MOVFF  01,43E
048C2:  MOVFF  03,43F
048C6:  MOVLB  0
048C8:  RCALL  4804
048CA:  MOVFF  43F,FEA
048CE:  MOVFF  43E,FE9
048D2:  MOVFF  01,FEF
048D6:  MOVLB  4
048D8:  INCF   x3D,F
048DA:  BRA    48AC
048DC:  MOVLB  0
....................       } 
....................    } 
048DE:  GOTO   49CE (RETURN)
.................... } 
....................  
....................  
.................... // this functions will print received data from FAB pic 
.................... void PRINT_RECIVED_COMMAND_FROM_FAB_PIC() 
.................... { 
....................    Fprintf(PC,"Received comand from FAB pic >> "); 
048E2:  MOVLW  4C
048E4:  MOVWF  FF6
048E6:  MOVLW  11
048E8:  MOVWF  FF7
048EA:  MOVLW  00
048EC:  MOVWF  FF8
048EE:  CALL   2068
....................    for(int i = 0; i<35; i++) 
048F2:  MOVLB  4
048F4:  CLRF   x3C
048F6:  MOVF   x3C,W
048F8:  SUBLW  22
048FA:  BNC   4926
....................    { 
....................       Fprintf(PC,"%X ",FAB_TO_MPIC_ARRAY[i]); 
048FC:  CLRF   03
048FE:  MOVF   x3C,W
04900:  ADDLW  10
04902:  MOVWF  FE9
04904:  MOVLW  01
04906:  ADDWFC 03,W
04908:  MOVWF  FEA
0490A:  MOVFF  FEF,43E
0490E:  MOVLW  37
04910:  MOVWF  x3F
04912:  MOVLB  0
04914:  CALL   20D6
04918:  MOVLW  20
0491A:  BTFSS  F9E.4
0491C:  BRA    491A
0491E:  MOVWF  FAD
04920:  MOVLB  4
04922:  INCF   x3C,F
04924:  BRA    48F6
....................    } 
....................    printline(); 
04926:  MOVLB  0
04928:  CALL   2092
....................    printline(); 
0492C:  CALL   2092
04930:  GOTO   49D0 (RETURN)
.................... } 
....................  
.................... void COMUNICATION_WITH_FAB_PIC_AND_WAIT_FOR_RESPONE(int numof_times, int16 wait_time = 200, int16 time_delay = 70, int inc_array_length = 3) 
.................... { 
....................    printline(); 
04934:  CALL   2092
....................    for(int j=0; j<numof_times; j++) 
04938:  MOVLB  4
0493A:  CLRF   x39
0493C:  MOVF   x33,W
0493E:  SUBWF  x39,W
04940:  BTFSC  FD8.0
04942:  BRA    4A84
....................    { 
....................       Fprintf(PC,"Num of comuniction tries to FAB PIC = %d\n\r", j+1)                ; 
04944:  MOVLW  01
04946:  ADDWF  x39,W
04948:  MOVWF  x3C
0494A:  MOVLW  6E
0494C:  MOVWF  FF6
0494E:  MOVLW  11
04950:  MOVWF  FF7
04952:  MOVLW  00
04954:  MOVWF  FF8
04956:  MOVLW  26
04958:  MOVWF  x3D
0495A:  MOVLB  0
0495C:  CALL   20A4
04960:  MOVFF  43C,43D
04964:  MOVLW  18
04966:  MOVLB  4
04968:  MOVWF  x3E
0496A:  MOVLB  0
0496C:  CALL   2F74
04970:  MOVLW  0A
04972:  BTFSS  F9E.4
04974:  BRA    4972
04976:  MOVWF  FAD
04978:  MOVLW  0D
0497A:  BTFSS  F9E.4
0497C:  BRA    497A
0497E:  MOVWF  FAD
....................       FABPic_flush(); 
04980:  BRA    4854
....................       for( int i = 0; i<3; i++) 
04982:  MOVLB  4
04984:  CLRF   x3A
04986:  MOVF   x3A,W
04988:  SUBLW  02
0498A:  BNC   49AA
....................       { 
....................         fputc(MPIC_TO_FAB_ARRAY[i], FAB); 
0498C:  CLRF   03
0498E:  MOVF   x3A,W
04990:  ADDLW  F0
04992:  MOVWF  FE9
04994:  MOVLW  00
04996:  ADDWFC 03,W
04998:  MOVWF  FEA
0499A:  MOVFF  FEF,43C
0499E:  MOVF   x3C,W
049A0:  MOVLB  0
049A2:  BRA    4862
049A4:  MOVLB  4
049A6:  INCF   x3A,F
049A8:  BRA    4986
....................       } 
....................       Delay_ms(wait_time); 
049AA:  MOVFF  435,43C
049AE:  INCF   x3C,F
049B0:  DECF   x3C,F
049B2:  BTFSC  FD8.2
049B4:  BRA    49C2
049B6:  SETF   x3E
049B8:  MOVLB  0
049BA:  CALL   1DA0
049BE:  MOVLB  4
049C0:  BRA    49B0
049C2:  MOVFF  434,43E
049C6:  MOVLB  0
049C8:  CALL   1DA0
....................        
....................       CHECK_UART_INCOMING_FROM_FAB_PIC() ; 
049CC:  BRA    4870
....................       PRINT_RECIVED_COMMAND_FROM_FAB_PIC(); 
049CE:  BRA    48E2
....................        
....................       if( FAB_TO_MPIC_ARRAY[0] == 0xFA && FAB_TO_MPIC_ARRAY[inc_array_length-1] == 0xFB ) 
049D0:  MOVLB  1
049D2:  MOVF   x10,W
049D4:  SUBLW  FA
049D6:  BNZ   4A10
049D8:  MOVLW  01
049DA:  MOVLB  4
049DC:  SUBWF  x38,W
049DE:  CLRF   03
049E0:  ADDLW  10
049E2:  MOVWF  FE9
049E4:  MOVLW  01
049E6:  ADDWFC 03,W
049E8:  MOVWF  FEA
049EA:  MOVF   FEF,W
049EC:  SUBLW  FB
049EE:  BTFSC  FD8.2
049F0:  BRA    49F6
049F2:  MOVLB  1
049F4:  BRA    4A10
....................       { 
....................          Fprintf(PC,"FAB responded correctly\n\r"); 
049F6:  MOVLW  9A
049F8:  MOVWF  FF6
049FA:  MOVLW  11
049FC:  MOVWF  FF7
049FE:  MOVLW  00
04A00:  MOVWF  FF8
04A02:  MOVLB  0
04A04:  CALL   2068
....................          break; 
04A08:  MOVLB  4
04A0A:  BRA    4A84
....................       }  
04A0C:  BRA    4A80
04A0E:  MOVLB  1
....................        
....................       else 
....................       {   
....................          Delay_ms(time_delay); 
04A10:  MOVFF  437,43C
04A14:  MOVLB  4
04A16:  INCF   x3C,F
04A18:  DECF   x3C,F
04A1A:  BTFSC  FD8.2
04A1C:  BRA    4A2A
04A1E:  SETF   x3E
04A20:  MOVLB  0
04A22:  CALL   1DA0
04A26:  MOVLB  4
04A28:  BRA    4A18
04A2A:  MOVFF  436,43E
04A2E:  MOVLB  0
04A30:  CALL   1DA0
....................          Fprintf(PC,"Received wrong response from FAB pic >> "); 
04A34:  MOVLW  B4
04A36:  MOVWF  FF6
04A38:  MOVLW  11
04A3A:  MOVWF  FF7
04A3C:  MOVLW  00
04A3E:  MOVWF  FF8
04A40:  CALL   2068
....................          for(int i = 0; i<inc_array_length; i++) 
04A44:  MOVLB  4
04A46:  CLRF   x3B
04A48:  MOVF   x38,W
04A4A:  SUBWF  x3B,W
04A4C:  BC    4A78
....................          { 
....................             Fprintf(PC,"%X ",FAB_TO_MPIC_ARRAY[i]); 
04A4E:  CLRF   03
04A50:  MOVF   x3B,W
04A52:  ADDLW  10
04A54:  MOVWF  FE9
04A56:  MOVLW  01
04A58:  ADDWFC 03,W
04A5A:  MOVWF  FEA
04A5C:  MOVFF  FEF,43E
04A60:  MOVLW  37
04A62:  MOVWF  x3F
04A64:  MOVLB  0
04A66:  CALL   20D6
04A6A:  MOVLW  20
04A6C:  BTFSS  F9E.4
04A6E:  BRA    4A6C
04A70:  MOVWF  FAD
04A72:  MOVLB  4
04A74:  INCF   x3B,F
04A76:  BRA    4A48
....................          } 
....................          printline();   
04A78:  MOVLB  0
04A7A:  CALL   2092
04A7E:  MOVLB  4
....................       } 
04A80:  INCF   x39,F
04A82:  BRA    493C
....................    } 
04A84:  MOVLB  0
04A86:  RETURN 0
.................... } 
....................  
....................  
.................... // kill switch handling _______________________________________________________ 
.................... // closing FAB kill switch 
.................... void _CLOSE_FAB_KILL_SWITCH() 
.................... { 
....................    CLEAR_DATA_ARRAY(FAB_TO_MPIC_ARRAY, 10); 
*
09284:  MOVLW  01
09286:  MOVLB  4
09288:  MOVWF  x38
0928A:  MOVLW  10
0928C:  MOVWF  x37
0928E:  MOVLW  0A
09290:  MOVWF  x39
09292:  MOVLB  0
09294:  CALL   2F54
....................    MPIC_TO_FAB_ARRAY[0] = 0xFA; 
09298:  MOVLW  FA
0929A:  MOVWF  xF0
....................    MPIC_TO_FAB_ARRAY[1] = 0xF1; 
0929C:  MOVLW  F1
0929E:  MOVWF  xF1
....................    MPIC_TO_FAB_ARRAY[2] = 0xFB; 
092A0:  MOVLW  FB
092A2:  MOVWF  xF2
....................    COMUNICATION_WITH_FAB_PIC_AND_WAIT_FOR_RESPONE( 3, 500,200); 
092A4:  MOVLW  03
092A6:  MOVLB  4
092A8:  MOVWF  x33
092AA:  MOVLW  01
092AC:  MOVWF  x35
092AE:  MOVLW  F4
092B0:  MOVWF  x34
092B2:  CLRF   x37
092B4:  MOVLW  C8
092B6:  MOVWF  x36
092B8:  MOVLW  03
092BA:  MOVWF  x38
092BC:  MOVLB  0
092BE:  CALL   4934
....................     
....................    if( FAB_TO_MPIC_ARRAY[0] == 0xFA && FAB_TO_MPIC_ARRAY[1] == 0xF1 && FAB_TO_MPIC_ARRAY[2] == 0xFB ) 
092C2:  MOVLB  1
092C4:  MOVF   x10,W
092C6:  SUBLW  FA
092C8:  BNZ   92EC
092CA:  MOVF   x11,W
092CC:  SUBLW  F1
092CE:  BNZ   92EC
092D0:  MOVF   x12,W
092D2:  SUBLW  FB
092D4:  BNZ   92EC
....................    { 
....................       Fprintf(PC,"FAB kill switch succeesfully closed\n\r");     
092D6:  MOVLW  DE
092D8:  MOVWF  FF6
092DA:  MOVLW  11
092DC:  MOVWF  FF7
092DE:  MOVLW  00
092E0:  MOVWF  FF8
092E2:  MOVLB  0
092E4:  CALL   2068
....................    } 
092E8:  BRA    92FE
092EA:  MOVLB  1
....................     
....................    else Fprintf(PC,"FAB kill switch closing not succesful\n\r"); 
092EC:  MOVLW  04
092EE:  MOVWF  FF6
092F0:  MOVLW  12
092F2:  MOVWF  FF7
092F4:  MOVLW  00
092F6:  MOVWF  FF8
092F8:  MOVLB  0
092FA:  CALL   2068
....................     
....................    //CLEAR_DATA_ARRAY(FAB_TO_MPIC_ARRAY, 10); 
....................    printline(); 
092FE:  CALL   2092
09302:  RETURN 0
.................... } 
....................  
.................... // closing OBC kill switch 
.................... void _CLOSE_OBC_KILL_SWITCH() 
.................... { 
....................    // high the obc kill switch pin here 
....................    CLEAR_DATA_ARRAY(FAB_TO_MPIC_ARRAY, 10); 
*
09380:  MOVLW  01
09382:  MOVLB  4
09384:  MOVWF  x38
09386:  MOVLW  10
09388:  MOVWF  x37
0938A:  MOVLW  0A
0938C:  MOVWF  x39
0938E:  MOVLB  0
09390:  CALL   2F54
....................    MPIC_TO_FAB_ARRAY[0] = 0xFA; 
09394:  MOVLW  FA
09396:  MOVWF  xF0
....................    MPIC_TO_FAB_ARRAY[1] = 0xF2; 
09398:  MOVLW  F2
0939A:  MOVWF  xF1
....................    MPIC_TO_FAB_ARRAY[2] = 0xFB; 
0939C:  MOVLW  FB
0939E:  MOVWF  xF2
....................    COMUNICATION_WITH_FAB_PIC_AND_WAIT_FOR_RESPONE( 3, 500,200); 
093A0:  MOVLW  03
093A2:  MOVLB  4
093A4:  MOVWF  x33
093A6:  MOVLW  01
093A8:  MOVWF  x35
093AA:  MOVLW  F4
093AC:  MOVWF  x34
093AE:  CLRF   x37
093B0:  MOVLW  C8
093B2:  MOVWF  x36
093B4:  MOVLW  03
093B6:  MOVWF  x38
093B8:  MOVLB  0
093BA:  CALL   4934
....................     
....................    if( FAB_TO_MPIC_ARRAY[0] == 0xFA && FAB_TO_MPIC_ARRAY[1] == 0xF2 && FAB_TO_MPIC_ARRAY[2] == 0xFB ) 
093BE:  MOVLB  1
093C0:  MOVF   x10,W
093C2:  SUBLW  FA
093C4:  BNZ   9406
093C6:  MOVF   x11,W
093C8:  SUBLW  F2
093CA:  BNZ   9406
093CC:  MOVF   x12,W
093CE:  SUBLW  FB
093D0:  BNZ   9406
....................    { 
....................       Output_high(PIN_A4); 
093D2:  BCF    F92.4
093D4:  BSF    F89.4
....................       Delay_ms(1000); 
093D6:  MOVLW  04
093D8:  MOVLB  4
093DA:  MOVWF  x01
093DC:  MOVLW  FA
093DE:  MOVWF  x3E
093E0:  MOVLB  0
093E2:  CALL   1DA0
093E6:  MOVLB  4
093E8:  DECFSZ x01,F
093EA:  BRA    93DC
....................       Output_low(PIN_A4); 
093EC:  BCF    F92.4
093EE:  BCF    F89.4
....................       Fprintf(PC,"OBC kill switch succeesfully closed\n\r"); 
093F0:  MOVLW  2C
093F2:  MOVWF  FF6
093F4:  MOVLW  12
093F6:  MOVWF  FF7
093F8:  MOVLW  00
093FA:  MOVWF  FF8
093FC:  MOVLB  0
093FE:  CALL   2068
....................    } 
09402:  BRA    9418
09404:  MOVLB  1
....................     
....................    else Fprintf(PC,"OBC kill switch closing not succesful\n\r"); 
09406:  MOVLW  52
09408:  MOVWF  FF6
0940A:  MOVLW  12
0940C:  MOVWF  FF7
0940E:  MOVLW  00
09410:  MOVWF  FF8
09412:  MOVLB  0
09414:  CALL   2068
....................     
....................    //CLEAR_DATA_ARRAY(FAB_TO_MPIC_ARRAY, 10); 
....................    Output_low(PIN_A4); 
09418:  BCF    F92.4
0941A:  BCF    F89.4
....................    printline(); 
0941C:  CALL   2092
09420:  RETURN 0
.................... } 
....................  
.................... // Opening FAB kill switch 
.................... void _OPEN_FAB_KILL_SWITCH() 
.................... { 
....................    CLEAR_DATA_ARRAY(FAB_TO_MPIC_ARRAY, 10); 
*
09304:  MOVLW  01
09306:  MOVLB  4
09308:  MOVWF  x38
0930A:  MOVLW  10
0930C:  MOVWF  x37
0930E:  MOVLW  0A
09310:  MOVWF  x39
09312:  MOVLB  0
09314:  CALL   2F54
....................    MPIC_TO_FAB_ARRAY[0] = 0xFA; 
09318:  MOVLW  FA
0931A:  MOVWF  xF0
....................    MPIC_TO_FAB_ARRAY[1] = 0xF3; 
0931C:  MOVLW  F3
0931E:  MOVWF  xF1
....................    MPIC_TO_FAB_ARRAY[2] = 0xFB; 
09320:  MOVLW  FB
09322:  MOVWF  xF2
....................    COMUNICATION_WITH_FAB_PIC_AND_WAIT_FOR_RESPONE( 1, 200,200); 
09324:  MOVLW  01
09326:  MOVLB  4
09328:  MOVWF  x33
0932A:  CLRF   x35
0932C:  MOVLW  C8
0932E:  MOVWF  x34
09330:  CLRF   x37
09332:  MOVWF  x36
09334:  MOVLW  03
09336:  MOVWF  x38
09338:  MOVLB  0
0933A:  CALL   4934
....................     
....................    if( FAB_TO_MPIC_ARRAY[0] == 0xFA && FAB_TO_MPIC_ARRAY[1] == 0xF3 && FAB_TO_MPIC_ARRAY[2] == 0xFB ) 
0933E:  MOVLB  1
09340:  MOVF   x10,W
09342:  SUBLW  FA
09344:  BNZ   9368
09346:  MOVF   x11,W
09348:  SUBLW  F3
0934A:  BNZ   9368
0934C:  MOVF   x12,W
0934E:  SUBLW  FB
09350:  BNZ   9368
....................    { 
....................       Fprintf(PC,"FAB kill open comand succesfully sent to FAB\n\r"); 
09352:  MOVLW  7A
09354:  MOVWF  FF6
09356:  MOVLW  12
09358:  MOVWF  FF7
0935A:  MOVLW  00
0935C:  MOVWF  FF8
0935E:  MOVLB  0
09360:  CALL   2068
....................    } 
09364:  BRA    937A
09366:  MOVLB  1
....................     
....................    else Fprintf(PC,"Comunication with FAB not succesful\n\r");  
09368:  MOVLW  AA
0936A:  MOVWF  FF6
0936C:  MOVLW  12
0936E:  MOVWF  FF7
09370:  MOVLW  00
09372:  MOVWF  FF8
09374:  MOVLB  0
09376:  CALL   2068
....................     
....................    //CLEAR_DATA_ARRAY(FAB_TO_MPIC_ARRAY, 10); 
....................    printline(); 
0937A:  CALL   2092
0937E:  RETURN 0
.................... } 
....................  
.................... // Opening OBC kill switch 
.................... // Opening FAB kill switch 
.................... void _OPEN_OBC_KILL_SWITCH() 
.................... { 
....................    CLEAR_DATA_ARRAY(FAB_TO_MPIC_ARRAY, 10); 
*
09422:  MOVLW  01
09424:  MOVLB  4
09426:  MOVWF  x38
09428:  MOVLW  10
0942A:  MOVWF  x37
0942C:  MOVLW  0A
0942E:  MOVWF  x39
09430:  MOVLB  0
09432:  CALL   2F54
....................    MPIC_TO_FAB_ARRAY[0] = 0xFA; 
09436:  MOVLW  FA
09438:  MOVWF  xF0
....................    MPIC_TO_FAB_ARRAY[1] = 0xF4; 
0943A:  MOVLW  F4
0943C:  MOVWF  xF1
....................    MPIC_TO_FAB_ARRAY[2] = 0xFB; 
0943E:  MOVLW  FB
09440:  MOVWF  xF2
....................    COMUNICATION_WITH_FAB_PIC_AND_WAIT_FOR_RESPONE( 1, 200,200); 
09442:  MOVLW  01
09444:  MOVLB  4
09446:  MOVWF  x33
09448:  CLRF   x35
0944A:  MOVLW  C8
0944C:  MOVWF  x34
0944E:  CLRF   x37
09450:  MOVWF  x36
09452:  MOVLW  03
09454:  MOVWF  x38
09456:  MOVLB  0
09458:  CALL   4934
....................     
....................    if( FAB_TO_MPIC_ARRAY[0] == 0xFA && FAB_TO_MPIC_ARRAY[2] == 0xFB ) 
0945C:  MOVLB  1
0945E:  MOVF   x10,W
09460:  SUBLW  FA
09462:  BNZ   94B8
09464:  MOVF   x12,W
09466:  SUBLW  FB
09468:  BNZ   94B8
....................    { 
....................       Fprintf(PC,"OBC kill open comand succesfully sent to FAB\n\r"); 
0946A:  MOVLW  D0
0946C:  MOVWF  FF6
0946E:  MOVLW  12
09470:  MOVWF  FF7
09472:  MOVLW  00
09474:  MOVWF  FF8
09476:  MOVLB  0
09478:  CALL   2068
....................       if( FAB_TO_MPIC_ARRAY[1] == 0xF4 ) 
0947C:  MOVLB  1
0947E:  MOVF   x11,W
09480:  SUBLW  F4
09482:  BNZ   94B6
....................       { 
....................          Output_high(PIN_A4); 
09484:  BCF    F92.4
09486:  BSF    F89.4
....................          Delay_ms(1000); 
09488:  MOVLW  04
0948A:  MOVLB  4
0948C:  MOVWF  x01
0948E:  MOVLW  FA
09490:  MOVWF  x3E
09492:  MOVLB  0
09494:  CALL   1DA0
09498:  MOVLB  4
0949A:  DECFSZ x01,F
0949C:  BRA    948E
....................          Output_low(PIN_A4); 
0949E:  BCF    F92.4
094A0:  BCF    F89.4
....................          Fprintf(PC,"OBC kill is opened\n\r"); 
094A2:  MOVLW  00
094A4:  MOVWF  FF6
094A6:  MOVLW  13
094A8:  MOVWF  FF7
094AA:  MOVLW  00
094AC:  MOVWF  FF8
094AE:  MOVLB  0
094B0:  CALL   2068
094B4:  MOVLB  1
....................       } 
....................    } 
094B6:  BRA    94CC
....................     
....................    else Fprintf(PC,"Comunication with FAB not succesful\n\r");  
094B8:  MOVLW  16
094BA:  MOVWF  FF6
094BC:  MOVLW  13
094BE:  MOVWF  FF7
094C0:  MOVLW  00
094C2:  MOVWF  FF8
094C4:  MOVLB  0
094C6:  CALL   2068
094CA:  MOVLB  1
....................     
....................    //CLEAR_DATA_ARRAY(FAB_TO_MPIC_ARRAY, 10); 
....................    Output_low(PIN_A4); 
094CC:  BCF    F92.4
094CE:  BCF    F89.4
....................    printline(); 
094D0:  MOVLB  0
094D2:  CALL   2092
094D6:  RETURN 0
.................... } 
....................  
....................  
....................  
.................... #include <MPIC_MBOSS.c> 
.................... int board_number;                                                              // write in Settings.c later 
....................  
....................  
.................... unsigned int8 MissionBoss_flag = 0; 
.................... //unsigned int8 MBOSS_command = 0; 
....................  
.................... //_____________________________________________________________________________ 
.................... void CHECK_UART_INCOMING_FROM_MBOSS_PIC(unsigned int32 looping = 100000) 
*
09A96:  MOVLB  4
09A98:  CLRF   x04
.................... { 
....................    int MBC = 0; 
....................     
....................    for(unsigned int32 i = 0; i<looping; i++) 
09A9A:  CLRF   x08
09A9C:  CLRF   x07
09A9E:  CLRF   x06
09AA0:  CLRF   x05
09AA2:  MOVF   x08,W
09AA4:  SUBWF  x03,W
09AA6:  BNC   9B16
09AA8:  BNZ   9AC0
09AAA:  MOVF   x07,W
09AAC:  SUBWF  x02,W
09AAE:  BNC   9B16
09AB0:  BNZ   9AC0
09AB2:  MOVF   x06,W
09AB4:  SUBWF  x01,W
09AB6:  BNC   9B16
09AB8:  BNZ   9AC0
09ABA:  MOVF   x00,W
09ABC:  SUBWF  x05,W
09ABE:  BC    9B16
....................    { 
....................       if( kbhit(MBOSS) && MissionBoss_flag == 1 ) 
09AC0:  BTFSC  F86.1
09AC2:  BRA    9B04
09AC4:  MOVLB  3
09AC6:  DECFSZ xFC,W
09AC8:  BRA    9ACC
09ACA:  BRA    9AD0
09ACC:  MOVLB  4
09ACE:  BRA    9B04
....................       { 
....................         MBOSS_TO_MPIC_ARRAY[MBC] = fgetc(MBOSS); 
09AD0:  CLRF   03
09AD2:  MOVLB  4
09AD4:  MOVF   x04,W
09AD6:  ADDLW  6F
09AD8:  MOVWF  FE9
09ADA:  MOVLW  01
09ADC:  ADDWFC 03,W
09ADE:  MOVWF  FEA
09AE0:  MOVFF  FEA,40D
09AE4:  MOVFF  FE9,40C
09AE8:  MOVLB  0
09AEA:  BRA    9A4A
09AEC:  MOVFF  40D,FEA
09AF0:  MOVFF  40C,FE9
09AF4:  MOVFF  01,FEF
....................         //fprintf(PC, "%X ", MBOSS_TO_MPIC_ARRAY[MBC]); 
....................          
....................         MBC++; 
09AF8:  MOVLB  4
09AFA:  INCF   x04,F
....................         if( MBC >= 13 ) break ; 
09AFC:  MOVF   x04,W
09AFE:  SUBLW  0C
09B00:  BTFSS  FD8.0
09B02:  BRA    9B16
....................       } 
09B04:  MOVLW  01
09B06:  ADDWF  x05,F
09B08:  BTFSC  FD8.0
09B0A:  INCF   x06,F
09B0C:  BTFSC  FD8.2
09B0E:  INCF   x07,F
09B10:  BTFSC  FD8.2
09B12:  INCF   x08,F
09B14:  BRA    9AA2
....................    } 
....................    fprintf(PC, "CHECK_UART_INCOMING_FROM_MBOSS_PIC\r\n"); 
09B16:  MOVLW  3C
09B18:  MOVWF  FF6
09B1A:  MOVLW  13
09B1C:  MOVWF  FF7
09B1E:  MOVLW  00
09B20:  MOVWF  FF8
09B22:  MOVLB  0
09B24:  CALL   2068
....................  
....................    fprintf(PC, "Data from MBOSS:"); 
09B28:  MOVLW  62
09B2A:  MOVWF  FF6
09B2C:  MOVLW  13
09B2E:  MOVWF  FF7
09B30:  MOVLW  00
09B32:  MOVWF  FF8
09B34:  CALL   2068
....................     
....................    for(int i = 0; i<13; i++) 
09B38:  MOVLB  4
09B3A:  CLRF   x09
09B3C:  MOVF   x09,W
09B3E:  SUBLW  0C
09B40:  BNC   9B6C
....................    { 
....................       fprintf(PC, "%X ", MBOSS_TO_MPIC_ARRAY[i]); 
09B42:  CLRF   03
09B44:  MOVF   x09,W
09B46:  ADDLW  6F
09B48:  MOVWF  FE9
09B4A:  MOVLW  01
09B4C:  ADDWFC 03,W
09B4E:  MOVWF  FEA
09B50:  MOVFF  FEF,43E
09B54:  MOVLW  37
09B56:  MOVWF  x3F
09B58:  MOVLB  0
09B5A:  CALL   20D6
09B5E:  MOVLW  20
09B60:  BTFSS  F9E.4
09B62:  BRA    9B60
09B64:  MOVWF  FAD
09B66:  MOVLB  4
09B68:  INCF   x09,F
09B6A:  BRA    9B3C
....................    } 
....................    printline(); 
09B6C:  MOVLB  0
09B6E:  CALL   2092
09B72:  GOTO   9D3A (RETURN)
.................... } 
....................  
.................... // this functions will print received data from Mission Boss 
.................... void PRINT_RECIVED_COMMAND_FROM_MISSION_BOSS() 
.................... { 
....................    Fprintf(PC,"Received comand from Mission Boss >> "); 
....................    for(int i = 0; i<40; i++) 
....................    { 
....................       Fprintf(PC,"%X ",MBOSS_TO_MPIC_ARRAY[i]); 
....................    } 
....................    printline(); 
....................    printline(); 
.................... } 
....................  
....................  
.................... void ACK_APRS_COMMAND_TO_COM(unsigned int board_number, unsigned int mission_number) 
.................... { 
....................    // Acknoleging to com pic 
....................    CLEAR_DATA_ARRAY( MPIC_TO_CPIC_ARRAY, 32 ); 
....................    MPIC_TO_CPIC_ARRAY[0]  = 0xB0;   // header 
....................    MPIC_TO_CPIC_ARRAY[1]  = board_number;   // board number 
....................    MPIC_TO_CPIC_ARRAY[2]  = mission_number;   // mission number 
....................    MPIC_TO_CPIC_ARRAY[31] = 0xB1;   // footer 
....................     
....................    for(int i = 0; i<32; i++) 
....................    { 
....................       fputc(MPIC_TO_CPIC_ARRAY[i], CPic); 
....................    } 
.................... } 
....................  
.................... int APRS_BOARD_IDENTIFY(unsigned int a) 
.................... { 
....................    char c[3];                                                                 //Null is added at the end, so 3 characters are needed 
....................    int bn; //board number 
....................    sprintf(c,"%X",a);                                                         // Convert a 1-byte command to a string (null is added at the end, so 3 characters are needed) 
....................     
....................    bn = c[1]-'0';                                                             //Convert strings to numbers(ex: "3" --> 3) 
....................     
....................    if(bn <= 7) 
....................    { 
....................      printf("Board Number --> %X",bn); 
....................    } 
....................    else 
....................    { 
....................      printf("Not correct board number"); 
....................    } 
....................       
....................    return bn; 
.................... } 
....................  
....................  
.................... void TURN_ON_MISSIONBOSS() 
.................... { 
....................    output_high(PIN_D1); 
*
099F4:  BCF    F95.1
099F6:  BSF    F8C.1
....................    MissionBoss_flag = 1; 
099F8:  MOVLW  01
099FA:  MOVLB  3
099FC:  MOVWF  xFC
099FE:  MOVLB  0
09A00:  GOTO   9BE2 (RETURN)
.................... } 
....................  
....................  
.................... void TURN_OFF_MISSIONBOSS() 
.................... { 
....................    output_low(PIN_D1); 
....................    MissionBoss_flag = 0; 
.................... } 
....................  
....................  
.................... void GIVE_SFM_ACCESS_TO_MISSIONBOSS() 
.................... { 
....................    Fprintf(PC,"GIVE_SFM_ACCESS_TO\MISSIONBOSS\n\r"); 
*
08B5C:  MOVLW  C8
08B5E:  MOVWF  FF6
08B60:  MOVLW  13
08B62:  MOVWF  FF7
08B64:  MOVLW  00
08B66:  MOVWF  FF8
08B68:  CALL   2068
....................     
....................    output_high(PIN_A5); 
08B6C:  BCF    F92.5
08B6E:  BSF    F89.5
08B70:  RETURN 0
.................... } 
....................  
....................  
.................... void STOP_SFM_ACCESS_TO_MISSIONBOSS() 
.................... { 
....................    Fprintf(PC,"STOP_SFM_ACCESS_TO\MISSIONBOSS\n\r"); 
*
08986:  MOVLW  E8
08988:  MOVWF  FF6
0898A:  MOVLW  13
0898C:  MOVWF  FF7
0898E:  MOVLW  00
08990:  MOVWF  FF8
08992:  CALL   2068
....................    output_low(PIN_A5); 
08996:  BCF    F92.5
08998:  BCF    F89.5
0899A:  RETURN 0
.................... } 
....................  
.................... void RESET_ALL_APRSBOARD_NUMBER_FLAGS() 
.................... { 
....................    if(MISSION_STATUS == 0) 
....................    { 
....................       APRS_REFERENSE_1_FLAG = 0;                                      // 0: turn OFF 1: turn ON 
....................       APRS_REFERENSE_2_FLAG = 0;                                      // 0: turn OFF 1: turn ON 
....................       APRS_PAYLOAD_1_FLAG = 0;                                        // 0: turn OFF 1: turn ON 
....................       APRS_PAYLOAD_2_FLAG = 0;                                        // 0: turn OFF 1: turn ON 
....................       APRS_PAYLOAD_3_FLAG = 0;                                        // 0: turn OFF 1: turn ON 
....................       APRS_PAYLOAD_4_FLAG = 0;                                        // 0: turn OFF 1: turn ON 
....................       APRS_PAYLOAD_5_FLAG = 0;                                        // 0: turn OFF 1: turn ON 
....................    }  
.................... } 
....................  
.................... void SEND_APRS_COMMAND_TO_MISSIONBOSS_THROUGH_MAIN() 
.................... { 
....................    if( CPIC_TO_MPIC_ARRAY[1] == 0x00 && (CPIC_TO_MPIC_ARRAY[2]&0xF0) == 0xB0 ) 
*
09B76:  MOVF   xBA,F
09B78:  BTFSS  FD8.2
09B7A:  BRA    9D3A
09B7C:  MOVF   xBB,W
09B7E:  ANDLW  F0
09B80:  SUBLW  B0
09B82:  BTFSS  FD8.2
09B84:  BRA    9D3A
....................    { 
....................       //Acknowleding to Com PIC 
....................       CLEAR_DATA_ARRAY( MPIC_TO_CPIC_ARRAY, 32 ); 
09B86:  MOVLB  4
09B88:  CLRF   x38
09B8A:  MOVLW  99
09B8C:  MOVWF  x37
09B8E:  MOVLW  20
09B90:  MOVWF  x39
09B92:  MOVLB  0
09B94:  CALL   2F54
....................       MPIC_TO_CPIC_ARRAY[0]  = 0xB0;   // header 
09B98:  MOVLW  B0
09B9A:  MOVWF  x99
....................       MPIC_TO_CPIC_ARRAY[1]  = 0xB0;   // comand 
09B9C:  MOVWF  x9A
....................       MPIC_TO_CPIC_ARRAY[31] = 0xB1;   // footer 
09B9E:  MOVLW  B1
09BA0:  MOVWF  xB8
....................       for(int i = 0; i<32; i++) 
09BA2:  MOVLB  3
09BA4:  CLRF   xFD
09BA6:  MOVF   xFD,W
09BA8:  SUBLW  1F
09BAA:  BNC   9BCE
....................       { 
....................          fputc(MPIC_TO_CPIC_ARRAY[i], CPic); 
09BAC:  CLRF   03
09BAE:  MOVF   xFD,W
09BB0:  ADDLW  99
09BB2:  MOVWF  FE9
09BB4:  MOVLW  00
09BB6:  ADDWFC 03,W
09BB8:  MOVWF  FEA
09BBA:  MOVFF  FEF,400
09BBE:  MOVLB  4
09BC0:  MOVF   x00,W
09BC2:  MOVLB  0
09BC4:  CALL   88D4
09BC8:  MOVLB  3
09BCA:  INCF   xFD,F
09BCC:  BRA    9BA6
....................       } 
....................        
....................       
....................       Fprintf(PC,"Sending APRS command to Mission Boss\n\r"); 
09BCE:  MOVLW  08
09BD0:  MOVWF  FF6
09BD2:  MOVLW  14
09BD4:  MOVWF  FF7
09BD6:  MOVLW  00
09BD8:  MOVWF  FF8
09BDA:  MOVLB  0
09BDC:  CALL   2068
....................       TURN_ON_MISSIONBOSS(); 
09BE0:  BRA    99F4
....................       delay_ms(1000); 
09BE2:  MOVLW  04
09BE4:  MOVLB  4
09BE6:  MOVWF  x00
09BE8:  MOVLW  FA
09BEA:  MOVWF  x3E
09BEC:  MOVLB  0
09BEE:  CALL   1DA0
09BF2:  MOVLB  4
09BF4:  DECFSZ x00,F
09BF6:  BRA    9BE8
....................       CLEAR_DATA_ARRAY( MPIC_TO_MBOSS_ARRAY, 40 );       
09BF8:  MOVLW  01
09BFA:  MOVWF  x38
09BFC:  MOVLW  47
09BFE:  MOVWF  x37
09C00:  MOVLW  28
09C02:  MOVWF  x39
09C04:  MOVLB  0
09C06:  CALL   2F54
....................       CLEAR_DATA_ARRAY( MBOSS_TO_MPIC_ARRAY, 40 ); 
09C0A:  MOVLW  01
09C0C:  MOVLB  4
09C0E:  MOVWF  x38
09C10:  MOVLW  6F
09C12:  MOVWF  x37
09C14:  MOVLW  28
09C16:  MOVWF  x39
09C18:  MOVLB  0
09C1A:  CALL   2F54
....................  
....................       MPIC_TO_MBOSS_ARRAY[0] = CPIC_TO_MPIC_ARRAY[2]; 
09C1E:  MOVFF  BB,147
....................       MPIC_TO_MBOSS_ARRAY[1] = CPIC_TO_MPIC_ARRAY[3]; 
09C22:  MOVFF  BC,148
....................       MPIC_TO_MBOSS_ARRAY[2] = 0xE0; 
09C26:  MOVLW  E0
09C28:  MOVLB  1
09C2A:  MOVWF  x49
....................  
....................        
....................       for(int i = 3; i<10; i++) 
09C2C:  MOVLW  03
09C2E:  MOVLB  3
09C30:  MOVWF  xFE
09C32:  MOVF   xFE,W
09C34:  SUBLW  09
09C36:  BNC   9C72
....................       { 
....................          MPIC_TO_MBOSS_ARRAY[i] = CPIC_TO_MPIC_ARRAY[i+1]; 
09C38:  CLRF   03
09C3A:  MOVF   xFE,W
09C3C:  ADDLW  47
09C3E:  MOVWF  01
09C40:  MOVLW  01
09C42:  ADDWFC 03,F
09C44:  MOVFF  03,401
09C48:  MOVLW  01
09C4A:  MOVLB  3
09C4C:  ADDWF  xFE,W
09C4E:  CLRF   03
09C50:  ADDLW  B9
09C52:  MOVWF  FE9
09C54:  MOVLW  00
09C56:  ADDWFC 03,W
09C58:  MOVWF  FEA
09C5A:  MOVFF  FEF,402
09C5E:  MOVLB  4
09C60:  MOVFF  401,FEA
09C64:  MOVFF  01,FE9
09C68:  MOVFF  402,FEF
09C6C:  MOVLB  3
09C6E:  INCF   xFE,F
09C70:  BRA    9C32
....................       } 
....................       MPIC_TO_MBOSS_ARRAY[10] = 0xED; 
09C72:  MOVLW  ED
09C74:  MOVLB  1
09C76:  MOVWF  x51
....................       Fprintf(PC,"APRS command:"); 
09C78:  MOVLW  30
09C7A:  MOVWF  FF6
09C7C:  MOVLW  14
09C7E:  MOVWF  FF7
09C80:  MOVLW  00
09C82:  MOVWF  FF8
09C84:  MOVLB  0
09C86:  CALL   2068
....................       fputc(0xAA,MBOSS);                                                       // Header for Mission Boss 
09C8A:  MOVLW  AA
09C8C:  MOVLB  4
09C8E:  MOVWF  x01
09C90:  MOVLB  0
09C92:  RCALL  9A04
....................       for(int i = 0; i<11; i++) 
09C94:  MOVLB  3
09C96:  CLRF   xFF
09C98:  MOVF   xFF,W
09C9A:  SUBLW  0A
09C9C:  BNC   9CE2
....................       { 
....................          fputc(MPIC_TO_MBOSS_ARRAY[i], MBOSS); 
09C9E:  CLRF   03
09CA0:  MOVF   xFF,W
09CA2:  ADDLW  47
09CA4:  MOVWF  FE9
09CA6:  MOVLW  01
09CA8:  ADDWFC 03,W
09CAA:  MOVWF  FEA
09CAC:  MOVFF  FEF,401
09CB0:  MOVLB  0
09CB2:  RCALL  9A04
....................          Fprintf(PC,"%X ",MPIC_TO_MBOSS_ARRAY[i]); 
09CB4:  CLRF   03
09CB6:  MOVLB  3
09CB8:  MOVF   xFF,W
09CBA:  ADDLW  47
09CBC:  MOVWF  FE9
09CBE:  MOVLW  01
09CC0:  ADDWFC 03,W
09CC2:  MOVWF  FEA
09CC4:  MOVFF  FEF,43E
09CC8:  MOVLW  37
09CCA:  MOVLB  4
09CCC:  MOVWF  x3F
09CCE:  MOVLB  0
09CD0:  CALL   20D6
09CD4:  MOVLW  20
09CD6:  BTFSS  F9E.4
09CD8:  BRA    9CD6
09CDA:  MOVWF  FAD
09CDC:  MOVLB  3
09CDE:  INCF   xFF,F
09CE0:  BRA    9C98
....................       } 
....................       if(MPIC_TO_MBOSS_ARRAY[3] == 0x11)                                       // GIVE ACESS IF DATA TRANSFER COMMAND IS RECEIVED 
09CE2:  MOVLB  1
09CE4:  MOVF   x4A,W
09CE6:  SUBLW  11
09CE8:  BNZ   9D0E
....................       { 
....................          GIVE_SFM_ACCESS_TO_MISSIONBOSS(); 
09CEA:  MOVLB  0
09CEC:  CALL   8B5C
....................          delay_ms(5000); 
09CF0:  MOVLW  14
09CF2:  MOVLB  4
09CF4:  MOVWF  x00
09CF6:  MOVLW  FA
09CF8:  MOVWF  x3E
09CFA:  MOVLB  0
09CFC:  CALL   1DA0
09D00:  MOVLB  4
09D02:  DECFSZ x00,F
09D04:  BRA    9CF6
....................          STOP_SFM_ACCESS_TO_MISSIONBOSS(); 
09D06:  MOVLB  0
09D08:  CALL   8986
09D0C:  MOVLB  1
....................       } 

09D0E:  MOVLW  01
09D10:  MOVLB  4
09D12:  MOVWF  x38
09D14:  MOVLW  47
09D16:  MOVWF  x37
09D18:  MOVLW  28
09D1A:  MOVWF  x39
09D1C:  MOVLB  0
09D1E:  CALL   2F54
....................       printline(); 
09D22:  CALL   2092
....................       CHECK_UART_INCOMING_FROM_MBOSS_PIC(500000)  ;       
09D26:  MOVLB  4
09D28:  CLRF   x03
09D2A:  MOVLW  07
09D2C:  MOVWF  x02
09D2E:  MOVLW  A1
09D30:  MOVWF  x01
09D32:  MOVLW  20
09D34:  MOVWF  x00
09D36:  MOVLB  0
09D38:  BRA    9A96
....................    } 
09D3A:  GOTO   B25E (RETURN)
.................... } 
....................  
....................  
....................  
.................... #include <MPIC_CPIC.c> 
.................... // this functions will check com pic UART port incoming 
.................... void CHECK_UART_INCOMING_FROM_COM_PIC() 
.................... { 
....................    if( CPic_available() ) 
*
08810:  BRA    87A4
08812:  MOVF   01,F
08814:  BZ    887A
....................    { 
....................       Delay_ms(100); 
08816:  MOVLW  64
08818:  MOVLB  4
0881A:  MOVWF  x3E
0881C:  MOVLB  0
0881E:  CALL   1DA0
....................        
....................       for( int i = 0; i<5; i++) 
08822:  MOVLB  3
08824:  CLRF   xFD
08826:  MOVF   xFD,W
08828:  SUBLW  04
0882A:  BNC   8846
....................       { 
....................          if( CPic_Read() == 0xB0 ) 
0882C:  MOVLB  0
0882E:  RCALL  87C0
08830:  MOVF   01,W
08832:  SUBLW  B0
08834:  BNZ   8840
....................          { 
....................             CPIC_TO_MPIC_ARRAY[0] = 0xB0; 
08836:  MOVLW  B0
08838:  MOVWF  xB9
....................             break; 
0883A:  MOVLB  3
0883C:  BRA    8846
0883E:  MOVLB  0
....................          } 
08840:  MOVLB  3
08842:  INCF   xFD,F
08844:  BRA    8826
....................       } 
....................        
....................       for(int gi = 1; gi<=50; gi++) 
08846:  MOVLW  01
08848:  MOVWF  xFE
0884A:  MOVF   xFE,W
0884C:  SUBLW  32
0884E:  BNC   887A
....................       { 
....................         CPIC_TO_MPIC_ARRAY[gi] = CPIC_Read();          
08850:  CLRF   03
08852:  MOVF   xFE,W
08854:  ADDLW  B9
08856:  MOVWF  01
08858:  MOVLW  00
0885A:  ADDWFC 03,F
0885C:  MOVFF  01,3FF
08860:  MOVFF  03,400
08864:  MOVLB  0
08866:  RCALL  87C0
08868:  MOVFF  400,FEA
0886C:  MOVFF  3FF,FE9
08870:  MOVFF  01,FEF
08874:  MOVLB  3
08876:  INCF   xFE,F
08878:  BRA    884A
0887A:  MOVLB  0
....................       } 
....................    } 
0887C:  GOTO   B222 (RETURN)
.................... } 
....................  
.................... // this functions will print received comand prom com pic 
.................... void PRINT_RECIVED_COMMAND_FROM_COM_PIC() 
.................... { 
....................    printline(); 
08880:  CALL   2092
....................    Fprintf(PC,"RCVD CMD FORM COM PIC >> "); 
08884:  MOVLW  3E
08886:  MOVWF  FF6
08888:  MOVLW  14
0888A:  MOVWF  FF7
0888C:  MOVLW  00
0888E:  MOVWF  FF8
08890:  CALL   2068
....................    for(int i = 0; i<40; i++) 
08894:  MOVLB  3
08896:  CLRF   xFD
08898:  MOVF   xFD,W
0889A:  SUBLW  27
0889C:  BNC   88CA
....................    { 
....................       Fprintf(PC,"%X ",CPIC_TO_MPIC_ARRAY[i]); 
0889E:  CLRF   03
088A0:  MOVF   xFD,W
088A2:  ADDLW  B9
088A4:  MOVWF  FE9
088A6:  MOVLW  00
088A8:  ADDWFC 03,W
088AA:  MOVWF  FEA
088AC:  MOVFF  FEF,43E
088B0:  MOVLW  37
088B2:  MOVLB  4
088B4:  MOVWF  x3F
088B6:  MOVLB  0
088B8:  CALL   20D6
088BC:  MOVLW  20
088BE:  BTFSS  F9E.4
088C0:  BRA    88BE
088C2:  MOVWF  FAD
088C4:  MOVLB  3
088C6:  INCF   xFD,F
088C8:  BRA    8898
....................    } 
....................    printline(); 
088CA:  MOVLB  0
088CC:  CALL   2092
088D0:  GOTO   B232 (RETURN)
....................     
.................... } 
.................... void COMUNICATION_WITH_COM_PIC_AND_WAIT_FOR_RESPONE(int16 numof_times, int16 time_delay, int16 wait_time = 70) 
.................... { 
....................    printline(); 
....................    for(int j=0; j<numof_times; j++) 
....................    { 
....................       CPic_flush(); 
....................       Fprintf(PC,"Num of comuniction tries to COM PIC = %d\n\r", j+1)                ; 
....................        
....................       for( int i = 0; i<31; i++) 
....................       { 
....................         fputc(MPIC_TO_RPIC_ARRAY[i], RPic); 
....................       } 
....................       Delay_ms(wait_time); 
....................       CHECK_UART_INCOMING_FROM_COM_PIC() ; 
....................        
....................       if( CPIC_TO_MPIC_ARRAY[0] == 0xB0 && CPIC_TO_MPIC_ARRAY[39] == 0xB1 ) 
....................       { 
....................          // it this is the case we have recived response from com pic we can 
....................          // stop tying 
....................          Fprintf(PC,"Received response from com pic >> "); 
....................          for(int i = 0; i<39; i++) 
....................          { 
....................             Fprintf(PC,"%X ",CPIC_TO_MPIC_ARRAY[i]); 
....................          } 
....................             printline();   
....................              
....................          break; 
....................       }  
....................       else 
....................       {   
....................          Delay_ms(time_delay); 
....................          Fprintf(PC,"Received wrong response from com pic >> "); 
....................          for(int i = 0; i<39; i++) 
....................          { 
....................             Fprintf(PC,"%X ",CPIC_TO_MPIC_ARRAY[i]); 
....................          } 
....................          printline();   
....................       } 
....................    } 
.................... } 
....................  
.................... // this function is related to flash memory access+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
.................... void GIVE_COMFM_ACCESS_TO_COMPIC_FOR_DATA_DOWNLOAD() 
.................... { 
....................    if( CPIC_TO_MPIC_ARRAY[1] == 0x00 && CPIC_TO_MPIC_ARRAY[2] == 0xFA) 
*
088E0:  MOVF   xBA,F
088E2:  BNZ   8982
088E4:  MOVF   xBB,W
088E6:  SUBLW  FA
088E8:  BNZ   8982
....................    { 
....................       // Acknoleging to com pic 
....................       CLEAR_DATA_ARRAY( MPIC_TO_CPIC_ARRAY, 32 ); 
088EA:  MOVLB  4
088EC:  CLRF   x38
088EE:  MOVLW  99
088F0:  MOVWF  x37
088F2:  MOVLW  20
088F4:  MOVWF  x39
088F6:  MOVLB  0
088F8:  CALL   2F54
....................       MPIC_TO_CPIC_ARRAY[0]  = 0xB0;   // header 
088FC:  MOVLW  B0
088FE:  MOVWF  x99
....................       MPIC_TO_CPIC_ARRAY[1]  = 0xFA;   // comand 
08900:  MOVLW  FA
08902:  MOVWF  x9A
....................       MPIC_TO_CPIC_ARRAY[31] = 0xB1;   // footer 
08904:  MOVLW  B1
08906:  MOVWF  xB8
....................        
....................       for(int i = 0; i<32; i++) 
08908:  MOVLB  3
0890A:  CLRF   xFD
0890C:  MOVF   xFD,W
0890E:  SUBLW  1F
08910:  BNC   8930
....................       { 
....................          fputc(MPIC_TO_CPIC_ARRAY[i], CPic); 
08912:  CLRF   03
08914:  MOVF   xFD,W
08916:  ADDLW  99
08918:  MOVWF  FE9
0891A:  MOVLW  00
0891C:  ADDWFC 03,W
0891E:  MOVWF  FEA
08920:  MOVFF  FEF,3FE
08924:  MOVF   xFE,W
08926:  MOVLB  0
08928:  RCALL  88D4
0892A:  MOVLB  3
0892C:  INCF   xFD,F
0892E:  BRA    890C
....................       } 
....................        
....................       CFM_ACCESS_FLAG = 1; 
08930:  MOVLW  01
08932:  MOVLB  1
08934:  MOVWF  xAF
....................       CFM_ACCESS_TIME = 50; //CPIC_TO_MPIC_ARRAY[2]; 
08936:  MOVLW  32
08938:  MOVWF  xB0
....................       OUTPUT_HIGH(PIN_C5);           // giving access 
0893A:  BCF    F94.5
0893C:  BSF    F8B.5
....................       Fprintf(PC,"Com flash memory access gave to com pic for = %03u Seconds\n\r", CFM_ACCESS_TIME); 
0893E:  MOVLW  D2
08940:  MOVWF  FF6
08942:  MOVLW  14
08944:  MOVWF  FF7
08946:  MOVLW  00
08948:  MOVWF  FF8
0894A:  MOVLW  2E
0894C:  MOVLB  4
0894E:  MOVWF  x3D
08950:  MOVLB  0
08952:  CALL   20A4
08956:  MOVFF  1B0,43C
0895A:  MOVLW  03
0895C:  MOVLB  4
0895E:  MOVWF  x3D
08960:  MOVLB  0
08962:  CALL   29CE
08966:  MOVLW  04
08968:  MOVWF  FF6
0896A:  MOVLW  15
0896C:  MOVWF  FF7
0896E:  MOVLW  00
08970:  MOVWF  FF8
08972:  MOVLW  0A
08974:  MOVLB  4
08976:  MOVWF  x3D
08978:  MOVLB  0
0897A:  CALL   20A4
....................       printline(); 
0897E:  CALL   2092
....................    } 
08982:  GOTO   B242 (RETURN)
.................... } 
....................  
....................                                               // 0:Generate CW 1:Stopping CW 
....................  
.................... // Give CW data to compic+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
.................... void GIVE_CW_DATA_TO_COM_PIC() 
.................... { 
....................    if( CPIC_TO_MPIC_ARRAY[1] == 0x00 && CPIC_TO_MPIC_ARRAY[2] == 0xCA ) 
*
09148:  MOVF   xBA,F
0914A:  BTFSS  FD8.2
0914C:  BRA    9280
0914E:  MOVF   xBB,W
09150:  SUBLW  CA
09152:  BTFSS  FD8.2
09154:  BRA    9280
....................    { 
....................       // Acknoleging to com pic 
....................       Fprintf(PC,"GIVE_CW_DATA_TO_COM_PIC\n\r");       
09156:  MOVLW  10
09158:  MOVWF  FF6
0915A:  MOVLW  15
0915C:  MOVWF  FF7
0915E:  MOVLW  00
09160:  MOVWF  FF8
09162:  CALL   2068
....................        
....................       CLEAR_DATA_ARRAY( MPIC_TO_CPIC_ARRAY, 32 ); 
09166:  MOVLB  4
09168:  CLRF   x38
0916A:  MOVLW  99
0916C:  MOVWF  x37
0916E:  MOVLW  20
09170:  MOVWF  x39
09172:  MOVLB  0
09174:  CALL   2F54
....................       MPIC_TO_CPIC_ARRAY[0]  = 0xB0;   // header 
09178:  MOVLW  B0
0917A:  MOVWF  x99
....................       MPIC_TO_CPIC_ARRAY[1]  = 0xCA;   // comand 
0917C:  MOVLW  CA
0917E:  MOVWF  x9A
....................       for( int i = 0; i< 16; i++) 
09180:  MOVLB  3
09182:  CLRF   xFD
09184:  MOVF   xFD,W
09186:  SUBLW  0F
09188:  BNC   91C6
....................       { 
....................          MPIC_TO_CPIC_ARRAY[i+2] = CW_DATA_ARRAY[i] ; 
0918A:  MOVLW  02
0918C:  ADDWF  xFD,W
0918E:  CLRF   03
09190:  ADDLW  99
09192:  MOVWF  01
09194:  MOVLW  00
09196:  ADDWFC 03,F
09198:  MOVLB  4
0919A:  MOVFF  03,401
0919E:  CLRF   03
091A0:  MOVLB  3
091A2:  MOVF   xFD,W
091A4:  ADDLW  C5
091A6:  MOVWF  FE9
091A8:  MOVLW  01
091AA:  ADDWFC 03,W
091AC:  MOVWF  FEA
091AE:  MOVFF  FEF,402
091B2:  MOVLB  4
091B4:  MOVFF  401,FEA
091B8:  MOVFF  01,FE9
091BC:  MOVFF  402,FEF
091C0:  MOVLB  3
091C2:  INCF   xFD,F
091C4:  BRA    9184
....................       } 
....................       MPIC_TO_CPIC_ARRAY[31] = 0xB1;   // footer 
091C6:  MOVLW  B1
091C8:  MOVLB  0
091CA:  MOVWF  xB8
....................        
....................       // sending  
....................       if( (_CW_STATUS_30MIN == Enabled) && (CW30DAY_FLAG == 1) ) 
091CC:  MOVLB  1
091CE:  MOVF   xEB,W
091D0:  SUBLW  AA
091D2:  BNZ   921A
091D4:  DECFSZ xED,W
091D6:  BRA    921A
....................       { 
....................          Fprintf(PC,"CW Data transfered to compic\n\r");  
091D8:  MOVLW  2A
091DA:  MOVWF  FF6
091DC:  MOVLW  15
091DE:  MOVWF  FF7
091E0:  MOVLW  00
091E2:  MOVWF  FF8
091E4:  MOVLB  0
091E6:  CALL   2068
....................          for(int i = 0; i<32; i++) 
091EA:  MOVLB  3
091EC:  CLRF   xFE
091EE:  MOVF   xFE,W
091F0:  SUBLW  1F
091F2:  BNC   9216
....................          { 
....................             fputc(MPIC_TO_CPIC_ARRAY[i], CPic); 
091F4:  CLRF   03
091F6:  MOVF   xFE,W
091F8:  ADDLW  99
091FA:  MOVWF  FE9
091FC:  MOVLW  00
091FE:  ADDWFC 03,W
09200:  MOVWF  FEA
09202:  MOVFF  FEF,400
09206:  MOVLB  4
09208:  MOVF   x00,W
0920A:  MOVLB  0
0920C:  CALL   88D4
09210:  MOVLB  3
09212:  INCF   xFE,F
09214:  BRA    91EE
....................          } 
....................       } 
09216:  BRA    922E
09218:  MOVLB  1
....................       else Fprintf(PC,"Sat is not in CW transmit mode\n\r");  
0921A:  MOVLW  4A
0921C:  MOVWF  FF6
0921E:  MOVLW  15
09220:  MOVWF  FF7
09222:  MOVLW  00
09224:  MOVWF  FF8
09226:  MOVLB  0
09228:  CALL   2068
0922C:  MOVLB  3
....................        
....................       Fprintf(PC,"Genarated CW > ");  
0922E:  MOVLW  6C
09230:  MOVWF  FF6
09232:  MOVLW  15
09234:  MOVWF  FF7
09236:  MOVLW  00
09238:  MOVWF  FF8
0923A:  MOVLB  0
0923C:  CALL   2068
....................       for(int i = 0; i<16; i++) 
09240:  MOVLB  3
09242:  CLRF   xFF
09244:  MOVF   xFF,W
09246:  SUBLW  0F
09248:  BNC   9276
....................       { 
....................          fprintf(PC, "%X ", CW_DATA_ARRAY[i]); 
0924A:  CLRF   03
0924C:  MOVF   xFF,W
0924E:  ADDLW  C5
09250:  MOVWF  FE9
09252:  MOVLW  01
09254:  ADDWFC 03,W
09256:  MOVWF  FEA
09258:  MOVFF  FEF,43E
0925C:  MOVLW  37
0925E:  MOVLB  4
09260:  MOVWF  x3F
09262:  MOVLB  0
09264:  CALL   20D6
09268:  MOVLW  20
0926A:  BTFSS  F9E.4
0926C:  BRA    926A
0926E:  MOVWF  FAD
09270:  MOVLB  3
09272:  INCF   xFF,F
09274:  BRA    9244
....................       } 
....................       printline(); 
09276:  MOVLB  0
09278:  CALL   2092
....................       printline();   
0927C:  CALL   2092
....................    } 
09280:  GOTO   B252 (RETURN)
.................... } 
....................  
.................... void CHECK_COMFM_ACCES_RELEASING() 
.................... { 
....................    if( CFM_ACCESS_FLAG == 1 ) 
*
0AF22:  MOVLB  1
0AF24:  DECFSZ xAF,W
0AF26:  BRA    AF46
....................    { 
....................       if( CFM_ACCESS_TIME == 0) 
0AF28:  MOVF   xB0,F
0AF2A:  BNZ   AF46
....................       { 
....................          CFM_ACCESS_FLAG = 0; 
0AF2C:  CLRF   xAF
....................          Fprintf(PC,"Com flash memory access released\n\r"); 
0AF2E:  MOVLW  7C
0AF30:  MOVWF  FF6
0AF32:  MOVLW  15
0AF34:  MOVWF  FF7
0AF36:  MOVLW  00
0AF38:  MOVWF  FF8
0AF3A:  MOVLB  0
0AF3C:  CALL   2068
....................          printline(); 
0AF40:  CALL   2092
0AF44:  MOVLB  1
....................       } 
....................    } 
0AF46:  MOVLB  0
0AF48:  GOTO   B2CC (RETURN)
.................... } 
....................  
.................... // copying sectors using COM command (GS command)______________________________0X12+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
.................... void DATA_COPY_FROM_MSN_FM_TO_CFM_USING_GS_CMD() 
.................... { 
....................    if( CPIC_TO_MPIC_ARRAY[1] == 0x00 && CPIC_TO_MPIC_ARRAY[2] == 0x12 ) 
*
08B72:  MOVF   xBA,F
08B74:  BTFSS  FD8.2
08B76:  BRA    8CDA
08B78:  MOVF   xBB,W
08B7A:  SUBLW  12
08B7C:  BTFSS  FD8.2
08B7E:  BRA    8CDA
....................    { 
....................       //printing com data array      
....................       Fprintf(PC,"DATA_COPY_FROM_MSN_FM_TO_CFM_USING_GS_CMD\n\r");       
08B80:  MOVLW  A0
08B82:  MOVWF  FF6
08B84:  MOVLW  15
08B86:  MOVWF  FF7
08B88:  MOVLW  00
08B8A:  MOVWF  FF8
08B8C:  CALL   2068
....................       STOP_SFM_ACCESS_TO_MISSIONBOSS(); 
08B90:  RCALL  8986
....................       // first Acknoleging to com pic  
....................       CLEAR_DATA_ARRAY( MPIC_TO_CPIC_ARRAY, 32 ); 
08B92:  MOVLB  4
08B94:  CLRF   x38
08B96:  MOVLW  99
08B98:  MOVWF  x37
08B9A:  MOVLW  20
08B9C:  MOVWF  x39
08B9E:  MOVLB  0
08BA0:  CALL   2F54
....................       MPIC_TO_CPIC_ARRAY[0]  = 0xB0;   // header 
08BA4:  MOVLW  B0
08BA6:  MOVWF  x99
....................       MPIC_TO_CPIC_ARRAY[1]  = 0x12;   // comand 
08BA8:  MOVLW  12
08BAA:  MOVWF  x9A
....................       MPIC_TO_CPIC_ARRAY[31] = 0xB1;   // footer 
08BAC:  MOVLW  B1
08BAE:  MOVWF  xB8
....................       for(int i = 0; i<32; i++) 
08BB0:  MOVLB  3
08BB2:  CLRF   xFD
08BB4:  MOVF   xFD,W
08BB6:  SUBLW  1F
08BB8:  BNC   8BDA
....................       { 
....................          fputc(MPIC_TO_CPIC_ARRAY[i], CPic); 
08BBA:  CLRF   03
08BBC:  MOVF   xFD,W
08BBE:  ADDLW  99
08BC0:  MOVWF  FE9
08BC2:  MOVLW  00
08BC4:  ADDWFC 03,W
08BC6:  MOVWF  FEA
08BC8:  MOVFF  FEF,407
08BCC:  MOVLB  4
08BCE:  MOVF   x07,W
08BD0:  MOVLB  0
08BD2:  RCALL  88D4
08BD4:  MOVLB  3
08BD6:  INCF   xFD,F
08BD8:  BRA    8BB4
....................       } 
....................        
....................       unsigned int32 FM_DATA_START_ADD = make32( CPIC_TO_MPIC_ARRAY[3], CPIC_TO_MPIC_ARRAY[4], CPIC_TO_MPIC_ARRAY[5], CPIC_TO_MPIC_ARRAY[6] ); 
....................       unsigned int32 num_of_bytes      = make16(CPIC_TO_MPIC_ARRAY[9], CPIC_TO_MPIC_ARRAY[10] ) *81; 
08BDA:  MOVFF  BC,401
08BDE:  MOVFF  BD,400
08BE2:  MOVFF  BE,3FF
08BE6:  MOVFF  BF,3FE
08BEA:  MOVFF  C2,40A
08BEE:  MOVFF  C3,409
08BF2:  MOVLB  4
08BF4:  CLRF   x0C
08BF6:  MOVLW  51
08BF8:  MOVWF  x0B
08BFA:  MOVLB  0
08BFC:  RCALL  899C
08BFE:  MOVLB  4
08C00:  CLRF   x05
08C02:  CLRF   x04
08C04:  MOVFF  02,403
08C08:  MOVFF  01,402
....................       Fprintf(PC,"num_of_bytes = %Lu\n\r", num_of_bytes);   
08C0C:  MOVLW  CC
08C0E:  MOVWF  FF6
08C10:  MOVLW  15
08C12:  MOVWF  FF7
08C14:  MOVLW  00
08C16:  MOVWF  FF8
08C18:  MOVLW  0F
08C1A:  MOVWF  x3D
08C1C:  MOVLB  0
08C1E:  CALL   20A4
08C22:  MOVLW  41
08C24:  MOVWF  FE9
08C26:  MOVFF  405,43A
08C2A:  MOVFF  404,439
08C2E:  MOVFF  403,438
08C32:  MOVFF  402,437
08C36:  CALL   43B0
08C3A:  MOVLW  0A
08C3C:  BTFSS  F9E.4
08C3E:  BRA    8C3C
08C40:  MOVWF  FAD
08C42:  MOVLW  0D
08C44:  BTFSS  F9E.4
08C46:  BRA    8C44
08C48:  MOVWF  FAD
....................        
....................       Fprintf(PC,"Data copy start from msn fm to com fm\n\r");    
08C4A:  MOVLW  E2
08C4C:  MOVWF  FF6
08C4E:  MOVLW  15
08C50:  MOVWF  FF7
08C52:  MOVLW  00
08C54:  MOVWF  FF8
08C56:  CALL   2068
....................       DATA_COPY_FROM_MSN_FM_TO_CFM(FM_DATA_START_ADD, num_of_bytes); 
08C5A:  MOVFF  401,40A
08C5E:  MOVFF  400,409
08C62:  MOVFF  3FF,408
08C66:  MOVFF  3FE,407
08C6A:  MOVFF  405,40E
08C6E:  MOVFF  404,40D
08C72:  MOVFF  403,40C
08C76:  MOVFF  402,40B
08C7A:  BRA    8A7E
....................       Fprintf(PC,"Data copied__________________\n\r");    
08C7C:  MOVLW  0A
08C7E:  MOVWF  FF6
08C80:  MOVLW  16
08C82:  MOVWF  FF7
08C84:  MOVLW  00
08C86:  MOVWF  FF8
08C88:  CALL   2068
....................        
....................       // second Acknoleging to com pic  
....................       CLEAR_DATA_ARRAY( MPIC_TO_CPIC_ARRAY, 32 ); 
08C8C:  MOVLB  4
08C8E:  CLRF   x38
08C90:  MOVLW  99
08C92:  MOVWF  x37
08C94:  MOVLW  20
08C96:  MOVWF  x39
08C98:  MOVLB  0
08C9A:  CALL   2F54
....................       MPIC_TO_CPIC_ARRAY[0]  = 0xB0;   // header 
08C9E:  MOVLW  B0
08CA0:  MOVWF  x99
....................       MPIC_TO_CPIC_ARRAY[1]  = 0x12;   // comand 
08CA2:  MOVLW  12
08CA4:  MOVWF  x9A
....................       MPIC_TO_CPIC_ARRAY[31] = 0xB1;   // footer 
08CA6:  MOVLW  B1
08CA8:  MOVWF  xB8
....................       for(int i = 0; i<32; i++) 
08CAA:  MOVLB  4
08CAC:  CLRF   x06
08CAE:  MOVF   x06,W
08CB0:  SUBLW  1F
08CB2:  BNC   8CD2
....................       { 
....................          fputc(MPIC_TO_CPIC_ARRAY[i], CPic); 
08CB4:  CLRF   03
08CB6:  MOVF   x06,W
08CB8:  ADDLW  99
08CBA:  MOVWF  FE9
08CBC:  MOVLW  00
08CBE:  ADDWFC 03,W
08CC0:  MOVWF  FEA
08CC2:  MOVFF  FEF,407
08CC6:  MOVF   x07,W
08CC8:  MOVLB  0
08CCA:  RCALL  88D4
08CCC:  MOVLB  4
08CCE:  INCF   x06,F
08CD0:  BRA    8CAE
....................       } 
....................       GIVE_SFM_ACCESS_TO_MISSIONBOSS(); 
08CD2:  MOVLB  0
08CD4:  RCALL  8B5C
....................       printline(); 
08CD6:  CALL   2092
....................    } 
08CDA:  GOTO   B246 (RETURN)
.................... } 
....................  
....................  
.................... // copying sectors using COM command (GS command)______________________________0X13+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
.................... void DATA_COPY_FROM_MAIN_FM_TO_CFM_USING_GS_CMD() 
.................... { 
....................    if( CPIC_TO_MPIC_ARRAY[1] == 0x00 && CPIC_TO_MPIC_ARRAY[2] == 0x13 ) 
*
08DB6:  MOVF   xBA,F
08DB8:  BTFSS  FD8.2
08DBA:  BRA    8F1A
08DBC:  MOVF   xBB,W
08DBE:  SUBLW  13
08DC0:  BTFSS  FD8.2
08DC2:  BRA    8F1A
....................    { 
....................       //printing com data array      
....................       Fprintf(PC,"DATA_COPY_FROM_MAIN_FM_TO_CFM_USING_GS_CMD\n\r");       
08DC4:  MOVLW  2A
08DC6:  MOVWF  FF6
08DC8:  MOVLW  16
08DCA:  MOVWF  FF7
08DCC:  MOVLW  00
08DCE:  MOVWF  FF8
08DD0:  CALL   2068
....................        
....................       // first Acknoleging to com pic  
....................       CLEAR_DATA_ARRAY( MPIC_TO_CPIC_ARRAY, 32 ); 
08DD4:  MOVLB  4
08DD6:  CLRF   x38
08DD8:  MOVLW  99
08DDA:  MOVWF  x37
08DDC:  MOVLW  20
08DDE:  MOVWF  x39
08DE0:  MOVLB  0
08DE2:  CALL   2F54
....................       MPIC_TO_CPIC_ARRAY[0]  = 0xB0;   // header 
08DE6:  MOVLW  B0
08DE8:  MOVWF  x99
....................       MPIC_TO_CPIC_ARRAY[1]  = 0x13;   // comand 
08DEA:  MOVLW  13
08DEC:  MOVWF  x9A
....................       MPIC_TO_CPIC_ARRAY[31] = 0xB1;   // footer 
08DEE:  MOVLW  B1
08DF0:  MOVWF  xB8
....................       for(int i = 0; i<32; i++) 
08DF2:  MOVLB  3
08DF4:  CLRF   xFD
08DF6:  MOVF   xFD,W
08DF8:  SUBLW  1F
08DFA:  BNC   8E1C
....................       { 
....................          fputc(MPIC_TO_CPIC_ARRAY[i], CPic); 
08DFC:  CLRF   03
08DFE:  MOVF   xFD,W
08E00:  ADDLW  99
08E02:  MOVWF  FE9
08E04:  MOVLW  00
08E06:  ADDWFC 03,W
08E08:  MOVWF  FEA
08E0A:  MOVFF  FEF,407
08E0E:  MOVLB  4
08E10:  MOVF   x07,W
08E12:  MOVLB  0
08E14:  RCALL  88D4
08E16:  MOVLB  3
08E18:  INCF   xFD,F
08E1A:  BRA    8DF6
....................       } 
....................        
....................       unsigned int32 FM_DATA_START_ADD = make32( CPIC_TO_MPIC_ARRAY[3], CPIC_TO_MPIC_ARRAY[4], CPIC_TO_MPIC_ARRAY[5], CPIC_TO_MPIC_ARRAY[6] ); 
....................       unsigned int32 num_of_bytes      = make16(CPIC_TO_MPIC_ARRAY[9], CPIC_TO_MPIC_ARRAY[10] ) *81; 
08E1C:  MOVFF  BC,401
08E20:  MOVFF  BD,400
08E24:  MOVFF  BE,3FF
08E28:  MOVFF  BF,3FE
08E2C:  MOVFF  C2,40A
08E30:  MOVFF  C3,409
08E34:  MOVLB  4
08E36:  CLRF   x0C
08E38:  MOVLW  51
08E3A:  MOVWF  x0B
08E3C:  MOVLB  0
08E3E:  RCALL  899C
08E40:  MOVLB  4
08E42:  CLRF   x05
08E44:  CLRF   x04
08E46:  MOVFF  02,403
08E4A:  MOVFF  01,402
....................       Fprintf(PC,"num_of_bytes = %Lu\n\r", num_of_bytes);   
08E4E:  MOVLW  58
08E50:  MOVWF  FF6
08E52:  MOVLW  16
08E54:  MOVWF  FF7
08E56:  MOVLW  00
08E58:  MOVWF  FF8
08E5A:  MOVLW  0F
08E5C:  MOVWF  x3D
08E5E:  MOVLB  0
08E60:  CALL   20A4
08E64:  MOVLW  41
08E66:  MOVWF  FE9
08E68:  MOVFF  405,43A
08E6C:  MOVFF  404,439
08E70:  MOVFF  403,438
08E74:  MOVFF  402,437
08E78:  CALL   43B0
08E7C:  MOVLW  0A
08E7E:  BTFSS  F9E.4
08E80:  BRA    8E7E
08E82:  MOVWF  FAD
08E84:  MOVLW  0D
08E86:  BTFSS  F9E.4
08E88:  BRA    8E86
08E8A:  MOVWF  FAD
....................        
....................       Fprintf(PC,"Data copy start from Main fm to com fm\n\r");    
08E8C:  MOVLW  6E
08E8E:  MOVWF  FF6
08E90:  MOVLW  16
08E92:  MOVWF  FF7
08E94:  MOVLW  00
08E96:  MOVWF  FF8
08E98:  CALL   2068
....................       DATA_COPY_FROM_MAIN_FM_TO_CFM(FM_DATA_START_ADD, num_of_bytes); 
08E9C:  MOVFF  401,40A
08EA0:  MOVFF  400,409
08EA4:  MOVFF  3FF,408
08EA8:  MOVFF  3FE,407
08EAC:  MOVFF  405,40E
08EB0:  MOVFF  404,40D
08EB4:  MOVFF  403,40C
08EB8:  MOVFF  402,40B
08EBC:  BRA    8CDE
....................       Fprintf(PC,"Data copied____________________\n\r");    
08EBE:  MOVLW  98
08EC0:  MOVWF  FF6
08EC2:  MOVLW  16
08EC4:  MOVWF  FF7
08EC6:  MOVLW  00
08EC8:  MOVWF  FF8
08ECA:  CALL   2068
....................        
....................       // second Acknoleging to com pic  
....................       CLEAR_DATA_ARRAY( MPIC_TO_CPIC_ARRAY, 32 ); 
08ECE:  MOVLB  4
08ED0:  CLRF   x38
08ED2:  MOVLW  99
08ED4:  MOVWF  x37
08ED6:  MOVLW  20
08ED8:  MOVWF  x39
08EDA:  MOVLB  0
08EDC:  CALL   2F54
....................       MPIC_TO_CPIC_ARRAY[0]  = 0xB0;   // header 
08EE0:  MOVLW  B0
08EE2:  MOVWF  x99
....................       MPIC_TO_CPIC_ARRAY[1]  = 0x13;   // comand 
08EE4:  MOVLW  13
08EE6:  MOVWF  x9A
....................       MPIC_TO_CPIC_ARRAY[31] = 0xB1;   // footer 
08EE8:  MOVLW  B1
08EEA:  MOVWF  xB8
....................       for(int i = 0; i<32; i++) 
08EEC:  MOVLB  4
08EEE:  CLRF   x06
08EF0:  MOVF   x06,W
08EF2:  SUBLW  1F
08EF4:  BNC   8F14
....................       { 
....................          fputc(MPIC_TO_CPIC_ARRAY[i], CPic); 
08EF6:  CLRF   03
08EF8:  MOVF   x06,W
08EFA:  ADDLW  99
08EFC:  MOVWF  FE9
08EFE:  MOVLW  00
08F00:  ADDWFC 03,W
08F02:  MOVWF  FEA
08F04:  MOVFF  FEF,407
08F08:  MOVF   x07,W
08F0A:  MOVLB  0
08F0C:  RCALL  88D4
08F0E:  MOVLB  4
08F10:  INCF   x06,F
08F12:  BRA    8EF0
....................       } 
....................       printline(); 
08F14:  MOVLB  0
08F16:  CALL   2092
....................    } 
08F1A:  GOTO   B24A (RETURN)
.................... } 
....................  
.................... // sector erasing+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
.................... void SECTOR_ERASE_USING_GS_COMMAND() 
.................... { 
....................    if( CPIC_TO_MPIC_ARRAY[1] == 0x00 && CPIC_TO_MPIC_ARRAY[2] == 0x14 ) 
*
08FFA:  MOVF   xBA,F
08FFC:  BTFSS  FD8.2
08FFE:  BRA    9140
09000:  MOVF   xBB,W
09002:  SUBLW  14
09004:  BTFSS  FD8.2
09006:  BRA    9140
....................    { 
....................       Fprintf(PC,"SECTOR_ERASE_USING_GS_COMMAND\n\r");  
09008:  MOVLW  BA
0900A:  MOVWF  FF6
0900C:  MOVLW  16
0900E:  MOVWF  FF7
09010:  MOVLW  00
09012:  MOVWF  FF8
09014:  CALL   2068
....................        
....................       // Acknoleging to com pic  
....................       CLEAR_DATA_ARRAY( MPIC_TO_CPIC_ARRAY, 32 ); 
09018:  MOVLB  4
0901A:  CLRF   x38
0901C:  MOVLW  99
0901E:  MOVWF  x37
09020:  MOVLW  20
09022:  MOVWF  x39
09024:  MOVLB  0
09026:  CALL   2F54
....................       MPIC_TO_CPIC_ARRAY[0]  = 0xB0;   // header 
0902A:  MOVLW  B0
0902C:  MOVWF  x99
....................       MPIC_TO_CPIC_ARRAY[1]  = 0x14;   // comand 
0902E:  MOVLW  14
09030:  MOVWF  x9A
....................       MPIC_TO_CPIC_ARRAY[31] = 0xB1;   // footer 
09032:  MOVLW  B1
09034:  MOVWF  xB8
....................       for(int i = 0; i<32; i++) 
09036:  MOVLB  3
09038:  CLRF   xFD
0903A:  MOVF   xFD,W
0903C:  SUBLW  1F
0903E:  BNC   9060
....................       { 
....................          fputc(MPIC_TO_CPIC_ARRAY[i], CPic); 
09040:  CLRF   03
09042:  MOVF   xFD,W
09044:  ADDLW  99
09046:  MOVWF  FE9
09048:  MOVLW  00
0904A:  ADDWFC 03,W
0904C:  MOVWF  FEA
0904E:  MOVFF  FEF,403
09052:  MOVLB  4
09054:  MOVF   x03,W
09056:  MOVLB  0
09058:  RCALL  88D4
0905A:  MOVLB  3
0905C:  INCF   xFD,F
0905E:  BRA    903A
....................       } 
....................        
....................       unsigned int32 ADD_ = make32( CPIC_TO_MPIC_ARRAY[3], CPIC_TO_MPIC_ARRAY[4], CPIC_TO_MPIC_ARRAY[5], CPIC_TO_MPIC_ARRAY[6] ); 
....................       unsigned int8  FM_  = CPIC_TO_MPIC_ARRAY[10]; 
09060:  MOVFF  BC,401
09064:  MOVFF  BD,400
09068:  MOVFF  BE,3FF
0906C:  MOVFF  BF,3FE
09070:  MOVFF  C3,402
....................        
....................       if( FM_ == 0xF1 )  
09074:  MOVLB  4
09076:  MOVF   x02,W
09078:  SUBLW  F1
0907A:  BNZ   90BE
....................       { 
....................          Fprintf(PC,"COM FM sector erase\n\r"); 
0907C:  MOVLW  DA
0907E:  MOVWF  FF6
09080:  MOVLW  16
09082:  MOVWF  FF7
09084:  MOVLW  00
09086:  MOVWF  FF8
09088:  MOVLB  0
0908A:  CALL   2068
....................          Output_Low(PIN_C5); 
0908E:  BCF    F94.5
09090:  BCF    F8B.5
....................          COM_FM_SECTOR_ERASE(ADD_, 64); 
09092:  MOVFF  401,436
09096:  MOVFF  400,435
0909A:  MOVFF  3FF,434
0909E:  MOVFF  3FE,433
090A2:  MOVLW  40
090A4:  MOVLB  4
090A6:  MOVWF  x37
090A8:  MOVLW  03
090AA:  MOVWF  x39
090AC:  MOVLW  E8
090AE:  MOVWF  x38
090B0:  MOVLB  0
090B2:  CALL   44C0
....................          Output_HIGH(PIN_C5); 
090B6:  BCF    F94.5
090B8:  BSF    F8B.5
....................       } 
090BA:  BRA    9140
090BC:  MOVLB  4
....................        
....................       else if( FM_ == 0xF2 )  
090BE:  MOVF   x02,W
090C0:  SUBLW  F2
090C2:  BNZ   90FE
....................       { 
....................          Fprintf(PC,"MAIN FM sector erase\n\r"); 
090C4:  MOVLW  F0
090C6:  MOVWF  FF6
090C8:  MOVLW  16
090CA:  MOVWF  FF7
090CC:  MOVLW  00
090CE:  MOVWF  FF8
090D0:  MOVLB  0
090D2:  CALL   2068
....................          MAIN_FM_SECTOR_ERASE(ADD_, 64); 
090D6:  MOVFF  401,413
090DA:  MOVFF  400,412
090DE:  MOVFF  3FF,411
090E2:  MOVFF  3FE,410
090E6:  MOVLW  40
090E8:  MOVLB  4
090EA:  MOVWF  x14
090EC:  MOVLW  03
090EE:  MOVWF  x16
090F0:  MOVLW  E8
090F2:  MOVWF  x15
090F4:  MOVLB  0
090F6:  CALL   2ABE
....................       } 
090FA:  BRA    9140
090FC:  MOVLB  4
....................        
....................       else if( FM_ == 0xF3 )  
090FE:  MOVF   x02,W
09100:  SUBLW  F3
09102:  BNZ   9142
....................       { 
....................          Fprintf(PC,"MSN FM sector erase\n\r"); 
09104:  MOVLW  08
09106:  MOVWF  FF6
09108:  MOVLW  17
0910A:  MOVWF  FF7
0910C:  MOVLW  00
0910E:  MOVWF  FF8
09110:  MOVLB  0
09112:  CALL   2068
....................          Output_Low(PIN_A5); 
09116:  BCF    F92.5
09118:  BCF    F89.5
....................          MSN_FM_SECTOR_ERASE(ADD_, 64); 
0911A:  MOVFF  401,406
0911E:  MOVFF  400,405
09122:  MOVFF  3FF,404
09126:  MOVFF  3FE,403
0912A:  MOVLW  40
0912C:  MOVLB  4
0912E:  MOVWF  x07
09130:  MOVLW  03
09132:  MOVWF  x09
09134:  MOVLW  E8
09136:  MOVWF  x08
09138:  MOVLB  0
0913A:  BRA    8F38
....................          Output_HIGH(PIN_A5); 
0913C:  BCF    F92.5
0913E:  BSF    F89.5
09140:  MOVLB  4
....................       } 
....................    } 
09142:  MOVLB  0
09144:  GOTO   B24E (RETURN)
.................... } 
....................  
....................  
.................... // controlling compic+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
.................... void CONTROL_KILL_SWITCHES() 
.................... { 
....................    if( CPIC_TO_MPIC_ARRAY[1] == 0x00 && CPIC_TO_MPIC_ARRAY[2] == 0xFF ) 
*
094D8:  MOVF   xBA,F
094DA:  BTFSS  FD8.2
094DC:  BRA    965C
094DE:  INCFSZ xBB,W
094E0:  BRA    965C
....................    {     
....................       char switch_       = CPIC_TO_MPIC_ARRAY[3] ; 
....................       char switch_status = CPIC_TO_MPIC_ARRAY[4] ; 
094E2:  MOVFF  BC,3FD
094E6:  MOVFF  BD,3FE
....................       Fprintf(PC,"CONTROL_FAB_KILL_SWITCH \n\r"); 
094EA:  MOVLW  1E
094EC:  MOVWF  FF6
094EE:  MOVLW  17
094F0:  MOVWF  FF7
094F2:  MOVLW  00
094F4:  MOVWF  FF8
094F6:  CALL   2068
....................  
....................       if( switch_ == 0xF1 ) 
094FA:  MOVLB  3
094FC:  MOVF   xFD,W
094FE:  SUBLW  F1
09500:  BNZ   9550
....................       { 
....................          Fprintf(PC,"Controlling FAB kill switch = %X\n\r", switch_status); 
09502:  MOVLW  3A
09504:  MOVWF  FF6
09506:  MOVLW  17
09508:  MOVWF  FF7
0950A:  MOVLW  00
0950C:  MOVWF  FF8
0950E:  MOVLW  1E
09510:  MOVLB  4
09512:  MOVWF  x3D
09514:  MOVLB  0
09516:  CALL   20A4
0951A:  MOVFF  3FE,43E
0951E:  MOVLW  37
09520:  MOVLB  4
09522:  MOVWF  x3F
09524:  MOVLB  0
09526:  CALL   20D6
0952A:  MOVLW  0A
0952C:  BTFSS  F9E.4
0952E:  BRA    952C
09530:  MOVWF  FAD
09532:  MOVLW  0D
09534:  BTFSS  F9E.4
09536:  BRA    9534
09538:  MOVWF  FAD
....................          if( switch_status == 0x01 ) _CLOSE_FAB_KILL_SWITCH(); 
0953A:  MOVLB  3
0953C:  DECFSZ xFE,W
0953E:  BRA    9546
09540:  MOVLB  0
09542:  RCALL  9284
09544:  MOVLB  3
....................          if( switch_status == 0x00 ) _OPEN_FAB_KILL_SWITCH(); 
09546:  MOVF   xFE,F
09548:  BNZ   9550
0954A:  MOVLB  0
0954C:  RCALL  9304
0954E:  MOVLB  3
....................       } 
....................        
....................       if( switch_ == 0xF2 ) 
09550:  MOVF   xFD,W
09552:  SUBLW  F2
09554:  BNZ   95A4
....................       { 
....................          Fprintf(PC,"Controlling OBC kill switch = %X\n\r", switch_status); 
09556:  MOVLW  5E
09558:  MOVWF  FF6
0955A:  MOVLW  17
0955C:  MOVWF  FF7
0955E:  MOVLW  00
09560:  MOVWF  FF8
09562:  MOVLW  1E
09564:  MOVLB  4
09566:  MOVWF  x3D
09568:  MOVLB  0
0956A:  CALL   20A4
0956E:  MOVFF  3FE,43E
09572:  MOVLW  37
09574:  MOVLB  4
09576:  MOVWF  x3F
09578:  MOVLB  0
0957A:  CALL   20D6
0957E:  MOVLW  0A
09580:  BTFSS  F9E.4
09582:  BRA    9580
09584:  MOVWF  FAD
09586:  MOVLW  0D
09588:  BTFSS  F9E.4
0958A:  BRA    9588
0958C:  MOVWF  FAD
....................          if( switch_status == 0x01 ) _CLOSE_OBC_KILL_SWITCH(); 
0958E:  MOVLB  3
09590:  DECFSZ xFE,W
09592:  BRA    959A
09594:  MOVLB  0
09596:  RCALL  9380
09598:  MOVLB  3
....................          if( switch_status == 0x00 ) _OPEN_OBC_KILL_SWITCH(); 
0959A:  MOVF   xFE,F
0959C:  BNZ   95A4
0959E:  MOVLB  0
095A0:  RCALL  9422
095A2:  MOVLB  3
....................       } 
....................        
....................       // Acknoleging to com pic________________________________________________ 
....................       if( FAB_TO_MPIC_ARRAY[0] == 0xFA && FAB_TO_MPIC_ARRAY[2] == 0xFB ) 
095A4:  MOVLB  1
095A6:  MOVF   x10,W
095A8:  SUBLW  FA
095AA:  BNZ   95FE
095AC:  MOVF   x12,W
095AE:  SUBLW  FB
095B0:  BNZ   95FE
....................       { 
....................          CLEAR_DATA_ARRAY( MPIC_TO_CPIC_ARRAY, 32 ); 
095B2:  MOVLB  4
095B4:  CLRF   x38
095B6:  MOVLW  99
095B8:  MOVWF  x37
095BA:  MOVLW  20
095BC:  MOVWF  x39
095BE:  MOVLB  0
095C0:  CALL   2F54
....................          MPIC_TO_CPIC_ARRAY[0]  = 0xB0;   // header 
095C4:  MOVLW  B0
095C6:  MOVWF  x99
....................          MPIC_TO_CPIC_ARRAY[1]  = 0xFF;   // comand 
095C8:  SETF   x9A
....................          MPIC_TO_CPIC_ARRAY[31] = 0xB1;   // footer 
095CA:  MOVLW  B1
095CC:  MOVWF  xB8
....................          for(int i = 0; i<32; i++) 
095CE:  MOVLB  3
095D0:  CLRF   xFF
095D2:  MOVF   xFF,W
095D4:  SUBLW  1F
095D6:  BNC   95FA
....................          { 
....................             fputc(MPIC_TO_CPIC_ARRAY[i], CPic); 
095D8:  CLRF   03
095DA:  MOVF   xFF,W
095DC:  ADDLW  99
095DE:  MOVWF  FE9
095E0:  MOVLW  00
095E2:  ADDWFC 03,W
095E4:  MOVWF  FEA
095E6:  MOVFF  FEF,401
095EA:  MOVLB  4
095EC:  MOVF   x01,W
095EE:  MOVLB  0
095F0:  CALL   88D4
095F4:  MOVLB  3
095F6:  INCF   xFF,F
095F8:  BRA    95D2
....................          } 
....................       } 
095FA:  BRA    9648
095FC:  MOVLB  1
....................           
....................       else  
....................       { 
....................          CLEAR_DATA_ARRAY( MPIC_TO_CPIC_ARRAY, 32 ); 
095FE:  MOVLB  4
09600:  CLRF   x38
09602:  MOVLW  99
09604:  MOVWF  x37
09606:  MOVLW  20
09608:  MOVWF  x39
0960A:  MOVLB  0
0960C:  CALL   2F54
....................          MPIC_TO_CPIC_ARRAY[0]  = 0xB0;   // header 
09610:  MOVLW  B0
09612:  MOVWF  x99
....................          MPIC_TO_CPIC_ARRAY[1]  = 0xF0;   // comand 
09614:  MOVLW  F0
09616:  MOVWF  x9A
....................          MPIC_TO_CPIC_ARRAY[31] = 0xB1;   // footer 
09618:  MOVLW  B1
0961A:  MOVWF  xB8
....................          for(int i = 0; i<32; i++) 
0961C:  MOVLB  4
0961E:  CLRF   x00
09620:  MOVF   x00,W
09622:  SUBLW  1F
09624:  BNC   9646
....................          { 
....................             fputc(MPIC_TO_CPIC_ARRAY[i], CPic); 
09626:  CLRF   03
09628:  MOVF   x00,W
0962A:  ADDLW  99
0962C:  MOVWF  FE9
0962E:  MOVLW  00
09630:  ADDWFC 03,W
09632:  MOVWF  FEA
09634:  MOVFF  FEF,401
09638:  MOVF   x01,W
0963A:  MOVLB  0
0963C:  CALL   88D4
09640:  MOVLB  4
09642:  INCF   x00,F
09644:  BRA    9620
09646:  MOVLB  3
....................          } 
....................       } 
....................       CLEAR_DATA_ARRAY(FAB_TO_MPIC_ARRAY, 10); 
09648:  MOVLW  01
0964A:  MOVLB  4
0964C:  MOVWF  x38
0964E:  MOVLW  10
09650:  MOVWF  x37
09652:  MOVLW  0A
09654:  MOVWF  x39
09656:  MOVLB  0
09658:  CALL   2F54
....................       //_______________________________________________________________________ 
....................    } 
0965C:  GOTO   B256 (RETURN)
....................  
.................... } 
....................  
....................  
.................... // DEPLOY_ANTENNA_USING_GS_COMMAND______________________________________________0XDA+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
.................... void DEPLOY_ANTENNA_USING_GS_COMMAND() 
.................... { 
....................    if( CPIC_TO_MPIC_ARRAY[1] == 0x00 && CPIC_TO_MPIC_ARRAY[2] == 0xDA ) 
*
09D3E:  MOVF   xBA,F
09D40:  BTFSS  FD8.2
09D42:  BRA    9EB8
09D44:  MOVF   xBB,W
09D46:  SUBLW  DA
09D48:  BTFSS  FD8.2
09D4A:  BRA    9EB8
....................    {    
....................       Fprintf(PC,"DEPLOY_ANTENNA_USING_GS_COMMAND\n\r");       
09D4C:  MOVLW  82
09D4E:  MOVWF  FF6
09D50:  MOVLW  17
09D52:  MOVWF  FF7
09D54:  MOVLW  00
09D56:  MOVWF  FF8
09D58:  CALL   2068
....................  
....................       // first Acknoleging to com pic  
....................       CLEAR_DATA_ARRAY( MPIC_TO_CPIC_ARRAY, 32 ); 
09D5C:  MOVLB  4
09D5E:  CLRF   x38
09D60:  MOVLW  99
09D62:  MOVWF  x37
09D64:  MOVLW  20
09D66:  MOVWF  x39
09D68:  MOVLB  0
09D6A:  CALL   2F54
....................       MPIC_TO_CPIC_ARRAY[0]  = 0xB0;   // header 
09D6E:  MOVLW  B0
09D70:  MOVWF  x99
....................       MPIC_TO_CPIC_ARRAY[1]  = 0xDA;   // comand 
09D72:  MOVLW  DA
09D74:  MOVWF  x9A
....................       MPIC_TO_CPIC_ARRAY[31] = 0xB1;   // footer 
09D76:  MOVLW  B1
09D78:  MOVWF  xB8
....................       for(int i = 0; i<32; i++) 
09D7A:  MOVLB  3
09D7C:  CLRF   xFD
09D7E:  MOVF   xFD,W
09D80:  SUBLW  1F
09D82:  BNC   9DA4
....................       { 
....................          fputc(MPIC_TO_CPIC_ARRAY[i], CPic); 
09D84:  CLRF   03
09D86:  MOVF   xFD,W
09D88:  ADDLW  99
09D8A:  MOVWF  FE9
09D8C:  MOVLW  00
09D8E:  ADDWFC 03,W
09D90:  MOVWF  FEA
09D92:  MOVFF  FEF,3FF
09D96:  MOVF   xFF,W
09D98:  MOVLB  0
09D9A:  CALL   88D4
09D9E:  MOVLB  3
09DA0:  INCF   xFD,F
09DA2:  BRA    9D7E
....................       } 
....................        
....................       //_______________________________________________ 
....................       // sending command to reset pic wait for respone we will try 5 times 
....................       // then we start antena deployment  
....................       CLEAR_DATA_ARRAY( MPIC_TO_RPIC_ARRAY, 10 ); 
09DA4:  MOVLB  4
09DA6:  CLRF   x38
09DA8:  MOVLW  58
09DAA:  MOVWF  x37
09DAC:  MOVLW  0A
09DAE:  MOVWF  x39
09DB0:  MOVLB  0
09DB2:  CALL   2F54
....................       MPIC_TO_RPIC_ARRAY[0] = 0xA0;   // header 
09DB6:  MOVLW  A0
09DB8:  MOVWF  58
....................       MPIC_TO_RPIC_ARRAY[1] = 0xDA;   // comand 
09DBA:  MOVLW  DA
09DBC:  MOVWF  59
....................       MPIC_TO_RPIC_ARRAY[9] = 0xA1;   // footer 
09DBE:  MOVLW  A1
09DC0:  MOVWF  x61
....................            
....................       COMUNICATION_WITH_RST_PIC_AND_WAIT_FOR_RESPONE(5, 1000,500);      
09DC2:  MOVLB  4
09DC4:  CLRF   x34
09DC6:  MOVLW  05
09DC8:  MOVWF  x33
09DCA:  MOVLW  03
09DCC:  MOVWF  x36
09DCE:  MOVLW  E8
09DD0:  MOVWF  x35
09DD2:  MOVLW  01
09DD4:  MOVWF  x38
09DD6:  MOVLW  F4
09DD8:  MOVWF  x37
09DDA:  MOVLB  0
09DDC:  CALL   3110
....................  
....................       if( CPIC_TO_MPIC_ARRAY[3] == 0x01 ) 
09DE0:  DECFSZ xBC,W
09DE2:  BRA    9DFA
....................       { 
....................          Fprintf(PC,"Antenna set-1 deployment started\n\r"); 
09DE4:  MOVLW  A4
09DE6:  MOVWF  FF6
09DE8:  MOVLW  17
09DEA:  MOVWF  FF7
09DEC:  MOVLW  00
09DEE:  MOVWF  FF8
09DF0:  CALL   2068
....................          output_high(PIN_B0); 
09DF4:  BCF    F93.0
09DF6:  BSF    F8A.0
....................       } 
09DF8:  BRA    9E14
....................        
....................       else if( CPIC_TO_MPIC_ARRAY[3] == 0x02 ) 
09DFA:  MOVF   xBC,W
09DFC:  SUBLW  02
09DFE:  BNZ   9E14
....................       { 
....................          Fprintf(PC,"Antenna set-2 deployment started\n\r"); 
09E00:  MOVLW  C8
09E02:  MOVWF  FF6
09E04:  MOVLW  17
09E06:  MOVWF  FF7
09E08:  MOVLW  00
09E0A:  MOVWF  FF8
09E0C:  CALL   2068
....................          output_high(PIN_B1); 
09E10:  BCF    F93.1
09E12:  BSF    F8A.1
....................       } 
....................        
....................       for( int i = 0; i<25; i++) 
09E14:  MOVLB  3
09E16:  CLRF   xFE
09E18:  MOVF   xFE,W
09E1A:  SUBLW  18
09E1C:  BNC   9E80
....................       { 
....................          Delay_ms(1000); 
09E1E:  MOVLW  04
09E20:  MOVWF  xFF
09E22:  MOVLW  FA
09E24:  MOVLB  4
09E26:  MOVWF  x3E
09E28:  MOVLB  0
09E2A:  CALL   1DA0
09E2E:  MOVLB  3
09E30:  DECFSZ xFF,F
09E32:  BRA    9E22
....................          Fprintf(PC,"Counting deployment time %02d Sec\n\r", i+1); 
09E34:  MOVLW  01
09E36:  ADDWF  xFE,W
09E38:  MOVWF  xFF
09E3A:  MOVLW  EC
09E3C:  MOVWF  FF6
09E3E:  MOVLW  17
09E40:  MOVWF  FF7
09E42:  MOVLW  00
09E44:  MOVWF  FF8
09E46:  MOVLW  19
09E48:  MOVLB  4
09E4A:  MOVWF  x3D
09E4C:  MOVLB  0
09E4E:  CALL   20A4
09E52:  MOVFF  3FF,409
09E56:  MOVLW  01
09E58:  MOVLB  4
09E5A:  MOVWF  x0A
09E5C:  MOVLB  0
09E5E:  CALL   3242
09E62:  MOVLW  09
09E64:  MOVWF  FF6
09E66:  MOVLW  18
09E68:  MOVWF  FF7
09E6A:  MOVLW  00
09E6C:  MOVWF  FF8
09E6E:  MOVLW  06
09E70:  MOVLB  4
09E72:  MOVWF  x3D
09E74:  MOVLB  0
09E76:  CALL   20A4
09E7A:  MOVLB  3
09E7C:  INCF   xFE,F
09E7E:  BRA    9E18
....................       } 
....................        
....................            if( CPIC_TO_MPIC_ARRAY[2] == 0x01 ) OUTPUT_LOW(PIN_B0);     
09E80:  MOVLB  0
09E82:  DECFSZ xBB,W
09E84:  BRA    9E8C
09E86:  BCF    F93.0
09E88:  BCF    F8A.0
09E8A:  BRA    9E96
....................       else if( CPIC_TO_MPIC_ARRAY[2] == 0x02 ) OUTPUT_LOW(PIN_B1);  
09E8C:  MOVF   xBB,W
09E8E:  SUBLW  02
09E90:  BNZ   9E96
09E92:  BCF    F93.1
09E94:  BCF    F8A.1
....................         
....................       Fprintf(PC,"Antenna deployment finished\n\r");  
09E96:  MOVLW  10
09E98:  MOVWF  FF6
09E9A:  MOVLW  18
09E9C:  MOVWF  FF7
09E9E:  MOVLW  00
09EA0:  MOVWF  FF8
09EA2:  CALL   2068
....................       CLEAR_DATA_ARRAY( RPIC_TO_MPIC_ARRAY, 32 ); 
09EA6:  MOVLB  4
09EA8:  CLRF   x38
09EAA:  MOVLW  62
09EAC:  MOVWF  x37
09EAE:  MOVLW  20
09EB0:  MOVWF  x39
09EB2:  MOVLB  0
09EB4:  CALL   2F54
....................    } 
09EB8:  GOTO   B262 (RETURN)
.................... } 
....................  
.................... // SET_ANTENNA_VALUES_USING_GS_COMMAND()______________________________________________0XDB+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
.................... void SET_ANTENNA_VALUES_USING_GS_COMMAND() 
.................... { 
....................    if( CPIC_TO_MPIC_ARRAY[1] == 0x00 && CPIC_TO_MPIC_ARRAY[2] == 0xDB ) 
09EBC:  MOVF   xBA,F
09EBE:  BTFSS  FD8.2
09EC0:  BRA    A1E8
09EC2:  MOVF   xBB,W
09EC4:  SUBLW  DB
09EC6:  BTFSS  FD8.2
09EC8:  BRA    A1E8
....................    {    
....................       Fprintf(PC,"SET_ANTENNA_VALUES_USING_GS_COMMAND\n\r");       
09ECA:  MOVLW  2E
09ECC:  MOVWF  FF6
09ECE:  MOVLW  18
09ED0:  MOVWF  FF7
09ED2:  MOVLW  00
09ED4:  MOVWF  FF8
09ED6:  CALL   2068
....................  
....................       // first Acknoleging to com pic  
....................       CLEAR_DATA_ARRAY( MPIC_TO_CPIC_ARRAY, 32 ); 
09EDA:  MOVLB  4
09EDC:  CLRF   x38
09EDE:  MOVLW  99
09EE0:  MOVWF  x37
09EE2:  MOVLW  20
09EE4:  MOVWF  x39
09EE6:  MOVLB  0
09EE8:  CALL   2F54
....................       MPIC_TO_CPIC_ARRAY[0]  = 0xB0;   // header 
09EEC:  MOVLW  B0
09EEE:  MOVWF  x99
....................       MPIC_TO_CPIC_ARRAY[1]  = 0xDB;   // comand 
09EF0:  MOVLW  DB
09EF2:  MOVWF  x9A
....................       MPIC_TO_CPIC_ARRAY[31] = 0xB1;   // footer 
09EF4:  MOVLW  B1
09EF6:  MOVWF  xB8
....................       for(int i = 0; i<32; i++) 
09EF8:  MOVLB  3
09EFA:  CLRF   xFD
09EFC:  MOVF   xFD,W
09EFE:  SUBLW  1F
09F00:  BNC   9F22
....................       { 
....................          fputc(MPIC_TO_CPIC_ARRAY[i], CPic); 
09F02:  CLRF   03
09F04:  MOVF   xFD,W
09F06:  ADDLW  99
09F08:  MOVWF  FE9
09F0A:  MOVLW  00
09F0C:  ADDWFC 03,W
09F0E:  MOVWF  FEA
09F10:  MOVFF  FEF,3FE
09F14:  MOVF   xFE,W
09F16:  MOVLB  0
09F18:  CALL   88D4
09F1C:  MOVLB  3
09F1E:  INCF   xFD,F
09F20:  BRA    9EFC
....................       } 
....................        
....................       ERASE_PROGRAM_EEPROM(0x18000); 
09F22:  BSF    FD0.6
09F24:  MOVLW  01
09F26:  MOVWF  FF8
09F28:  MOVLW  80
09F2A:  MOVWF  FF7
09F2C:  CLRF   FF6
09F2E:  BSF    F7F.4
09F30:  MOVLB  0
09F32:  CALL   3304
09F36:  CLRF   FF8
....................       WRITE_PROGRAM_EEPROM(0x18000, (unsigned int16)CPIC_TO_MPIC_ARRAY[3]); 
09F38:  MOVLB  3
09F3A:  CLRF   xFF
09F3C:  MOVFF  BC,3FE
09F40:  BSF    FD0.6
09F42:  MOVLW  01
09F44:  MOVWF  FF8
09F46:  MOVLW  80
09F48:  MOVWF  FF7
09F4A:  CLRF   FF6
09F4C:  MOVLB  0
09F4E:  CALL   3322
09F52:  CLRF   FF6
09F54:  MOVFF  3FE,FF5
09F58:  TBLWT*+
09F5A:  MOVFF  3FF,FF5
09F5E:  TBLWT*
09F60:  CALL   3304
09F64:  CLRF   FF8
09F66:  CLRF   FF8
....................       WRITE_PROGRAM_EEPROM(0x18002, (unsigned int16)CPIC_TO_MPIC_ARRAY[4]); 
09F68:  MOVLB  3
09F6A:  CLRF   xFF
09F6C:  MOVFF  BD,3FE
09F70:  BSF    FD0.6
09F72:  MOVLW  01
09F74:  MOVWF  FF8
09F76:  MOVLW  80
09F78:  MOVWF  FF7
09F7A:  MOVLW  02
09F7C:  MOVWF  FF6
09F7E:  MOVLB  0
09F80:  CALL   3322
09F84:  MOVLW  02
09F86:  MOVWF  FF6
09F88:  MOVFF  3FE,FF5
09F8C:  TBLWT*+
09F8E:  MOVFF  3FF,FF5
09F92:  TBLWT*
09F94:  CALL   3304
09F98:  CLRF   FF8
09F9A:  CLRF   FF8
....................       WRITE_PROGRAM_EEPROM(0x18004, (unsigned int16)CPIC_TO_MPIC_ARRAY[5]); 
09F9C:  MOVLB  3
09F9E:  CLRF   xFF
09FA0:  MOVFF  BE,3FE
09FA4:  BSF    FD0.6
09FA6:  MOVLW  01
09FA8:  MOVWF  FF8
09FAA:  MOVLW  80
09FAC:  MOVWF  FF7
09FAE:  MOVLW  04
09FB0:  MOVWF  FF6
09FB2:  MOVLB  0
09FB4:  CALL   3322
09FB8:  MOVLW  04
09FBA:  MOVWF  FF6
09FBC:  MOVFF  3FE,FF5
09FC0:  TBLWT*+
09FC2:  MOVFF  3FF,FF5
09FC6:  TBLWT*
09FC8:  CALL   3304
09FCC:  CLRF   FF8
09FCE:  CLRF   FF8
....................       WRITE_PROGRAM_EEPROM(0x18006, (unsigned int16)CPIC_TO_MPIC_ARRAY[6]); 
09FD0:  MOVLB  3
09FD2:  CLRF   xFF
09FD4:  MOVFF  BF,3FE
09FD8:  BSF    FD0.6
09FDA:  MOVLW  01
09FDC:  MOVWF  FF8
09FDE:  MOVLW  80
09FE0:  MOVWF  FF7
09FE2:  MOVLW  06
09FE4:  MOVWF  FF6
09FE6:  MOVLB  0
09FE8:  CALL   3322
09FEC:  MOVLW  06
09FEE:  MOVWF  FF6
09FF0:  MOVFF  3FE,FF5
09FF4:  TBLWT*+
09FF6:  MOVFF  3FF,FF5
09FFA:  TBLWT*
09FFC:  CALL   3304
0A000:  CLRF   FF8
0A002:  CLRF   FF8
....................        
....................       ANT_SET_1_DEP_FLAG = READ_PROGRAM_EEPROM(0x18000); 
0A004:  MOVFF  FF2,3FE
0A008:  BCF    FF2.7
0A00A:  MOVLW  01
0A00C:  MOVWF  FF8
0A00E:  MOVLW  80
0A010:  MOVWF  FF7
0A012:  CLRF   FF6
0A014:  TBLRD*+
0A016:  MOVF   FF5,W
0A018:  TBLRD*
0A01A:  MOVFF  FF5,03
0A01E:  CLRF   FF8
0A020:  MOVLB  3
0A022:  BTFSC  xFE.7
0A024:  BSF    FF2.7
0A026:  MOVLB  1
0A028:  MOVWF  x97
0A02A:  MOVFF  03,198
....................       ANTSET_1_COUNT     = READ_PROGRAM_EEPROM(0x18002); 
0A02E:  MOVFF  FF2,3FE
0A032:  BCF    FF2.7
0A034:  MOVLW  01
0A036:  MOVWF  FF8
0A038:  MOVLW  80
0A03A:  MOVWF  FF7
0A03C:  MOVLW  02
0A03E:  MOVWF  FF6
0A040:  TBLRD*+
0A042:  MOVF   FF5,W
0A044:  TBLRD*
0A046:  MOVFF  FF5,03
0A04A:  CLRF   FF8
0A04C:  MOVLB  3
0A04E:  BTFSC  xFE.7
0A050:  BSF    FF2.7
0A052:  MOVLB  1
0A054:  MOVWF  x9B
0A056:  MOVFF  03,19C
....................       ANT_SET_2_DEP_FLAG = READ_PROGRAM_EEPROM(0x18004);  
0A05A:  MOVFF  FF2,3FE
0A05E:  BCF    FF2.7
0A060:  MOVLW  01
0A062:  MOVWF  FF8
0A064:  MOVLW  80
0A066:  MOVWF  FF7
0A068:  MOVLW  04
0A06A:  MOVWF  FF6
0A06C:  TBLRD*+
0A06E:  MOVF   FF5,W
0A070:  TBLRD*
0A072:  MOVFF  FF5,03
0A076:  CLRF   FF8
0A078:  MOVLB  3
0A07A:  BTFSC  xFE.7
0A07C:  BSF    FF2.7
0A07E:  MOVLB  1
0A080:  MOVWF  x99
0A082:  MOVFF  03,19A
....................       ANTSET_2_COUNT     = READ_PROGRAM_EEPROM(0x18006); 
0A086:  MOVFF  FF2,3FE
0A08A:  BCF    FF2.7
0A08C:  MOVLW  01
0A08E:  MOVWF  FF8
0A090:  MOVLW  80
0A092:  MOVWF  FF7
0A094:  MOVLW  06
0A096:  MOVWF  FF6
0A098:  TBLRD*+
0A09A:  MOVF   FF5,W
0A09C:  TBLRD*
0A09E:  MOVFF  FF5,03
0A0A2:  CLRF   FF8
0A0A4:  MOVLB  3
0A0A6:  BTFSC  xFE.7
0A0A8:  BSF    FF2.7
0A0AA:  MOVLB  1
0A0AC:  MOVWF  x9D
0A0AE:  MOVFF  03,19E
....................     
....................       // printing antenna related variables  
....................       Fprintf(PC,"Updated antenna deployment values\n\r"); 
0A0B2:  MOVLW  54
0A0B4:  MOVWF  FF6
0A0B6:  MOVLW  18
0A0B8:  MOVWF  FF7
0A0BA:  MOVLW  00
0A0BC:  MOVWF  FF8
0A0BE:  MOVLB  0
0A0C0:  CALL   2068
....................       Fprintf(PC,"ANT_SET_1_DEP_FLAG = %LX\n\r",ANT_SET_1_DEP_FLAG); 
0A0C4:  MOVLW  78
0A0C6:  MOVWF  FF6
0A0C8:  MOVLW  18
0A0CA:  MOVWF  FF7
0A0CC:  MOVLW  00
0A0CE:  MOVWF  FF8
0A0D0:  MOVLW  15
0A0D2:  MOVLB  4
0A0D4:  MOVWF  x3D
0A0D6:  MOVLB  0
0A0D8:  CALL   20A4
0A0DC:  MOVFF  198,43E
0A0E0:  MOVLW  37
0A0E2:  MOVLB  4
0A0E4:  MOVWF  x3F
0A0E6:  MOVLB  0
0A0E8:  CALL   20D6
0A0EC:  MOVFF  197,43E
0A0F0:  MOVLW  37
0A0F2:  MOVLB  4
0A0F4:  MOVWF  x3F
0A0F6:  MOVLB  0
0A0F8:  CALL   20D6
0A0FC:  MOVLW  0A
0A0FE:  BTFSS  F9E.4
0A100:  BRA    A0FE
0A102:  MOVWF  FAD
0A104:  MOVLW  0D
0A106:  BTFSS  F9E.4
0A108:  BRA    A106
0A10A:  MOVWF  FAD
....................       Fprintf(PC,"ANTSET_1_COUNT = %LX\n\r",ANTSET_1_COUNT); 
0A10C:  MOVLW  94
0A10E:  MOVWF  FF6
0A110:  MOVLW  18
0A112:  MOVWF  FF7
0A114:  MOVLW  00
0A116:  MOVWF  FF8
0A118:  MOVLW  11
0A11A:  MOVLB  4
0A11C:  MOVWF  x3D
0A11E:  MOVLB  0
0A120:  CALL   20A4
0A124:  MOVFF  19C,43E
0A128:  MOVLW  37
0A12A:  MOVLB  4
0A12C:  MOVWF  x3F
0A12E:  MOVLB  0
0A130:  CALL   20D6
0A134:  MOVFF  19B,43E
0A138:  MOVLW  37
0A13A:  MOVLB  4
0A13C:  MOVWF  x3F
0A13E:  MOVLB  0
0A140:  CALL   20D6
0A144:  MOVLW  0A
0A146:  BTFSS  F9E.4
0A148:  BRA    A146
0A14A:  MOVWF  FAD
0A14C:  MOVLW  0D
0A14E:  BTFSS  F9E.4
0A150:  BRA    A14E
0A152:  MOVWF  FAD
....................       Fprintf(PC,"ANT_SET_2_DEP_FLAG = %LX\n\r",ANT_SET_2_DEP_FLAG); 
0A154:  MOVLW  AC
0A156:  MOVWF  FF6
0A158:  MOVLW  18
0A15A:  MOVWF  FF7
0A15C:  MOVLW  00
0A15E:  MOVWF  FF8
0A160:  MOVLW  15
0A162:  MOVLB  4
0A164:  MOVWF  x3D
0A166:  MOVLB  0
0A168:  CALL   20A4
0A16C:  MOVFF  19A,43E
0A170:  MOVLW  37
0A172:  MOVLB  4
0A174:  MOVWF  x3F
0A176:  MOVLB  0
0A178:  CALL   20D6
0A17C:  MOVFF  199,43E
0A180:  MOVLW  37
0A182:  MOVLB  4
0A184:  MOVWF  x3F
0A186:  MOVLB  0
0A188:  CALL   20D6
0A18C:  MOVLW  0A
0A18E:  BTFSS  F9E.4
0A190:  BRA    A18E
0A192:  MOVWF  FAD
0A194:  MOVLW  0D
0A196:  BTFSS  F9E.4
0A198:  BRA    A196
0A19A:  MOVWF  FAD
....................       Fprintf(PC,"ANTSET_2_COUNT = %LX\n\r",ANTSET_2_COUNT); 
0A19C:  MOVLW  C8
0A19E:  MOVWF  FF6
0A1A0:  MOVLW  18
0A1A2:  MOVWF  FF7
0A1A4:  MOVLW  00
0A1A6:  MOVWF  FF8
0A1A8:  MOVLW  11
0A1AA:  MOVLB  4
0A1AC:  MOVWF  x3D
0A1AE:  MOVLB  0
0A1B0:  CALL   20A4
0A1B4:  MOVFF  19E,43E
0A1B8:  MOVLW  37
0A1BA:  MOVLB  4
0A1BC:  MOVWF  x3F
0A1BE:  MOVLB  0
0A1C0:  CALL   20D6
0A1C4:  MOVFF  19D,43E
0A1C8:  MOVLW  37
0A1CA:  MOVLB  4
0A1CC:  MOVWF  x3F
0A1CE:  MOVLB  0
0A1D0:  CALL   20D6
0A1D4:  MOVLW  0A
0A1D6:  BTFSS  F9E.4
0A1D8:  BRA    A1D6
0A1DA:  MOVWF  FAD
0A1DC:  MOVLW  0D
0A1DE:  BTFSS  F9E.4
0A1E0:  BRA    A1DE
0A1E2:  MOVWF  FAD
....................       printline();   
0A1E4:  CALL   2092
....................    }    
0A1E8:  GOTO   B266 (RETURN)
.................... } 
....................  
.................... void LOAD_30DAY_COUNTER() 
.................... { 
....................    CW30DAY_COUNTER = MAIN_FM_BYTE_READ(0x0018B000); 
*
02A50:  MOVLB  4
02A52:  CLRF   x1E
02A54:  MOVLW  18
02A56:  MOVWF  x1D
02A58:  MOVLW  B0
02A5A:  MOVWF  x1C
02A5C:  CLRF   x1B
02A5E:  MOVLB  0
02A60:  RCALL  23BE
02A62:  MOVFF  01,1EC
....................    fprintf(PC, "CW 30Day Counter = %u \n\r", CW30DAY_COUNTER );   
02A66:  MOVLW  E0
02A68:  MOVWF  FF6
02A6A:  MOVLW  18
02A6C:  MOVWF  FF7
02A6E:  MOVLW  00
02A70:  MOVWF  FF8
02A72:  MOVLW  13
02A74:  MOVLB  4
02A76:  MOVWF  x3D
02A78:  MOVLB  0
02A7A:  CALL   20A4
02A7E:  MOVFF  1EC,43C
02A82:  MOVLW  1B
02A84:  MOVLB  4
02A86:  MOVWF  x3D
02A88:  MOVLB  0
02A8A:  RCALL  29CE
02A8C:  MOVLW  F5
02A8E:  MOVWF  FF6
02A90:  MOVLW  18
02A92:  MOVWF  FF7
02A94:  MOVLW  00
02A96:  MOVWF  FF8
02A98:  MOVLW  03
02A9A:  MOVLB  4
02A9C:  MOVWF  x3D
02A9E:  MOVLB  0
02AA0:  CALL   20A4
02AA4:  RETURN 0
.................... } 
....................  
.................... void INCREACE_30DAY_COUNTER_ONCE_PER_DAY_AND_CHECK_30DAY_CW_STATUS() 
.................... { 
....................    CW30DAY_COUNTER++; 
*
02C06:  MOVLB  1
02C08:  INCF   xEC,F
....................    MAIN_FM_SECTOR_ERASE(0x0018B000, 4); 
02C0A:  MOVLB  4
02C0C:  CLRF   x13
02C0E:  MOVLW  18
02C10:  MOVWF  x12
02C12:  MOVLW  B0
02C14:  MOVWF  x11
02C16:  CLRF   x10
02C18:  MOVLW  04
02C1A:  MOVWF  x14
02C1C:  MOVLW  03
02C1E:  MOVWF  x16
02C20:  MOVLW  E8
02C22:  MOVWF  x15
02C24:  MOVLB  0
02C26:  RCALL  2ABE
....................    MAIN_FM_BYTE_WRITE(0x0018B000, CW30DAY_COUNTER); 
02C28:  MOVLB  4
02C2A:  CLRF   x18
02C2C:  MOVLW  18
02C2E:  MOVWF  x17
02C30:  MOVLW  B0
02C32:  MOVWF  x16
02C34:  CLRF   x15
02C36:  MOVFF  1EC,419
02C3A:  MOVLB  0
02C3C:  RCALL  2B7E
....................  
....................    if(CW30DAY_COUNTER > 30)  
02C3E:  MOVLB  1
02C40:  MOVF   xEC,W
02C42:  SUBLW  1E
02C44:  BC    2C82
....................    { 
....................       CW30DAY_FLAG = 0; 
02C46:  CLRF   xED
....................       fprintf(PC, "SAT is in 30 day CW disable mode %u\n\r", CW30DAY_FLAG );  
02C48:  MOVLW  FA
02C4A:  MOVWF  FF6
02C4C:  MOVLW  18
02C4E:  MOVWF  FF7
02C50:  MOVLW  00
02C52:  MOVWF  FF8
02C54:  MOVLW  21
02C56:  MOVLB  4
02C58:  MOVWF  x3D
02C5A:  MOVLB  0
02C5C:  CALL   20A4
02C60:  MOVFF  1ED,43C
02C64:  MOVLW  1B
02C66:  MOVLB  4
02C68:  MOVWF  x3D
02C6A:  MOVLB  0
02C6C:  RCALL  29CE
02C6E:  MOVLW  0A
02C70:  BTFSS  F9E.4
02C72:  BRA    2C70
02C74:  MOVWF  FAD
02C76:  MOVLW  0D
02C78:  BTFSS  F9E.4
02C7A:  BRA    2C78
02C7C:  MOVWF  FAD
....................    } 
02C7E:  BRA    2CBC
02C80:  MOVLB  1
....................    else 
....................    { 
....................       CW30DAY_FLAG = 1 ; 
02C82:  MOVLW  01
02C84:  MOVWF  xED
....................       fprintf(PC, "SAT is NOT in 30 day CW disable mode %u\n\r", CW30DAY_FLAG ); 
02C86:  MOVLW  20
02C88:  MOVWF  FF6
02C8A:  MOVLW  19
02C8C:  MOVWF  FF7
02C8E:  MOVLW  00
02C90:  MOVWF  FF8
02C92:  MOVLW  25
02C94:  MOVLB  4
02C96:  MOVWF  x3D
02C98:  MOVLB  0
02C9A:  CALL   20A4
02C9E:  MOVFF  1ED,43C
02CA2:  MOVLW  1B
02CA4:  MOVLB  4
02CA6:  MOVWF  x3D
02CA8:  MOVLB  0
02CAA:  RCALL  29CE
02CAC:  MOVLW  0A
02CAE:  BTFSS  F9E.4
02CB0:  BRA    2CAE
02CB2:  MOVWF  FAD
02CB4:  MOVLW  0D
02CB6:  BTFSS  F9E.4
02CB8:  BRA    2CB6
02CBA:  MOVWF  FAD
....................    } 
02CBC:  GOTO   B1E2 (RETURN)
.................... } 
....................  
.................... void RESET_30DAY_CONTER() 
.................... { 
....................    if(  CPIC_TO_MPIC_ARRAY[2] != 0xCA ) 
*
0A1EC:  MOVF   xBB,W
0A1EE:  SUBLW  CA
0A1F0:  BZ    A230
....................    { 
....................       MAIN_FM_SECTOR_ERASE(0x0018B000, 4, 250); 
0A1F2:  MOVLB  4
0A1F4:  CLRF   x13
0A1F6:  MOVLW  18
0A1F8:  MOVWF  x12
0A1FA:  MOVLW  B0
0A1FC:  MOVWF  x11
0A1FE:  CLRF   x10
0A200:  MOVLW  04
0A202:  MOVWF  x14
0A204:  CLRF   x16
0A206:  MOVLW  FA
0A208:  MOVWF  x15
0A20A:  MOVLB  0
0A20C:  CALL   2ABE
....................       MAIN_FM_BYTE_WRITE(0x0018B000, 0x00); 
0A210:  MOVLB  4
0A212:  CLRF   x18
0A214:  MOVLW  18
0A216:  MOVWF  x17
0A218:  MOVLW  B0
0A21A:  MOVWF  x16
0A21C:  CLRF   x15
0A21E:  CLRF   x19
0A220:  MOVLB  0
0A222:  CALL   2B7E
....................       LOAD_30DAY_COUNTER(); 
0A226:  CALL   2A50
....................        
....................       CW30DAY_FLAG = 1;  
0A22A:  MOVLW  01
0A22C:  MOVLB  1
0A22E:  MOVWF  xED
0A230:  MOVLB  0
....................    } 
0A232:  GOTO   B26A (RETURN)
.................... } 
....................  
....................  
.................... #include <Debug.c> 
.................... // this functions will check debug port incoming 
.................... void CHECK_UART_INCOMING_FROM_DEBUG_PORT() 
.................... { 
....................    if( PC_Available() ) 
*
08734:  BRA    86C8
08736:  MOVF   01,F
08738:  BZ    879E
....................    { 
....................       Delay_ms(100); 
0873A:  MOVLW  64
0873C:  MOVLB  4
0873E:  MOVWF  x3E
08740:  MOVLB  0
08742:  CALL   1DA0
....................       for( int i = 0; i<10; i++) 
08746:  MOVLB  3
08748:  CLRF   xFD
0874A:  MOVF   xFD,W
0874C:  SUBLW  09
0874E:  BNC   876A
....................       { 
....................          if( PC_Read() == 0xD0 ) 
08750:  MOVLB  0
08752:  RCALL  86E4
08754:  MOVF   01,W
08756:  SUBLW  D0
08758:  BNZ   8764
....................          { 
....................              DEBUG_TO_MPIC_ARRAY[0] = 0xD0; 
0875A:  MOVLW  D0
0875C:  MOVWF  21
....................             break; 
0875E:  MOVLB  3
08760:  BRA    876A
08762:  MOVLB  0
....................          } 
08764:  MOVLB  3
08766:  INCF   xFD,F
08768:  BRA    874A
....................       } 
....................  
....................       for(int i=1; i<=50; i++) 
0876A:  MOVLW  01
0876C:  MOVWF  xFE
0876E:  MOVF   xFE,W
08770:  SUBLW  32
08772:  BNC   879E
....................       { 
....................          DEBUG_TO_MPIC_ARRAY[i] = PC_Read(); 
08774:  CLRF   03
08776:  MOVF   xFE,W
08778:  ADDLW  21
0877A:  MOVWF  01
0877C:  MOVLW  00
0877E:  ADDWFC 03,F
08780:  MOVFF  01,3FF
08784:  MOVFF  03,400
08788:  MOVLB  0
0878A:  RCALL  86E4
0878C:  MOVFF  400,FEA
08790:  MOVFF  3FF,FE9
08794:  MOVFF  01,FEF
08798:  MOVLB  3
0879A:  INCF   xFE,F
0879C:  BRA    876E
0879E:  MOVLB  0
....................       } 
....................      
....................    } 
087A0:  GOTO   B21E (RETURN)
.................... } 
....................  
.................... // this functions will print received comand prom bebug port 
.................... void PRINT_RECIVED_COMMAND_FROM_DEBUG_PORT() 
.................... { 
....................    printline(); 
*
0A236:  CALL   2092
....................    Fprintf(PC,"Received command from debug port >> "); 
0A23A:  MOVLW  4A
0A23C:  MOVWF  FF6
0A23E:  MOVLW  19
0A240:  MOVWF  FF7
0A242:  MOVLW  00
0A244:  MOVWF  FF8
0A246:  CALL   2068
....................    for(int i = 0; i<12; i++) 
0A24A:  MOVLB  3
0A24C:  CLRF   xFD
0A24E:  MOVF   xFD,W
0A250:  SUBLW  0B
0A252:  BNC   A280
....................    { 
....................       Fprintf(PC,"%X ",DEBUG_TO_MPIC_ARRAY[i]); 
0A254:  CLRF   03
0A256:  MOVF   xFD,W
0A258:  ADDLW  21
0A25A:  MOVWF  FE9
0A25C:  MOVLW  00
0A25E:  ADDWFC 03,W
0A260:  MOVWF  FEA
0A262:  MOVFF  FEF,43E
0A266:  MOVLW  37
0A268:  MOVLB  4
0A26A:  MOVWF  x3F
0A26C:  MOVLB  0
0A26E:  CALL   20D6
0A272:  MOVLW  20
0A274:  BTFSS  F9E.4
0A276:  BRA    A274
0A278:  MOVWF  FAD
0A27A:  MOVLB  3
0A27C:  INCF   xFD,F
0A27E:  BRA    A24E
....................    } 
....................    printline(); 
0A280:  MOVLB  0
0A282:  CALL   2092
0A286:  GOTO   B28C (RETURN)
.................... } 
....................  
.................... //PIN_B1 & PIN_B0 is collect pin 
....................  
.................... void DEPLOY_ANTENNA_INSTANTLY()    // 0xDA 
.................... { 
....................    if( DEBUG_TO_MPIC_ARRAY[1] == 0xDA ) 
*
0A5EC:  MOVF   22,W
0A5EE:  SUBLW  DA
0A5F0:  BTFSS  FD8.2
0A5F2:  BRA    A72C
....................    { 
....................       CLEAR_DATA_ARRAY( MPIC_TO_RPIC_ARRAY, 10 ); 
0A5F4:  MOVLB  4
0A5F6:  CLRF   x38
0A5F8:  MOVLW  58
0A5FA:  MOVWF  x37
0A5FC:  MOVLW  0A
0A5FE:  MOVWF  x39
0A600:  MOVLB  0
0A602:  CALL   2F54
....................        
....................       MPIC_TO_RPIC_ARRAY[0] = 0xA0;   // header 
0A606:  MOVLW  A0
0A608:  MOVWF  58
....................       MPIC_TO_RPIC_ARRAY[1] = 0xDA;   // comand 
0A60A:  MOVLW  DA
0A60C:  MOVWF  59
....................       MPIC_TO_RPIC_ARRAY[9] = 0xA1;   // footer 
0A60E:  MOVLW  A1
0A610:  MOVWF  x61
....................              
....................       // sending command to reset pic wait for respone we will try 10 times 
....................       // then we start antena deployment   
....................       COMUNICATION_WITH_RST_PIC_AND_WAIT_FOR_RESPONE(5, 1000,500);   
0A612:  MOVLB  4
0A614:  CLRF   x34
0A616:  MOVLW  05
0A618:  MOVWF  x33
0A61A:  MOVLW  03
0A61C:  MOVWF  x36
0A61E:  MOVLW  E8
0A620:  MOVWF  x35
0A622:  MOVLW  01
0A624:  MOVWF  x38
0A626:  MOVLW  F4
0A628:  MOVWF  x37
0A62A:  MOVLB  0
0A62C:  CALL   3110
....................        
....................       if( MPIC_TO_RPIC_ARRAY[1] == 0xDA && RPIC_TO_MPIC_ARRAY[0] == 0xA0 && RPIC_TO_MPIC_ARRAY[31] == 0xA1 ) 
0A630:  MOVF   59,W
0A632:  SUBLW  DA
0A634:  BTFSS  FD8.2
0A636:  BRA    A72C
0A638:  MOVF   x62,W
0A63A:  SUBLW  A0
0A63C:  BTFSS  FD8.2
0A63E:  BRA    A72C
0A640:  MOVF   x81,W
0A642:  SUBLW  A1
0A644:  BNZ   A72C
....................       { 
....................          if( DEBUG_TO_MPIC_ARRAY[2] == 0x01 ) 
0A646:  DECFSZ 23,W
0A648:  BRA    A65E
....................          { 
....................             Fprintf(PC,"Antenna set-1 deployment started\n\r"); 
0A64A:  MOVLW  70
0A64C:  MOVWF  FF6
0A64E:  MOVLW  19
0A650:  MOVWF  FF7
0A652:  MOVLW  00
0A654:  MOVWF  FF8
0A656:  CALL   2068
....................             output_high(PIN_B0); 
0A65A:  BCF    F93.0
0A65C:  BSF    F8A.0
....................             //OUTPUT_HIGH(PIN_G1); // put correct pin 
....................          } 
....................          if( DEBUG_TO_MPIC_ARRAY[2] == 0x02 ) 
0A65E:  MOVF   23,W
0A660:  SUBLW  02
0A662:  BNZ   A678
....................          { 
....................             Fprintf(PC,"Antenna set-2 deployment started\n\r"); 
0A664:  MOVLW  94
0A666:  MOVWF  FF6
0A668:  MOVLW  19
0A66A:  MOVWF  FF7
0A66C:  MOVLW  00
0A66E:  MOVWF  FF8
0A670:  CALL   2068
....................             output_high(PIN_B1); 
0A674:  BCF    F93.1
0A676:  BSF    F8A.1
....................             //OUTPUT_HIGH(PIN_G1); // put corect pin 
....................          } 
....................           
....................           
....................          for( int i = 0; i<25; i++) 
0A678:  MOVLB  3
0A67A:  CLRF   xFD
0A67C:  MOVF   xFD,W
0A67E:  SUBLW  18
0A680:  BNC   A6E4
....................          { 
....................             Delay_ms(1000); 
0A682:  MOVLW  04
0A684:  MOVWF  xFE
0A686:  MOVLW  FA
0A688:  MOVLB  4
0A68A:  MOVWF  x3E
0A68C:  MOVLB  0
0A68E:  CALL   1DA0
0A692:  MOVLB  3
0A694:  DECFSZ xFE,F
0A696:  BRA    A686
....................             Fprintf(PC,"Counting deployment time %02d Sec\n\r", i+1); 
0A698:  MOVLW  01
0A69A:  ADDWF  xFD,W
0A69C:  MOVWF  xFE
0A69E:  MOVLW  B8
0A6A0:  MOVWF  FF6
0A6A2:  MOVLW  19
0A6A4:  MOVWF  FF7
0A6A6:  MOVLW  00
0A6A8:  MOVWF  FF8
0A6AA:  MOVLW  19
0A6AC:  MOVLB  4
0A6AE:  MOVWF  x3D
0A6B0:  MOVLB  0
0A6B2:  CALL   20A4
0A6B6:  MOVFF  3FE,409
0A6BA:  MOVLW  01
0A6BC:  MOVLB  4
0A6BE:  MOVWF  x0A
0A6C0:  MOVLB  0
0A6C2:  CALL   3242
0A6C6:  MOVLW  D5
0A6C8:  MOVWF  FF6
0A6CA:  MOVLW  19
0A6CC:  MOVWF  FF7
0A6CE:  MOVLW  00
0A6D0:  MOVWF  FF8
0A6D2:  MOVLW  06
0A6D4:  MOVLB  4
0A6D6:  MOVWF  x3D
0A6D8:  MOVLB  0
0A6DA:  CALL   20A4
0A6DE:  MOVLB  3
0A6E0:  INCF   xFD,F
0A6E2:  BRA    A67C
....................          } 
....................           
....................          if( DEBUG_TO_MPIC_ARRAY[2] == 0x01 ) OUTPUT_LOW(PIN_B0);    // put the correct pin 
0A6E4:  DECFSZ 23,W
0A6E6:  BRA    A6EC
0A6E8:  BCF    F93.0
0A6EA:  BCF    F8A.0
....................          if( DEBUG_TO_MPIC_ARRAY[2] == 0x02 ) OUTPUT_LOW(PIN_B1);    // put the correct pin 
0A6EC:  MOVF   23,W
0A6EE:  SUBLW  02
0A6F0:  BNZ   A6F6
0A6F2:  BCF    F93.1
0A6F4:  BCF    F8A.1
....................            
....................          Fprintf(PC,"Antenna deployment finished\n\r");  
0A6F6:  MOVLW  DC
0A6F8:  MOVWF  FF6
0A6FA:  MOVLW  19
0A6FC:  MOVWF  FF7
0A6FE:  MOVLW  00
0A700:  MOVWF  FF8
0A702:  MOVLB  0
0A704:  CALL   2068
....................          CLEAR_DATA_ARRAY( RPIC_TO_MPIC_ARRAY, 32 ); 
0A708:  MOVLB  4
0A70A:  CLRF   x38
0A70C:  MOVLW  62
0A70E:  MOVWF  x37
0A710:  MOVLW  20
0A712:  MOVWF  x39
0A714:  MOVLB  0
0A716:  CALL   2F54
....................          CLEAR_DATA_ARRAY( DEBUG_TO_MPIC_ARRAY, 10 ); 
0A71A:  MOVLB  4
0A71C:  CLRF   x38
0A71E:  MOVLW  21
0A720:  MOVWF  x37
0A722:  MOVLW  0A
0A724:  MOVWF  x39
0A726:  MOVLB  0
0A728:  CALL   2F54
....................       } 
....................    } 
0A72C:  GOTO   B2A0 (RETURN)
.................... } 
....................  
.................... void SET_UP_ANTENNA_DEPLOYMENT_VALUES()    // 0xDB 
.................... { 
....................    if( DEBUG_TO_MPIC_ARRAY[1] == 0xDB ) 
0A730:  MOVF   22,W
0A732:  SUBLW  DB
0A734:  BTFSS  FD8.2
0A736:  BRA    AA36
....................    {   
....................       printline(); 
0A738:  CALL   2092
....................       Fprintf(PC,"Antenna deployment related values update command received\n\r"); 
0A73C:  MOVLW  FA
0A73E:  MOVWF  FF6
0A740:  MOVLW  19
0A742:  MOVWF  FF7
0A744:  MOVLW  00
0A746:  MOVWF  FF8
0A748:  CALL   2068
....................       if( (DEBUG_TO_MPIC_ARRAY[3] < 5) && (DEBUG_TO_MPIC_ARRAY[5] < 5) ) 
0A74C:  MOVF   24,W
0A74E:  SUBLW  04
0A750:  BTFSS  FD8.0
0A752:  BRA    AA22
0A754:  MOVF   26,W
0A756:  SUBLW  04
0A758:  BTFSS  FD8.0
0A75A:  BRA    AA22
....................       { 
....................          ERASE_PROGRAM_EEPROM(0x18000); 
0A75C:  BSF    FD0.6
0A75E:  MOVLW  01
0A760:  MOVWF  FF8
0A762:  MOVLW  80
0A764:  MOVWF  FF7
0A766:  CLRF   FF6
0A768:  BSF    F7F.4
0A76A:  CALL   3304
0A76E:  CLRF   FF8
....................          WRITE_PROGRAM_EEPROM(0x18000, (unsigned int16)DEBUG_TO_MPIC_ARRAY[2]); 
0A770:  MOVLB  3
0A772:  CLRF   xFE
0A774:  MOVFF  23,3FD
0A778:  BSF    FD0.6
0A77A:  MOVLW  01
0A77C:  MOVWF  FF8
0A77E:  MOVLW  80
0A780:  MOVWF  FF7
0A782:  CLRF   FF6
0A784:  MOVLB  0
0A786:  CALL   3322
0A78A:  CLRF   FF6
0A78C:  MOVFF  3FD,FF5
0A790:  TBLWT*+
0A792:  MOVFF  3FE,FF5
0A796:  TBLWT*
0A798:  CALL   3304
0A79C:  CLRF   FF8
0A79E:  CLRF   FF8
....................          WRITE_PROGRAM_EEPROM(0x18002, (unsigned int16)DEBUG_TO_MPIC_ARRAY[3]); 
0A7A0:  MOVLB  3
0A7A2:  CLRF   xFE
0A7A4:  MOVFF  24,3FD
0A7A8:  BSF    FD0.6
0A7AA:  MOVLW  01
0A7AC:  MOVWF  FF8
0A7AE:  MOVLW  80
0A7B0:  MOVWF  FF7
0A7B2:  MOVLW  02
0A7B4:  MOVWF  FF6
0A7B6:  MOVLB  0
0A7B8:  CALL   3322
0A7BC:  MOVLW  02
0A7BE:  MOVWF  FF6
0A7C0:  MOVFF  3FD,FF5
0A7C4:  TBLWT*+
0A7C6:  MOVFF  3FE,FF5
0A7CA:  TBLWT*
0A7CC:  CALL   3304
0A7D0:  CLRF   FF8
0A7D2:  CLRF   FF8
....................          WRITE_PROGRAM_EEPROM(0x18004, (unsigned int16)DEBUG_TO_MPIC_ARRAY[4]); 
0A7D4:  MOVLB  3
0A7D6:  CLRF   xFE
0A7D8:  MOVFF  25,3FD
0A7DC:  BSF    FD0.6
0A7DE:  MOVLW  01
0A7E0:  MOVWF  FF8
0A7E2:  MOVLW  80
0A7E4:  MOVWF  FF7
0A7E6:  MOVLW  04
0A7E8:  MOVWF  FF6
0A7EA:  MOVLB  0
0A7EC:  CALL   3322
0A7F0:  MOVLW  04
0A7F2:  MOVWF  FF6
0A7F4:  MOVFF  3FD,FF5
0A7F8:  TBLWT*+
0A7FA:  MOVFF  3FE,FF5
0A7FE:  TBLWT*
0A800:  CALL   3304
0A804:  CLRF   FF8
0A806:  CLRF   FF8
....................          WRITE_PROGRAM_EEPROM(0x18006, (unsigned int16)DEBUG_TO_MPIC_ARRAY[5]); 
0A808:  MOVLB  3
0A80A:  CLRF   xFE
0A80C:  MOVFF  26,3FD
0A810:  BSF    FD0.6
0A812:  MOVLW  01
0A814:  MOVWF  FF8
0A816:  MOVLW  80
0A818:  MOVWF  FF7
0A81A:  MOVLW  06
0A81C:  MOVWF  FF6
0A81E:  MOVLB  0
0A820:  CALL   3322
0A824:  MOVLW  06
0A826:  MOVWF  FF6
0A828:  MOVFF  3FD,FF5
0A82C:  TBLWT*+
0A82E:  MOVFF  3FE,FF5
0A832:  TBLWT*
0A834:  CALL   3304
0A838:  CLRF   FF8
0A83A:  CLRF   FF8
....................           
....................          ANT_SET_1_DEP_FLAG = READ_PROGRAM_EEPROM(0x18000); 
0A83C:  MOVFF  FF2,3FD
0A840:  BCF    FF2.7
0A842:  MOVLW  01
0A844:  MOVWF  FF8
0A846:  MOVLW  80
0A848:  MOVWF  FF7
0A84A:  CLRF   FF6
0A84C:  TBLRD*+
0A84E:  MOVF   FF5,W
0A850:  TBLRD*
0A852:  MOVFF  FF5,03
0A856:  CLRF   FF8
0A858:  MOVLB  3
0A85A:  BTFSC  xFD.7
0A85C:  BSF    FF2.7
0A85E:  MOVLB  1
0A860:  MOVWF  x97
0A862:  MOVFF  03,198
....................          ANTSET_1_COUNT     = READ_PROGRAM_EEPROM(0x18002); 
0A866:  MOVFF  FF2,3FD
0A86A:  BCF    FF2.7
0A86C:  MOVLW  01
0A86E:  MOVWF  FF8
0A870:  MOVLW  80
0A872:  MOVWF  FF7
0A874:  MOVLW  02
0A876:  MOVWF  FF6
0A878:  TBLRD*+
0A87A:  MOVF   FF5,W
0A87C:  TBLRD*
0A87E:  MOVFF  FF5,03
0A882:  CLRF   FF8
0A884:  MOVLB  3
0A886:  BTFSC  xFD.7
0A888:  BSF    FF2.7
0A88A:  MOVLB  1
0A88C:  MOVWF  x9B
0A88E:  MOVFF  03,19C
....................          ANT_SET_2_DEP_FLAG = READ_PROGRAM_EEPROM(0x18004);  
0A892:  MOVFF  FF2,3FD
0A896:  BCF    FF2.7
0A898:  MOVLW  01
0A89A:  MOVWF  FF8
0A89C:  MOVLW  80
0A89E:  MOVWF  FF7
0A8A0:  MOVLW  04
0A8A2:  MOVWF  FF6
0A8A4:  TBLRD*+
0A8A6:  MOVF   FF5,W
0A8A8:  TBLRD*
0A8AA:  MOVFF  FF5,03
0A8AE:  CLRF   FF8
0A8B0:  MOVLB  3
0A8B2:  BTFSC  xFD.7
0A8B4:  BSF    FF2.7
0A8B6:  MOVLB  1
0A8B8:  MOVWF  x99
0A8BA:  MOVFF  03,19A
....................          ANTSET_2_COUNT     = READ_PROGRAM_EEPROM(0x18006); 
0A8BE:  MOVFF  FF2,3FD
0A8C2:  BCF    FF2.7
0A8C4:  MOVLW  01
0A8C6:  MOVWF  FF8
0A8C8:  MOVLW  80
0A8CA:  MOVWF  FF7
0A8CC:  MOVLW  06
0A8CE:  MOVWF  FF6
0A8D0:  TBLRD*+
0A8D2:  MOVF   FF5,W
0A8D4:  TBLRD*
0A8D6:  MOVFF  FF5,03
0A8DA:  CLRF   FF8
0A8DC:  MOVLB  3
0A8DE:  BTFSC  xFD.7
0A8E0:  BSF    FF2.7
0A8E2:  MOVLB  1
0A8E4:  MOVWF  x9D
0A8E6:  MOVFF  03,19E
....................        
....................          // printing antenna related variables  
....................          Fprintf(PC,"Updated antenna deployment values\n\r"); 
0A8EA:  MOVLW  36
0A8EC:  MOVWF  FF6
0A8EE:  MOVLW  1A
0A8F0:  MOVWF  FF7
0A8F2:  MOVLW  00
0A8F4:  MOVWF  FF8
0A8F6:  MOVLB  0
0A8F8:  CALL   2068
....................          Fprintf(PC,"ANT_SET_1_DEP_FLAG = %LX\n\r",ANT_SET_1_DEP_FLAG); 
0A8FC:  MOVLW  5A
0A8FE:  MOVWF  FF6
0A900:  MOVLW  1A
0A902:  MOVWF  FF7
0A904:  MOVLW  00
0A906:  MOVWF  FF8
0A908:  MOVLW  15
0A90A:  MOVLB  4
0A90C:  MOVWF  x3D
0A90E:  MOVLB  0
0A910:  CALL   20A4
0A914:  MOVFF  198,43E
0A918:  MOVLW  37
0A91A:  MOVLB  4
0A91C:  MOVWF  x3F
0A91E:  MOVLB  0
0A920:  CALL   20D6
0A924:  MOVFF  197,43E
0A928:  MOVLW  37
0A92A:  MOVLB  4
0A92C:  MOVWF  x3F
0A92E:  MOVLB  0
0A930:  CALL   20D6
0A934:  MOVLW  0A
0A936:  BTFSS  F9E.4
0A938:  BRA    A936
0A93A:  MOVWF  FAD
0A93C:  MOVLW  0D
0A93E:  BTFSS  F9E.4
0A940:  BRA    A93E
0A942:  MOVWF  FAD
....................          Fprintf(PC,"ANTSET_1_COUNT = %LX\n\r",ANTSET_1_COUNT); 
0A944:  MOVLW  76
0A946:  MOVWF  FF6
0A948:  MOVLW  1A
0A94A:  MOVWF  FF7
0A94C:  MOVLW  00
0A94E:  MOVWF  FF8
0A950:  MOVLW  11
0A952:  MOVLB  4
0A954:  MOVWF  x3D
0A956:  MOVLB  0
0A958:  CALL   20A4
0A95C:  MOVFF  19C,43E
0A960:  MOVLW  37
0A962:  MOVLB  4
0A964:  MOVWF  x3F
0A966:  MOVLB  0
0A968:  CALL   20D6
0A96C:  MOVFF  19B,43E
0A970:  MOVLW  37
0A972:  MOVLB  4
0A974:  MOVWF  x3F
0A976:  MOVLB  0
0A978:  CALL   20D6
0A97C:  MOVLW  0A
0A97E:  BTFSS  F9E.4
0A980:  BRA    A97E
0A982:  MOVWF  FAD
0A984:  MOVLW  0D
0A986:  BTFSS  F9E.4
0A988:  BRA    A986
0A98A:  MOVWF  FAD
....................          Fprintf(PC,"ANT_SET_2_DEP_FLAG = %LX\n\r",ANT_SET_2_DEP_FLAG); 
0A98C:  MOVLW  8E
0A98E:  MOVWF  FF6
0A990:  MOVLW  1A
0A992:  MOVWF  FF7
0A994:  MOVLW  00
0A996:  MOVWF  FF8
0A998:  MOVLW  15
0A99A:  MOVLB  4
0A99C:  MOVWF  x3D
0A99E:  MOVLB  0
0A9A0:  CALL   20A4
0A9A4:  MOVFF  19A,43E
0A9A8:  MOVLW  37
0A9AA:  MOVLB  4
0A9AC:  MOVWF  x3F
0A9AE:  MOVLB  0
0A9B0:  CALL   20D6
0A9B4:  MOVFF  199,43E
0A9B8:  MOVLW  37
0A9BA:  MOVLB  4
0A9BC:  MOVWF  x3F
0A9BE:  MOVLB  0
0A9C0:  CALL   20D6
0A9C4:  MOVLW  0A
0A9C6:  BTFSS  F9E.4
0A9C8:  BRA    A9C6
0A9CA:  MOVWF  FAD
0A9CC:  MOVLW  0D
0A9CE:  BTFSS  F9E.4
0A9D0:  BRA    A9CE
0A9D2:  MOVWF  FAD
....................          Fprintf(PC,"ANTSET_2_COUNT = %LX\n\r",ANTSET_2_COUNT); 
0A9D4:  MOVLW  AA
0A9D6:  MOVWF  FF6
0A9D8:  MOVLW  1A
0A9DA:  MOVWF  FF7
0A9DC:  MOVLW  00
0A9DE:  MOVWF  FF8
0A9E0:  MOVLW  11
0A9E2:  MOVLB  4
0A9E4:  MOVWF  x3D
0A9E6:  MOVLB  0
0A9E8:  CALL   20A4
0A9EC:  MOVFF  19E,43E
0A9F0:  MOVLW  37
0A9F2:  MOVLB  4
0A9F4:  MOVWF  x3F
0A9F6:  MOVLB  0
0A9F8:  CALL   20D6
0A9FC:  MOVFF  19D,43E
0AA00:  MOVLW  37
0AA02:  MOVLB  4
0AA04:  MOVWF  x3F
0AA06:  MOVLB  0
0AA08:  CALL   20D6
0AA0C:  MOVLW  0A
0AA0E:  BTFSS  F9E.4
0AA10:  BRA    AA0E
0AA12:  MOVWF  FAD
0AA14:  MOVLW  0D
0AA16:  BTFSS  F9E.4
0AA18:  BRA    AA16
0AA1A:  MOVWF  FAD
....................          printline(); 
0AA1C:  CALL   2092
....................       } 
0AA20:  BRA    AA36
....................        
....................       else 
....................       { 
....................          Fprintf(PC,"Wron command ,check command again \n\r"); 
0AA22:  MOVLW  C2
0AA24:  MOVWF  FF6
0AA26:  MOVLW  1A
0AA28:  MOVWF  FF7
0AA2A:  MOVLW  00
0AA2C:  MOVWF  FF8
0AA2E:  CALL   2068
....................          printline(); 
0AA32:  CALL   2092
....................       } 
....................    } 
0AA36:  GOTO   B2A4 (RETURN)
.................... } 
....................  
.................... void GET_ANTENNA_DEPLOYMENT_VALUES() 
.................... { 
....................    if( DEBUG_TO_MPIC_ARRAY[1] == 0xDC ) 
0AA3A:  MOVF   22,W
0AA3C:  SUBLW  DC
0AA3E:  BTFSS  FD8.2
0AA40:  BRA    AC1C
....................    {   
....................       Fprintf(PC,"Antenna deploymet values\n\r"); 
0AA42:  MOVLW  E8
0AA44:  MOVWF  FF6
0AA46:  MOVLW  1A
0AA48:  MOVWF  FF7
0AA4A:  MOVLW  00
0AA4C:  MOVWF  FF8
0AA4E:  CALL   2068
....................     
....................       // printing antenna related variables  
....................        
....................       Fprintf(PC,"ANT_SET_1_DEP_FLAG = %LX\n\r",READ_PROGRAM_EEPROM(0x18000)); 
0AA52:  MOVFF  FF2,3FD
0AA56:  BCF    FF2.7
0AA58:  MOVLW  01
0AA5A:  MOVWF  FF8
0AA5C:  MOVLW  80
0AA5E:  MOVWF  FF7
0AA60:  CLRF   FF6
0AA62:  TBLRD*+
0AA64:  MOVF   FF5,W
0AA66:  TBLRD*
0AA68:  MOVFF  FF5,03
0AA6C:  CLRF   FF8
0AA6E:  MOVLB  3
0AA70:  BTFSC  xFD.7
0AA72:  BSF    FF2.7
0AA74:  MOVWF  xFD
0AA76:  MOVFF  03,3FE
0AA7A:  MOVLW  04
0AA7C:  MOVWF  FF6
0AA7E:  MOVLW  1B
0AA80:  MOVWF  FF7
0AA82:  MOVLW  00
0AA84:  MOVWF  FF8
0AA86:  MOVLW  15
0AA88:  MOVLB  4
0AA8A:  MOVWF  x3D
0AA8C:  MOVLB  0
0AA8E:  CALL   20A4
0AA92:  MOVFF  3FE,43E
0AA96:  MOVLW  37
0AA98:  MOVLB  4
0AA9A:  MOVWF  x3F
0AA9C:  MOVLB  0
0AA9E:  CALL   20D6
0AAA2:  MOVFF  3FD,43E
0AAA6:  MOVLW  37
0AAA8:  MOVLB  4
0AAAA:  MOVWF  x3F
0AAAC:  MOVLB  0
0AAAE:  CALL   20D6
0AAB2:  MOVLW  0A
0AAB4:  BTFSS  F9E.4
0AAB6:  BRA    AAB4
0AAB8:  MOVWF  FAD
0AABA:  MOVLW  0D
0AABC:  BTFSS  F9E.4
0AABE:  BRA    AABC
0AAC0:  MOVWF  FAD
....................       Fprintf(PC,"ANTSET_1_COUNT = %LX\n\r",READ_PROGRAM_EEPROM(0x18002)); 
0AAC2:  MOVFF  FF2,3FD
0AAC6:  BCF    FF2.7
0AAC8:  MOVLW  01
0AACA:  MOVWF  FF8
0AACC:  MOVLW  80
0AACE:  MOVWF  FF7
0AAD0:  MOVLW  02
0AAD2:  MOVWF  FF6
0AAD4:  TBLRD*+
0AAD6:  MOVF   FF5,W
0AAD8:  TBLRD*
0AADA:  MOVFF  FF5,03
0AADE:  CLRF   FF8
0AAE0:  MOVLB  3
0AAE2:  BTFSC  xFD.7
0AAE4:  BSF    FF2.7
0AAE6:  MOVWF  xFD
0AAE8:  MOVFF  03,3FE
0AAEC:  MOVLW  20
0AAEE:  MOVWF  FF6
0AAF0:  MOVLW  1B
0AAF2:  MOVWF  FF7
0AAF4:  MOVLW  00
0AAF6:  MOVWF  FF8
0AAF8:  MOVLW  11
0AAFA:  MOVLB  4
0AAFC:  MOVWF  x3D
0AAFE:  MOVLB  0
0AB00:  CALL   20A4
0AB04:  MOVFF  3FE,43E
0AB08:  MOVLW  37
0AB0A:  MOVLB  4
0AB0C:  MOVWF  x3F
0AB0E:  MOVLB  0
0AB10:  CALL   20D6
0AB14:  MOVFF  3FD,43E
0AB18:  MOVLW  37
0AB1A:  MOVLB  4
0AB1C:  MOVWF  x3F
0AB1E:  MOVLB  0
0AB20:  CALL   20D6
0AB24:  MOVLW  0A
0AB26:  BTFSS  F9E.4
0AB28:  BRA    AB26
0AB2A:  MOVWF  FAD
0AB2C:  MOVLW  0D
0AB2E:  BTFSS  F9E.4
0AB30:  BRA    AB2E
0AB32:  MOVWF  FAD
....................       Fprintf(PC,"ANT_SET_2_DEP_FLAG = %LX\n\r",READ_PROGRAM_EEPROM(0x18004)); 
0AB34:  MOVFF  FF2,3FD
0AB38:  BCF    FF2.7
0AB3A:  MOVLW  01
0AB3C:  MOVWF  FF8
0AB3E:  MOVLW  80
0AB40:  MOVWF  FF7
0AB42:  MOVLW  04
0AB44:  MOVWF  FF6
0AB46:  TBLRD*+
0AB48:  MOVF   FF5,W
0AB4A:  TBLRD*
0AB4C:  MOVFF  FF5,03
0AB50:  CLRF   FF8
0AB52:  MOVLB  3
0AB54:  BTFSC  xFD.7
0AB56:  BSF    FF2.7
0AB58:  MOVWF  xFD
0AB5A:  MOVFF  03,3FE
0AB5E:  MOVLW  38
0AB60:  MOVWF  FF6
0AB62:  MOVLW  1B
0AB64:  MOVWF  FF7
0AB66:  MOVLW  00
0AB68:  MOVWF  FF8
0AB6A:  MOVLW  15
0AB6C:  MOVLB  4
0AB6E:  MOVWF  x3D
0AB70:  MOVLB  0
0AB72:  CALL   20A4
0AB76:  MOVFF  3FE,43E
0AB7A:  MOVLW  37
0AB7C:  MOVLB  4
0AB7E:  MOVWF  x3F
0AB80:  MOVLB  0
0AB82:  CALL   20D6
0AB86:  MOVFF  3FD,43E
0AB8A:  MOVLW  37
0AB8C:  MOVLB  4
0AB8E:  MOVWF  x3F
0AB90:  MOVLB  0
0AB92:  CALL   20D6
0AB96:  MOVLW  0A
0AB98:  BTFSS  F9E.4
0AB9A:  BRA    AB98
0AB9C:  MOVWF  FAD
0AB9E:  MOVLW  0D
0ABA0:  BTFSS  F9E.4
0ABA2:  BRA    ABA0
0ABA4:  MOVWF  FAD
....................       Fprintf(PC,"ANTSET_2_COUNT = %LX\n\r",READ_PROGRAM_EEPROM(0x18006)); 
0ABA6:  MOVFF  FF2,3FD
0ABAA:  BCF    FF2.7
0ABAC:  MOVLW  01
0ABAE:  MOVWF  FF8
0ABB0:  MOVLW  80
0ABB2:  MOVWF  FF7
0ABB4:  MOVLW  06
0ABB6:  MOVWF  FF6
0ABB8:  TBLRD*+
0ABBA:  MOVF   FF5,W
0ABBC:  TBLRD*
0ABBE:  MOVFF  FF5,03
0ABC2:  CLRF   FF8
0ABC4:  MOVLB  3
0ABC6:  BTFSC  xFD.7
0ABC8:  BSF    FF2.7
0ABCA:  MOVWF  xFD
0ABCC:  MOVFF  03,3FE
0ABD0:  MOVLW  54
0ABD2:  MOVWF  FF6
0ABD4:  MOVLW  1B
0ABD6:  MOVWF  FF7
0ABD8:  MOVLW  00
0ABDA:  MOVWF  FF8
0ABDC:  MOVLW  11
0ABDE:  MOVLB  4
0ABE0:  MOVWF  x3D
0ABE2:  MOVLB  0
0ABE4:  CALL   20A4
0ABE8:  MOVFF  3FE,43E
0ABEC:  MOVLW  37
0ABEE:  MOVLB  4
0ABF0:  MOVWF  x3F
0ABF2:  MOVLB  0
0ABF4:  CALL   20D6
0ABF8:  MOVFF  3FD,43E
0ABFC:  MOVLW  37
0ABFE:  MOVLB  4
0AC00:  MOVWF  x3F
0AC02:  MOVLB  0
0AC04:  CALL   20D6
0AC08:  MOVLW  0A
0AC0A:  BTFSS  F9E.4
0AC0C:  BRA    AC0A
0AC0E:  MOVWF  FAD
0AC10:  MOVLW  0D
0AC12:  BTFSS  F9E.4
0AC14:  BRA    AC12
0AC16:  MOVWF  FAD
....................       printline();   
0AC18:  CALL   2092
....................    } 
0AC1C:  GOTO   B2A8 (RETURN)
.................... } 
....................  
.................... void UPDATE_RESET_PIC_TIME() 
.................... { 
....................    if( DEBUG_TO_MPIC_ARRAY[1] == 0x7B ) 
*
0ACBE:  MOVF   22,W
0ACC0:  SUBLW  7B
0ACC2:  BNZ   ACEE
....................    {   
....................       Fprintf(PC,"Reset pic time set commands\n\r"); 
0ACC4:  MOVLW  6C
0ACC6:  MOVWF  FF6
0ACC8:  MOVLW  1B
0ACCA:  MOVWF  FF7
0ACCC:  MOVLW  00
0ACCE:  MOVWF  FF8
0ACD0:  CALL   2068
....................       SET_RESET_PIC_TIME(DEBUG_TO_MPIC_ARRAY[2],DEBUG_TO_MPIC_ARRAY[3],DEBUG_TO_MPIC_ARRAY[4],DEBUG_TO_MPIC_ARRAY[5],DEBUG_TO_MPIC_ARRAY[6],DEBUG_TO_MPIC_ARRAY[7]);  
0ACD4:  MOVFF  23,3FD
0ACD8:  MOVFF  24,3FE
0ACDC:  MOVFF  25,3FF
0ACE0:  MOVFF  26,400
0ACE4:  MOVFF  27,401
0ACE8:  MOVFF  28,402
0ACEC:  BRA    AC20
....................    } 
0ACEE:  GOTO   B2AA (RETURN)
.................... } 
....................  
.................... // kill switch handling-------------------------------------------------------- 
.................... void CLOSE_FAB_KILL_SWITCH_DB() 
.................... { 
....................    if( DEBUG_TO_MPIC_ARRAY[1] == 0xF1 ) 
0ACF2:  MOVF   22,W
0ACF4:  SUBLW  F1
0ACF6:  BNZ   AD0C
....................    {   
....................       Fprintf(PC,"close FAB kill switch command from debug\n\r"); 
0ACF8:  MOVLW  8A
0ACFA:  MOVWF  FF6
0ACFC:  MOVLW  1B
0ACFE:  MOVWF  FF7
0AD00:  MOVLW  00
0AD02:  MOVWF  FF8
0AD04:  CALL   2068
....................       _CLOSE_FAB_KILL_SWITCH(); 
0AD08:  CALL   9284
....................    } 
0AD0C:  GOTO   B2AC (RETURN)
.................... } 
....................  
.................... void CLOSE_OBC_KILL_SWITCH_DB() 
.................... { 
....................    if( DEBUG_TO_MPIC_ARRAY[1] == 0xF2 ) 
0AD10:  MOVF   22,W
0AD12:  SUBLW  F2
0AD14:  BNZ   AD2A
....................    {   
....................       Fprintf(PC,"close OBC kill switch command from debug\n\r"); 
0AD16:  MOVLW  B6
0AD18:  MOVWF  FF6
0AD1A:  MOVLW  1B
0AD1C:  MOVWF  FF7
0AD1E:  MOVLW  00
0AD20:  MOVWF  FF8
0AD22:  CALL   2068
....................       _CLOSE_OBC_KILL_SWITCH(); 
0AD26:  CALL   9380
....................    } 
0AD2A:  GOTO   B2AE (RETURN)
.................... } 
....................  
.................... void OPEN_FAB_KILL_SWITCH_DB() 
.................... { 
....................    if( DEBUG_TO_MPIC_ARRAY[1] == 0xF3 ) 
0AD2E:  MOVF   22,W
0AD30:  SUBLW  F3
0AD32:  BNZ   AD48
....................    {   
....................       Fprintf(PC,"Open FAB kill switch command from debug\n\r"); 
0AD34:  MOVLW  E2
0AD36:  MOVWF  FF6
0AD38:  MOVLW  1B
0AD3A:  MOVWF  FF7
0AD3C:  MOVLW  00
0AD3E:  MOVWF  FF8
0AD40:  CALL   2068
....................       _OPEN_FAB_KILL_SWITCH(); 
0AD44:  CALL   9304
....................    } 
0AD48:  GOTO   B2B0 (RETURN)
.................... } 
....................  
.................... void OPEN_OBC_KILL_SWITCH_DB() 
.................... { 
....................    if( DEBUG_TO_MPIC_ARRAY[1] == 0xF4 ) 
0AD4C:  MOVF   22,W
0AD4E:  SUBLW  F4
0AD50:  BNZ   AD66
....................    {   
....................       Fprintf(PC,"Open OBC kill switch command from debug\n\r"); 
0AD52:  MOVLW  0C
0AD54:  MOVWF  FF6
0AD56:  MOVLW  1C
0AD58:  MOVWF  FF7
0AD5A:  MOVLW  00
0AD5C:  MOVWF  FF8
0AD5E:  CALL   2068
....................       _OPEN_OBC_KILL_SWITCH(); 
0AD62:  CALL   9422
....................    } 
0AD66:  GOTO   B2B2 (RETURN)
.................... } 
....................  
.................... void POWER_LINE_CONTROL_USING_DEBUG_COMMAND_TO_RST_PIC() 
.................... { 
....................    if(DEBUG_TO_MPIC_ARRAY[1] == 0xF5) 
0AD6A:  MOVF   22,W
0AD6C:  SUBLW  F5
0AD6E:  BNZ   AE26
....................    { 
....................       Fprintf(PC,"Power line control using main pic command to reset pic\n\r"); 
0AD70:  MOVLW  36
0AD72:  MOVWF  FF6
0AD74:  MOVLW  1C
0AD76:  MOVWF  FF7
0AD78:  MOVLW  00
0AD7A:  MOVWF  FF8
0AD7C:  CALL   2068
....................  
....................       CLEAR_DATA_ARRAY( RPIC_TO_MPIC_ARRAY, 32); 
0AD80:  MOVLB  4
0AD82:  CLRF   x38
0AD84:  MOVLW  62
0AD86:  MOVWF  x37
0AD88:  MOVLW  20
0AD8A:  MOVWF  x39
0AD8C:  MOVLB  0
0AD8E:  CALL   2F54
....................       MPIC_TO_RPIC_ARRAY[0]  = 0xA0   ; 
0AD92:  MOVLW  A0
0AD94:  MOVWF  58
....................       MPIC_TO_RPIC_ARRAY[1]  = 0x7C   ; 
0AD96:  MOVLW  7C
0AD98:  MOVWF  59
....................       MPIC_TO_RPIC_ARRAY[2]  = DEBUG_TO_MPIC_ARRAY[2] ;  //3V3_1 
0AD9A:  MOVFF  23,5A
....................       MPIC_TO_RPIC_ARRAY[3]  = DEBUG_TO_MPIC_ARRAY[3] ;  //3V3_2 
0AD9E:  MOVFF  24,5B
....................       MPIC_TO_RPIC_ARRAY[4]  = DEBUG_TO_MPIC_ARRAY[4] ;  //5V0 
0ADA2:  MOVFF  25,5C
....................       MPIC_TO_RPIC_ARRAY[5]  = DEBUG_TO_MPIC_ARRAY[5] ;  //UNREG2 
0ADA6:  MOVFF  26,5D
....................       MPIC_TO_RPIC_ARRAY[9]  = 0xA1   ;   // footer 
0ADAA:  MOVLW  A1
0ADAC:  MOVWF  x61
....................     
....................       // sending command to reset pic__________________________________________ 
....................       COMUNICATION_WITH_RST_PIC_AND_WAIT_FOR_RESPONE(3, 700); 
0ADAE:  MOVLB  4
0ADB0:  CLRF   x34
0ADB2:  MOVLW  03
0ADB4:  MOVWF  x33
0ADB6:  MOVLW  02
0ADB8:  MOVWF  x36
0ADBA:  MOVLW  BC
0ADBC:  MOVWF  x35
0ADBE:  CLRF   x38
0ADC0:  MOVLW  C8
0ADC2:  MOVWF  x37
0ADC4:  MOVLB  0
0ADC6:  CALL   3110
....................       if( RPIC_TO_MPIC_ARRAY[1] == 0x7C && RPIC_TO_MPIC_ARRAY[0] == 0xA0 && RPIC_TO_MPIC_ARRAY[31] == 0xA1 ) 
0ADCA:  MOVF   x63,W
0ADCC:  SUBLW  7C
0ADCE:  BNZ   AE04
0ADD0:  MOVF   x62,W
0ADD2:  SUBLW  A0
0ADD4:  BNZ   AE04
0ADD6:  MOVF   x81,W
0ADD8:  SUBLW  A1
0ADDA:  BNZ   AE04
....................       {  
....................          Fprintf(PC,"Reset pic power line controlled\n\r");  
0ADDC:  MOVLW  70
0ADDE:  MOVWF  FF6
0ADE0:  MOVLW  1C
0ADE2:  MOVWF  FF7
0ADE4:  MOVLW  00
0ADE6:  MOVWF  FF8
0ADE8:  CALL   2068
....................          printline(); 
0ADEC:  CALL   2092
....................          CLEAR_DATA_ARRAY( RPIC_TO_MPIC_ARRAY, 32 );  
0ADF0:  MOVLB  4
0ADF2:  CLRF   x38
0ADF4:  MOVLW  62
0ADF6:  MOVWF  x37
0ADF8:  MOVLW  20
0ADFA:  MOVWF  x39
0ADFC:  MOVLB  0
0ADFE:  CALL   2F54
....................       } 
0AE02:  BRA    AE14
....................     
....................       else Fprintf(PC,"Reset pic did not respond\n\r"); 
0AE04:  MOVLW  92
0AE06:  MOVWF  FF6
0AE08:  MOVLW  1C
0AE0A:  MOVWF  FF7
0AE0C:  MOVLW  00
0AE0E:  MOVWF  FF8
0AE10:  CALL   2068
....................        
....................    CLEAR_DATA_ARRAY( DEBUG_TO_MPIC_ARRAY, 55 );  
0AE14:  MOVLB  4
0AE16:  CLRF   x38
0AE18:  MOVLW  21
0AE1A:  MOVWF  x37
0AE1C:  MOVLW  37
0AE1E:  MOVWF  x39
0AE20:  MOVLB  0
0AE22:  CALL   2F54
....................    } 
0AE26:  GOTO   B2B4 (RETURN)
....................     
.................... } 
....................  
.................... void RESET_SATELLITE_CMD() 
.................... { 
....................    if(DEBUG_TO_MPIC_ARRAY[1] == 0x7D) 
0AE2A:  MOVF   22,W
0AE2C:  SUBLW  7D
0AE2E:  BNZ   AEB6
....................    { 
....................       Fprintf(PC, "Reset satellite command from debug \n\r"); 
0AE30:  MOVLW  AE
0AE32:  MOVWF  FF6
0AE34:  MOVLW  1C
0AE36:  MOVWF  FF7
0AE38:  MOVLW  00
0AE3A:  MOVWF  FF8
0AE3C:  CALL   2068
....................       printline(); 
0AE40:  CALL   2092
....................        
....................       //STORE_FLAG_INFO(); 
....................        
....................       CLEAR_DATA_ARRAY( MPIC_TO_RPIC_ARRAY, 10 ); 
0AE44:  MOVLB  4
0AE46:  CLRF   x38
0AE48:  MOVLW  58
0AE4A:  MOVWF  x37
0AE4C:  MOVLW  0A
0AE4E:  MOVWF  x39
0AE50:  MOVLB  0
0AE52:  CALL   2F54
....................       MPIC_TO_RPIC_ARRAY[0] = 0xA0;   // header 
0AE56:  MOVLW  A0
0AE58:  MOVWF  58
....................       MPIC_TO_RPIC_ARRAY[1] = 0x7D;   // comand 
0AE5A:  MOVLW  7D
0AE5C:  MOVWF  59
....................       MPIC_TO_RPIC_ARRAY[9] = 0xA1;   // footer 
0AE5E:  MOVLW  A1
0AE60:  MOVWF  x61
....................        
....................       COMUNICATION_WITH_RST_PIC_AND_WAIT_FOR_RESPONE(3, 500); 
0AE62:  MOVLB  4
0AE64:  CLRF   x34
0AE66:  MOVLW  03
0AE68:  MOVWF  x33
0AE6A:  MOVLW  01
0AE6C:  MOVWF  x36
0AE6E:  MOVLW  F4
0AE70:  MOVWF  x35
0AE72:  CLRF   x38
0AE74:  MOVLW  C8
0AE76:  MOVWF  x37
0AE78:  MOVLB  0
0AE7A:  CALL   3110
....................        
....................       if( RPIC_TO_MPIC_ARRAY[1] == 0x7D && RPIC_TO_MPIC_ARRAY[0] == 0xA0 && RPIC_TO_MPIC_ARRAY[31] == 0xA1 ) 
0AE7E:  MOVF   x63,W
0AE80:  SUBLW  7D
0AE82:  BNZ   AEB6
0AE84:  MOVF   x62,W
0AE86:  SUBLW  A0
0AE88:  BNZ   AEB6
0AE8A:  MOVF   x81,W
0AE8C:  SUBLW  A1
0AE8E:  BNZ   AEB6
....................       {  
....................          Fprintf(PC,"Reset pic reset satellite \n\r");  
0AE90:  MOVLW  D4
0AE92:  MOVWF  FF6
0AE94:  MOVLW  1C
0AE96:  MOVWF  FF7
0AE98:  MOVLW  00
0AE9A:  MOVWF  FF8
0AE9C:  CALL   2068
....................          printline(); 
0AEA0:  CALL   2092
....................          CLEAR_DATA_ARRAY( RPIC_TO_MPIC_ARRAY, 32 );  
0AEA4:  MOVLB  4
0AEA6:  CLRF   x38
0AEA8:  MOVLW  62
0AEAA:  MOVWF  x37
0AEAC:  MOVLW  20
0AEAE:  MOVWF  x39
0AEB0:  MOVLB  0
0AEB2:  CALL   2F54
....................       }   
....................        
....................    } 
0AEB6:  GOTO   B2B6 (RETURN)
.................... } 
....................  
.................... void SEND_COM_CMD_THROUGH_PC() 
.................... { 
....................    if(DEBUG_TO_MPIC_ARRAY[1] == 0x77) 
0AEBA:  MOVF   22,W
0AEBC:  SUBLW  77
0AEBE:  BNZ   AF1E
....................    {  
....................       Fprintf(PC,"ComPic command received from PC \n\r"); 
0AEC0:  MOVLW  F2
0AEC2:  MOVWF  FF6
0AEC4:  MOVLW  1C
0AEC6:  MOVWF  FF7
0AEC8:  MOVLW  00
0AECA:  MOVWF  FF8
0AECC:  CALL   2068
....................       CPIC_TO_MPIC_ARRAY[0]  = 0xB0; 
0AED0:  MOVLW  B0
0AED2:  MOVWF  xB9
....................       for(int i=1; i<11; i++) 
0AED4:  MOVLW  01
0AED6:  MOVLB  3
0AED8:  MOVWF  xFD
0AEDA:  MOVF   xFD,W
0AEDC:  SUBLW  0A
0AEDE:  BNC   AF18
....................       { 
....................          CPIC_TO_MPIC_ARRAY[i] = DEBUG_TO_MPIC_ARRAY[i+1]; 
0AEE0:  CLRF   03
0AEE2:  MOVF   xFD,W
0AEE4:  ADDLW  B9
0AEE6:  MOVWF  01
0AEE8:  MOVLW  00
0AEEA:  ADDWFC 03,F
0AEEC:  MOVFF  03,3FF
0AEF0:  MOVLW  01
0AEF2:  ADDWF  xFD,W
0AEF4:  CLRF   03
0AEF6:  ADDLW  21
0AEF8:  MOVWF  FE9
0AEFA:  MOVLW  00
0AEFC:  ADDWFC 03,W
0AEFE:  MOVWF  FEA
0AF00:  MOVFF  FEF,400
0AF04:  MOVLB  4
0AF06:  MOVFF  3FF,FEA
0AF0A:  MOVFF  01,FE9
0AF0E:  MOVFF  400,FEF
0AF12:  MOVLB  3
0AF14:  INCF   xFD,F
0AF16:  BRA    AEDA
....................       }   
....................       CPIC_TO_MPIC_ARRAY[39] = 0xB1; 
0AF18:  MOVLW  B1
0AF1A:  MOVLB  0
0AF1C:  MOVWF  xE0
....................    } 
0AF1E:  GOTO   B2B8 (RETURN)
.................... } 
....................  
.................... void READ_FM_DATA_THROUGH_PC() 
.................... { 
....................    if(DEBUG_TO_MPIC_ARRAY[1] == 0x1F) 
*
0A28A:  MOVF   22,W
0A28C:  SUBLW  1F
0A28E:  BTFSS  FD8.2
0A290:  BRA    A5E4
....................    {  
....................       Fprintf(PC,"Read FM data command"); 
0A292:  MOVLW  16
0A294:  MOVWF  FF6
0A296:  MOVLW  1D
0A298:  MOVWF  FF7
0A29A:  MOVLW  00
0A29C:  MOVWF  FF8
0A29E:  CALL   2068
....................        
....................       unsigned int8 FM_ = DEBUG_TO_MPIC_ARRAY[11]; 
....................       unsigned int32 i; 
....................        
....................       unsigned int32 address = make32( DEBUG_TO_MPIC_ARRAY[2], DEBUG_TO_MPIC_ARRAY[3], DEBUG_TO_MPIC_ARRAY[4], DEBUG_TO_MPIC_ARRAY[5] ); 
....................       unsigned int32 num_of_bytes = (unsigned int32)DEBUG_TO_MPIC_ARRAY[6]*81; 
0A2A2:  MOVFF  2C,3FD
0A2A6:  MOVFF  23,405
0A2AA:  MOVFF  24,404
0A2AE:  MOVFF  25,403
0A2B2:  MOVFF  26,402
0A2B6:  MOVLB  4
0A2B8:  CLRF   x0D
0A2BA:  CLRF   x0C
0A2BC:  CLRF   x0B
0A2BE:  MOVFF  27,40A
0A2C2:  MOVFF  40D,436
0A2C6:  MOVFF  40C,435
0A2CA:  MOVFF  40B,434
0A2CE:  MOVFF  27,433
0A2D2:  CLRF   x3A
0A2D4:  CLRF   x39
0A2D6:  CLRF   x38
0A2D8:  MOVLW  51
0A2DA:  MOVWF  x37
0A2DC:  MOVLB  0
0A2DE:  CALL   468E
0A2E2:  MOVFF  03,409
0A2E6:  MOVFF  02,408
0A2EA:  MOVFF  01,407
0A2EE:  MOVFF  00,406
....................       Fprintf(PC, "Num of Bytes = %lu ",num_of_bytes); 
0A2F2:  MOVLW  2C
0A2F4:  MOVWF  FF6
0A2F6:  MOVLW  1D
0A2F8:  MOVWF  FF7
0A2FA:  MOVLW  00
0A2FC:  MOVWF  FF8
0A2FE:  MOVLW  0F
0A300:  MOVLB  4
0A302:  MOVWF  x3D
0A304:  MOVLB  0
0A306:  CALL   20A4
0A30A:  MOVLW  41
0A30C:  MOVWF  FE9
0A30E:  MOVFF  409,43A
0A312:  MOVFF  408,439
0A316:  MOVFF  407,438
0A31A:  MOVFF  406,437
0A31E:  CALL   43B0
0A322:  MOVLW  20
0A324:  BTFSS  F9E.4
0A326:  BRA    A324
0A328:  MOVWF  FAD
....................        
....................       if( FM_ == 0xF1 )  
0A32A:  MOVLB  3
0A32C:  MOVF   xFD,W
0A32E:  SUBLW  F1
0A330:  BNZ   A402
....................       { 
....................          Fprintf(PC,"Read COM FM \n\r"); 
0A332:  MOVLW  40
0A334:  MOVWF  FF6
0A336:  MOVLW  1D
0A338:  MOVWF  FF7
0A33A:  MOVLW  00
0A33C:  MOVWF  FF8
0A33E:  MOVLB  0
0A340:  CALL   2068
....................          Output_Low(PIN_C5); 
0A344:  BCF    F94.5
0A346:  BCF    F8B.5
....................          for (i = 0; i < num_of_bytes; i++) 
0A348:  MOVLB  4
0A34A:  CLRF   x01
0A34C:  CLRF   x00
0A34E:  MOVLB  3
0A350:  CLRF   xFF
0A352:  CLRF   xFE
0A354:  MOVLB  4
0A356:  MOVF   x01,W
0A358:  SUBWF  x09,W
0A35A:  BNC   A3F4
0A35C:  BNZ   A382
0A35E:  MOVF   x00,W
0A360:  SUBWF  x08,W
0A362:  BNC   A3F4
0A364:  BNZ   A382
0A366:  MOVLB  3
0A368:  MOVF   xFF,W
0A36A:  MOVLB  4
0A36C:  SUBWF  x07,W
0A36E:  BNC   A3F4
0A370:  BNZ   A382
0A372:  MOVF   x06,W
0A374:  MOVLB  3
0A376:  SUBWF  xFE,W
0A378:  BTFSS  FD8.0
0A37A:  BRA    A380
0A37C:  MOVLB  4
0A37E:  BRA    A3F4
0A380:  MOVLB  4
....................          { 
....................             Fprintf(PC, "%X ",COM_FM_BYTE_READ(address + i)); 
0A382:  MOVLB  3
0A384:  MOVF   xFE,W
0A386:  MOVLB  4
0A388:  ADDWF  x02,W
0A38A:  MOVWF  x0A
0A38C:  MOVLB  3
0A38E:  MOVF   xFF,W
0A390:  MOVLB  4
0A392:  ADDWFC x03,W
0A394:  MOVWF  x0B
0A396:  MOVF   x00,W
0A398:  ADDWFC x04,W
0A39A:  MOVWF  x0C
0A39C:  MOVF   x01,W
0A39E:  ADDWFC x05,W
0A3A0:  MOVWF  x0D
0A3A2:  MOVWF  x3C
0A3A4:  MOVFF  40C,43B
0A3A8:  MOVFF  40B,43A
0A3AC:  MOVFF  40A,439
0A3B0:  MOVLB  0
0A3B2:  CALL   4766
0A3B6:  MOVFF  01,40A
0A3BA:  MOVFF  01,43E
0A3BE:  MOVLW  37
0A3C0:  MOVLB  4
0A3C2:  MOVWF  x3F
0A3C4:  MOVLB  0
0A3C6:  CALL   20D6
0A3CA:  MOVLW  20
0A3CC:  BTFSS  F9E.4
0A3CE:  BRA    A3CC
0A3D0:  MOVWF  FAD
0A3D2:  MOVLW  01
0A3D4:  MOVLB  3
0A3D6:  ADDWF  xFE,F
0A3D8:  BTFSC  FD8.0
0A3DA:  INCF   xFF,F
0A3DC:  BTFSS  FD8.2
0A3DE:  BRA    A3E6
0A3E0:  MOVLB  4
0A3E2:  INCF   x00,F
0A3E4:  MOVLB  3
0A3E6:  BTFSS  FD8.2
0A3E8:  BRA    A3F0
0A3EA:  MOVLB  4
0A3EC:  INCF   x01,F
0A3EE:  MOVLB  3
0A3F0:  BRA    A354
0A3F2:  MOVLB  4
....................              
....................          } 
....................          printline(); 
0A3F4:  MOVLB  0
0A3F6:  CALL   2092
....................          Output_HIGH(PIN_C5); 
0A3FA:  BCF    F94.5
0A3FC:  BSF    F8B.5
....................       } 
0A3FE:  BRA    A5E4
0A400:  MOVLB  3
....................        
....................       else if( FM_ == 0xF2 )  
0A402:  MOVF   xFD,W
0A404:  SUBLW  F2
0A406:  BNZ   A4D0
....................       { 
....................          Fprintf(PC,"Read Main FM \n\r"); 
0A408:  MOVLW  50
0A40A:  MOVWF  FF6
0A40C:  MOVLW  1D
0A40E:  MOVWF  FF7
0A410:  MOVLW  00
0A412:  MOVWF  FF8
0A414:  MOVLB  0
0A416:  CALL   2068
....................          for (i = 0; i < num_of_bytes; i++) 
0A41A:  MOVLB  4
0A41C:  CLRF   x01
0A41E:  CLRF   x00
0A420:  MOVLB  3
0A422:  CLRF   xFF
0A424:  CLRF   xFE
0A426:  MOVLB  4
0A428:  MOVF   x01,W
0A42A:  SUBWF  x09,W
0A42C:  BNC   A4C6
0A42E:  BNZ   A454
0A430:  MOVF   x00,W
0A432:  SUBWF  x08,W
0A434:  BNC   A4C6
0A436:  BNZ   A454
0A438:  MOVLB  3
0A43A:  MOVF   xFF,W
0A43C:  MOVLB  4
0A43E:  SUBWF  x07,W
0A440:  BNC   A4C6
0A442:  BNZ   A454
0A444:  MOVF   x06,W
0A446:  MOVLB  3
0A448:  SUBWF  xFE,W
0A44A:  BTFSS  FD8.0
0A44C:  BRA    A452
0A44E:  MOVLB  4
0A450:  BRA    A4C6
0A452:  MOVLB  4
....................          { 
....................             Fprintf(PC, "%X ",MAIN_FM_BYTE_READ(address + i)); 
0A454:  MOVLB  3
0A456:  MOVF   xFE,W
0A458:  MOVLB  4
0A45A:  ADDWF  x02,W
0A45C:  MOVWF  x0A
0A45E:  MOVLB  3
0A460:  MOVF   xFF,W
0A462:  MOVLB  4
0A464:  ADDWFC x03,W
0A466:  MOVWF  x0B
0A468:  MOVF   x00,W
0A46A:  ADDWFC x04,W
0A46C:  MOVWF  x0C
0A46E:  MOVF   x01,W
0A470:  ADDWFC x05,W
0A472:  MOVWF  x0D
0A474:  MOVWF  x1E
0A476:  MOVFF  40C,41D
0A47A:  MOVFF  40B,41C
0A47E:  MOVFF  40A,41B
0A482:  MOVLB  0
0A484:  CALL   23BE
0A488:  MOVFF  01,40A
0A48C:  MOVFF  01,43E
0A490:  MOVLW  37
0A492:  MOVLB  4
0A494:  MOVWF  x3F
0A496:  MOVLB  0
0A498:  CALL   20D6
0A49C:  MOVLW  20
0A49E:  BTFSS  F9E.4
0A4A0:  BRA    A49E
0A4A2:  MOVWF  FAD
0A4A4:  MOVLW  01
0A4A6:  MOVLB  3
0A4A8:  ADDWF  xFE,F
0A4AA:  BTFSC  FD8.0
0A4AC:  INCF   xFF,F
0A4AE:  BTFSS  FD8.2
0A4B0:  BRA    A4B8
0A4B2:  MOVLB  4
0A4B4:  INCF   x00,F
0A4B6:  MOVLB  3
0A4B8:  BTFSS  FD8.2
0A4BA:  BRA    A4C2
0A4BC:  MOVLB  4
0A4BE:  INCF   x01,F
0A4C0:  MOVLB  3
0A4C2:  BRA    A426
0A4C4:  MOVLB  4
....................              
....................          } 
....................          printline(); 
0A4C6:  MOVLB  0
0A4C8:  CALL   2092
....................       } 
0A4CC:  BRA    A5E4
0A4CE:  MOVLB  3
....................        
....................       else if( FM_ == 0xF3 )  
0A4D0:  MOVF   xFD,W
0A4D2:  SUBLW  F3
0A4D4:  BTFSS  FD8.2
0A4D6:  BRA    A5E6
....................       { 
....................          printline(); 
0A4D8:  MOVLB  0
0A4DA:  CALL   2092
....................          Fprintf(PC, "Num of Bytes = %lu ",num_of_bytes); 
0A4DE:  MOVLW  60
0A4E0:  MOVWF  FF6
0A4E2:  MOVLW  1D
0A4E4:  MOVWF  FF7
0A4E6:  MOVLW  00
0A4E8:  MOVWF  FF8
0A4EA:  MOVLW  0F
0A4EC:  MOVLB  4
0A4EE:  MOVWF  x3D
0A4F0:  MOVLB  0
0A4F2:  CALL   20A4
0A4F6:  MOVLW  41
0A4F8:  MOVWF  FE9
0A4FA:  MOVFF  409,43A
0A4FE:  MOVFF  408,439
0A502:  MOVFF  407,438
0A506:  MOVFF  406,437
0A50A:  CALL   43B0
0A50E:  MOVLW  20
0A510:  BTFSS  F9E.4
0A512:  BRA    A510
0A514:  MOVWF  FAD
....................     
....................          printline(); 
0A516:  CALL   2092
....................          Fprintf(PC,"Read MSN FM\n\r"); 
0A51A:  MOVLW  74
0A51C:  MOVWF  FF6
0A51E:  MOVLW  1D
0A520:  MOVWF  FF7
0A522:  MOVLW  00
0A524:  MOVWF  FF8
0A526:  CALL   2068
....................          Output_Low(PIN_A5); 
0A52A:  BCF    F92.5
0A52C:  BCF    F89.5
....................          for (i = 0; i < num_of_bytes; i++) 
0A52E:  MOVLB  4
0A530:  CLRF   x01
0A532:  CLRF   x00
0A534:  MOVLB  3
0A536:  CLRF   xFF
0A538:  CLRF   xFE
0A53A:  MOVLB  4
0A53C:  MOVF   x01,W
0A53E:  SUBWF  x09,W
0A540:  BNC   A5DA
0A542:  BNZ   A568
0A544:  MOVF   x00,W
0A546:  SUBWF  x08,W
0A548:  BNC   A5DA
0A54A:  BNZ   A568
0A54C:  MOVLB  3
0A54E:  MOVF   xFF,W
0A550:  MOVLB  4
0A552:  SUBWF  x07,W
0A554:  BNC   A5DA
0A556:  BNZ   A568
0A558:  MOVF   x06,W
0A55A:  MOVLB  3
0A55C:  SUBWF  xFE,W
0A55E:  BTFSS  FD8.0
0A560:  BRA    A566
0A562:  MOVLB  4
0A564:  BRA    A5DA
0A566:  MOVLB  4
....................          { 
....................             Fprintf(PC, "%X ",MSN_FM_BYTE_READ(address + i)); 
0A568:  MOVLB  3
0A56A:  MOVF   xFE,W
0A56C:  MOVLB  4
0A56E:  ADDWF  x02,W
0A570:  MOVWF  x0A
0A572:  MOVLB  3
0A574:  MOVF   xFF,W
0A576:  MOVLB  4
0A578:  ADDWFC x03,W
0A57A:  MOVWF  x0B
0A57C:  MOVF   x00,W
0A57E:  ADDWFC x04,W
0A580:  MOVWF  x0C
0A582:  MOVF   x01,W
0A584:  ADDWFC x05,W
0A586:  MOVWF  x0D
0A588:  MOVWF  x1E
0A58A:  MOVFF  40C,41D
0A58E:  MOVFF  40B,41C
0A592:  MOVFF  40A,41B
0A596:  MOVLB  0
0A598:  CALL   89FA
0A59C:  MOVFF  01,40A
0A5A0:  MOVFF  01,43E
0A5A4:  MOVLW  37
0A5A6:  MOVLB  4
0A5A8:  MOVWF  x3F
0A5AA:  MOVLB  0
0A5AC:  CALL   20D6
0A5B0:  MOVLW  20
0A5B2:  BTFSS  F9E.4
0A5B4:  BRA    A5B2
0A5B6:  MOVWF  FAD
0A5B8:  MOVLW  01
0A5BA:  MOVLB  3
0A5BC:  ADDWF  xFE,F
0A5BE:  BTFSC  FD8.0
0A5C0:  INCF   xFF,F
0A5C2:  BTFSS  FD8.2
0A5C4:  BRA    A5CC
0A5C6:  MOVLB  4
0A5C8:  INCF   x00,F
0A5CA:  MOVLB  3
0A5CC:  BTFSS  FD8.2
0A5CE:  BRA    A5D6
0A5D0:  MOVLB  4
0A5D2:  INCF   x01,F
0A5D4:  MOVLB  3
0A5D6:  BRA    A53A
0A5D8:  MOVLB  4
....................              
....................              
....................          } 
....................          printline(); 
0A5DA:  MOVLB  0
0A5DC:  CALL   2092
....................          Output_HIGH(PIN_A5); 
0A5E0:  BCF    F92.5
0A5E2:  BSF    F89.5
0A5E4:  MOVLB  3
....................       } 
....................        
....................    } 
0A5E6:  MOVLB  0
0A5E8:  GOTO   B29C (RETURN)
.................... } 
....................  
....................  
.................... #PRIORITY INT_RDA4, INT_RDA2, INT_RDA3, INT_RDA  
....................  
.................... Void setting() 
.................... { 
....................    enable_interrupts(INT_RDA);                 // DEBUG  UART interupt 
*
02014:  BSF    F9D.5
....................    enable_interrupts(INT_RDA2);                // COMPIC UART interupt 
02016:  BSF    FA3.5
....................    enable_interrupts(INT_RDA3);                // FABPIC UART interupt 
02018:  BSF    F61.5
....................    enable_interrupts(INT_RDA4);                // RSTPIC UART interupt 
0201A:  BSF    F61.7
....................    enable_interrupts(GLOBAL); 
0201C:  MOVLW  C0
0201E:  IORWF  FF2,F
....................     
....................    Output_Low(PIN_A4);                         // OBC kill switch enable 
02020:  BCF    F92.4
02022:  BCF    F89.4
02024:  MOVLB  F
....................     
....................    SETUP_RTC(RTC_ENABLE | RTC_CLOCK_SOSC,0);   // enabling internal RTC of main pic 
02026:  MOVLB  F
02028:  MOVLW  55
0202A:  MOVWF  F7E
0202C:  MOVLW  AA
0202E:  MOVWF  F7E
02030:  BSF    x5F.5
02032:  CLRF   x5E
02034:  CLRF   x57
02036:  MOVLW  80
02038:  MOVWF  x5F
0203A:  BCF    x5F.5
0203C:  BSF    F66.1
....................    Write_OBC_RTC(23,07,28,00,00,01);           // setting RTC time value 
0203E:  MOVLW  17
02040:  MOVLB  4
02042:  MOVWF  x3C
02044:  MOVLW  07
02046:  MOVWF  x3D
02048:  MOVLW  1C
0204A:  MOVWF  x3E
0204C:  CLRF   x3F
0204E:  CLRF   x40
02050:  MOVLW  01
02052:  MOVWF  x41
02054:  MOVLB  0
02056:  RCALL  1E20
....................     
....................    OUTPUT_HIGH(PIN_C5);                        // start COM flash memoy acces to com PIC 
02058:  BCF    F94.5
0205A:  BSF    F8B.5
....................    OUTPUT_HIGH(PIN_A5);                        // start MSN flash memoy acces to mboss 
0205C:  BCF    F92.5
0205E:  BSF    F89.5
....................     
....................    output_HIGH(MBOSS_EN);                      // For DIO of Mission Boss, it must be removed in real operation  
02060:  BCF    F95.1
02062:  BSF    F8C.1
02064:  GOTO   B1C2 (RETURN)
.................... } 
....................  
.................... void main() 
*
0AF4C:  CLRF   FF8
0AF4E:  BCF    FD0.7
0AF50:  BSF    07.7
0AF52:  MOVLB  E
0AF54:  MOVLW  55
0AF56:  MOVWF  F7E
0AF58:  MOVLW  AA
0AF5A:  MOVWF  F7E
0AF5C:  BCF    F66.6
0AF5E:  MOVLW  F4
0AF60:  MOVWF  x2A
0AF62:  MOVLW  F5
0AF64:  MOVWF  x2B
0AF66:  MOVLW  F8
0AF68:  MOVWF  x2C
0AF6A:  MOVLW  F9
0AF6C:  MOVWF  x2D
0AF6E:  MOVLW  01
0AF70:  MOVWF  x1B
0AF72:  MOVLW  20
0AF74:  MOVWF  x1D
0AF76:  MOVLW  30
0AF78:  MOVWF  x22
0AF7A:  MOVLW  20
0AF7C:  MOVWF  x24
0AF7E:  MOVLW  55
0AF80:  MOVWF  F7E
0AF82:  MOVLW  AA
0AF84:  MOVWF  F7E
0AF86:  BSF    F66.6
0AF88:  CLRF   F9B
0AF8A:  CLRF   F64
0AF8C:  CLRF   F65
0AF8E:  CLRF   F66
0AF90:  MOVLW  02
0AF92:  MOVWF  FD3
0AF94:  CLRF   20
0AF96:  CLRF   1F
0AF98:  CLRF   1E
0AF9A:  CLRF   1D
0AF9C:  MOVLB  1
0AF9E:  CLRF   x98
0AFA0:  CLRF   x97
0AFA2:  CLRF   x9A
0AFA4:  CLRF   x99
0AFA6:  CLRF   x9C
0AFA8:  CLRF   x9B
0AFAA:  CLRF   x9E
0AFAC:  CLRF   x9D
0AFAE:  CLRF   xA2
0AFB0:  CLRF   xA1
0AFB2:  CLRF   xA0
0AFB4:  CLRF   x9F
0AFB6:  CLRF   xA6
0AFB8:  CLRF   xA5
0AFBA:  CLRF   xA4
0AFBC:  CLRF   xA3
0AFBE:  CLRF   xAA
0AFC0:  CLRF   xA9
0AFC2:  CLRF   xA8
0AFC4:  CLRF   xA7
0AFC6:  CLRF   xAE
0AFC8:  CLRF   xAD
0AFCA:  CLRF   xAC
0AFCC:  CLRF   xAB
0AFCE:  CLRF   xAF
0AFD0:  CLRF   xB0
0AFD2:  CLRF   xB4
0AFD4:  CLRF   xB3
0AFD6:  CLRF   xB2
0AFD8:  CLRF   xB1
0AFDA:  CLRF   xB8
0AFDC:  CLRF   xB7
0AFDE:  CLRF   xB6
0AFE0:  CLRF   xB5
0AFE2:  CLRF   xBC
0AFE4:  CLRF   xBB
0AFE6:  CLRF   xBA
0AFE8:  CLRF   xB9
0AFEA:  CLRF   xBD
0AFEC:  CLRF   xBE
0AFEE:  CLRF   xBF
0AFF0:  CLRF   xC0
0AFF2:  CLRF   xC1
0AFF4:  CLRF   xC2
0AFF6:  MOVLW  46
0AFF8:  MOVWF  xC3
0AFFA:  CLRF   xE3
0AFFC:  CLRF   xE4
0AFFE:  CLRF   xE5
0B000:  CLRF   xE6
0B002:  CLRF   xE7
0B004:  CLRF   xE8
0B006:  CLRF   xE9
0B008:  CLRF   xEA
0B00A:  CLRF   xEC
0B00C:  MOVLW  01
0B00E:  MOVWF  xED
0B010:  MOVLW  AA
0B012:  MOVWF  xEE
0B014:  BCF    F98.0
0B016:  BSF    F8F.0
0B018:  CLRF   xEF
0B01A:  BSF    F67.3
0B01C:  MOVLW  22
0B01E:  MOVWF  FAF
0B020:  MOVLW  00
0B022:  MOVLB  F
0B024:  MOVWF  x30
0B026:  MOVLW  A6
0B028:  MOVWF  FAC
0B02A:  MOVLW  90
0B02C:  MOVWF  FAB
0B02E:  MOVLB  2
0B030:  CLRF   x23
0B032:  CLRF   x22
0B034:  CLRF   x24
0B036:  CLRF   x26
0B038:  CLRF   x25
0B03A:  CLRF   x27
0B03C:  MOVLB  E
0B03E:  BCF    xFD.3
0B040:  MOVLW  19
0B042:  MOVWF  xFB
0B044:  MOVLW  A6
0B046:  MOVWF  xFE
0B048:  MOVLW  90
0B04A:  MOVWF  xFF
0B04C:  MOVLB  2
0B04E:  CLRF   x5B
0B050:  CLRF   x5A
0B052:  CLRF   x5C
0B054:  CLRF   x5E
0B056:  CLRF   x5D
0B058:  CLRF   x5F
0B05A:  MOVLB  F
0B05C:  BCF    x31.3
0B05E:  MOVLW  19
0B060:  MOVWF  x1F
0B062:  MOVLW  A6
0B064:  MOVWF  x32
0B066:  MOVLW  90
0B068:  MOVWF  x33
0B06A:  MOVLB  2
0B06C:  CLRF   x93
0B06E:  CLRF   x92
0B070:  CLRF   x94
0B072:  CLRF   x96
0B074:  CLRF   x95
0B076:  CLRF   x97
0B078:  MOVLB  F
0B07A:  BCF    x2D.3
0B07C:  MOVLW  19
0B07E:  MOVWF  x2B
0B080:  MOVLW  A6
0B082:  MOVWF  x2E
0B084:  MOVLW  90
0B086:  MOVWF  x2F
0B088:  MOVLB  2
0B08A:  CLRF   xCB
0B08C:  CLRF   xCA
0B08E:  CLRF   xCC
0B090:  CLRF   xCE
0B092:  CLRF   xCD
0B094:  CLRF   xCF
0B096:  CLRF   xD1
0B098:  CLRF   xD0
0B09A:  CLRF   xD3
0B09C:  CLRF   xD2
0B09E:  BSF    F96.0
0B0A0:  BCF    F96.6
0B0A2:  BCF    F96.1
0B0A4:  BCF    F8D.1
0B0A6:  BSF    F93.5
0B0A8:  BCF    F93.4
0B0AA:  BCF    F93.2
0B0AC:  BCF    F8A.2
0B0AE:  BSF    F92.0
0B0B0:  BCF    F92.1
0B0B2:  BCF    F92.3
0B0B4:  BCF    F89.3
0B0B6:  MOVLB  3
0B0B8:  CLRF   xF9
0B0BA:  CLRF   xFA
0B0BC:  CLRF   xFC
0B0BE:  MOVLB  E
0B0C0:  CLRF   xD9
0B0C2:  CLRF   xDA
0B0C4:  CLRF   x45
0B0C6:  CLRF   x46
0B0C8:  CLRF   x47
0B0CA:  BCF    x8D.7
0B0CC:  BCF    x8D.6
0B0CE:  BCF    x8D.5
0B0D0:  MOVLB  F
0B0D2:  CLRF   x53
0B0D4:  CLRF   x38
0B0D6:  CLRF   x37
0B0D8:  BRA    B166
0B0DA:  DATA 02,00
0B0DC:  DATA 1B,00
0B0DE:  DATA 00,05
0B0E0:  DATA 02,D9
0B0E2:  DATA FF,00
0B0E4:  DATA 00,00
0B0E6:  DATA FF,04
0B0E8:  DATA C0,00
0B0EA:  DATA 08,80
0B0EC:  DATA 01,10
0B0EE:  DATA 00,FF
0B0F0:  DATA 00,00
0B0F2:  DATA 00,FF
0B0F4:  DATA 04,C0
0B0F6:  DATA 00,08
0B0F8:  DATA 80,01
0B0FA:  DATA 20,00
0B0FC:  DATA FF,00
0B0FE:  DATA 00,00
0B100:  DATA FF,04
0B102:  DATA C0,00
0B104:  DATA 08,80
0B106:  DATA 01,30
0B108:  DATA 00,FF
0B10A:  DATA 00,00
0B10C:  DATA 00,FF
0B10E:  DATA 04,C0
0B110:  DATA 00,08
0B112:  DATA 80,01
0B114:  DATA 40,00
0B116:  DATA FF,00
0B118:  DATA 00,00
0B11A:  DATA FF,04
0B11C:  DATA C0,00
0B11E:  DATA 08,80
0B120:  DATA 01,50
0B122:  DATA 00,FF
0B124:  DATA 00,00
0B126:  DATA 00,FF
0B128:  DATA 04,C0
0B12A:  DATA 00,08
0B12C:  DATA 80,01
0B12E:  DATA 60,00
0B130:  DATA FF,00
0B132:  DATA 00,00
0B134:  DATA FF,04
0B136:  DATA C0,00
0B138:  DATA 08,80
0B13A:  DATA 01,70
0B13C:  DATA 00,FF
0B13E:  DATA 00,00
0B140:  DATA 00,FF
0B142:  DATA 04,C0
0B144:  DATA 00,08
0B146:  DATA 80,01
0B148:  DATA 80,00
0B14A:  DATA FF,00
0B14C:  DATA 00,00
0B14E:  DATA FF,04
0B150:  DATA C0,00
0B152:  DATA 08,80
0B154:  DATA 01,90
0B156:  DATA 00,FF
0B158:  DATA 00,00
0B15A:  DATA 00,FF
0B15C:  DATA 04,C0
0B15E:  DATA 00,03
0B160:  DATA 80,01
0B162:  DATA A0,00
0B164:  DATA 00,00
0B166:  MOVLW  00
0B168:  MOVWF  FF8
0B16A:  MOVLW  B0
0B16C:  MOVWF  FF7
0B16E:  MOVLW  DA
0B170:  MOVWF  FF6
0B172:  TBLRD*+
0B174:  MOVF   FF5,W
0B176:  MOVWF  00
0B178:  XORLW  00
0B17A:  BZ    B1A2
0B17C:  TBLRD*+
0B17E:  MOVF   FF5,W
0B180:  MOVWF  01
0B182:  BTFSC  FE8.7
0B184:  BRA    B190
0B186:  ANDLW  0F
0B188:  MOVWF  FEA
0B18A:  TBLRD*+
0B18C:  MOVFF  FF5,FE9
0B190:  BTFSC  01.6
0B192:  TBLRD*+
0B194:  BTFSS  01.6
0B196:  TBLRD*+
0B198:  MOVFF  FF5,FEE
0B19C:  DCFSNZ 00,F
0B19E:  BRA    B172
0B1A0:  BRA    B194
0B1A2:  CLRF   FF8
.................... { 
....................    Delay_ms(1000); 
0B1A4:  MOVLW  04
0B1A6:  MOVLB  3
0B1A8:  MOVWF  xFD
0B1AA:  MOVLW  FA
0B1AC:  MOVLB  4
0B1AE:  MOVWF  x3E
0B1B0:  MOVLB  0
0B1B2:  CALL   1DA0
0B1B6:  MOVLB  3
0B1B8:  DECFSZ xFD,F
0B1BA:  BRA    B1AA
....................    setting(); 
0B1BC:  MOVLB  0
0B1BE:  GOTO   2014
....................    fprintf(PC,"MainPIC booting...........\n\r"); 
0B1C2:  MOVLW  82
0B1C4:  MOVWF  FF6
0B1C6:  MOVLW  1D
0B1C8:  MOVWF  FF7
0B1CA:  MOVLW  00
0B1CC:  MOVWF  FF8
0B1CE:  CALL   2068
....................     
....................    LOAD_ANTENNA_DEPLOYMENT_VALUES(); 
0B1D2:  GOTO   211C
....................    LOAD_RESERVATION_COMMANDS_ON_OFF_TIME_AT_BOOT(); 
0B1D6:  GOTO   293E
....................     
....................    LOAD_30DAY_COUNTER(); 
0B1DA:  CALL   2A50
....................    INCREACE_30DAY_COUNTER_ONCE_PER_DAY_AND_CHECK_30DAY_CW_STATUS(); 
0B1DE:  GOTO   2C06
....................        
....................    while(true) 
....................    {      
....................       // this will print main pic RTC__________________________________________ 
....................       READ_MP_RTC_AND_PRINT(); 
0B1E2:  GOTO   2D86
....................        
....................       DEPLOY_ANTENNAS_SET_1(31,5);              // antenna dep min = 31, number of days = 5 
0B1E6:  MOVLW  1F
0B1E8:  MOVLB  3
0B1EA:  MOVWF  xFD
0B1EC:  MOVLW  05
0B1EE:  MOVWF  xFE
0B1F0:  MOVLB  0
0B1F2:  GOTO   3380
....................       DEPLOY_ANTENNAS_SET_2(40,5);              // antenna dep min = 40, number of days = 5 
0B1F6:  MOVLW  28
0B1F8:  MOVLB  3
0B1FA:  MOVWF  xFD
0B1FC:  MOVLW  05
0B1FE:  MOVWF  xFE
0B200:  MOVLB  0
0B202:  GOTO   39BE
....................        
....................       COMUNICATION_WITH_RST_PIC_90SEC(90)   ;   // 90 means every 90 seconds main pic will comunicate with reset pic 
0B206:  MOVLW  5A
0B208:  MOVLB  3
0B20A:  MOVWF  xFD
0B20C:  MOVLB  0
0B20E:  GOTO   5444
....................        
....................       CHECK_RESERVATION_COMMAND_ON_TIME_AND_OFF_TIME();    
0B212:  GOTO   8338
....................       RESTARTING_MISSIONS_AFTER_SYSTEM_RESET()        ; 
0B216:  GOTO   85A4
....................        
....................       CHECK_UART_INCOMING_FROM_DEBUG_PORT() ; 
0B21A:  GOTO   8734
....................       CHECK_UART_INCOMING_FROM_COM_PIC()    ; 
0B21E:  GOTO   8810
....................                      
....................        
....................       ///////////////////////////////////////////////////////////////////////// 
....................       // this section will execute com pic commands____________________________ 
....................       if( CPIC_TO_MPIC_ARRAY[0] == 0xB0 && CPIC_TO_MPIC_ARRAY[39] == 0xB1 ) 
0B222:  MOVF   xB9,W
0B224:  SUBLW  B0
0B226:  BNZ   B27C
0B228:  MOVF   xE0,W
0B22A:  SUBLW  B1
0B22C:  BNZ   B27C
....................       { 
....................          PRINT_RECIVED_COMMAND_FROM_COM_PIC();     
0B22E:  GOTO   8880
....................          Delay_ms(5);    // just delay 5ms before respond 
0B232:  MOVLW  05
0B234:  MOVLB  4
0B236:  MOVWF  x3E
0B238:  MOVLB  0
0B23A:  CALL   1DA0
....................           
....................          // perform your task here 
....................          GIVE_COMFM_ACCESS_TO_COMPIC_FOR_DATA_DOWNLOAD();       // 0x00, 0xFA 
0B23E:  GOTO   88E0
....................          DATA_COPY_FROM_MSN_FM_TO_CFM_USING_GS_CMD()  ;         // 0x00, 0x12 
0B242:  GOTO   8B72
....................          DATA_COPY_FROM_MAIN_FM_TO_CFM_USING_GS_CMD() ;         // 0x00, 0x13 
0B246:  GOTO   8DB6
....................          SECTOR_ERASE_USING_GS_COMMAND();                       // 0x00, 0x14 
0B24A:  GOTO   8FFA
....................          GIVE_CW_DATA_TO_COM_PIC();                             // 0x00, 0xCA 
0B24E:  GOTO   9148
....................          CONTROL_KILL_SWITCHES();                               // 0x00, 0xFF, 0xF1 for FAB and 0cF2 for OBC, 0x01 close 0x00 open 
0B252:  GOTO   94D8
....................           
....................          WRITE_GS_CMD_IN_RESERVATION_LOCATION()          ;      // 0x21 to 2A, 0xXX 
0B256:  GOTO   98C6
....................           
....................          SEND_APRS_COMMAND_TO_MISSIONBOSS_THROUGH_MAIN() ;       // 0x00, 0xB? ?==> Board number 
0B25A:  GOTO   9B76
....................           
....................          DEPLOY_ANTENNA_USING_GS_COMMAND()               ;       // 0xDA  
0B25E:  GOTO   9D3E
....................          SET_ANTENNA_VALUES_USING_GS_COMMAND()           ;       // 0xDB 
0B262:  GOTO   9EBC
....................           
....................          RESET_30DAY_CONTER(); 
0B266:  GOTO   A1EC
....................          //_____________________________________________________ 
....................          // finaly clear the data array received from com pic 
....................          CLEAR_DATA_ARRAY( CPIC_TO_MPIC_ARRAY, 32 ); 
0B26A:  MOVLB  4
0B26C:  CLRF   x38
0B26E:  MOVLW  B9
0B270:  MOVWF  x37
0B272:  MOVLW  20
0B274:  MOVWF  x39
0B276:  MOVLB  0
0B278:  CALL   2F54
....................       } 
....................        
....................        
....................       ///////////////////////////////////////////////////////////////////////// 
....................       // this section will execute debug port commands_________________________ 
....................       if( DEBUG_TO_MPIC_ARRAY[0] == 0xD0 && DEBUG_TO_MPIC_ARRAY[12] == 0xD1 ) 
0B27C:  MOVF   21,W
0B27E:  SUBLW  D0
0B280:  BNZ   B2CA
0B282:  MOVF   2D,W
0B284:  SUBLW  D1
0B286:  BNZ   B2CA
....................       { 
....................          PRINT_RECIVED_COMMAND_FROM_DEBUG_PORT();  
0B288:  GOTO   A236
....................          Delay_ms(5);    // just delay 5ms before respond 
0B28C:  MOVLW  05
0B28E:  MOVLB  4
0B290:  MOVWF  x3E
0B292:  MOVLB  0
0B294:  CALL   1DA0
....................           
....................           
....................          // perform your task here 
....................          READ_FM_DATA_THROUGH_PC();                  // 0x1F 
0B298:  GOTO   A28A
....................          DEPLOY_ANTENNA_INSTANTLY();                 // 0xDA 
0B29C:  GOTO   A5EC
....................          SET_UP_ANTENNA_DEPLOYMENT_VALUES();         // 0xDB 
0B2A0:  GOTO   A730
....................          GET_ANTENNA_DEPLOYMENT_VALUES();            // 0xDC 
0B2A4:  GOTO   AA3A
....................          UPDATE_RESET_PIC_TIME();                    // 0x7B 
0B2A8:  BRA    ACBE
....................           
....................          CLOSE_FAB_KILL_SWITCH_DB() ;                // 0xF1 
0B2AA:  BRA    ACF2
....................          CLOSE_OBC_KILL_SWITCH_DB() ;                // 0xF2  
0B2AC:  BRA    AD10
....................          OPEN_FAB_KILL_SWITCH_DB()  ;                // 0xF3 
0B2AE:  BRA    AD2E
....................          OPEN_OBC_KILL_SWITCH_DB()  ;                // 0xF4 
0B2B0:  BRA    AD4C
....................          POWER_LINE_CONTROL_USING_DEBUG_COMMAND_TO_RST_PIC(); // 0xF5 
0B2B2:  BRA    AD6A
....................          RESET_SATELLITE_CMD()      ;                // 0x7D 
0B2B4:  BRA    AE2A
....................           
....................          SEND_COM_CMD_THROUGH_PC()  ;                // 0x77 
0B2B6:  BRA    AEBA
....................              
....................          //_____________________________________________________ 
....................          // finaly clear the data array received from debug port 
....................          CLEAR_DATA_ARRAY( DEBUG_TO_MPIC_ARRAY, 20 ); 
0B2B8:  MOVLB  4
0B2BA:  CLRF   x38
0B2BC:  MOVLW  21
0B2BE:  MOVWF  x37
0B2C0:  MOVLW  14
0B2C2:  MOVWF  x39
0B2C4:  MOVLB  0
0B2C6:  CALL   2F54
....................       } 
....................       CHECK_COMFM_ACCES_RELEASING(); 
0B2CA:  BRA    AF22
....................       MLC++;   
0B2CC:  MOVLW  01
0B2CE:  ADDWF  1D,F
0B2D0:  BTFSC  FD8.0
0B2D2:  INCF   1E,F
0B2D4:  BTFSC  FD8.2
0B2D6:  INCF   1F,F
0B2D8:  BTFSC  FD8.2
0B2DA:  INCF   20,F
0B2DC:  BRA    B1E2
....................    }  
.................... } 
....................  
0B2DE:  SLEEP 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................       ///////////////////////////////////////////////////////////////////////// 
....................       // this section will execute Mission Boss commands____________________________ 
....................      /* if( MBOSS_TO_MPIC_ARRAY[0] == 0x90 && MBOSS_TO_MPIC_ARRAY[12] == 0x91 ) 
....................       { 
....................          PRINT_RECIVED_COMMAND_FROM_MISSION_BOSS(); 
....................          Delay_ms(5);    // just delay 5ms before respond 
....................           
....................          // perform your task here 
....................          APRS_PAYLOAD_FLAG_OPERATION();              // if ACK from MBOSS == 0xB? 
....................          TRANSFER_N_PACKETS_TO_FLASH();              // 0x13 
....................          ERASE_SFWD_FLASH();                         // 0x14 
....................           
....................          // finaly clear the data array received from com port 
....................          CLEAR_DATA_ARRAY( MBOSS_TO_MPIC_ARRAY, 40 );      
....................       }*/ 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... //!      ///////////////////////////////////////////////////////////////////////// 
.................... //!      // this section will execute FAB pic commands____________________________ 
.................... //!      if( FAB_TO_MPIC_ARRAY[0] == 0xF0 && FAB_TO_MPIC_ARRAY[31] == 0xF1 ) 
.................... //!      { 
.................... //!         PRINT_RECIVED_COMMAND_FROM_FAB_PIC(); 
.................... //!         Delay_ms(5);    // just delay 5ms before respond 
.................... //!          
.................... //!         // perform your task here 
.................... //!          
.................... //!          
.................... //!         //___________________________________________________ 
.................... //!         // finaly clear the data array received from com port 
.................... //!         CLEAR_DATA_ARRAY( FAB_TO_MPIC_ARRAY, 32 );      
.................... //!      } 
.................... //!       
.................... //!      ///////////////////////////////////////////////////////////////////////// 
.................... //!      // this section will execute reset pic commands__________________________ 
.................... //!      if( RPIC_TO_MPIC_ARRAY[0] == 0xA0 && RPIC_TO_MPIC_ARRAY[31] == 0xA1 ) 
.................... //!      { 
.................... //!         PRINT_RECIVED_COMMAND_FROM_RESET_PIC(); 
.................... //!         //RESET_TO_MAIN_FLAG = 1; 
.................... //!         Delay_ms(5);    // just delay 5ms before respond 
.................... //!          
.................... //!         // perform your task here 
.................... //!          
.................... //!          
.................... //!         //_____________________________________________________ 
.................... //!         // finaly clear the data array received from reset port 
.................... //!         CLEAR_DATA_ARRAY( RPIC_TO_MPIC_ARRAY, 32 );      
.................... //!      } 

Configuration Fuses:
   Word  1: F6A0   STVREN NOXINST NODEBUG NOBROWNOUT BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS DSWDT DSWDTOSC_SOSC
