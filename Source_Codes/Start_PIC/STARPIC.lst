CCS PCM C Compiler, Version 5.078, 5967               24-Jan-24 00:19

               Filename:   J:\My Drive\OBC\OBC&MissionBoss Codes\START_PIC\START_PIC_V1.3\STARPIC.lst

               ROM used:   715 words (4%)
                           Largest free fragment is 2048
               RAM used:   53 (3%) at main() level
                           76 (4%) worst case
               Stack used: 5 locations (3 in main + 2 for interrupts)
               Stack size: 16

*
0000:  MOVLP  00
0001:  GOTO   22C
0002:  NOP
0004:  CLRF   03
0005:  MOVLP  00
0006:  MOVLB  00
0007:  MOVF   77,W
0008:  MOVWF  20
0009:  MOVF   78,W
000A:  MOVWF  21
000B:  MOVF   79,W
000C:  MOVWF  22
000D:  MOVF   7A,W
000E:  MOVWF  23
000F:  MOVLB  03
0010:  MOVF   11,W
0011:  MOVLB  00
0012:  MOVWF  24
0013:  MOVLB  03
0014:  MOVF   12,W
0015:  MOVLB  00
0016:  MOVWF  25
0017:  MOVLB  03
0018:  MOVF   13,W
0019:  MOVLB  00
001A:  MOVWF  26
001B:  MOVLB  03
001C:  MOVF   14,W
001D:  MOVLB  00
001E:  MOVWF  27
001F:  CLRF   05
0020:  MOVLW  91
0021:  MOVWF  04
0022:  BTFSS  00.5
0023:  GOTO   026
0024:  BTFSC  11.5
0025:  GOTO   03F
0026:  MOVF   20,W
0027:  MOVWF  77
0028:  MOVF   21,W
0029:  MOVWF  78
002A:  MOVF   22,W
002B:  MOVWF  79
002C:  MOVF   23,W
002D:  MOVWF  7A
002E:  MOVF   24,W
002F:  MOVLB  03
0030:  MOVWF  11
0031:  MOVLB  00
0032:  MOVF   25,W
0033:  MOVLB  03
0034:  MOVWF  12
0035:  MOVLB  00
0036:  MOVF   26,W
0037:  MOVLB  03
0038:  MOVWF  13
0039:  MOVLB  00
003A:  MOVF   27,W
003B:  MOVLB  03
003C:  MOVWF  14
003D:  RETFIE
003E:  MOVLB  00
003F:  MOVLP  00
0040:  GOTO   052
.................... #include <16F1789.h> 
.................... //////////// Standard Header file for the PIC16F1789 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F1789 
*
0073:  DATA D4,3A
0074:  DATA 72,37
0075:  DATA 65,32
0076:  DATA A0,27
0077:  DATA 46,23
0078:  DATA 20,28
0079:  DATA EF,3B
007A:  DATA 65,39
007B:  DATA 20,36
007C:  DATA 69,37
007D:  DATA E5,39
007E:  DATA 8A,06
007F:  DATA 00,00
0080:  DATA D4,3A
0081:  DATA 72,37
0082:  DATA 65,32
0083:  DATA A0,27
0084:  DATA 4E,10
0085:  DATA D0,37
0086:  DATA F7,32
0087:  DATA 72,10
0088:  DATA EC,34
0089:  DATA EE,32
008A:  DATA 73,05
008B:  DATA 0D,00
008C:  DATA 53,3A
008D:  DATA 61,39
008E:  DATA 74,10
008F:  DATA D0,24
0090:  DATA 43,10
0091:  DATA E2,37
0092:  DATA 6F,3A
0093:  DATA 69,37
0094:  DATA 67,17
0095:  DATA 2E,17
0096:  DATA 2E,17
0097:  DATA 2E,17
0098:  DATA 2E,17
0099:  DATA 2E,17
009A:  DATA 8A,06
009B:  DATA 00,01
009C:  DATA D2,32
009D:  DATA F3,32
009E:  DATA 74,10
009F:  DATA F0,34
00A0:  DATA 63,10
00A1:  DATA E4,34
00A2:  DATA 64,10
00A3:  DATA EE,37
00A4:  DATA 74,10
00A5:  DATA F2,32
00A6:  DATA 73,38
00A7:  DATA 6F,37
00A8:  DATA 64,10
00A9:  DATA E6,37
00AA:  DATA 72,10
00AB:  DATA 74,34
00AC:  DATA F2,32
00AD:  DATA 65,10
00AE:  DATA ED,34
00AF:  DATA EE,3A
00B0:  DATA F4,32
00B1:  DATA 8A,06
00B2:  DATA 00,00
*
00EF:  MOVF   0B,W
00F0:  BCF    0B.7
00F1:  MOVLB  03
00F2:  BSF    15.7
00F3:  BSF    15.0
00F4:  NOP
00F5:  NOP
00F6:  BTFSC  09.7
00F7:  BSF    0B.7
00F8:  MOVF   13,W
00F9:  ANDLW  7F
00FA:  BTFSC  03.2
00FB:  GOTO   137
00FC:  MOVLB  00
00FD:  MOVWF  4F
00FE:  MOVLB  03
00FF:  MOVF   11,W
0100:  MOVLB  00
0101:  MOVWF  50
0102:  MOVLB  03
0103:  MOVF   12,W
0104:  MOVLB  00
0105:  MOVWF  51
0106:  MOVF   4F,W
0107:  MOVWF  55
0108:  CALL   0C9
0109:  MOVF   50,W
010A:  MOVLB  03
010B:  MOVWF  11
010C:  MOVLB  00
010D:  MOVF   51,W
010E:  MOVLB  03
010F:  MOVWF  12
0110:  MOVF   0B,W
0111:  BCF    0B.7
0112:  BSF    15.7
0113:  BSF    15.0
0114:  NOP
0115:  NOP
0116:  BTFSC  09.7
0117:  BSF    0B.7
0118:  RLF    13,W
0119:  RLF    14,W
011A:  ANDLW  7F
011B:  BTFSC  03.2
011C:  GOTO   137
011D:  MOVLB  00
011E:  MOVWF  4F
011F:  MOVLB  03
0120:  MOVF   11,W
0121:  MOVLB  00
0122:  MOVWF  50
0123:  MOVLB  03
0124:  MOVF   12,W
0125:  MOVLB  00
0126:  MOVWF  51
0127:  MOVF   4F,W
0128:  MOVWF  55
0129:  CALL   0C9
012A:  MOVF   50,W
012B:  MOVLB  03
012C:  MOVWF  11
012D:  MOVLB  00
012E:  MOVF   51,W
012F:  MOVLB  03
0130:  MOVWF  12
0131:  INCF   11,F
0132:  BTFSC  03.2
0133:  INCF   12,F
0134:  MOVLB  00
0135:  GOTO   0EF
0136:  MOVLB  03
0137:  MOVLB  00
0138:  RETURN
*
01D2:  BTFSC  54.7
01D3:  GOTO   1E4
01D4:  MOVLW  0F
01D5:  MOVWF  77
01D6:  SWAPF  53,W
01D7:  ANDWF  77,F
01D8:  MOVLW  0A
01D9:  SUBWF  77,W
01DA:  BTFSC  03.0
01DB:  GOTO   1DF
01DC:  MOVLW  30
01DD:  ADDWF  77,F
01DE:  GOTO   1E1
01DF:  MOVF   54,W
01E0:  ADDWF  77,F
01E1:  MOVF   77,W
01E2:  MOVWF  55
01E3:  CALL   0C9
01E4:  MOVLW  0F
01E5:  ANDWF  53,F
01E6:  MOVLW  0A
01E7:  SUBWF  53,W
01E8:  BTFSC  03.0
01E9:  GOTO   1EC
01EA:  MOVLW  30
01EB:  GOTO   1EE
01EC:  BCF    54.7
01ED:  MOVF   54,W
01EE:  ADDWF  53,F
01EF:  MOVF   53,W
01F0:  MOVWF  55
01F1:  CALL   0C9
....................  
.................... #list 
....................  
.................... #fuses NOWDT,MCLR,NOBROWNOUT 
.................... #use delay(Crystal = 16MHz, clock = 16MHz) 
*
00B3:  MOVLW  20
00B4:  MOVWF  05
00B5:  MOVLW  32
00B6:  MOVWF  04
00B7:  MOVF   00,W
00B8:  BTFSC  03.2
00B9:  GOTO   0C8
00BA:  MOVLW  05
00BB:  MOVWF  78
00BC:  CLRF   77
00BD:  DECFSZ 77,F
00BE:  GOTO   0BD
00BF:  DECFSZ 78,F
00C0:  GOTO   0BC
00C1:  MOVLW  2E
00C2:  MOVWF  77
00C3:  DECFSZ 77,F
00C4:  GOTO   0C3
00C5:  GOTO   0C6
00C6:  DECFSZ 00,F
00C7:  GOTO   0BA
00C8:  RETURN
....................  
.................... #use rs232(baud=38400, parity=N, xmit=PIN_D3, bits=8, stream=PC, force_sw)  // dummy port 
00C9:  MOVLB  01
00CA:  BCF    0F.3
00CB:  MOVLB  02
00CC:  BCF    0F.3
00CD:  MOVLW  08
00CE:  MOVWF  78
00CF:  GOTO   0D0
00D0:  NOP
00D1:  BSF    78.7
00D2:  GOTO   0E3
00D3:  BCF    78.7
00D4:  MOVLB  00
00D5:  RRF    55,F
00D6:  MOVLB  02
00D7:  BTFSC  03.0
00D8:  BSF    0F.3
00D9:  BTFSS  03.0
00DA:  BCF    0F.3
00DB:  BSF    78.6
00DC:  GOTO   0E3
00DD:  BCF    78.6
00DE:  DECFSZ 78,F
00DF:  GOTO   0D4
00E0:  GOTO   0E1
00E1:  NOP
00E2:  BSF    0F.3
00E3:  MOVLW  1B
00E4:  MOVWF  04
00E5:  DECFSZ 04,F
00E6:  GOTO   0E5
00E7:  GOTO   0E8
00E8:  NOP
00E9:  BTFSC  78.7
00EA:  GOTO   0D3
00EB:  BTFSC  78.6
00EC:  GOTO   0DD
00ED:  MOVLB  00
00EE:  RETURN
....................  
.................... #include <StartPIc_Funtions.c> 
.................... #byte T1CON = 0x018 
.................... #bit    TMR1ON = T1CON.0 
.................... #bit    T1SYNC = T1CON.2 
.................... #bit    T1OSCEN = T1CON.3 
.................... #bit    T1CKPS0 = T1CON.4 
.................... #bit    T1CKPS1 = T1CON.5 
.................... #bit    TMR1CS0 = T1CON.6 
.................... #bit    TMR1CS1 = T1CON.7 
....................  
.................... unsigned int8 RPIC_TO_SPIC_ARRAY[10]; 
....................  
.................... #define ON   0x69 
.................... #define OFF  0x96 
....................  
.................... char POWER_LINE_STATUS ; 
....................  
.................... // UART port related functions_________________________________________________ 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... #define RP_BFR_SIZE 10                                                         
.................... #use rs232(UART1, baud=38400, parity=N, bits=8, stream=RPIC, ERRORS) 
*
0041:  BTFSS  11.5
0042:  GOTO   041
0043:  MOVLB  03
0044:  MOVF   1D,W
0045:  MOVLB  00
0046:  MOVWF  33
0047:  MOVLB  03
0048:  MOVF   19,W
0049:  MOVWF  78
004A:  MOVLB  00
004B:  BTFSS  33.1
004C:  GOTO   050
004D:  MOVLB  03
004E:  BCF    1D.4
004F:  BSF    1D.4
0050:  MOVLB  00
0051:  RETURN
....................  
.................... unsigned int8  RP_Buffer[RP_BFR_SIZE]; 
.................... unsigned int16 RP_Byte_Counter = 0; 
.................... unsigned int8  RP_Overflow = 0; 
.................... unsigned int16 RP_Read_Byte_counter = 0; 
.................... unsigned int8  RP_Temp_byte = 0; 
....................  
.................... #INT_RDA 
.................... Void SERIAL_ISR1()                                                             // MAIN PIC uart interupt loop 
.................... { 
....................    if( RP_Byte_Counter < RP_BFR_SIZE ) 
0052:  MOVF   3F,F
0053:  BTFSS  03.2
0054:  GOTO   06D
0055:  MOVF   3E,W
0056:  SUBLW  09
0057:  BTFSS  03.0
0058:  GOTO   06D
....................    { 
....................       RP_Buffer[RP_Byte_Counter] = fgetc(RPIC); 
0059:  MOVLW  14
005A:  ADDWF  3E,W
005B:  MOVWF  04
005C:  MOVLW  20
005D:  ADDWFC 3F,W
005E:  MOVWF  05
005F:  MOVWF  5B
0060:  MOVF   04,W
0061:  MOVWF  5A
0062:  CALL   041
0063:  MOVF   5B,W
0064:  MOVWF  05
0065:  MOVF   5A,W
0066:  MOVWF  04
0067:  MOVF   78,W
0068:  MOVWF  00
....................       RP_Byte_Counter++; 
0069:  INCF   3E,F
006A:  BTFSC  03.2
006B:  INCF   3F,F
....................    } 
006C:  GOTO   070
....................     
....................    else RP_Overflow = fgetc(RPIC); 
006D:  CALL   041
006E:  MOVF   78,W
006F:  MOVWF  40
0070:  BCF    11.5
0071:  MOVLP  00
0072:  GOTO   026
.................... } 
....................  
....................  
.................... unsigned int8 RPic_Available() 
.................... { 
....................    return RP_Byte_Counter ; 
*
018F:  MOVF   3E,W
0190:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 RPic_Read() 
.................... { 
....................    if (RP_Byte_Counter>0) 
*
0163:  MOVF   3E,F
0164:  BTFSS  03.2
0165:  GOTO   169
0166:  MOVF   3F,F
0167:  BTFSC  03.2
0168:  GOTO   183
....................    {     
....................       RP_Temp_byte = RP_Buffer[RP_Read_Byte_counter]; 
0169:  MOVLW  14
016A:  ADDWF  41,W
016B:  MOVWF  04
016C:  MOVLW  20
016D:  ADDWFC 42,W
016E:  MOVWF  05
016F:  MOVF   00,W
0170:  MOVWF  43
....................        
....................       RP_Byte_Counter--; 
0171:  MOVF   3E,W
0172:  BTFSC  03.2
0173:  DECF   3F,F
0174:  DECF   3E,F
....................       RP_Read_Byte_counter++; 
0175:  INCF   41,F
0176:  BTFSC  03.2
0177:  INCF   42,F
....................       if(RP_Byte_Counter == 0) RP_Read_Byte_counter = 0; 
0178:  MOVF   3E,F
0179:  BTFSS  03.2
017A:  GOTO   180
017B:  MOVF   3F,F
017C:  BTFSS  03.2
017D:  GOTO   180
017E:  CLRF   42
017F:  CLRF   41
....................       return RP_Temp_byte;  
0180:  MOVF   43,W
0181:  MOVWF  78
0182:  GOTO   18E
....................    } 
....................     
....................    if (RP_Byte_Counter == 0) 
0183:  MOVF   3E,F
0184:  BTFSS  03.2
0185:  GOTO   18E
0186:  MOVF   3F,F
0187:  BTFSS  03.2
0188:  GOTO   18E
....................    {  
....................       RP_Read_Byte_counter = 0; 
0189:  CLRF   42
018A:  CLRF   41
....................       RP_Temp_byte = 0x00; 
018B:  CLRF   43
....................       return RP_Temp_byte;  
018C:  MOVF   43,W
018D:  MOVWF  78
....................    } 
018E:  RETURN
.................... } 
....................  
....................  
.................... void CHECK_UART_INCOMING_FROM_RESET_PIC() 
.................... { 
....................    if( Rpic_Available() ) 
0191:  MOVF   78,F
0192:  BTFSC  03.2
0193:  GOTO   1FD
....................    { 
....................       delay_ms(10); 
0194:  MOVLW  0A
0195:  MOVWF  52
0196:  CALL   0B3
....................       for(int i=0; i<8; i++) 
0197:  CLRF   4F
0198:  MOVF   4F,W
0199:  SUBLW  07
019A:  BTFSS  03.0
019B:  GOTO   1A6
....................       { 
....................          if( RPIC_Read() == 0xAA ) 
019C:  CALL   163
019D:  MOVF   78,W
019E:  SUBLW  AA
019F:  BTFSS  03.2
01A0:  GOTO   1A4
....................          { 
....................             RPIC_TO_SPIC_ARRAY[0] = 0xAA; 
01A1:  MOVLW  AA
01A2:  MOVWF  28
....................             break; 
01A3:  GOTO   1A6
....................          } 
01A4:  INCF   4F,F
01A5:  GOTO   198
....................       } 
....................        
....................       for(int i=1; i<10; i++) 
01A6:  MOVLW  01
01A7:  MOVWF  50
01A8:  MOVF   50,W
01A9:  SUBLW  09
01AA:  BTFSS  03.0
01AB:  GOTO   1C0
....................       { 
....................          RPIC_TO_SPIC_ARRAY[i] = RPIC_Read() ; 
01AC:  MOVLW  08
01AD:  ADDWF  50,W
01AE:  MOVWF  78
01AF:  MOVLW  20
01B0:  MOVWF  7A
01B1:  BTFSC  03.0
01B2:  INCF   7A,F
01B3:  MOVF   78,W
01B4:  MOVWF  52
01B5:  MOVF   7A,W
01B6:  MOVWF  53
01B7:  CALL   163
01B8:  MOVF   53,W
01B9:  MOVWF  05
01BA:  MOVF   52,W
01BB:  MOVWF  04
01BC:  MOVF   78,W
01BD:  MOVWF  00
01BE:  INCF   50,F
01BF:  GOTO   1A8
....................       } 
....................        
....................       for(int i=0; i<3; i++) 
01C0:  CLRF   51
01C1:  MOVF   51,W
01C2:  SUBLW  02
01C3:  BTFSS  03.0
01C4:  GOTO   1F7
....................       { 
....................          fprintf(PC, "%X ", RPIC_TO_SPIC_ARRAY[i] ); 
01C5:  MOVLW  08
01C6:  ADDWF  51,W
01C7:  MOVWF  04
01C8:  MOVLW  20
01C9:  MOVWF  05
01CA:  BTFSC  03.0
01CB:  INCF   05,F
01CC:  MOVF   00,W
01CD:  MOVWF  52
01CE:  MOVF   52,W
01CF:  MOVWF  53
01D0:  MOVLW  37
01D1:  MOVWF  54
*
01F2:  MOVLW  20
01F3:  MOVWF  55
01F4:  CALL   0C9
01F5:  INCF   51,F
01F6:  GOTO   1C1
....................       } 
....................       fprintf(PC, "\n\r"); 
01F7:  MOVLW  0A
01F8:  MOVWF  55
01F9:  CALL   0C9
01FA:  MOVLW  0D
01FB:  MOVWF  55
01FC:  CALL   0C9
....................    } 
01FD:  MOVLP  00
01FE:  GOTO   275 (RETURN)
.................... } 
....................  
....................  
.................... void TURN_OFF_ALL_POWER_LINES() 
.................... { 
....................    output_Low(PIN_D6);                                                         // Switch enable for COM PIC 
01FF:  MOVLB  01
0200:  BCF    0F.6
0201:  MOVLB  02
0202:  BCF    0F.6
....................    output_Low(PIN_D7);                                                         // Switch enable for Main PIC    
0203:  MOVLB  01
0204:  BCF    0F.7
0205:  MOVLB  02
0206:  BCF    0F.7
....................    output_Low(PIN_C2);                                                         //OCP switch disable for Unreg #1 
0207:  MOVLB  01
0208:  BCF    0E.2
0209:  MOVLB  02
020A:  BCF    0E.2
....................    output_Low(PIN_C5);                                                         //OCP switch disable for Unreg #2 
020B:  MOVLB  01
020C:  BCF    0E.5
020D:  MOVLB  02
020E:  BCF    0E.5
....................     
....................    POWER_LINE_STATUS = OFF ; 
020F:  MOVLW  96
0210:  MOVLB  00
0211:  MOVWF  32
....................    fprintf(PC, "Turned OFF Power lines\n\r"); 
0212:  MOVLW  73
0213:  MOVLB  03
0214:  MOVWF  11
0215:  MOVLW  00
0216:  MOVWF  12
0217:  MOVLB  00
0218:  CALL   0EF
0219:  MOVLP  00
021A:  GOTO   28D (RETURN)
.................... } 
....................  
.................... void TURN_ON_ALL_POWER_LINES() 
.................... { 
....................    output_High(PIN_D6);                                                          
*
0139:  MOVLB  01
013A:  BCF    0F.6
013B:  MOVLB  02
013C:  BSF    0F.6
....................    Delay_ms(50); 
013D:  MOVLW  32
013E:  MOVLB  00
013F:  MOVWF  52
0140:  CALL   0B3
....................    output_High(PIN_D7);                                                          
0141:  MOVLB  01
0142:  BCF    0F.7
0143:  MOVLB  02
0144:  BSF    0F.7
....................    Delay_ms(50); 
0145:  MOVLW  32
0146:  MOVLB  00
0147:  MOVWF  52
0148:  CALL   0B3
....................    output_High(PIN_C2);                                                          
0149:  MOVLB  01
014A:  BCF    0E.2
014B:  MOVLB  02
014C:  BSF    0E.2
....................    Delay_ms(50); 
014D:  MOVLW  32
014E:  MOVLB  00
014F:  MOVWF  52
0150:  CALL   0B3
....................    output_High(PIN_C5);                                                         
0151:  MOVLB  01
0152:  BCF    0E.5
0153:  MOVLB  02
0154:  BSF    0E.5
....................    Delay_ms(50); 
0155:  MOVLW  32
0156:  MOVLB  00
0157:  MOVWF  52
0158:  CALL   0B3
....................     
....................    POWER_LINE_STATUS = ON ; 
0159:  MOVLW  69
015A:  MOVWF  32
....................    fprintf(PC, "Turned ON Power lines\n\r"); 
015B:  MOVLW  80
015C:  MOVLB  03
015D:  MOVWF  11
015E:  MOVLW  00
015F:  MOVWF  12
0160:  MOVLB  00
0161:  CALL   0EF
0162:  RETURN
.................... } 
....................  
.................... void CLEAR_RPIC_TO_SPIC_ARRAY() 
.................... { 
....................    for( int i = 0; i<10; i++ ) RPIC_TO_SPIC_ARRAY[i] = 0; 
*
021B:  CLRF   4F
021C:  MOVF   4F,W
021D:  SUBLW  09
021E:  BTFSS  03.0
021F:  GOTO   22A
0220:  MOVLW  08
0221:  ADDWF  4F,W
0222:  MOVWF  04
0223:  MOVLW  20
0224:  MOVWF  05
0225:  BTFSC  03.0
0226:  INCF   05,F
0227:  CLRF   00
0228:  INCF   4F,F
0229:  GOTO   21C
022A:  MOVLP  00
022B:  GOTO   28E (RETURN)
.................... } 
....................  
.................... unsigned int16 RPIC_RESPOND_SEC_COUNTER = 0 ;               // main loop counter 
.................... unsigned int16 MLC = 0 ; 
....................  
.................... unsigned int16 SEC_COUNT    = 0; 
.................... unsigned int8  ONEHOUR_FLAG = 0x00 ;    
....................  
.................... char BB, CC; 
.................... void main() 
022C:  MOVLB  01
022D:  BCF    0F.3
022E:  MOVLB  02
022F:  BSF    0F.3
0230:  MOVLB  00
0231:  CLRF   33
0232:  MOVLB  03
0233:  BCF    1F.3
0234:  MOVLW  19
0235:  MOVWF  1B
0236:  MOVLW  A6
0237:  MOVWF  1E
0238:  MOVLW  90
0239:  MOVWF  1D
023A:  MOVLB  00
023B:  CLRF   3F
023C:  CLRF   3E
023D:  CLRF   40
023E:  CLRF   42
023F:  CLRF   41
0240:  CLRF   43
0241:  CLRF   45
0242:  CLRF   44
0243:  CLRF   47
0244:  CLRF   46
0245:  CLRF   49
0246:  CLRF   48
0247:  CLRF   4B
0248:  CLRF   4A
0249:  CLRF   4C
024A:  MOVLB  03
024B:  CLRF   0C
024C:  CLRF   0D
024D:  CLRF   0E
024E:  CLRF   0F
024F:  CLRF   10
0250:  MOVLB  02
0251:  CLRF   12
0252:  CLRF   11
.................... { 
....................    Delay_ms(500); 
0253:  MOVLW  02
0254:  MOVLB  00
0255:  MOVWF  4F
0256:  MOVLW  FA
0257:  MOVWF  52
0258:  CALL   0B3
0259:  DECFSZ 4F,F
025A:  GOTO   256
....................    fprintf(PC, "Start PIC booting...........\n\r"); 
025B:  MOVLW  8C
025C:  MOVLB  03
025D:  MOVWF  11
025E:  MOVLW  00
025F:  MOVWF  12
0260:  MOVLB  00
0261:  CALL   0EF
....................     
....................    enable_interrupts(INT_RDA) ;                                                // enabling timer 1 interupt  
0262:  MOVLB  01
0263:  BSF    11.5
....................    enable_interrupts(GLOBAL)  ;                                                // start interupt procesing 
0264:  MOVLW  C0
0265:  IORWF  0B,F
....................     
....................    TURN_ON_ALL_POWER_LINES() ;                                                // beging with power lines off 
0266:  MOVLB  00
0267:  CALL   139
....................     
....................    CC = input(PIN_B6); 
0268:  MOVLB  01
0269:  BSF    0D.6
026A:  MOVLB  00
026B:  CLRF   4E
026C:  BTFSC  0D.6
026D:  INCF   4E,F
....................    BB = input(PIN_B7); 
026E:  MOVLB  01
026F:  BSF    0D.7
0270:  MOVLB  00
0271:  CLRF   4D
0272:  BTFSC  0D.7
0273:  INCF   4D,F
....................     
....................    while(TRUE) 
....................    { 
....................       CHECK_UART_INCOMING_FROM_RESET_PIC(); 
0274:  GOTO   18F
....................   
....................       if( ONEHOUR_FLAG == 0xAA ) 
0275:  MOVF   4C,W
0276:  SUBLW  AA
0277:  BTFSS  03.2
0278:  GOTO   2AE
....................       { 
....................          // check response from reset pic 
....................          if( (RPIC_TO_SPIC_ARRAY[0] == 0xAA) && (RPIC_TO_SPIC_ARRAY[1] == 0xBB) && (RPIC_TO_SPIC_ARRAY[2] == 0xCC) ) 
0279:  MOVF   28,W
027A:  SUBLW  AA
027B:  BTFSS  03.2
027C:  GOTO   28E
027D:  MOVF   29,W
027E:  SUBLW  BB
027F:  BTFSS  03.2
0280:  GOTO   28E
0281:  MOVF   2A,W
0282:  SUBLW  CC
0283:  BTFSS  03.2
0284:  GOTO   28E
....................          { 
....................             RPIC_RESPOND_SEC_COUNTER = 0 ; 
0285:  CLRF   47
0286:  CLRF   46
....................             MLC = 0; 
0287:  CLRF   49
0288:  CLRF   48
....................             //fprintf(PC, "Reset pic respond\n\r"); 
....................             if( POWER_LINE_STATUS == ON ) TURN_OFF_ALL_POWER_LINES(); 
0289:  MOVF   32,W
028A:  SUBLW  69
028B:  BTFSC  03.2
028C:  GOTO   1FF
....................              
....................             CLEAR_RPIC_TO_SPIC_ARRAY(); 
028D:  GOTO   21B
....................          } 
....................                 
....................          if( MLC >= 50 ) 
028E:  MOVF   49,F
028F:  BTFSS  03.2
0290:  GOTO   295
0291:  MOVF   48,W
0292:  SUBLW  31
0293:  BTFSC  03.0
0294:  GOTO   29A
....................          { 
....................             MLC = 0; 
0295:  CLRF   49
0296:  CLRF   48
....................             RPIC_RESPOND_SEC_COUNTER++; 
0297:  INCF   46,F
0298:  BTFSC  03.2
0299:  INCF   47,F
....................          } 
....................           
....................          // if response counter reach three minute we have to turn on power lines 
....................          if( RPIC_RESPOND_SEC_COUNTER >= 36 ) 
029A:  MOVF   47,F
029B:  BTFSS  03.2
029C:  GOTO   2A1
029D:  MOVF   46,W
029E:  SUBLW  23
029F:  BTFSC  03.0
02A0:  GOTO   2AB
....................          { 
....................             fprintf(PC, "Reset pic did not respond for three minute\n\r"); 
02A1:  MOVLW  9C
02A2:  MOVLB  03
02A3:  MOVWF  11
02A4:  MOVLW  00
02A5:  MOVWF  12
02A6:  MOVLB  00
02A7:  CALL   0EF
....................             RPIC_RESPOND_SEC_COUNTER = 0 ; 
02A8:  CLRF   47
02A9:  CLRF   46
....................              
....................             TURN_ON_ALL_POWER_LINES(); 
02AA:  CALL   139
....................          }   
....................          MLC++; 
02AB:  INCF   48,F
02AC:  BTFSC  03.2
02AD:  INCF   49,F
....................       } 
....................        
....................       if( ONEHOUR_FLAG == 0x00 ) 
02AE:  MOVF   4C,F
02AF:  BTFSS  03.2
02B0:  GOTO   2C1
....................       { 
....................          SEC_COUNT++; 
02B1:  INCF   4A,F
02B2:  BTFSC  03.2
02B3:  INCF   4B,F
....................          if(SEC_COUNT >= 36000)     // one hour 36000 
02B4:  MOVF   4B,W
02B5:  SUBLW  8B
02B6:  BTFSC  03.0
02B7:  GOTO   2C1
02B8:  XORLW  FF
02B9:  BTFSS  03.2
02BA:  GOTO   2BF
02BB:  MOVF   4A,W
02BC:  SUBLW  9F
02BD:  BTFSC  03.0
02BE:  GOTO   2C1
....................          { 
....................             ONEHOUR_FLAG = 0xAA; 
02BF:  MOVLW  AA
02C0:  MOVWF  4C
....................          } 
....................       } 
....................        
....................       delay_ms(100); 
02C1:  MOVLW  64
02C2:  MOVWF  52
02C3:  CALL   0B3
....................       Output_Toggle(PIN_B2);            // external WDT pin toggle   
02C4:  MOVLB  01
02C5:  BCF    0D.2
02C6:  MOVLW  04
02C7:  MOVLB  02
02C8:  XORWF  0D,F
02C9:  MOVLB  00
02CA:  GOTO   274
....................    } 
.................... } 
....................  
02CB:  SLEEP

Configuration Fuses:
   Word  1: 39C2   HS NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1EFF   NOWRT NOVCAP PLL_SW STVREN BORV19 NOLPBOR NODEBUG NOLVP
